@import "~@lucca-front/icons/src/_mixins";
@mixin selectInputStyle {
	:host {
		cursor: pointer;
		outline: none;
		padding: 0;

		&::after {
			@include makeIcon("arrow_south");
			bottom: #{_component("select.input.padding-vertical", true)};
			bottom: _component("select.input.padding-vertical");
			color: _color("primary", "color", true);
			color: _color("primary");
			font-size: 0.75rem;
			line-height: 1.3rem;
			pointer-events: none;
			position: absolute;
			right: #{_component("select.input.padding-horizontal", true)};
			right: _component("select.input.padding-horizontal");
		}

		&[disabled] {
			cursor: not-allowed;
			pointer-events: none;
		}
	}

	.lu-select-display-wrapper {
		overflow: hidden;
		text-overflow: ellipsis;
		white-space: nowrap;
	}

	.lu-select-placeholder {
		color: _component("select.input.placeholder", true);
		color: _component("select.input.placeholder");
	}

	.lu-select-value {
		line-height: _component("select.line-height");
		min-height: 2.5rem;
		padding: #{_component("select.input.padding-vertical", true)} 2.5rem
			#{_component("select.input.padding-vertical", true)}
			#{_component("select.input.padding-horizontal", true)};
		padding: _component("select.input.padding-vertical") 2.5rem
			_component("select.input.padding-vertical")
			_component("select.input.padding-horizontal");
		transition: all #{_theme("commons.animations.durations.standard", true)} ease;
		transition: all _theme("commons.animations.durations.standard") ease;
		display: none;
	}

	.lu-select-placeholder {
		line-height: _component("select.line-height");
		min-height: 2.5rem;
		padding: #{_component("select.input.padding-vertical", true)} 1.5rem
			#{_component("select.input.padding-vertical", true)}
			#{_component("select.input.padding-horizontal", true)};
		padding: _component("select.input.padding-vertical") 1.5rem
			_component("select.input.padding-vertical")
			_component("select.input.padding-horizontal");
		transition: all #{_theme("commons.animations.durations.standard", true)} ease;
		transition: all _theme("commons.animations.durations.standard") ease;
		overflow: hidden;
		text-overflow: ellipsis;
		white-space: nowrap;
	}

	.lu-select-suffix {
		position: absolute;
		bottom: .5rem; // We should be able to use .5rem with new icons (.5rem of vertical padding & icon line height of 1.5rem)
		right: calc(2.75 * #{_component("select.input.padding-horizontal", true)});
		right: calc(2.75 * #{_component("select.input.padding-horizontal")});
	}

	::ng-deep .lu-select-value .chip {
		background: _component("select.chip.background", true);
		background: _component("select.chip.background");
		color: _component("select.chip.text", true);
		color: _component("select.chip.text");
		vertical-align: baseline;
		height: 1.5rem;
		line-height: 1.5rem;
		padding: 0 _theme("spacings.smaller", true);
		padding: 0 _theme("spacings.smaller");
		margin: 0 .25rem 0 0;
	}


	// MODS
	// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

	// Small
	:host-context(.textfield.mod-small) {
		.lu-select-value, .lu-select-placeholder {
			font-size: _theme("sizes.small.font-size");
			line-height: _theme("sizes.small.line-height");
			min-height: 2rem;
		}

		&::after {
			line-height: .9rem;
		}
	}

	// Framed
	:host-context(.textfield.mod-framed) {
		&.textfield-input {
			padding: #{_component("select.framed.top-padding", true)} 0 0;
			padding: _component("select.framed.top-padding") 0 0;

			&::after {
				color: _color("text.light", "color", true);
				color: _color("text.light");
				bottom: 0.95rem;
				right: _component("select.framed.side-padding", true);
				right: _component("select.framed.side-padding");
			}

			.lu-select-value, .lu-select-placeholder {
				padding: 0 calc(#{_component("select.framed.side-padding", true)} * 3)
					#{_component("select.framed.bottom-padding", true)}
					#{_component("select.framed.side-padding", true)};
				padding: 0 calc(#{_component("select.framed.side-padding")} * 3)
					_component("select.framed.bottom-padding")
					_component("select.framed.side-padding");
				min-height: _component("select.line-height");
			}

			.lu-select-suffix {
				bottom: 0.85rem;
				right: calc(3.75 * #{_component("select.input.padding-horizontal", true)});
				right: calc(3.75 * #{_component("select.input.padding-horizontal")});
			}

			&.mod-multiple.mod-multipleView.is-filled .lu-select-value {
				padding-bottom: _component("select.framed.bottom-padding", true);
			}
			&.mod-multiple.mod-multipleView:not(.mod-singleLine) .lu-select-value {
					min-height: _component("select.line-height");
			}
			&.mod-multiple{
				padding: calc(#{_component("select.framed.top-padding", true)} - .2rem ) 0 0;
			}
		}
		& .mod-small.textfield-input {
			min-height: 3.875rem;
		}
	}

	// Filter
	:host-context(.textfield.mod-filter) {
		.lu-select-value, .lu-select-placeholder {
			padding: 0;
			height: auto;
			padding-top: 1rem;
			color: _color("text.default", "color", true);
			color: _color("text.default");
		}

		.lu-select-suffix {
			bottom: .4rem; // We should be able to use .5rem with new icons (.5rem of vertical padding & icon line height of 1.5rem)
		}
	}

	// Material
	:host-context(.textfield.mod-material) {
		&::after {
			color: _color("text.light", "color", true);
			color: _color("text.light");
			bottom: 0.6rem;
			right: 0;
		}

		.lu-select-value, .lu-select-placeholder {
			padding-left: 0;
			padding-right: 0.8rem;
		}

		.lu-select-suffix {
			right: calc(2 * #{_component("select.input.padding-horizontal", true)});
			right: calc(2 * #{_component("select.input.padding-horizontal")});
		}


		&.is-select {
			.lu-select-placeholder {
				display: none;
			}
		}

		&.mod-search {
			&::after {
				bottom: 0;
			}
			.lu-select-suffix {
				right: calc(2.75 * #{_component("select.input.padding-horizontal", true)});
				right: calc(2.75 * #{_component("select.input.padding-horizontal")});
			}
		}
	}

	:host-context(.textfield.mod-material .textfield-input.is-focused) {
		.lu-select-placeholder {
			display: none;
		}
	}

	// Multiple
	:host(.mod-multiple) {
		.lu-select-display-wrapper .label {
			height: 1.4rem;
			min-width: 1.4rem;
			line-height: 1.6;
			padding: 0 .4rem;
		}
		&.mod-multipleView:not(.mod-singleLine) {
			.lu-select-value {
				height: auto;
				align-items: center;
				line-height: 2rem;
			}

			.lu-select-display-wrapper {
				overflow: visible;
				white-space: normal;
			}
			.lu-select-suffix {
				bottom: 0.7rem;
			}
			&::after {
				bottom: 0.7rem;
			}
		}
	}

	// STATES
	// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

	// Filled
	:host-context(.textfield-input.is-filled) {
		.lu-select-placeholder {
			display: none;
		}

		.lu-select-value {
			display: flex;
		}
	}

	// Clearable
	:host-context(.textfield-input.is-clearable) {
		.lu-select-value {
			padding-right: 2.5rem;
		}
	}

	// Error
	:host-context(.textfield-input.is-error) {
		&::after {
			color: _color("error", "color", true);
			color: _color("error");
		}

		.lu-select-placeholder {
			color: _color("error", "lighter", true);
			color: _color("error", "lighter");
		}
	}

	// Disabled
	:host-context(.textfield-input.is-disabled, .textfield-input[disabled]) {
		&::after {
			color: _theme("commons.disabled.color", true);
			color: _theme("commons.disabled.color");
		}

		.lu-select-placeholder {
			color: _theme("commons.disabled.placeholder", true);
			color: _theme("commons.disabled.placeholder");
		}
	}
}
