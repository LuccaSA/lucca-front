@use 'exports' as *;
@use '@lucca-front/scss/src/commons/utils/media';

.filterPill {
	@include vars;
	@include component;

	&:not(:has(.filterPill-combobox:disabled)) {
		&:hover {
			@include hover;
		}

		&:active {
			@include active;
		}

		&:has(.filterPill-combobox:focus-visible, .filterPill-checkbox-input:focus-visible, .filterPill-label:focus-visible) {
			@include focusVisible;
		}
	}

	&:has(.filterPill-combobox:disabled) {
		@include disabled;
	}

	&:not(button) {
		&:not(:has(.filterPill-checkbox-input)) {
			&.is-empty {
				@include empty;
			}

			&.is-comboboxHidden {
				@include comboboxHidden;
			}

			&:has(.filterPill-combobox[aria-expanded='true']) {
				@include opened;
			}

			&:not(:has(.filterPill-combobox:disabled)) {
				&:not(.is-empty) {
					@include notEmpty;

					&:has(.filterPill-label:hover) {
						@include notEmptyHover;
					}

					&:has(.filterPill-label:active) {
						@include notEmptyActive;
					}
				}
			}
		}
	}

	&.is-hidden {
		@include hidden;
	}

	&:has(.filterPill-checkbox-input) {
		@include checkbox;

		&:has(.filterPill-checkbox-input:disabled) {
			@include checkboxDisabled;
		}

		&:has(.filterPill-checkbox-input:checked) {
			@include checkboxChecked;

			&:has(.filterPill-label:hover) {
				@include notEmptyHover;
			}

			&:has(.filterPill-label:hover) {
				@include notEmptyActive;
			}

			&:has(.filterPill-checkbox-input:disabled) {
				@include checkboxCheckedDisabled;
			}
		}
	}
}

.filterPillBar {
	@include barVars;

	@include media.max(XXS) {
		@include compact;
	}

	@include media.min(XXS) {
		@include notCompact;
	}

	@include media.pointer(coarse) {
		@include touch;
	}

	@include media.pointer(coarse, $reversed: true) {
		@include noTouch;
	}
}
