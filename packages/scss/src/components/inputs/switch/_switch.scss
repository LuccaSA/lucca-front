.switch {
	position: relative;
}

.switch-input {
	opacity: 0;
	pointer-events: none;
	position: absolute;

	&:focus ~ .switch-label {
		&::before {
			box-shadow: _theme("commons.focused");
		}
	}
}

.switch-label {
	cursor: pointer;
	display: inline-block;
	line-height: 1.5rem;
	padding: 0 0 0 calc(2rem - 4px + #{_theme("spacings.smaller", true)});
	transition: color _theme("commons.animations.durations.fast") ease;

	&::before {
		background: _color("grey", "dark");
		border-radius: .5rem;
		content: "";
		display: block;
		height: 1rem;
		left: 0;
		position: absolute;
		top: _theme("spacings.smallest");
		transition: all _theme("commons.animations.durations.fast") ease;
		width: calc(2rem - 4px);
	}

	&::after {
		background: white;
		border-radius: 50%;
		content: "";
		display: block;
		height: calc(1rem - 4px);
		left: 2px;
		position: absolute;
		top: calc(#{_theme("spacings.smallest", true)} + 2px);
		transition: all _theme("commons.animations.durations.fast") ease;
		width: calc(1rem - 4px);
	}

	&:hover {
		color: _color("grey");

		&::before {
			background: _color("grey");
		}
	}
}


// MODS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.switch {
	&.mod-inline {
		display: inline-block;
		margin-right: 1.5rem;
	}
}


// STATES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.switch .switch-input {

	/*
		Checked
	*/

	&:checked ~ .switch-label {
		&::after {
			left: calc(1rem - 2px);
		}
	}

	/*
		Disabled
	*/

	&[disabled], &[readonly] {
		~ .switch-label {
			color: _color("grey");
			cursor: not-allowed;

			&::before {
				background: _color("grey", "light") !important;
			}
		}
	}
}


// PALETTE
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.switch {
	@mixin switchColoring($palette) {

		.switch-input:checked {
			~ .switch-label {
				&::before {
					background: _color($palette);
				}

				&:hover {
					&::before {
						background: _color($palette, "light");
					}
				}
			}
		}
	}

	// default color
	@include switchColoring("switch.default-palette");

	// palette colors
	@each $name, $palette in _getMap("palettes") {
		&.palette-#{$name} {
			@include switchColoring($name);
		}
	}
}
