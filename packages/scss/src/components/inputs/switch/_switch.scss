.switch {
	margin: .25rem 0;
	position: relative;
}

.switch-input {
	opacity: 0;
	pointer-events: none;
	position: absolute;
}

.switch-label {
	color: _color("text.light");
	cursor: pointer;
	display: inline-block;
	line-height: _component("switch.label.line-height");
	padding: _component("switch.label.padding");
	transition: color 150ms ease;

	&::before {
		background: #BBBBBB;
		border-radius: 10px;
		content: "";
		display: block;
		height: _component("switch.input.size");
		left: 0;
		position: absolute;
		top: _component("switch.input.handler.size") - _component("switch.input.size");
		transition: all 150ms ease;
		width: _component("switch.input.size") * 2;
	}

	&::after {
		background: white;
		border-radius: 50%;
		box-shadow: 0 1px 4px rgba(0, 0, 0, .5);
		content: "";
		display: block;
		height: _component("switch.input.handler.size");
		left: - ( _component("switch.input.handler.size") - _component("switch.input.size") ) / 2;
		position: absolute;
		top: ( _component("switch.input.handler.size") - _component("switch.input.size") ) / 2;
		transition: all 150ms ease;
		width: _component("switch.input.handler.size");
	}
}


// MODS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.switch {
	&.mod-inline {
		display: inline-block;
		margin-right: 1.5rem;
	}
}


// STATES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.switch .switch-input {
	/*
		Checked
	*/

	&:checked ~ .switch-label {
		color: _color("text.default");

		&::after {
			left: 14px;
		}
	}

	/*
		Disabled
	*/

	&[disabled], &[readonly] {
		& ~ .switch-label {
			color: _color("text.light");
			cursor: not-allowed;

			&::before {
				background: lighten(_color("text.light"), 25%);
			}
			&::after {
				background: lighten(_color("text.light"), 15%);
			}
		}
	}
}


// PALETTE
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.switch {
	// default color
	@include switchColoring(_component("switch.default-palette"));
	@mixin switchColoring($palette) {
		.switch-input:checked {
			& ~ .switch-label {
				&::before {
					background: lighten(_get($palette, "color"), 20%);
				}

				&::after {
					background: _get($palette, "color");
				}
			}

			// Palette > Disabled switch
			&[disabled], &[readonly] {
				& ~ .switch-label {
					&::before {
						background: desaturate(lighten(_get($palette, "color"), 30%), 15%);
					}

					&::after {
						background: desaturate(lighten(_get($palette, "color"), 20%), 15%);
					}
				}
			}
		}
	}

	// palette colors
	@each $name, $palette in _palettes() {
		&.palette-#{$name} {
			@include switchColoring($palette);
		}
	}
}
