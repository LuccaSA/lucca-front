@mixin field($fieldname) {
	.#{$fieldname} {
		display: flex;
		flex-direction: column;
		align-items: flex-start;
		position: relative;

		// palette colors
		@each $name, $palette in _getMap("palettes") {
			&.palette-#{$name} {
				.#{$fieldname}-label {
					color: _theme("palettes.#{$name}.color");
				}

				.#{$fieldname}-input {
					background-color: _color($name, 50);

					&::placeholder {
						color: _color($name, "400");
					}

					&:focus {
						background-color: white;
						box-shadow: 0 0 0 4px _color($name, "200"), 0 0 0 1px _color($name, "700") inset;
						&::placeholder {
							color: _color($name, "300");
						}
					}

					@if ($name == "error") {
						box-shadow: 0 0 0 1px _color($name, "700");
					}
				}
			}
		}
	}

	.#{$fieldname}-input {
		font-family: _theme("commons.font.family");
		font-size: _component("field.font-size");
		outline: 0;
		position: relative;
		width: 100%;
		color: _component("field.input.color");

		&:hover {
			&::placeholder {
				color: _component("field.input.color", "light");
			}
		}

		&, &:focus {
			&::placeholder {
				color: _component("field.input.color", "lighter");
			}
		}
	}

	.#{$fieldname}-label {
		color: _color("text.light");
		font-size: _component("field.label.font-size");
		line-height: _theme("sizes.small.line-height");
		min-height: _theme("spacings.small");
		margin-bottom: _component("field.label.margin-bottom");
		order: -1;
		overflow: hidden;
		position: relative;
		text-overflow: ellipsis;
		transition: all _theme("commons.animations.durations.fast");
		word-break: break-word;
		white-space: nowrap;
	}

	.#{$fieldname}-messages {
		font-size: _component("field.message.font-size");
		line-height: 1.3;
		margin-top: _component("field.message.margin-top");

		> * {
			margin: 0;
		}
	}

	.#{$fieldname}-messages-error {
		color: _color("error");
	}

	.#{$fieldname}-messages-warning {
		color: _color("warning");
	}

	.#{$fieldname}-messages-valid, .#{$fieldname}-messages-success {
		color: _color("success");
	}

	.#{$fieldname}-messages-helper {
		color: _color("text.light");
	}

	.#{$fieldname} {

		/* Display */
		&.mod-inline {
			display: inline-flex;
			margin-right: _component("field.input.inline-margin", true) * 2;
		}

		&.mod-block {
			width: 100%;
		}

		/* State */
		&.is-required {
			.#{$fieldname}-label {
				&:not(:empty) {
					&::after {
						@extend %isRequired;
					}
				}
			}
		}

		// Inline validation
		&.is-loading {
			@include loading(1rem);

			&::before, &::after {
				content: "" !important;
				bottom: .7rem !important;
				left: inherit !important;
				right: .5rem !important;
				top: inherit !important;
				position: absolute !important;
				z-index: 2 !important;
			}

			.#{$fieldname}-input {
				padding-right: 2rem;
			}
		}

		&.is-success, &.is-valid {
			&::before {
				animation: isValid 3s forwards;
				@include makeIcon("tick_bold");
				border-radius: 50%;
				bottom: .85rem;
				color: _color("success");
				font-size: 1.2rem;
				height: 1rem;
				position: absolute;
				right: .4rem;
				z-index: 1;
			}

			.#{$fieldname}-input {
				padding-right: 2rem;
			}
		}

		&.is-error, &.is-invalid {
			.#{$fieldname}-label {
				color: _color("error");
			}

			.#{$fieldname}-input {
				@include fieldState($fieldname, "error");
			}
		}
	}
}

@mixin field-input($fieldname) {
	display: block;

	&[disabled], &[readonly] {
		color: _color("text.light");
		cursor: not-allowed;
	}

	&.is-valid, &.is-success {
		@include fieldState($fieldname, "success");
	}

	&.is-warning {
		@include fieldState($fieldname, "warning");
	}

	&.is-invalid, &.is-error, &:invalid {
		@include fieldState($fieldname, "error");
	}
}

// ANIMATIONS / MIXINS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

@keyframes isValid {
	from {
		opacity: 0;
		transform: scale(0);
	}

	5% {
		opacity: 1;
		transform: scale(1.2);
	}

	7% {
		opacity: 1;
		transform: scale(1);
	}

	93% {
		opacity: 1;
		transform: scale(1);
	}

	95% {
		opacity: 1;
		transform: scale(1.2);
	}

	to {
		opacity: 0;
		transform: scale(0);
	}
}

@import "./field.compact";
@import "./field.framed";
