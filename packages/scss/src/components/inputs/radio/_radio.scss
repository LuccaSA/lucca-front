.radio {
	position: relative;
	display: block;

	&.is-required {
		&::after {
			@extend %isRequired;
		}			
	}

	// we can't use the ::after like on checkboxes because
	// the pseudo element is already used to skin the radio buttons
}

.radio-input {
	@include mask;

	&:checked ~ .radio-label {
		&::after {
			transform: scale(0.55);
		}
	}
}

.radio-label {
	cursor: pointer;
	display: inline-block;
	line-height: _component('radio.label.line-height');
	padding: _component('radio.label.padding');
	transition: color _theme('commons.animations.durations.fast') ease;

	&::before {
		background-color: _color("white");
		border-radius: 50%;
		content: '';
		display: block;
		height: _component('radio.input.size');
		left: 0;
		position: absolute;
		top: _component('radio.input.top');
		transition: all _theme('commons.animations.durations.fast') ease;
		width: _component('radio.input.size');
	}

	&::after {
		border-radius: 50%;
		color: transparent;
		content: '';
		display: block;
		height: _component('radio.input.size');
		left: 0;
		position: absolute;
		top: _component('radio.input.top');
		transform: scale(0);
		transition: all _theme('commons.animations.durations.fast') ease;
		width: _component('radio.input.size');
	}
}

// PALETTE
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.radio {
	@mixin radioColoring($palette) {

		.radio-label {
			&::before {
				border: 2px solid _color($palette, 700);
			}
		}

		.radio-input:checked ~ .radio-label {
			&::after {
				background-color: _color($palette, 700);
			}
		}

		.radio-input:not(:disabled):checked ~ .radio-label {
			&:hover {
				&::before {
					border-color: _color($palette, 600);
				}

				&::after {
					background-color: _color($palette, '600');
				}
			}
		}
		
		.radio-input:not(:disabled) ~ .radio-label {
			&:hover {
				&::before {
					border-color: _color($palette, 600);
				}
			}
		}


		.radio-input {
			&:focus ~ .radio-label {
				&::before {
					box-shadow: 0 0 0 4px _color($palette, '200');
					border-color: _color($palette, '600');
				}

				&::after {
					background-color: _color($palette, '600');
				}
			}
		}
	}

	// default color
	@include radioColoring('radio.default-palette');

	// palette colors
	@each $name, $palette in _getMap('palettes') {
		&.palette-#{$name} {
			@include radioColoring($name);
		}
	}
}

// MODS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.radio {
	&.mod-inline {
		display: inline-block;
		margin-right: 1.5rem;
		margin-top: 0;
		margin-bottom: 0;
	}

	&.mod-small .radio-label {
		line-height: _theme('sizes.small.line-height');
		font-size: _theme('sizes.small.font-size');
		padding: _component('radio.label.small-padding');

		&::before,
		&::after {
			height: _theme('sizes.small.font-size');
			width: _theme('sizes.small.font-size');
			top: _component('radio.input.small-top');
		}
	}
}

// STATES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.radio .radio-input {
	&[disabled],
	&[read-only] {
		~ .radio-label {
			color: _color('grey', '500');
			cursor: default;

			&::before {
				border: 2px solid _color('grey', '500');
			}
		}

		&:checked ~ .radio-label {
			&::before {
				border: 2px solid _color('grey', '500');
			}

			&::after {
				background-color: _color('grey', '500');
			}
		}
	}
}
