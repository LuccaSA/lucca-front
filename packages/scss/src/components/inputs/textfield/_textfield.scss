.textfield {
	display: flex;
	flex-direction: column;
	position: relative;
	width: _component("textfield.sizes.default");
}

.textfield-input {
	background: _component("textfield.background");
	border: 0;
	border-radius: _component("textfield.border-radius");
	box-shadow: 0 0 0 1px _component("textfield.border.color");
	color: _component("textfield.input.color");
	font-family: unquote(_theme("commons.font.family"));
	font-size: _component("textfield.font-size");
	line-height: 1;
	outline: 0;
	padding: _component("textfield.input.padding-vertical") _component("textfield.input.padding-horizontal");
	position: relative;
	transition: box-shadow 150ms ease, color 150ms ease;
	width: 100%;

	&::placeholder {
		color: _color("text.placeholder");
		transition: opacity 150ms ease;
	}

	&:focus {
		box-shadow: 0 0 0 1px _component("textfield.border.focus");
	}
}

.textfield-suffix {
	top: _component("textfield.suffix.top");
	line-height: 1.3;
	position: absolute;
	right: _component("textfield.input.padding-horizontal");
	z-index: 1;
}

.textfield-label {
	color: _color("text.default");
	font-weight: 600;
	font-size: _component("textfield.label.font-size");
	order: -1;
	overflow: hidden;
	position: relative;
	text-overflow: ellipsis;
	transition: all 150ms ease;
	word-break: break-word;
	white-space: nowrap;
	margin-bottom: _component("textfield.label.margin-bottom");
}

.textfield-messages {
	font-size: _component("textfield.message.font-size");
	line-height: 1.3;
	margin-top: .35rem;
}

.textfield-messages-error {
	color: _color("error");
}

.textfield-messages-warning {
	color: _color("warning");
}

.textfield-messages-helper {
	color: _color("text.light");
}

.textfield-options {
	background: white;
	border-radius: _theme("commons.border.radius");
	@include elevate(3);
	left: 0;
	list-style: none;
	margin: 3px 0 0;
	max-height: 15rem;
	opacity: 0;
	overflow: auto;
	padding: 0;
	position: absolute;
	top: 100%;
	transform: scaleY(0);
	transform-origin: right top;
	transition: all 150ms ease;
	z-index: 999;
	width: 100%;
}

.textfield-options-entry {
	cursor: pointer;
	padding: .5rem 1rem;
	transition: background 50ms ease;

	&:hover {
		background: _theme("commons.background.dark");
	}

	&.is-focus {
		background: _theme("commons.background.dark");
	}
}


// PALETTE
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.textfield {

	@mixin inputColoring($palette) {
		.textfield-input:focus {
			box-shadow: 0 0 0 1px _get($palette, "color");

			~ .textfield-label {
				color: _color("text.default");
			}
		}

		// Needed when not next to input (formly)
		&.is-focused {
			.textfield-label {
				color: _color("text.default");
			}
		}
	}

	// palette colors
	@each $name, $palette in _palettes() {
		&.palette-#{$name} {
			@include inputColoring($palette);
		}
	}
}


// MODS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.textfield {

	/* Width */

	@each $textfield-size-name, $textfield-width in _component("textfield.sizes") {
		&.mod-#{$textfield-size-name} {
			width: $textfield-width;
		}
	}

	/* Display */

	&.mod-inline {
		display: inline-flex;
		margin-left: .15rem;
		margin-right: .15rem;
	}

	&.mod-block {
		width: 100%;
	}

	&.mod-withSuffix {
		.textfield-input {
			padding-right: _component("textfield.suffix.padding-right");
		}
	}

	&.mod-noLabel {
		.textfield-suffix {
			top: _component("textfield.input.padding-vertical");
		}
	}

	&.mod-multiline {
		.textfield-input {
			height: 6rem;
			line-height: 1.3;
			resize: vertical;
		}
	}

	/* Search */

	&.mod-search, &.mod-autocomplete {
		&::after {
			color: _color("text.light");
			@include makeIcon("search");
			font-size: 1.4rem;
			position: absolute;
			bottom: .1rem;
			right: .33rem;
		}

		.textfield-input {
			padding-right: 2rem;
		}
	}

	/* Inside radio */

	&.mod-radio {
		display: inline-block;
		margin-left: .25rem;

		.textfield-input {
			padding-top: 0;
			padding-bottom: 0;
		}
	}

	/* Style */

	&.mod-material {
		@extend %input_material;
	}

	&.mod-compact, &.compact {
		@extend %input_compact;
	}

	&.mod-framed {
		@extend %input_framed;
	}
}


// STATES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.textfield {
	&.is-open {
		.textfield-options {
			opacity: 1;
			transform: scaleY(1);
		}
	}

	&.is-required {
		.textfield-label {
			&::after {
				@extend %isRequired;
			}
		}
	}

	// Inline validation
	&.is-loading {
		@include loading(1rem);

		&::before, &::after {
			bottom: .6rem;
			left: inherit;
			right: .5rem;
			top: inherit;
			position: absolute;
			z-index: 2;
		}

		.textfield-input {
			padding-right: 2rem;
		}
	}

	&.is-valid {

		&::before {
			animation: isValid 3s forwards;
			@include makeIcon("tick_bold");
			border-radius: 50%;
			bottom: .85rem;
			color: _color("success");
			font-size: 1.2rem;
			height: 1rem;
			position: absolute;
			right: .4rem;
			z-index: 1;
		}

		.textfield-input {
			padding-right: 2rem;
		}
	}

	&.is-invalid {
		.textfield-input {
			@include textfieldError();
		}
	}
}

.textfield-input {

	&[disabled], &[readonly] {
		background: _theme("commons.background.dark");
		color: _color("text.light");
		cursor: not-allowed;
	}

	&.is-error {
		@include textfieldError();

		&:focus {
			@include textfieldError();
		}
	}
}


// ANIMATIONS / MIXINS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

@keyframes isValid {
	from {
		opacity: 0;
		transform: scale(0);
	}

	5% {
		opacity: 1;
		transform: scale(1.2);
	}

	7% {
		opacity: 1;
		transform: scale(1);
	}

	93% {
		opacity: 1;
		transform: scale(1);
	}

	95% {
		opacity: 1;
		transform: scale(1.2);
	}

	to {
		opacity: 0;
		transform: scale(0);
	}
}


// MATERIAL, COMPACT & FRAMED
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

@import
	"textfield.material",
	"textfield.compact",
	"textfield.framed";
