@import "../field/field";

@include field("textfield");

.textfield {
	vertical-align: middle;
	width: _component("field.sizes.default");
}

.textfield-input {
	min-width: 0;
	background-color: _component("textfield.background");
	border: 0;
	border-radius: _component("textfield.border-radius");
	line-height: 1.5rem;
	padding: _component("textfield.input.padding-vertical") _component("textfield.input.padding-horizontal");
	transition: box-shadow _theme("commons.animations.durations.fast"), color _theme("commons.animations.durations.fast"), background-color _theme("commons.animations.durations.fast");

	&::placeholder {
		color: _component("textfield.input.placeholder");
		transition: color _theme("commons.animations.durations.fast");
		opacity: 1;
	}

	&:hover {
		background-color: _component("textfield.hover.background");

		&::placeholder {
			color: _component("textfield.hover.placeholder");
		}
	}

	&:focus, &.is-focused {
		background-color: white;
		box-shadow: 0 0 0 4px _component("textfield.focus.shadow-color"), inset 0 0 0 1px _component("textfield.focus.border-color");

		&::placeholder {
			color: _component("textfield.focus.placeholder");
		}
	}
}

.textfield-suffix {
	top: _component("textfield.suffix.top");
	line-height: 1.5rem;
	pointer-events: none;
	position: absolute;
	right: _component("textfield.input.padding-horizontal");
	z-index: 1;

	&.mod-icon {
		color: _color("primary", "500");
		line-height: 1.5rem;
	}
}

.textfield-options {
	@include elevate(3);
	background-color: white;
	border-radius: _theme("commons.border.radius");
	left: 0;
	list-style: none;
	margin: 3px 0 0;
	max-height: 15rem;
	opacity: 0;
	overflow: auto;
	padding: 0;
	position: absolute;
	top: 100%;
	transform: scaleY(0);
	transform-origin: right top;
	transition: all _theme("commons.animations.durations.fast");
	z-index: 999;
	width: 100%;
}

.textfield-options-mark {
	background-color: transparent;
	text-decoration: underline;
	color: inherit;
}

.textfield-options-entry {
	cursor: pointer;
	padding: .5rem 1rem;
	transition: background-color _theme("commons.animations.durations.fast");

	&:hover {
		background-color: _color("primary", "50");
	}

	&.is-focus {
		background-color: _color("primary", "50");
	}
}


// MODS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.textfield {

	/* Display */

	&.mod-clearable {
		.textfield-actionClear {
			position: absolute;
			bottom: .7rem;
			right: .5rem;
			width: 1rem;
			height: 1rem;
			padding: 0;
			line-height: 0;
			text-align: center;

			.lucca-icon {
				font-size: 1rem;
			}
		}

		&.mod-small {
			.textfield-actionClear {
				bottom: .5rem;
				right: 1.4rem;
			}
		}
	}

	&.mod-withSuffix {
		.textfield-input {
			padding-right: _component("textfield.suffix.padding-right");
		}
	}

	&.mod-noLabel {
		.textfield-suffix {
			top: _component("textfield.input.padding-vertical");
		}
	}

	&.mod-multiline {
		.textfield-input {
			height: 5rem;
			line-height: _theme("sizes.standard.line-height");
			font-size: _theme("sizes.standard.font-size");
			resize: vertical;
		}

		&.mod-small {
			.textfield-input {
				height: 4rem;
				line-height: _theme("sizes.small.line-height");
				font-size: _theme("sizes.small.font-size");
			}
		}
	}

	&.mod-white {
		.textfield-input {
			background-color: white;
			box-shadow: 0 0 0 1px _color("primary", "500") inset;

			&::placeholder {
				color: _component("textfield.focus.placeholder");
			}

			&:focus {
				box-shadow: 0 0 0 4px _color("primary", "200"), 0 0 0 1px _color("primary", "500") inset;

				&::placeholder {
					color: _component("textfield.focus.placeholder");
				}
			}
		}
	}

	&.mod-invert {
		.textfield-input {
			background-color: white;

			&::placeholder {
				color: _component("textfield.focus.placeholder");
			}

			&:focus {
				box-shadow: 0 0 0 4px _color("primary", "700"), 0 0 0 1px _color("primary", "500") inset;

				&::placeholder {
					color: _component("textfield.focus.placeholder");
				}
			}
		}

		.textfield-label {
			color: white;
		}
	}

	&.mod-material.mod-search.mod-block.mod-clearable {
		.textfield-input {
			padding-right: 3rem;
		}
	}

	&.mod-clearable {
		.textfield-input {
			padding-right: 3rem;
		}
	}

	/* Search */

	&.mod-search, &.mod-autocomplete {
		&::after {
			@include makeIcon("search");
			bottom: .5rem;
			color: _color("primary", "500");
			font-size: 1.2rem;
			line-height: 1.4rem;
			pointer-events: none;
			position: absolute;
			right: .33rem;
		}

		.textfield-input {
			padding-right: 2rem;
		}

		&.mod-clearable {
			.textfield-input {
				padding-right: 3rem;
			}

			.textfield-actionClear {
				right: 1.8rem;
			}
		}

		&.mod-small {
			&::after {
				line-height: 1rem;
				font-size: 1rem;
			}
		}
	}

	&.mod-radio {
		display: inline-block;
		margin-left: .25rem;
		.textfield-input {
			padding-top: 0;
			padding-bottom: 0;
		}
	}

	&.mod-filter {
		border-right: 1px solid _theme("commons.divider.color");
		display: block;
		height: _component("filters.height");
		position: relative;
		transform: background-color _theme("commons.animations.durations.standard");
		width: _component("textfield.filter.width");

		&:hover {
			background-color: _theme("commons.background.base");
		}

		.textfield-label {
			color: _color("text.light");
			font-weight: 400;
			left: 1rem;
			pointer-events: none;
			position: absolute;
			top: .5rem;
		}

		.textfield-input {
			background-color: transparent;
			box-shadow: none;
			padding: 1rem 2.5rem 0 1rem;
			font-weight: 600;
			height: _component("filters.height");
			border-radius: 0;

			&::after {
				bottom: .5rem;
				color: _color("primary", "500");
				font-weight: 400;
			}
		}
	}

	/* Size */
	&.mod-small {
		.textfield-input {
			line-height: _theme("sizes.small.line-height");
			font-size: _theme("sizes.small.font-size");
		}

		.textfield-suffix {
			line-height: _theme("sizes.small.line-height");
			font-size: _theme("sizes.small.font-size");

			&.mod-icon {
				line-height: _theme("sizes.small.line-height");
				font-size: _theme("sizes.small.font-size");
			}
		}
	}

	/* Width */
	@each $textfield-size-name, $textfield-width in _getMap("components.textfield.sizes") {
		&.mod-#{$textfield-size-name} {
			width: _component("field.sizes."+$textfield-size-name);
		}
	}
}

.form.mod-compact .textfield, .textfield.mod-compact {
	@include field-compact("textfield");
	@extend %input_compact;
}

.form.mod-framed .textfield, .textfield.mod-framed {
	@include field-framed("textfield");
	@extend %input_framed;
}

.form.mod-material .textfield, .textfield.mod-material {
	@extend %input_material;
	vertical-align: baseline;
}


// STATES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.textfield {
	&.is-open {
		z-index: 999 !important;

		.textfield-options {
			opacity: 1;
			transform: scaleY(1);
		}
	}
}

.textfield .textfield-input {
	@include field-input("textfield");

	&[disabled], &[readonly], &.is-disabled, &.is-readonly {
		background-color: _theme("commons.disabled.background");
		color: _theme("commons.disabled.color");
		cursor: not-allowed;

		&::placeholder {
			color: _theme("commons.disabled.placeholder");
		}
	}
}

// MATERIAL, COMPACT & FRAMED
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

@import
	"textfield.material",
	"textfield.compact",
	"textfield.framed";
