@import "../field/field";

@include field("textfield");

.textfield {
	vertical-align: middle;
	width: _component("field.sizes.default");
}

.textfield-input {
	background: _component("textfield.background");
	border: 0;
	border-radius: _component("textfield.border-radius");
	line-height: 1;
	padding: _component("textfield.input.padding-vertical") _component("textfield.input.padding-horizontal");
	transition: box-shadow _theme("commons.animations.durations.fast") ease, color _theme("commons.animations.durations.fast") ease, background _theme("commons.animations.durations.fast") ease;

	&::placeholder {
		color: _component("textfield.input.placeholder");
		transition: opacity _theme("commons.animations.durations.fast") ease;
	}

	&:hover {
		background: _component("textfield.hover.background");
	}

	&:focus, &.is-focused {
		background: white;
		box-shadow: 0 0 0 2px _color("primary", "light");

		&::placeholder {
			color: _component("textfield.focus.placeholder");
			transition: opacity _theme("commons.animations.durations.fast") ease;
		}
	}
}

.textfield-suffix {
	top: _component("textfield.suffix.top");
	line-height: 1.3;
	pointer-events: none;
	position: absolute;
	right: _component("textfield.input.padding-horizontal");
	z-index: 1;

	&.mod-icon {
		color: _color("primary", "light");
		line-height: 1.15;
	}
}

.textfield-options {
	background: white;
	border-radius: _theme("commons.border.radius");
	@include elevate(3);
	left: 0;
	list-style: none;
	margin: 3px 0 0;
	max-height: 15rem;
	opacity: 0;
	overflow: auto;
	padding: 0;
	position: absolute;
	top: 100%;
	transform: scaleY(0);
	transform-origin: right top;
	transition: all _theme("commons.animations.durations.fast") ease;
	z-index: 999;
	width: 100%;
}

.textfield-options-entry {
	cursor: pointer;
	padding: .5rem 1rem;
	transition: background 50ms ease;

	&:hover {
		background: _theme("commons.background.dark");
	}

	&.is-focus {
		background: _theme("commons.background.dark");
	}
}


// PALETTE
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.textfield {

	@mixin inputColoring($palette) {
		.textfield-input:focus {
			box-shadow: 0 0 0 2px _color($palette, "light");

			~ .textfield-label {
				color: _color("text.default");
			}
		}

		// Needed when not next to input (formly)
		&.is-focused {
			.textfield-label {
				color: _color("text.default");
			}
		}
	}

	// palette colors
	@each $name, $palette in _getMap("palettes") {
		&.palette-#{$name} {
			@include inputColoring($name);
		}
	}
}


// MODS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.textfield {

	/* Width */
	@each $textfield-size-name, $textfield-width in _getMap("components.textfield.sizes") {
		&.mod-#{$textfield-size-name} {
			width: _component("field.sizes."+$textfield-size-name);
		}
	}

	/* Display */

	&.mod-clearable {
		.textfield-actionClear {
			position: absolute;
			bottom: .5rem;
			right: .5rem;
			width: 1rem;
			height: 1rem;
			padding: 0;
			line-height: 0;
			text-align: center;

			.lucca-icon {
				font-size: .9rem;
			}
		}
	}

	&.mod-withSuffix {
		.textfield-input {
			padding-right: _component("textfield.suffix.padding-right");
		}
	}

	&.mod-noLabel {
		.textfield-suffix {
			top: _component("textfield.input.padding-vertical");
		}
	}

	&.mod-multiline {
		.textfield-input {
			height: 6rem;
			line-height: 1.3;
			resize: vertical;
		}
	}

	&.mod-white {
		.textfield-input {
			background: white;

			&::placeholder {
				color: _component("textfield.focus.placeholder");
			}

			&:focus {
				&::placeholder {
					color: _component("textfield.focus.placeholder");
				}
			}
		}
	}

	&.mod-invert {
		.textfield-input {
			background: white;

			&::placeholder {
				color: _component("textfield.focus.placeholder");
			}

			&:focus {
				&::placeholder {
					color: _component("textfield.focus.placeholder");
				}
			}
		}

		.textfield-label {
			color: white;
		}
	}

	&.mod-material.mod-search.mod-block.mod-clearable {
		.textfield-input {
			padding-right: 3rem;
		}
	}

	&.mod-clearable {
		.textfield-input {
			padding-right: 3rem;
		}
	}

	/* Search */

	&.mod-search, &.mod-autocomplete {
		&::after {
			@include makeIcon("search");
			bottom: .1rem;
			color: _color("primary", "light");
			font-size: 1.4rem;
			pointer-events: none;
			position: absolute;
			right: .33rem;
		}

		.textfield-input {
			padding-right: 2rem;
		}

		&.mod-clearable {
			.textfield-input {
				padding-right: 3rem;
			}

			.textfield-actionClear {
				right: 1.6rem;
			}
		}
	}

	&.mod-radio {
		display: inline-block;
		margin-left: .25rem;
		.textfield-input {
			padding-top: 0;
			padding-bottom: 0;
		}
	}
}

.form.mod-compact .textfield, .textfield.mod-compact {
	@include field-compact("textfield");
	@extend %input_compact;
}

.form.mod-framed .textfield, .textfield.mod-framed {
	@include field-framed("textfield");
	@extend %input_framed;
}

.form.mod-material .textfield, .textfield.mod-material {
	@extend %input_material;
	vertical-align: baseline;
}


// STATES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.textfield {
	&.is-open {
		.textfield-options {
			opacity: 1;
			transform: scaleY(1);
		}
	}

	&.is-invalid {
		.textfield-input {
			@include fieldError("textfield");
		}
	}
}

.textfield-input {
	@include field-input("textfield");

	&[disabled], &[readonly], &.is-disabled, &.is-readonly {
		background: _theme("commons.disabled.background");
		color: _theme("commons.disabled.color");
		cursor: not-allowed;

		&::placeholder {
			color: _theme("commons.disabled.placeholder");
		}
	}

	&.is-error {
		@include fieldError("textfield");

		&:focus {
			@include fieldError("textfield");
		}
	}
}

// MATERIAL, COMPACT & FRAMED
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

@import
	"textfield.material",
	"textfield.compact",
	"textfield.framed";
