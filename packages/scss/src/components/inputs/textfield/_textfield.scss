@import '../field/field';

.textfield {
	width: _component("field.sizes.default");
	@include field("textfield");
}

.textfield-input {
	background: _component("textfield.background");
	border: 0;
	border-radius: _component("textfield.border-radius");
	box-shadow: inset 0 0 0 1px _component("textfield.border.color");
	padding: _component("textfield.input.padding-vertical") _component("textfield.input.padding-horizontal");
	transition: box-shadow 150ms ease, color 150ms ease;

	&::placeholder {
		color: _color("text.placeholder");
		transition: opacity 150ms ease;
	}

	&:focus {
		box-shadow: inset 0 0 0 1px _component("textfield.border.focus");
	}
}

.textfield-suffix {
	top: _component("textfield.suffix.top");
	line-height: 1.3;
	position: absolute;
	right: _component("textfield.input.padding-horizontal");
	z-index: 1;
}

.textfield-options {
	background: white;
	border-radius: _theme("commons.border.radius");
	@include elevate(3);
	left: 0;
	list-style: none;
	margin: 3px 0 0;
	max-height: 15rem;
	opacity: 0;
	overflow: auto;
	padding: 0;
	position: absolute;
	top: 100%;
	transform: scaleY(0);
	transform-origin: right top;
	transition: all 150ms ease;
	z-index: 999;
	width: 100%;
}

.textfield-options-entry {
	cursor: pointer;
	padding: .5rem 1rem;
	transition: background 50ms ease;

	&:hover {
		background: _theme("commons.background.dark");
	}

	&.is-focus {
		background: _theme("commons.background.dark");
	}
}


// PALETTE
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.textfield {

	@mixin inputColoring($palette) {
		.textfield-input:focus {
			box-shadow: 0 0 0 1px _color($palette);

			~ .textfield-label {
				color: _color("text.default");
			}
		}

		// Needed when not next to input (formly)
		&.is-focused {
			.textfield-label {
				color: _color("text.default");
			}
		}
	}

	// palette colors
	@each $name, $palette in _getMap("palettes") {
		&.palette-#{$name} {
			@include inputColoring($name);
		}
	}
}


// MODS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.textfield {

	/* Width */
	@each $textfield-size-name, $textfield-width in _getMap("components.textfield.sizes") {
		&.mod-#{$textfield-size-name} {
			width: _component("field.sizes."+$textfield-size-name);
		}
	}

	/* Display */

	&.mod-withSuffix {
		.textfield-input {
			padding-right: _component("textfield.suffix.padding-right");
		}
	}

	&.mod-noLabel {
		.textfield-suffix {
			top: _component("textfield.input.padding-vertical");
		}
	}

	&.mod-multiline {
		.textfield-input {
			height: 6rem;
			line-height: 1.3;
			resize: vertical;
		}
	}

	/* Search */

	&.mod-search, &.mod-autocomplete {
		&::after {
			color: _color("text.light");
			@include makeIcon("search");
			font-size: 1.4rem;
			position: absolute;
			bottom: .1rem;
			right: .33rem;
		}

		.textfield-input {
			padding-right: 2rem;
		}
	}

	&.mod-radio {	
		display: inline-block;	
		margin-left: .25rem;	
 		.textfield-input {	
			padding-top: 0;	
			padding-bottom: 0;	
		}	
	}
}

.form.mod-compact .textfield, .textfield.mod-compact {
	@include field-compact("textfield");
	@extend %input_compact;
}

.form.mod-framed .textfield, .textfield.mod-framed {
	@include field-framed("textfield");
	@extend %input_framed;
}

.form.mod-material .textfield, .textfield.mod-material {
	@extend %input_material;
}


// STATES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.textfield {
	&.is-open {
		.textfield-options {
			opacity: 1;
			transform: scaleY(1);
		}
	}

	&.is-invalid {
		.textfield-input {
			@include fieldError("textfield");
		}
	}
}

.textfield-input {
	@include field-input("textfield");

	&[disabled], &[readonly] {
		background: _theme("commons.background.dark");
	}

	&.is-error {
		@include fieldError("textfield");

		&:focus {
			@include fieldError("textfield");
		}
	}
}

// MATERIAL, COMPACT & FRAMED
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

@import
	"textfield.material",
	"textfield.compact",
	"textfield.framed";
