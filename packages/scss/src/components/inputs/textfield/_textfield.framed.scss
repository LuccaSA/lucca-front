%input_framed {
	width: 100%;

	.textfield-input {
		@include fakeBorder(1px, _theme("commons.divider.color"));
		background: transparent;
		border-radius: 0;
		height: 100%;
		padding: _component("textfield.framed.top-padding") _component("textfield.framed.side-padding") _component("textfield.framed.bottom-padding");

		&::placeholder {
			opacity: 0;
		}

		&:focus {
			z-index: 1;

			~ .textfield-messages {
				transform: translateY(100%);
			}

			&::placeholder {
				opacity: 1;
			}
		}

		&:hover {
			z-index: 1;

			~ .textfield-messages {
				transform: translateY(100%);
			}
		}
	}

	.textfield-suffix {
		bottom: _component("textfield.framed.bottom-padding");
		right: _component("textfield.framed.side-padding");
	}

	.textfield-label {
		color: _color("text.light");
		font-size: _theme("sizes.small.font-size");
		font-weight: 400;
		left: _component("textfield.framed.side-padding");
		pointer-events: none;
		position: absolute;
		right: _component("textfield.framed.side-padding");
		top: _component("textfield.framed.label-top-offset");
		z-index: 1;
	}

	.textfield-messages {
		bottom: 0;
		left: 0;
		pointer-events: none;
		position: absolute;
		right: -1px;
		text-align: center;
		transform: translateY(0);
		transition: transform _theme("commons.animations.durations.standard");
		z-index: 2;
	}

	.textfield-messages-error {
		background-color: _color("error");
		color: _theme("palettes.error.text");
		font-size: _component("textfield.message.font-size");
		margin: 0;
	}

	.textfield-messages-warning {
		background-color: _color("warning");
		color: _theme("palettes.warning.text");
		font-size: _component("textfield.message.font-size");
		margin: 0;
	}

	.textfield-messages-helper {
		background-color: _color("text.light");
		color: white;
		font-size: _component("textfield.message.font-size");
		margin: 0;
	}

	// COLORING

	@mixin inputColoring($palette) {
		.textfield-input:focus, .textfield-input:not([disabled]):hover {
			@include fakeBorder(1px, _get($palette, "color"));

			background-color: transparentize(_get($palette, "color"), .95);
			~ .textfield-label {
				color: _get($palette, "color");
			}
		}
		// Needed when textfield label is not next to the textfield-input
		&.is-focused {
			.textfield-label {
				color: _get($palette, "color");
			}
		}
	}

	@include inputColoring(_component("textfield.framed.default-palette"));

	// palette colors
	@each $name, $palette in _palettes() {
		&.palette-#{$name} {
			@include inputColoring($palette);
		}
	}


	// MODS
	// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

	&.mod-multiline {
		max-width: none;
		padding: 1rem;
		@include fakeBorder(1px, _theme("commons.divider.color"));

		textarea.textfield-input {
			height: _component("textfield.framed.textarea.height");
			padding: 0;
			margin-top: _component("textfield.framed.textarea.margin-top");
			box-shadow: none;
			resize: none;
		}

		// PALETTE
		// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

		@mixin inputColoring($palette) {
			&:hover, &:focus {
				@include fakeBorder(1px, _get($palette, "color"));
				background-color: transparentize(_get($palette, "color"), .95);
				z-index: 2;
			}

			textarea.textfield-input {
				&:focus, &:hover {
					box-shadow: none;
					background: transparent;
					z-index: auto;
				}
			}
		}

		// palette colors
		@each $name, $palette in _palettes() {
			&.palette-#{$name} {
				@include inputColoring($palette);
			}
		}

		// MODS
		&.mod-withSuffix {
			textarea.textfield-input {
				margin-right: 2em;
			}
		}

		&.is-error {
			background-color: transparentize(_color("error"), .9);
		}
	}

	&.mod-withSuffix {
		.textfield-input {
			padding-right: _component("textfield.framed.suffix.padding-right");
		}
	}

	&.mod-select, &.mod-search, &.mod-autocomplete {
		&::after {
			right: _component("textfield.framed.side-padding");
		}

		.textfield-input {
			padding-right: _component("textfield.framed.suffix.padding-right");
		}

		.textfield-options {
			margin-top: 1px;
		}
	}


	// STATUS
	// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

	.textfield-input {
		&[disabled], &[readonly] {
			background-color: transparentize(_color("text.placeholder"), .8);
			background-image: none;
			opacity: .6;
			& + .textfield-label {
				opacity: .5;
			}
		}

		&.is-error {
			background-color: transparentize(_color("error"), .9);
			&:focus, &:hover {
				@include fakeBorder(1px, _color("error"));
				background-color: transparentize(_color("error"), .9);
			}

			~ .textfield-label, ~ .textfield-suffix {
				color: _color("error") !important;
			}
		}
	}

	// Needed when not next to input-field (formly)
	&.is-error {
		.textfield-label, .textfield-suffix {
			color: _color("error") !important;
		}
	}
	// Needed when not next to input-field (formly)
	&.is-focused, &:hover {
		.textfield-messages {
			transform: translateY(100%);
		}
	}
}
