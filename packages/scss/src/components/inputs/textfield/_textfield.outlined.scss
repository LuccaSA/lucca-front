%input_outlined {
	@mixin inputColoring($palette) {
		.textfield-input {
			box-shadow: inset 0 0 0 _component("textfield.outlined.border.width") _component("textfield.outlined.border.default-color");
			background-color: _color("white");
		}
		&:hover .textfield-input {
			box-shadow: inset 0 0 0 _component("textfield.outlined.border.width") _color($palette, 200);
			background-color: _color($palette, 50);
		}

		&.is-focused .textfield-input,
		.textfield-input.is-focused,
		.textfield-input:focus {
			background-color: _color("white");
			box-shadow: 0 0 0 4px _color($palette, 200), inset 0 0 0 _component("textfield.outlined.border.width") _color($palette, 600);
		}
	}

	// default color
	@include inputColoring("primary");

	// palette colors
	@each $name, $palette in _getMap("palettes") {
		&.palette-#{$name} {
			@include inputColoring($name);
		}
	}

	&.palette-error,
	&.is-error {
		.textfield-input {
			box-shadow: inset 0 0 0 _component("textfield.outlined.border.width") _color("error", 200);
		}
	}

	.textfield-input {
		&[disabled],
		&[readonly],
		&.is-disabled,
		&.is-readonly {
			&,
			&:focus,
			&.is-focused {
				background-color: _theme("commons.disabled.background");
				box-shadow: none;
			}
		}
	}

	&:hover .textfield-input {
		&[disabled],
		&[readonly],
		&.is-disabled,
		&.is-readonly {
			background-color: _theme("commons.disabled.background");
			box-shadow: none;
		}
	}
}
