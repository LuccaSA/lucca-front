%input_compact {
	align-items: center;
	display: flex;
	padding-top: 0;
	margin-top: 1rem;

	.input-field {
		border: 1px solid _component("input.border.color");
		box-shadow: none;
		padding: .5rem;

		&::placeholder {
			opacity: 1;
			transition: none;
		}

		&:focus, &.is-filled {
			~ .input-label {
				font-size: inherit;
				top: auto;
			}
		}
	}
	.input-label {
		flex: 0 0 auto;
		margin-right: _component("input.compact.label-right-margin");
		order: -1;
		width: _component("input.compact.label-sizes.default");
		word-break: break-word;
		left: auto;
		pointer-events: auto;
		position: relative;
		top: auto;
		transition: none;
	}

	.input-messages {
		align-items: center;
		bottom: 0;
		display: inline-flex;
		left: calc(100% + 1rem);
		line-height: 1.1;
		position: absolute;
		top: 0;
		width: 100%;
		max-width: _component("input.compact.label-sizes.default");
		&.mod-helper {
			bottom: auto;
			left: 0;
			max-width: 100%;
			padding-left: calc(#{_component("input.compact.label-sizes.default")} + #{_component("input.compact.label-right-margin")});
			right: 0;
			top: 100%;
		}
	}

	.input-options {
		left: auto;
		margin: 0;
		min-width: 0;
		overflow-x: hidden;
		overflow-y: auto;
		right: 0;
		top: 100%;
		width: calc(100% - #{_component("input.compact.label-right-margin")} - #{_component("input.compact.label-sizes.default")});
	}

	// COLORING
	@mixin inputColoring($palette) {
		.input-field:focus {
			border-color: _get($palette, "color");
			box-shadow: none;

			~ .input-label {
				color: #A6A6A6;
			}
		}
	}

	@include inputColoring(_component("input.compact.default-palette"));

	// palette colors
	@each $name, $palette in _palettes() {
		&.palette-#{$name} {
			@include inputColoring($palette);
		}
	}


	/* Label Width */
	@mixin inputWidth($iWidth, $lWidth) {
		width: calc(#{$iWidth} + #{_component("input.compact.label-right-margin")} + #{$lWidth});
	}

	/* Default Sizing */
	& {
		@include inputWidth(_component("input.sizes.default"), _component("input.compact.label-sizes.default"));
	}

	// WIDTH

	@each $input-size-name, $input-width in _component("input.sizes") {
		&.mod-#{$input-size-name} {
			@include inputWidth($input-width, _component("input.compact.label-sizes.default"));
			.input-options {
				width: $input-width;
			}
			@each $label-size-name, $label-width in _component("input.compact.label-sizes") {
				&.mod-label-#{$label-size-name} {
					@include inputWidth($input-width, $label-width);
				}
			}
		}
	}

	@each $label-size-name, $label-width in _component("input.sizes") {
		&.mod-label-#{$label-size-name} {
			.input-label {
				width: $label-width;
			}

			.input-messages.mod-helper {
				padding-left: calc($label-width + #{_component("input.compact.label-right-margin")});
			}
		}
	}

	&.mod-block {
		width: 100%;
	}

	&.mod-autocomplete, &.mod-select, &.mod-search {
		&::after {
			bottom: auto;
			right: .5rem;
			top: auto;
		}

		.input-field {
			padding-right: 2rem;
		}

		.input-label {
			padding-right: 0;
		}
	}

	

	// Disabled & readonly
	.input-field {
		&[disabled], &[readonly] {
			background: #EBEBE4;
			background-image: none;
			background-position: bottom;
		}

		&.is-error {
			border-color: _color("error");
		}
	}
}
