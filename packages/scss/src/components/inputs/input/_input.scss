.input {
	padding-top: 1rem;
	position: relative;
	width: _component("input.sizes.default");
}

.input-field {
	background: transparent;
	border: 0;
	box-shadow: 0 1px 0 0 #CCCCCC;
	color: _color("text.default");
	font-family: unquote(_theme("commons.font.family"));
	font-size: _component("input.font-size");
	font-weight: 400;
	margin-bottom: .15rem;
	outline: 0;
	padding: .5rem 0;
	position: relative;
	transition: box-shadow 150ms ease, color 150ms ease;
	width: 100%;

	&::placeholder {
		color: _color("text.placeholder");
		opacity: 0;
		transition: opacity 150ms ease;
	}

	&:focus {
		&::placeholder {
			opacity: 1;
		}

		~ .input-label {
			font-size: _theme("sizes.small.font-size");
			top: 0;
		}
	}
}

.input-label {
	color: #A6A6A6;
	white-space: nowrap;
	font-size: _component("input.font-size");
	left: 0;
	overflow: hidden;
	pointer-events: none;
	position: absolute;
	text-overflow: ellipsis;
	top: 1.3rem;
	transition: all 150ms ease;
	width: 100%;
}

.input-options {
	background: white;
	border-radius: 3px;
	box-shadow: 0 2px 6px rgba(0, 0, 0, .2), 0 0 3px rgba(0, 0, 0, .3);
	left: 0;
	list-style: none;
	max-height: 15rem;
	min-width: 100%;
	opacity: 0;
	overflow: auto;
	padding: 0;
	position: absolute;
	top: 2.5rem;
	transform: scaleY(0);
	transform-origin: right top;
	transition: all 150ms ease;
	z-index: 999;
}

.input-options-entry {
	cursor: pointer;
	padding: .5rem 1rem;
	transition: background 50ms ease;

	&:hover {
		background: rgba(0, 0, 0, .1);
	}
}

.input-messages {
	line-height: 1.3;
}
.input-error {
	color: _color("error");
	font-size: _component("input.message.font-size");
	margin: 0;
}

.input-warning {
	color: _color("warning");
	font-size: _component("input.message.font-size");
	margin: 0;
}

.input-helper {
	color: _color("text.light");
	font-size: _component("input.message.font-size");
	margin: 0;
}

// PALETTE
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.input {
	// Coloring
	@mixin inputColoring($palette) {
		.input-field:focus {
			box-shadow: 0 2px 0 0 _get($palette, "color");

			~ .input-label {
				color: _get($palette, "color");
			}
		}
	}

	// default color
	@include inputColoring(_component("input.default-palette.material"));

	// palette colors
	@each $name, $palette in _palettes() {
		&.palette-#{$name} {
			@include inputColoring($palette);
		}
	}
}


// MOD
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.input {
	/* Width */

	@each $input-size-name, $input-width in _component("input.sizes") {
		&.mod-#{$input-size-name} {
			width: $input-width;
		}
	}

	/* Display */

	&.mod-block {
		width: 100%;
	}

	&.mod-inline {
		display: inline-flex;
		align-items: center;
		margin-left: .15rem;
		margin-right: .15rem;
	}

	&.mod-noLabel {
		padding-top: 0;

		.input-label {
			display: none;
		}
	}

	/* Select */

	&.mod-select {
		.input-field {
			padding-right: 1.5rem;

			&:focus {
				box-shadow: 0 1px 0 0 #CCCCCC;
			}
		}

		.input-label {
			color: #A6A6A6;
			font-size: _theme("sizes.standard.font-size");
			top: 1.3rem;
		}

		.input-options {
			top: 0;
		}

		&::after {
			bottom: .15rem;
			color: _color("text.light");
			@include makeIcon("chevron_south");
			font-size: .75rem;
			position: absolute;
			right: 0;
		}
	}

	/* Autocomplete & Search */

	&.mod-autocomplete, &.mod-search {
		&::after {
			color: _color("text.light");
			@include makeIcon("search");
			position: absolute;
			right: 0;
			bottom: .3rem;
		}

		.input-field {
			padding-right: 1.5rem;
		}

		.input-label {
			padding-right: 1.5rem;
		}
	}

	&.mod-compact, &.compact {
		@extend %input_compact;
	}

	&.mod-framed {
		@extend %input_framed;
	}
}


// STATES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.input-field {
	&[disabled], &[readonly] {
		background: transparent;
		background-image: linear-gradient(to right, #CCCCCC 33%, rgba(255, 255, 255, 0) 0%);
		background-position: bottom;
		background-repeat: repeat-x;
		background-size: 3px 1px;
		box-shadow: none;
		color: _color("text.light");
		cursor: not-allowed;
	}

	&.is-error {
		@include formError();

		&:focus {
			@include formError();
		}
	}

	&.is-filled {
		@include formFilled();
	}
}

.input {
	&.is-open {
		.input-options {
			opacity: 1;
			transform: scaleY(1);
		}
	}

	&.is-required {
		label::after {
			color: _color("error");
			content: "*";
			display: inline-block;
			font-size: 1.2rem;
			margin-left: .25em;
			position: absolute;
		}
	}
}

.input-options-entry {
	&.is-focus {
		background: rgba(0, 0, 0, .1);
	}
}

@import "input.compact";
@import "input.framed";
