// Simulate border with border-collapse
// Not my trick, but this guy's trick https://codepen.io/Hawkun/pen/rsIEp
@mixin fakeBorder($width, $color) {
	box-shadow: $width 0 0 0  $color,
	0 $width 0 0  $color,
	$width $width 0 0  $color,
	$width 0 0 0  $color inset,
	0 $width 0 0  $color inset;
}

%input_framed {
	padding: 0;
	width: 100%;

	.input-field {
		@include fakeBorder(1px, _theme("commons.divider.color"));
		height: 100%;
		margin-bottom: 0;
		padding: _component("input.framed.top-padding") _component("input.framed.side-padding") _component("input.framed.bottom-padding");
		width: 100%;
		&:focus, &:hover {
			z-index: 1;
			~ .input-messages {
				transform: translateY(100%);
			}
		}
	}

	.input-label {
		font-size: _theme("sizes.small.font-size");
		left: _component("input.framed.side-padding");
		right: _component("input.framed.side-padding");
		top: _component("input.framed.label-top-offset");
		width: auto;
	}

	.input-suffix {
		position: absolute;
		bottom: _component("input.framed.bottom-padding");
		right: _component("input.framed.side-padding");
		text-align: right;
		color: _color("text.placeholder");
	}

	.input-messages {
		position: absolute;
		bottom: 0;
		left: 0;
		right: 0;
		pointer-events: none;
		text-align: center;
		transform: translateY(0);
		transition: transform _theme("commons.animations.durations.standard");
		
		.input-error {
			background-color: _color("error");
			color: _theme("palettes.error.text");
			font-size: _component("input.message.font-size");
			margin: 0;
		}

		.input-warning {
			background-color: _color("warning");
			color: _theme("palettes.warning.text");
			font-size: _component("input.message.font-size");
			margin: 0;
		}

		.input-helper {
			background-color: _color("text.light");
			color: white;
			font-size: _component("input.message.font-size");
			margin: 0;
		}
	}

	// COLORING
	@mixin inputColoring($palette) {
		.input-field:focus, .input-field:hover {
			@include fakeBorder(1px, _get($palette, "color"));
			background-color: transparentize(_get($palette, "color"), .95);
			~ .input-label {
				color: _get($palette, "color");
			}
		}
	}

	@include inputColoring(_component("input.framed.default-palette"));

	// palette colors
	@each $name, $palette in _palettes() {
		&.palette-#{$name} {
			@include inputColoring($palette);
		}
	}
	// MOD
	&.has-suffix {
		.input-field {
			padding-right: 3rem;
		}
	}

	&.mod-select, &.mod-search {
		&::after {
			right: _component("input.framed.select.icon-offset");
		}
		.input-options {
			top: _component("input.framed.select.options-offset");
		}
	}
	// STATUS

	.input-field {
		&[disabled], &[readonly] {
			background-color: transparentize(_color("text.placeholder"), .5);
			background-image: none;

			& + label {
				opacity: .5;
			}
		}

		&.is-error {
			background-color: transparentize(_color("error"), .9);
			&:focus, &:hover {
				@include fakeBorder(1px, _color("error"));
			}

			~ label, ~ .input-suffix{
				color: _color("error") !important;
			}
		}
	}
}

.form.mod-framed {
	.form-group-title {
		font-size: _component("input.framed.title.font-size");
		line-height: _component("input.framed.title.line-height");
	}
	.form-group {
		display: flex;
		flex-direction: column;
	}
	.form-group-line {
		display: flex;
		flex: 0 1 auto;
	}
}
