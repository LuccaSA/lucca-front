.form-group {
	padding: 0;
	border: 0;
	margin: 0 0 _component("form.group.margin-bottom");
	position: relative;
}

.form-group-label, .form-group-legend, .form-group-title {
	display: block;
	font-weight: 600;
	font-size: _component("form.label.font-size");
	margin: 0;
	padding: 0 0 _component("form.label.margin-bottom");
	width: 100%;
	text-align: left;
}

.form-group-legend, .form-group-title {
	font-size: _component("field.framed.title.font-size");
	line-height: _component("field.framed.title.line-height");
	padding-bottom: _theme("spacings.smallest");
}

.form-title {
	margin-bottom: _theme("spacings.small");
}

.form-actions {
	text-align: right;
}

.form:not(.mod-framed) {
	.textfield, .radiosfield, .checkboxesfield, .checkbox.mod-field {
		margin-bottom: _component("form.field.margin-bottom");
	}
}

// MODS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.form {
	&.mod-framed {
		.form-group-line {
			display: flex;
			flex-wrap: wrap;
			position: relative;
		}

		.form-group-line-col {
			flex-basis: 0;
			flex-grow: 1;
			display: flex;
			flex-direction: column;

			> * {
				flex-grow: 1;
			}

			@each $bp-name, $bp-obj in $breakpoints {
				@for $i from 1 through 12 {
					&.mod-#{$bp-name}#{$i} {
						flex-basis: 100%;
						flex-grow: 0;
					}
				}

				@include media_larger_than($bp-name) {
					@for $i from 1 through 12 {
						&.mod-#{$bp-name}#{$i} {
							flex-basis: (100% / 12 * $i);
						}
					}
				}
			}

			&.mod-selection {
				padding: 0;
				box-shadow: fakeborderoverlay(_component("field.framed.border"));
				transition: background-color _theme("commons.animations.durations.standard");

				&:hover {
					background-color: _component("field.framed.color50");
				}

				&:focus-within {
					position: relative;
					z-index: 1;
					box-shadow: fakeborderoverlay(_component("field.framed.color")), 0 0 0 4px _component("field.framed.color50");
				}

				.radiosfield, .checkboxesfield {
					margin-top: _component("field.framed.side-padding");
					padding: 0 _component("field.framed.side-padding") _component("field.framed.bottom-padding");
				}

				&.is-error {
					@include fieldFramedState("error");
				}

				&.is-warning {
					@include fieldFramedState("warning");
				}

				&.is-valid,
				&.is-success {
					@include fieldFramedState("success");
				}

				&.is-disabled, &.is-readonly {
					background-color: _theme("commons.disabled.background");

					.radio-label, .checkbox-label {
						cursor: not-allowed;
					}
				}

				&.is-loading {
					@include loading;

					&::before, &::after {
						left: auto !important;
						bottom: auto !important;
						right: _component("field.framed.side-padding") !important;
						top: _component("field.framed.side-padding") !important;
					}
				}
			}

			&[class*="mod-overlay"] {
				&:focus-within {
					.textfield-input {
						box-shadow: fakeborderoverlay(_component("field.framed.color")), 0 0 0 4px _component("field.framed.color50");
						z-index: 4;
					}

					.is-error {
						.textfield-input {
							background-color: white !important;
						}
					}

					.is-warning {
						.textfield-input {
							background-color: white;
							box-shadow: fakeborderoverlay(_color("warning")), 0 0 0 4px _color("warning", "50");
						}
					}

					.is-valid, .is-success {
						.textfield-input {
							background-color: white;
							box-shadow: fakeborderoverlay(_color("success")), 0 0 0 4px _color("success", "50");
						}
					}
				}

				.textfield, .checkbox, .radio, .select {
					+ .textfield, + .checkbox, + .radio, + .select {
						position: absolute;
						bottom: 0;
						right: 0;
						z-index: 10;
						padding: _component("field.framed.label-top-offset") _component("field.framed.side-padding") _component("field.framed.bottom-padding");
					}
				}
			}

			&.mod-overlay-top {
				.textfield, .checkbox, .radio, .select {
					+ .textfield, + .checkbox, + .radio, + .select {
						top: 0;
						bottom: auto;
					}
				}
			}
		}
	}
}


// STATES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.form-group-label {
	&.is-required {
		&:not(:empty) {
			&::after {
				@extend %isRequired;
			}
		}
	}
}
