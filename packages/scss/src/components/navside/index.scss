@use 'exports' as *;
@use '@lucca-front/scss/src/commons/utils/media';
@use '@lucca-front/scss/src/commons/utils/container';
@use '@lucca-front/scss/src/commons/utils/namespace';

.navSide {
	@include vars;
	@include component;

	&.mod-withBanner {
		@include banner;
	}
}

.navSide-item {
	&:not(.is-open) {
		@include notOpen;
	}

	&.mod-mobileToggle {
		@include mobileToggle;
	}

	&:is(.is-open, .open) {
		@include expanded;

		.navSide-item-subMenu-link {
			&:is(:hover) {
				@include sublinkHover;
			}

			&:is(.is-active, .active) {
				@include sublinkActive;
			}
		}
	}
}

.navSide-item-subMenu-link,
.navSide-item-link {
	&:is(.is-active, .active) {
		@include active;
	}

	&:is([aria-expanded='true']) {
		@include expanded;
	}
}

@mixin responsiveCompact(
	$breakpoint: 'S',
	$breakpoint2: null,
	$inverted: false,
	$at: 'media',
	$containerName: 'navSide',
	$responsiveSelector: null,
	$axis: 'width',
	$selector: '.navSide.mod-compact'
) {
	@if ($at == 'container') {
		@include container.auto($containerName);
	}

	#{if($responsiveSelector, $selector + '.rwd-' + $responsiveSelector, $selector)} {
		@include media.query(
			$breakpoint: $breakpoint,
			$breakpoint2: $breakpoint2,
			$inverted: $inverted,
			$at: $at,
			$containerName: $containerName,
			$axis: $axis
		) {
			@include compact;

			.navSide-item-link {
				&:hover {
					@include compactHover;
				}

				&:is(.is-active, .active) {
					@include compactActive;
				}
			}
		}
	}
}

@mixin responsive(
	$breakpoint: 'S',
	$breakpoint2: null,
	$inverted: true,
	$at: 'media',
	$containerName: 'navSide',
	$responsiveSelector: null,
	$axis: 'width',
	$selector: '.navSide'
) {
	@if ($at == 'container') {
		@include container.auto($containerName);
	}

	#{if($responsiveSelector, $selector + '.rwd-' + $responsiveSelector, $selector)} {
		@include media.query(
			$breakpoint: $breakpoint,
			$breakpoint2: $breakpoint2,
			$inverted: $inverted,
			$at: $at,
			$containerName: $containerName,
			$axis: $axis
		) {
			@include mobile;

			@at-root {
				@include namespace.appendRootVars {
					&.hasMenu,
					&.withMenu {
						@include overlay;
					}
				}
			}

			&:not(.is-open, .open) {
				.navSide-item {
					&:not(.mod-mobileToggle) {
						@include mobileHidden;
					}
				}
			}

			&.mod-withBanner {
				.navSide-item {
					&.mod-mobileToggle {
						@include banner;
					}
				}
			}

			&:is(.is-open, .open) {
				@include mobileOpen;

				&.mod-withBanner {
					@include mobileOpenBanner;
				}
			}
		}
	}
}

$defaultResponsive: true !default;

@if $defaultResponsive {
	@include responsive;
	@include responsiveCompact;
}
