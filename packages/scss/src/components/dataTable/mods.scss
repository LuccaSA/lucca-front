@use '@lucca-front/scss/src/commons/config';

@use '@lucca-front/scss/src/commons/utils/media';

@use '@lucca-front/scss/src/components/button/exports' as button;
@use '@lucca-front/scss/src/components/title/exports' as title;

@mixin cellBorder {
	--components-dataTable-cell-shadow: 0 1px inset var(--commons-border-200), 1px 0 inset var(--commons-border-200);

	.dataTable-head-row {
		&:first-child {
			.dataTable-head-row-cell {
				--components-dataTable-cell-shadow: 1px 0 inset var(--commons-border-200);
			}
		}
	}
}

@mixin alignTop {
	--components-dataTable-cell-verticalAlign: top;
}

@mixin buttonExpand {
	--components-dataTable-tree-extraPadding: calc(1.5rem + var(--pr-t-spacings-100));

	&:has(.dataTable-body-row-cell-expand-button.button) {
		--components-dataTable-tree-extraPadding: 0rem; // unit is mandatory here
	}

	.dataTable-body-row-cell-expand-button.button {
		@include button.S;
		@include button.onlyIconS;
		@include button.text;

		--components-button-padding: var(--pr-t-spacings-25);
		--components-button-color: var(--palettes-neutral-800);
	}
}

@mixin group {
	@include buttonExpand;

	@include title.component;
	@include title.h4;

	--components-dataTable-cell-background: var(--palettes-neutral-25);
}

@mixin selectable {
	--components-dataTable-cellFirst-width: 2.5rem;

	&:has(input:checked) {
		--components-dataTable-cell-background: var(--palettes-product-50);
	}
}

@mixin draggable {
	.dataTable-head-row-cell,
	.dataTable-body-row-cell,
	.dataTable-foot-row-cell {
		&:first-child {
			--components-dataTable-cellFirst-width: 2.5rem;

			padding-inline: var(--pr-t-spacings-75);
		}
	}
}

@mixin tree {
	@include buttonExpand;

	--components-dataTable-cell-paddingInlineStart: calc(
		var(--components-dataTable-cell-padding-inline) + var(--pr-t-spacings-300) * calc(var(--components-dataTable-treeLevel) - 1) +
			var(--components-dataTable-tree-extraPadding)
	);
}

@mixin editable {
	--components-dataTable-cell-padding: var(--pr-t-spacings-100);
	--components-dataTable-cell-paddingInlineStart: var(--components-dataTable-cell-padding);
}

@mixin actions {
	padding: 0;
	padding-inline-end: var(--pr-t-spacings-50);
	text-align: end;
	white-space: nowrap;

	.button {
		@include button.S;
		@include button.onlyIcon;
		@include button.onlyIconS;
		@include button.text;
	}

	&:is(.dataTable-head-row-cell) {
		.button {
			position: relative;
			inset-block-end: var(--pr-t-spacings-50);
		}
	}
}

@mixin alignCenter {
	--components-dataTable-cell-textAlign: center;
}

@mixin alignRight {
	--components-dataTable-cell-textAlign: right;
}

@mixin layoutFixed {
	--components-dataTable-tableLayout: fixed;
}

@mixin layoutFixedWithBreakpoint {
	@each $breakpoint, $value in config.$breakpoints {
		@include media.min($breakpoint) {
			&.mod-layoutFixedAtMediaMin#{$breakpoint} {
				--components-dataTable-tableLayout: fixed;
			}
		}
	}
}

@mixin cellFixedWidth {
	min-width: var(--dataTable-layoutFixed-width, auto);
	width: var(--dataTable-layoutFixed-width, auto);
}

@mixin layoutFixedCells {
	&.mod-layoutFixed {
		.dataTable-head-row-cell,
		.dataTable-body-row-cell,
		.dataTable-foot-row-cell {
			@include cellFixedWidth;
		}
	}

	@each $breakpoint, $value in config.$breakpoints {
		@include media.min($breakpoint) {
			&.mod-layoutFixedAtMediaMin#{$breakpoint} {
				.dataTable-head-row-cell,
				.dataTable-body-row-cell,
				.dataTable-foot-row-cell {
					@include cellFixedWidth;
				}
			}
		}
	}
}
