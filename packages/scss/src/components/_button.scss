.button {
	border: 0;
	border-radius: _component("button.border.radius");
	box-shadow: 0 _component("button.box-shadow.offset") 0 _component("button.box-shadow.color") inset;
	cursor: pointer;
	display: inline-block;
	font-family: unquote(_component("button.font.family"));
	font-size: _component("button.sizing.default.font-size");
	font-weight: _component("button.font-weight");
	line-height: _component("button.line-height");
	margin: _component("button.margin");
	padding: _component("button.sizing.default.padding");
	position: relative;
	text-decoration: none;
	transition: unquote(_component("button.transition"));
	vertical-align: middle;
	white-space: nowrap;

	&:first-of-type {
		margin-left: 0;
	}

	&:last-of-type {
		margin-right: 0;
	}
}


// PALETTES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button {
	@mixin buttonColoring($palette) {
		background: _color($palette);
		color: _color($palette, "text");

		&:hover:not([disabled]) {
			background: _color($palette, "light");
		}

		&:active:not([disabled]) {
			background: _color($palette, "dark");
		}
	}

	@mixin buttonLesserColoring($palette) {
		background: _color($palette, "lightest");
		box-shadow: 0 _component("button.box-shadow.offset") 0 _color($palette, "see-through") inset;
		color: _color($palette, "dark");

		&:hover:not([disabled]) {
			background: _color($palette, "lightest");
			opacity: .8;
		}
	}

	// default color
	@include buttonColoring("button.default-palette");

	// white color
	&.mod-white {
		@include buttonColoring("button.white-palette");
	}

	// palette colors
	@each $name, $palette in _getMap("palettes") {
		&.palette-#{$name} {
			@include buttonColoring($name);
		}
	}

	// palette lesser
	@each $name, $palette in _getMap("palettes") {
		&.mod-lesser.palette-#{$name} {
			@include buttonLesserColoring($name);
		}
	}
}


// SIZING
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button {
	@each $button-size, $size-obj in _getMap("components.button.sizing") {
		&.size-#{$button-size} {
			font-size: _component("button.sizing."+$button-size+".font-size");
			padding: _component("button.sizing."+$button-size+".padding");
		}
	}
}


// MODS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button {

	&.mod-link {
		background: transparent;
		box-shadow: none;
		font-weight: 400;
		text-decoration: underline;

		&:hover, &:focus {
			&:not([disabled]) {
				background: transparent;
				box-shadow: none;
				color: _component("button.flat.color");
			}
		}
	}

	&.mod-wired {
		@mixin buttonWiredColoring($palette) {
			background: transparent;
			color: _color("text.default");

			&:hover, &:focus {
				&:not([disabled]) {
					box-shadow: 0 _component("button.box-shadow.offset") 0 _color($palette) inset;
					color: _color($palette);
				}
			}
		}

		// default color
		@include buttonWiredColoring("button.wired.default-palette");

		// palette colors
		@each $name, $palette in _getMap("palettes") {
			&.palette-#{$name} {
				@include buttonWiredColoring($name);
			}
		}
	}
}


// STATES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button {

	/* Disabled */

	&[disabled] {
		cursor: default;
		opacity: _theme("commons.disabled.opacity");
	}

	&.is-disabled {
		opacity: _theme("commons.disabled.opacity");
		pointer-events: none;
	}

	/* Loading */

	&.is-loading {
		@include loading(_component("button.sizing.default.font-size"));
		color: transparent;
		opacity: _theme("commons.disabled.opacity");
		pointer-events: none;
		user-select: none;

		// Sizing
		@each $button-size, $size-obj in _getMap("components.button.sizing") {
			&.size-#{$button-size} {
				@include loading(_component("button.sizing."+$button-size+".font-size"));
			}
		}
	}

	/* Success */

	&.is-success {
		background: _color("success");
		color: transparent;
		pointer-events: none;
		user-select: none;

		&::after {
			@include makeIcon("tick");
			bottom: 0;
			color: white;
			font-size: calc(1.5 * #{_component("button.sizing.default.font-size")});
			height: calc(1.5 * #{_component("button.sizing.default.font-size")});
			left: 0;
			margin: auto;
			position: absolute;
			right: 0;
			top: 0;
			vertical-align: middle;
		}

		// Sizing
		@each $button-size, $size-obj in _getMap("components.button.sizing") {
			&.size-#{$button-size} {
				&::after {
					font-size: calc(1.5 * #{_component("button.sizing."+$button-size+".font-size")});
					height: calc(1.5 * #{_component("button.sizing."+$button-size+".font-size")});
				}
			}
		}
	}

	/* Error */

	&.is-error {
		background: _color("error");
		color: transparent;
		pointer-events: none;
		user-select: none;

		&::after {
			@include makeIcon("cross");
			bottom: 0;
			color: white;
			font-size: calc(1.5 * #{_component("button.sizing.default.font-size")});
			height: calc(1.5 * #{_component("button.sizing.default.font-size")});
			left: 0;
			margin: auto;
			position: absolute;
			right: 0;
			top: 0;
			vertical-align: middle;
		}

		// Sizing
		@each $button-size, $size-obj in _getMap("components.button.sizing") {
			&.size-#{$button-size} {
				&::after {
					font-size: calc(1.5 * #{_component("button.sizing."+$button-size+".font-size")});
					height: calc(1.5 * #{_component("button.sizing."+$button-size+".font-size")});
				}
			}
		}
	}
}

// WRAPPER
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button-group {
	display: flex;
	margin: _component("button.margin");

	.button {
		border-radius: 0;
		display: block;
		margin: 0;
		position: relative;
		border-right: 1px solid _component("button.box-shadow.color");

		&:last-of-type {
			border: 0;
		}
	}

	> .button {

		&:first-child {
			border-radius: _component("button.border.radius") 0 0 _component("button.border.radius");
		}

		&:last-child {
			border-radius: 0 _component("button.border.radius") _component("button.border.radius") 0;
		}

		&:hover, &:focus {
			z-index: 1;
		}
	}
}

.button-group .button-group-item { // 2 classes needed to override button-group's "last-of-type"
	.button {
		border-right: 1px solid _component("button.box-shadow.color");
	}

	&:first-child {
		.button {
			border-radius: _component("button.border.radius") 0 0 _component("button.border.radius");
		}
	}

	&:last-child {
		.button {
			border: 0;
			border-radius: 0 _component("button.border.radius") _component("button.border.radius") 0;
		}
	}
}

.button-group-input {
	display: none;

	&:checked + .button {
		background: _component("button.checked.color");
		color: _component("button.checked.text");
		z-index: 1;
	}
}
