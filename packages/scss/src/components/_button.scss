.button {
	cursor: pointer;
	display: inline-block;
	position: relative;
	text-decoration: none;
	border: 0;
	vertical-align: middle;
	white-space: nowrap;
	margin: _component("button.margin");
	border-radius: _component("button.border.radius");
	box-shadow: unquote(_component("button.box-shadow"));
	font-family: unquote(_component("button.font.family"));
	transition: unquote(_component("button.transition"));

	&:first-of-type {
		margin-left: 0;
	}

	&:last-of-type {
		margin-right: 0;
	}

	&:hover {
		&:not([disabled]) {
			box-shadow: unquote(_component("button.hover.box-shadow"));
		}
	}

	&:focus {
		&:not([disabled]) {
			box-shadow: unquote(_component("button.focus.box-shadow"));
		}
	}

	&:active {
		outline: 0;
		box-shadow: unquote(_component("button.box-shadow"));

		&:focus {
			outline: 0;
		}
	}
}


// PALETTES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button {
	@mixin buttonColoring($palette) {
		background: _get($palette, "color");
		color: _get($palette, "text");

		&:active {
			background: darken(_get($palette, "color"), 5%);
		}
	}

	// default color
	@include buttonColoring(_component("button.default-palette"));

	// palette colors
	@each $name, $palette in _palettes() {
		&.palette-#{$name} {
			@include buttonColoring($palette);
		}
	}
}


// SIZING
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button {
	@mixin buttonSizing($size) {
		$padding-v: _component("button.sizing.padding-v-ratio") * _get($size, "padding");
		$padding-h: _component("button.sizing.padding-h-ratio") * _get($size, "padding");
		font-size: _get($size, "font-size");
		line-height: 1;
		padding: $padding-v $padding-h;
	}

	// default size
	@include buttonSizing(_component("button.sizing.default-size"));

	// all sizes
	@each $name, $size in _theme("sizes") {
		&.size-#{$name} {
			@include buttonSizing($size);
		}
	}
}


// MODS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button {

	&.mod-flat {
		background: transparent;
		box-shadow: none;
		text-decoration: underline;

		&:hover, &:focus {
			&:not([disabled]) {
				box-shadow: none;
				color: _component("button.flat.color");
			}
		}
	}

	&.mod-wired {
		@mixin buttonWiredColoring($palette) {
			background: transparent;
			color: _color("text.default");

			&:hover, &:focus {
				&:not([disabled]) {
					box-shadow: 0 0 0 2px _get($palette, "color") inset;
					color: _get($palette, "color");
				}
			}
		}

		// default color
		@include buttonWiredColoring(_component("button.wired.default-palette"));

		// palette colors
		@each $name, $palette in _palettes() {
			&.palette-#{$name} {
				@include buttonWiredColoring($palette);
			}
		}
	}

	&.mod-filling {
		@mixin buttonFillingColoring($palette) {
			background: transparent;
			color: _color("text.default");

			&:hover, &:focus {
				&:not([disabled]) {
					background: _get($palette, "color");
					color: _get($palette, "text");
				}
			}
		}

		// default color
		@include buttonFillingColoring(_component("button.filling.default-palette"));

		// palette colors
		@each $name, $palette in _palettes() {
			&.palette-#{$name} {
				@include buttonFillingColoring($palette);
			}
		}
	}
}


// STATES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button {

	/* Disabled */

	&[disabled] {
		cursor: default;
		opacity: _theme("commons.disabled.opacity");
	}

	&.is-disabled {
		opacity: _theme("commons.disabled.opacity");
		pointer-events: none;
	}

	/* Loading */

	&.is-loading {
		color: transparent;
		opacity: _theme("commons.disabled.opacity");
		pointer-events: none;
		user-select: none;

		// Sizing
		@mixin buttonLoadingSizing($size) {
			@include loading(_get($size, "font-size"));
		}
		@include buttonLoadingSizing(_component("button.sizing.default-size"));
		@each $name, $size in _theme("sizes") {
			&.size-#{$name} {
				@include buttonLoadingSizing($size);
			}
		}
	}

	/* Success */

	&.is-success {
		background: _color("success");
		color: transparent;
		pointer-events: none;
		user-select: none;

		&::after {
			color: white;
			@include makeIcon("tick");
			height: 100%;
			left: 0;
			line-height: 100%;
			padding-top: 6%;
			position: absolute;
			right: 0;
			top: 0;
			vertical-align: middle;
		}

		// Sizing
		@mixin buttonSuccessErrorSizing($size) {
			&::after {
				font-size: 1.5*_get($size, "font-size");
			}
		}
		@include buttonSuccessErrorSizing(_component("button.sizing.default-size"));
		@each $name, $size in _theme("sizes") {
			&.size-#{$name} {
				@include buttonSuccessErrorSizing($size);
			}
		}
	}

	/* Error */

	&.is-error {
		background: _color("error");
		color: transparent;
		pointer-events: none;
		user-select: none;

		&::after {
			color: white;
			@include makeIcon("cross");
			height: 100%;
			left: 0;
			line-height: 100%;
			padding-top: 6%;
			position: absolute;
			right: 0;
			top: 0;
			vertical-align: middle;
		}

		// Sizing
		@mixin buttonSuccessErrorSizing($size) {
			&::after {
				font-size: 1.5*_get($size, "font-size");
			}
		}
		@include buttonSuccessErrorSizing(_component("button.sizing.default-size"));
		@each $name, $size in _theme("sizes") {
			&.size-#{$name} {
				@include buttonSuccessErrorSizing($size);
			}
		}
	}
}

// WRAPPER
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button-group {
	$radius: _component("button.border.radius");
	display: flex;
	margin: _component("button.margin");

	.button {
		border-radius: 0;
		display: block;
		margin: 0 0 0 -1px;
		position: relative;

		&:first-child {
			border-radius: $radius 0 0 $radius;
		}

		&:last-child {
			border-radius: 0 $radius $radius 0;
		}

		&:hover, &:focus {
			z-index: 1;
		}
	}
}
