// MIXINS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

@mixin buttonColoring($palette) {
	background-color: _color($palette);
	color: _color($palette, "text");

	&:hover:not([disabled]) {
		background-color: _color($palette, "500");
		box-shadow: 0 2px 8px rgba(0, 0, 0, .04), 0 1px 2px rgba(0, 0, 0, .06);
	}

	&:focus {
		box-shadow: 0 2px 8px rgba(0, 0, 0, .04), 0 1px 2px rgba(0, 0, 0, .06), 0 0 0 4px _color($palette, "200");
		outline: 0;
	}

	&:active:not([disabled]) {
		background-color: _color($palette, "800");
	}

	.button-counter {
		background-color: _color($palette, "200");
	}
}

@mixin buttonLinkColoring($palette) {
	&:focus:not([disabled]) {
		box-shadow: 0 0 0 4px _color($palette, "100"), inset 0 0 0 1px _color($palette, "300");
		background: _color($palette, "100");
	}
}

@mixin buttonOutlineColoring($palette) {
	box-shadow: inset 0 0 0 1px _color($palette, "500");
	color: _color($palette);

	&:hover:not([disabled]) {
		background-color: _color($palette, "50");
		color: _color($palette);
		box-shadow: 0 2px 8px rgba(0, 0, 0, .04), 0 1px 2px rgba(0, 0, 0, .06), inset 0 0 0 1px _color($palette);
	}

	&:focus:not([disabled]) {
		background-color: _color($palette, "50");
		color: _color($palette);
		box-shadow: 0 2px 8px rgba(0, 0, 0, .04), 0 1px 2px rgba(0, 0, 0, .06), 0 0 0 4px _color($palette, "50"), inset 0 0 0 1px _color($palette, "500");
		outline: 0;
	}

	&:active:not([disabled]) {
		background-color: _color($palette, "50");
		color: _color($palette, "dark");
		box-shadow: inset 0 0 0 1px _color($palette, "800");
	}

	.button-counter {
		background-color: _color($palette);
	}
}

// CLASSES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒


.button {
	cursor: pointer;
	border: 0;
	border-radius: _component("button.border.radius");
	display: inline-block;
	font-family: unquote(_component("button.font.family"));
	font-size: _component("button.font-size");
	font-weight: _component("button.font-weight"); /* stylelint-disable-line font-weight-notation */
	line-height: _component("button.line-height");
	margin: _component("button.margin");
	padding: _component("button.padding");
	position: relative;
	text-decoration: none;
	transition: unquote(_component("button.transition"));
	vertical-align: baseline;
	white-space: nowrap;

	&:first-of-type {
		margin-left: 0;
	}

	&:last-of-type {
		margin-right: 0;
	}

	.lucca-icon {
		vertical-align: top;
		line-height: 1.5rem;
		font-size: 1rem;
	}
}

.button-counter {
	border-radius: 1rem;
	display: inline-block;
	font-size: _theme("sizes.smaller.font-size");
	font-weight: 600;
	height: 1.5rem;
	min-width: 1.5rem;
	margin-left: _theme("spacings.smaller");
	padding: 0 _theme("spacings.smallest");
	vertical-align: bottom;
}

.button-icon {
	height: 1.5rem;
	line-height: 1.5rem;
	font-size: 1.5rem;
	transform: translateX(-.2rem);
	vertical-align: bottom;
}

// PALETTES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button {
	// default color
	@include buttonColoring("button.default-palette");

	// palette colors
	@each $name, $palette in _getMap("palettes") {
		&.palette-#{$name} {
			@include buttonColoring($name);
		}
	}
}


// MODS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button {
	&.mod-small {
		font-size: _component("button.small.font-size");
		line-height: _component("button.small.line-height");
		padding: _component("button.small.padding");

		.lucca-icon {
			line-height: 1rem;
			font-size: .875rem;
		}
	}

	&.mod-smaller {
		font-size: _component("button.smaller.font-size");
		line-height: _component("button.smaller.line-height");
		padding: _component("button.smaller.padding");

		.lucca-icon {
			line-height: 1rem;
			font-size: .875rem;
		}
	}

	&.mod-link {
		background-color: transparent;
		color: _color("text.default");

		// default color
		@include buttonLinkColoring("button.default-palette");

		// palette colors
		@each $name, $palette in _getMap("palettes") {
			&.palette-#{$name} {
				@include buttonLinkColoring($name);
			}
		}

		&:hover {
			box-shadow: none;
			background-color: _color("primary", "50");
			color: _color("primary");
		}

		&.mod-invert {
			color: white;

			&:hover, &:focus {
				&:not([disabled]) {
					background-color: rgba(255, 255, 255, .1);
					color: white;
				}
			}

			&:focus {
				box-shadow: 0 0 0 4px rgba(0, 0, 0, .1);
			}
		}
	}

	&.mod-more {
		padding: 0 !important;
		text-align: center;
		width: 2rem;

		&::before {
			content: "";
			@include makeIcon("arrow_south");
			height: 0;
			vertical-align: text-top;
		}

		.mod-small {
			width: 1.75rem;
		}
	}

	&.mod-outline {
		background-color: transparent;
		box-shadow: inset 0 0 0 1px _color("grey", "500");
		color: _color("text.default");

		&:hover {
			background-color: _color("primary", "50");
			color: _color("primary");
		}

		// default color
		@include buttonOutlineColoring("button.default-palette");

		// palette colors
		@each $name, $palette in _getMap("palettes") {
			&.palette-#{$name} {
				@include buttonOutlineColoring($name);
			}
		}
	}

	&.mod-counter {
		padding-left: _theme("spacings.small");
		padding-right: _theme("spacings.small");

		&.mod-small, &.mod-smaller {
			.button-counter {
				height: 1rem;
				min-width: 1rem;
			}
		}
	}

	&.mod-icon {
		padding-left: _theme("spacings.small");
		padding-right: _theme("spacings.small");

		&.mod-small {
			.button-icon {
				font-size: _component("button.small.font-size");
				height: _component("button.small.line-height");
				line-height: _component("button.small.line-height");
			}
		}

		&.mod-smaller {
			.button-icon {
				font-size: _component("button.smaller.font-size");
				height: _component("button.smaller.line-height");
				line-height: _component("button.smaller.line-height");
			}
		}
	}
}


// STATES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button {

	/* Disabled */

	&[disabled] {
		cursor: default;
		opacity: _theme("commons.disabled.opacity");
	}

	&.is-disabled {
		opacity: _theme("commons.disabled.opacity");
		pointer-events: none;
	}

	/* Loading */

	&.is-loading {
		@include loading(_component("button.font-size"));
		color: transparent;
		opacity: _theme("commons.disabled.opacity");
		pointer-events: none;
		user-select: none;
		@include loading(_component("button.font-size"));

		&.mod-small {
			@include loading(_component("button.small.font-size"));
		}
	}

	/* States */

	&.is-success {
		@include buttonColoring("success");

		&::after {
			@include makeIcon("tick");
		}
	}

	&.is-error {
		@include buttonColoring("error");

		&::after {
			@include makeIcon("cross");
		}
	}

	&.is-success, &.is-error {
		color: transparent;
		pointer-events: none;
		user-select: none;

		&::after {
			color: white;
			font-size: calc(1.5 * #{_component("button.font-size")});
			height: _component("button.line-height");
			left: 0;
			bottom: 0;
			margin: auto;
			position: absolute;
			right: 0;
			top: 0;
			vertical-align: middle;
		}

		&.mod-small {
			&::after {
				font-size: calc(1.5 * #{_component("button.small.font-size")});
				height: _component("button.small.font-size");
			}
		}
	}
}

// WRAPPER
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button-group {
	display: inline-flex;

	&:focus-within {
		box-shadow: 0 0 0 4px _color("primary", "200");
		border-radius: _component("button.border.radius");
	}

	.button {
		@include buttonColoring("button.default-palette");

		border-radius: 0;
		display: block;
		margin: 0;
		padding-left: _theme("spacings.small");
		padding-right: _theme("spacings.small");
		position: relative;
		border-right: 1px solid rgba(0, 0, 0, .1);

		&:first-child {
			border-radius: _component("button.border.radius") 0 0 _component("button.border.radius");
		}

		&:last-child {
			border-radius: 0 _component("button.border.radius") _component("button.border.radius") 0;
			border-right: 0;
		}

		&:hover, &:focus {
			z-index: 1;
		}

		&:focus {
			background-color: _color("primary", "600");
			box-shadow: none;
		}
	}

	// palette colors
	@each $name, $palette in _getMap("palettes") {
		&.palette-#{$name} {
			&:focus-within {
				box-shadow: 0 0 0 4px _color($name, "200");
				border-radius: _component("button.border.radius");
			}

			.button {
				@include buttonColoring($name);

				&:focus {
					background-color: _color($name, "600");
					box-shadow: none;
				}
			}
		}
	}
}

.button-group .button-group-item { // 2 classes needed to override button-group's "last-of-type"
	.button {
		border-right: 1px solid rgba(0, 0, 0, .1);
	}

	&:first-child {
		.button {
			border-radius: _component("button.border.radius") 0 0 _component("button.border.radius");
		}
	}

	&:last-child {
		.button {
			border: 0;
			border-radius: 0 _component("button.border.radius") _component("button.border.radius") 0;
		}
	}
}
