// MIXINS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

@mixin buttonColoring($palette, $suffix: '') {
	background-color: _color($palette) #{$suffix};
	color: _color($palette, 'text') #{$suffix};

	&:not([disabled], .is-disabled) {
		&:hover {
			background-color: _color($palette, 600);
			box-shadow: _theme('commons.box-shadow.xs');
		}

		&:focus {
			box-shadow: _theme('commons.box-shadow.xs'), 0 0 0 4px _color($palette, 200);
			outline: none;
			background-color: _color($palette, 600);
		}

		&:active {
			background-color: _color($palette, 800);
			box-shadow: 0 0 0 4px _color($palette, 300);
		}
	}

	.button-counter {
		background-color: _color($palette, 500);
	}
}

@mixin buttonLinkColoring($palette) {
	&:not([disabled], .is-disabled) {
		&:focus {
			box-shadow: 0 0 0 4px _color($palette, 100), inset 0 0 0 1px _color($palette, 300);
			background: _color($palette, 100);
		}
	}
}

@mixin buttonOutlineColoring($palette) {
	&:not([disabled], .is-disabled) {
		color: _color($palette);
		box-shadow: inset 0 0 0 1px _color($palette, 400);

		&:hover {
			background-color: _color($palette, 100);
			color: _color($palette);
			box-shadow: _theme('commons.elevations.elevation-1'), inset 0 0 0 1px _color($palette, 400);
		}

		&:focus {
			background-color: _color($palette, 100);
			color: _color($palette);
			box-shadow: _theme('commons.elevations.elevation-1'), 0 0 0 4px _color($palette, 100), inset 0 0 0 1px _color($palette, 400);
			outline: none;
		}

		&:active {
			background-color: _color($palette, 200);
			color: _color($palette);
			box-shadow: _theme('commons.elevations.elevation-1'), 0 0 0 4px _color($palette, 200), inset 0 0 0 1px _color($palette, 500);
		}
	}

	.button-counter {
		background-color: _color($palette, 300);
		color: _color($palette);
	}
}

// CLASSES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button {
	cursor: pointer;
	border: 0;
	border-radius: _component('button.border.radius');
	display: inline-block;
	font-family: unquote(_component('button.font.family'));
	font-size: _component('button.font-size');
	font-weight: _component('button.font-weight'); /* stylelint-disable-line font-weight-notation */
	line-height: _component('button.line-height');
	margin: _component('button.margin');
	padding: _component('button.padding');
	position: relative;
	text-decoration: none;
	transition: unquote(_component('button.transition'));
	vertical-align: baseline;
	white-space: nowrap;

	&:first-of-type {
		margin-left: 0;
	}

	&:last-of-type {
		margin-right: 0;
	}

	.lucca-icon {
		font-size: 1.25rem;
		line-height: 1;
	}
}

.button-counter {
	border-radius: 1rem;
	display: inline-block;
	font-size: _theme('sizes.smaller.font-size');
	font-weight: 600;
	height: 1.5rem;
	min-width: 1.5rem;
	margin-left: _theme('spacings.smaller');
	padding: 0 _theme('spacings.smallest');
	vertical-align: bottom;
}

.button-icon {
	height: 1.5rem;
	line-height: 1.5rem;
	font-size: 1.5rem;
	transform: translateX(-0.2rem);
	vertical-align: bottom;
}

// PALETTES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button {
	// default color
	@include buttonColoring('button.default-palette');

	// palette colors
	@each $name, $palette in _getMap('palettes') {
		&.palette-#{$name} {
			@include buttonColoring($name);
		}
	}
}

// MODS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button {
	&.mod-small {
		font-size: _component('button.small.font-size');
		line-height: _component('button.small.line-height');
		padding: _component('button.small.padding');

		.lucca-icon {
			line-height: 1;
			font-size: 1rem;
		}
	}

	&.mod-smaller {
		font-size: _component('button.smaller.font-size');
		line-height: _component('button.smaller.line-height');
		padding: _component('button.smaller.padding');

		.lucca-icon {
			line-height: 1;
			font-size: 0.875rem;
		}
	}

	&.mod-link {
		background-color: transparent;
		color: _color('text.default');

		// default color
		@include buttonLinkColoring('button.default-palette');

		// palette colors
		@each $name, $palette in _getMap('palettes') {
			&.palette-#{$name} {
				@include buttonLinkColoring($name);
			}
		}

		&:hover {
			box-shadow: none;
			background-color: _color('primary', 50);
			color: _color('primary');
		}

		&.mod-invert {
			color: _color('white');

			&:not([disabled], .is-disabled) {
				&:hover,
				&:focus {
					background-color: rgba(255, 255, 255, 0.1);
					color: _color('white');
				}

				&:focus {
					box-shadow: 0 0 0 4px rgba(0, 0, 0, 0.1);
				}
			}
		}
	}

	&.mod-more {
		padding: 0 !important;
		text-align: center;
		width: 2rem;

		&::before {
			@include makeIcon('arrow_south');
			height: 0;
			vertical-align: text-top;
		}

		.mod-small {
			width: 1.75rem;
		}
	}

	// legacy: mod-outline
	// new: mod-outlined
	&.mod-outlined,
	&.mod-outline {
		background-color: _color('white');
		box-shadow: inset 0 0 0 1px _color('grey', 400);
		color: _color('text.default');

		&:not([disabled], .is-disabled) {
			&:hover {
				background-color: _color('grey', 100);
				color: _color('text.default');
				box-shadow: _theme('commons.elevations.elevation-1'), inset 0 0 0 1px _color('grey', 400);
			}

			&:focus {
				background-color: _color('grey', 100);
				color: _color('text.default');
				box-shadow: _theme('commons.elevations.elevation-1'), 0 0 0 4px _color('primary', 100), inset 0 0 0 1px _color('primary', 400);
				outline: none;
			}

			&:active {
				background-color: _color('grey', 200);
				color: _color('text.default');
				box-shadow: _theme('commons.elevations.elevation-1'), 0 0 0 4px _color('primary', 200), inset 0 0 0 1px _color('primary', 500);
			}
		}

		// TODO delete this class ?
		&.mod-white {
			background-color: _color('white');
			color: _color('grey', 700);
		}

		// palette colors
		@each $name, $palette in _getMap('palettes') {
			&.palette-#{$name} {
				@include buttonOutlineColoring($name);
			}
		}

		.button-counter {
			background-color: _color('grey', 300);
			color: _color('text.default');
		}
	}

	&.mod-counter {
		padding-left: _theme('spacings.small');
		padding-right: _theme('spacings.small');

		&.mod-small,
		&.mod-smaller {
			.button-counter {
				height: 1rem;
				min-width: 1rem;
			}
		}
	}

	&.mod-icon {
		align-items: center;
		display: inline-flex;
		gap: _theme('spacings.smaller');
		padding-left: _theme('spacings.small');
		padding-right: _theme('spacings.small');

		&.mod-small {
			.button-icon {
				font-size: _component('button.small.font-size');
				height: _component('button.small.line-height');
				line-height: _component('button.small.line-height');
			}
		}

		&.mod-smaller {
			gap: _theme('spacings.smallest');

			.button-icon {
				font-size: _component('button.smaller.font-size');
				height: _component('button.smaller.line-height');
				line-height: _component('button.smaller.line-height');
			}
		}
	}

	&.mod-block {
		width: 100%;
	}
}

// STATES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button {
	/* Disabled */

	&.is-disabled,
	&[disabled] {
		outline: none;
		background-color: _color('grey', 100);
		color: _color('grey', 500);
		cursor: default;

		&.mod-outlined,
		&.mod-outline {
			// legacy
			background-color: _color('white');
			border-color: _color('grey', 200);
		}

		&.mod-link {
			color: _color('grey', 500);
			background-color: transparent;
		}
	}

	/* Loading */
	&.is-loading {
		@include loading(_component('button.font-size'));
		color: transparent !important;
		opacity: _theme('commons.disabled.opacity');
		pointer-events: none;
		user-select: none;

		&.mod-small {
			@include loading(_component('button.small.font-size'));
		}
	}

	/* States */
	&.is-success {
		@include buttonColoring('success', '!important');

		&::after {
			@include makeIcon('tick');
		}
	}

	&.is-error {
		@include buttonColoring('error', '!important');

		&::after {
			@include makeIcon('cross');
		}
	}

	&.is-success,
	&.is-error {
		color: transparent !important;
		pointer-events: none;
		user-select: none;

		&::after {
			color: white;
			font-size: calc(1.5 * #{_component('button.font-size')});
			height: _component('button.line-height');
			left: 0;
			bottom: 0;
			margin: auto;
			position: absolute;
			right: 0;
			top: 0;
			vertical-align: middle;
		}

		&.mod-small {
			&::after {
				font-size: calc(1.5 * #{_component('button.small.font-size')});
				height: _component('button.small.line-height');
			}
		}

		&.mod-smaller {
			&::after {
				font-size: calc(1.5 * #{_component('button.smaller.font-size')});
				height: _component('button.smaller.line-height');
			}
		}
	}
}

// WRAPPER
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

ul.button-group {
	flex-wrap: wrap;
}

.button-group {
	display: inline-flex;
	list-style-type: none;
	padding: 0;
	margin: 0;
	gap: _theme('commons.divider.width');
	border-radius: _component('button.border.radius');
	overflow: hidden;

	&:focus-within {
		box-shadow: 0 0 0 4px _color('primary', 200);
	}

	&.mod-outlined {
		background-color: _color('grey', 400);
		box-shadow: 0 0 0 1px _color('grey', 400);

		.button {
			&.mod-outline,
			&.mod-outlined {
				box-shadow: none;
			}
		}

		&:focus-within {
			box-shadow: 0 0 0 1px _color('grey', 400), 0 0 0 4px _color('primary', 200);
		}
	}

	.button {
		border-radius: 0;
		display: block;
		margin: 0;
		padding-left: _theme('spacings.small');
		padding-right: _theme('spacings.small');
		position: relative;
		flex-grow: 1;
		white-space: normal;

		&:first-child {
			border-radius: _component('button.border.radius') 0 0 _component('button.border.radius');
		}

		&:last-child {
			border-radius: 0 _component('button.border.radius') _component('button.border.radius') 0;
		}

		&:not(:first-child) {
			&.mod-outline,
			&.mod-outlined {
				margin-left: -2px;
			}
		}

		&:not([disabled], .is-disabled) {
			&:hover,
			&:focus {
				z-index: 1;
			}

			&:focus {
				background-color: _color('primary', 600);
				box-shadow: none;
			}
		}
	}

	.button-group-item {
		flex-grow: 1;

		.button {
			width: 100%;
			border-radius: 0;
		}
	}

	// palette colors
	@each $name, $palette in _getMap('palettes') {
		&.palette-#{$name} {
			&:focus-within {
				box-shadow: 0 0 0 4px _color($name, 200);
			}

			.button {
				&:not([disabled], .is-disabled) {
					@include buttonColoring($name);

					&:focus {
						background-color: _color($name, 600);
						box-shadow: none;
					}
				}
			}
		}
	}
}
