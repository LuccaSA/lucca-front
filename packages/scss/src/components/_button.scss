.button {
	cursor: pointer;
	display: inline-block;
	position: relative;
	text-decoration: none;
	border: 0;
	font-size: _component("button.sizing.default.font-size");
	line-height: _component("button.line-height");
	padding: _component("button.sizing.default.padding");
	vertical-align: middle;
	white-space: nowrap;
	margin: _component("button.margin");
	border-radius: _component("button.border.radius");
	box-shadow: unquote(_component("button.box-shadow"));
	font-family: unquote(_component("button.font.family"));
	transition: unquote(_component("button.transition"));

	&:first-of-type {
		margin-left: 0;
	}

	&:last-of-type {
		margin-right: 0;
	}

	&:hover {
		&:not([disabled]) {
			box-shadow: unquote(_component("button.hover.box-shadow"));
		}
	}

	&:focus {
		&:not([disabled]) {
			box-shadow: unquote(_component("button.focus.box-shadow"));
		}
	}

	&:active {
		outline: 0;
		box-shadow: unquote(_component("button.box-shadow"));

		&:focus {
			outline: 0;
		}
	}
}


// PALETTES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button {
	@mixin buttonColoring($palette) {
		background: _get($palette, "color");
		color: _get($palette, "text");
		&:hover, &:focus {
			background: lighten(_get($palette, "color"), 5%);
		}
		&:active {
			background: darken(_get($palette, "color"), 5%);
		}
	}

	// default color
	@include buttonColoring(_component("button.default-palette"));

	// palette colors
	@each $name, $palette in _palettes() {
		&.palette-#{$name} {
			@include buttonColoring($palette);
		}
	}
}


// SIZING
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button {
	@each $button-size, $size-obj in _component("button.sizing") {
		&.size-#{$button-size} {
			font-size: _get($size-obj, "font-size");
			padding: _get($size-obj, "padding");
		}
	}
}


// MODS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button {

	&.mod-flat {
		background: transparent;
		box-shadow: none;
		text-decoration: underline;

		&:hover, &:focus {
			&:not([disabled]) {
				box-shadow: none;
				color: _component("button.flat.color");
			}
		}
	}

	&.mod-wired {
		@mixin buttonWiredColoring($palette) {
			background: transparent;
			color: _color("text.default");

			&:hover, &:focus {
				&:not([disabled]) {
					box-shadow: 0 0 0 2px _get($palette, "color") inset;
					color: _get($palette, "color");
				}
			}
		}

		// default color
		@include buttonWiredColoring(_component("button.wired.default-palette"));

		// palette colors
		@each $name, $palette in _palettes() {
			&.palette-#{$name} {
				@include buttonWiredColoring($palette);
			}
		}
	}

	&.mod-filling {
		@mixin buttonFillingColoring($palette) {
			background: transparent;
			color: _color("text.default");

			&:hover, &:focus {
				&:not([disabled]) {
					background: _get($palette, "color");
					color: _get($palette, "text");
				}
			}
		}

		// default color
		@include buttonFillingColoring(_component("button.filling.default-palette"));

		// palette colors
		@each $name, $palette in _palettes() {
			&.palette-#{$name} {
				@include buttonFillingColoring($palette);
			}
		}
	}

	&.mod-link {
		background: transparent;
		box-shadow: none;
		color: _color("text.link");
		padding: 0;
		text-decoration: underline;
		vertical-align: baseline;

		&:hover, &:focus, &:active {
			background: transparent;
			box-shadow: none;
			color: lighten(_color("text.link"), 15%);
		}
	}
}


// STATES
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button {

	/* Disabled */

	&[disabled] {
		cursor: default;
		opacity: _theme("commons.disabled.opacity");
	}

	&.is-disabled {
		opacity: _theme("commons.disabled.opacity");
		pointer-events: none;
	}

	/* Loading */

	&.is-loading {
		@include loading(_component("button.sizing.default.font-size"));
		color: transparent;
		opacity: _theme("commons.disabled.opacity");
		pointer-events: none;
		user-select: none;

		// Sizing
		@each $button-size, $size-obj in _component("button.sizing") {
			&.size-#{$button-size} {
				@include loading(_get($size-obj, "font-size"));
			}
		}
	}

	/* Success */

	&.is-success {
		background: _color("success");
		color: transparent;
		pointer-events: none;
		user-select: none;

		&::after {
			@include makeIcon("tick");
			bottom: 0;
			color: white;
			font-size: 1.5 * _component("button.sizing.default.font-size");
			height: 1.5 * _component("button.sizing.default.font-size");
			left: 0;
			margin: auto;
			position: absolute;
			right: 0;
			top: 0;
			vertical-align: middle;
		}

		// Sizing
		@each $button-size, $size-obj in _component("button.sizing") {
			&.size-#{$button-size} {
				&::after {
					font-size: 1.5 * _get($size-obj, "font-size");
					height: 1.5 * _get($size-obj, "font-size");
				}
			}
		}
	}

	/* Error */

	&.is-error {
		background: _color("error");
		color: transparent;
		pointer-events: none;
		user-select: none;

		&::after {
			@include makeIcon("cross");
			bottom: 0;
			color: white;
			font-size: 1.5 * _component("button.sizing.default.font-size");
			height: 1.5 * _component("button.sizing.default.font-size");
			left: 0;
			margin: auto;
			position: absolute;
			right: 0;
			top: 0;
			vertical-align: middle;
		}

		// Sizing
		@each $button-size, $size-obj in _component("button.sizing") {
			&.size-#{$button-size} {
				&::after {
					font-size: 1.5 * _get($size-obj, "font-size");
					height: 1.5 * _get($size-obj, "font-size");
				}
			}
		}
	}
}

// WRAPPER
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.button-group {
	display: flex;
	margin: _component("button.margin");

	.button {
		border-radius: 0;
		display: block;
		margin: 0 0 0 -1px;
		position: relative;
	}

	> .button {

		&:first-child {
			border-radius: _component("button.border.radius") 0 0 _component("button.border.radius");
		}

		&:last-child {
			border-radius: 0 _component("button.border.radius") _component("button.border.radius") 0;
		}

		&:hover, &:focus {
			z-index: 1;
		}
	}
}

.button-group-item {

	&:first-child {
		.button {
			border-radius: _component("button.border.radius") 0 0 _component("button.border.radius");
		}
	}

	&:last-child {
		.button {
			border-radius: 0 _component("button.border.radius") _component("button.border.radius") 0;
		}
	}
}

.button-group-input {
	display: none;

	&:checked + .button {
		background: _component("button.checked.color");
		color: _component("button.checked.text");
		z-index: 1;
	}
}
