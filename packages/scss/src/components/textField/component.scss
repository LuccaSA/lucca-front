@use '@lucca-front/scss/src/components/formLabel/exports' as formLabel;
@use '@lucca-front/scss/src/components/inlineMessage/exports' as inlineMessage;
@use '@lucca-front/scss/src/commons/utils/a11y';
@use '@lucca-front/icons/src/icon/exports' as icon;

@mixin component($atRoot: 'without: rule') {
	display: flex;
	align-items: stretch;
	border-radius: var(--commons-borderRadius-M);
	background-color: var(--component-textField-background);
	box-shadow: 0 0 0 1px var(--component-textField-border);

	&:has(.textField-input-value:focus-visible) {
		@include a11y.focusVisible($offset: 3px);
	}

	.textField-input-affix-toggle {
		pointer-events: auto;
		width: 1.75rem;
		height: 1.75rem;
		color: var(--palettes-neutral-600);
	}

	@at-root ($atRoot) {
		.textField-input {
			display: flex;
			align-items: center;
			width: 100%;
			border-radius: var(--commons-borderRadius-M);
			background-color: var(--component-textField-background);
			position: relative;

			&:hover {
				--component-textField-border: var(--palettes-neutral-400);
			}

			&:has(.textField-input-affix-icon) {
				--component-textField-affix-padding: 2.5rem;
			}

			&:has(.textField-input-affix-toggle) {
				--component-textField-affix-padding: 3rem;
			}

			&:has(.textField-input-affix-clear) {
				--component-textField-affix-padding: 2rem;

				&:has(.textField-input-affix-icon) {
					--component-textField-affix-padding: 4rem;
				}

				&:has(.textField-input-affix-toggle) {
					--component-textField-affix-padding: 4.5rem;
				}
			}
		}

		.textField-input-value {
			border: 0;
			outline: 0;
			line-height: var(--component-textField-lineHeight);
			font-size: var(--component-textField-fontSize);
			width: 100%;
			padding: var(--component-textField-padding) var(--component-textField-affix-padding) var(--component-textField-padding)
				var(--component-textField-padding);
			background-color: transparent;
			color: var(--component-textField-color);

			&::placeholder {
				color: var(--component-textField-placeholder);
			}

			&:is(textarea) {
				resize: vertical;
				min-height: calc(2lh + var(--component-textField-padding) * 2);

				&:not([rows]) {
					height: calc(3lh + var(--component-textField-padding) * 2);
				}
			}
		}

		.textField-input-affix {
			display: inline-flex;
			align-items: center;
			gap: var(--pr-t-spacings-100);
			position: absolute;
			right: var(--pr-t-spacings-100);
			pointer-events: none;
		}

		.textField-input-affix-icon {
			@include icon.M;
			color: var(--palettes-neutral-600);
			pointer-events: none;
		}

		.textField-input-affix-clear {
			pointer-events: auto;
		}

		.textField-prefix {
			display: flex;
			padding-left: var(--component-textField-padding);
			align-items: center;
			color: var(--component-textField-prefix-color);
			line-height: var(--component-textField-lineHeight);
			font-size: var(--component-textField-fontSize);
			border-top-left-radius: var(--commons-borderRadius-M);
			border-bottom-left-radius: var(--commons-borderRadius-M);

			~ .textField-input {
				border-top-left-radius: 0;
				border-bottom-left-radius: 0;
			}
		}

		.textField-suffix {
			display: flex;
			padding-right: var(--component-textField-padding);
			align-items: center;
			color: var(--component-textField-prefix-color);
			line-height: var(--component-textField-lineHeight);
			font-size: var(--component-textField-fontSize);
			border-top-right-radius: var(--commons-borderRadius-M);
			border-bottom-right-radius: var(--commons-borderRadius-M);
			order: 1;
			flex-shrink: 0;

			~ .textField-input {
				border-top-right-radius: 0;
				border-bottom-right-radius: 0;
			}
		}
	}
}
