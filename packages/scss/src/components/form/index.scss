@use '@lucca-front/scss/src/commons/config';
@use '@lucca-front/scss/src/components/tag/exports' as tag;
@use '@lucca-front/scss/src/components/formLabel/exports' as formLabel;
@use '@lucca-front/scss/src/components/inlineMessage/exports' as inlineMessage;

@use 'exports' as *;

.form {
	@layer components {
		@include component;
	}

	@layer mods {
		&.mod-maxWidth {
			@include maxWidth;
		}
	}
}

.form-fieldset {
	@layer mods {
		&.mod-inline {
			@include inline;
		}

		&.mod-S {
			@include S;
		}

		&:has(~ .box) {
			.form-field {
				&.mod-withArrow {
					@include withArrow;

					&.mod-S {
						@include withArrowS;
					}
				}
			}
		}
	}

	@layer states {
		&:has(.radioField-input[aria-invalid='true']),
		&:has(.checkboxField-input[aria-invalid='true']) {
			@include legendInvalid;
		}
	}
}

.form-field {
	@layer mods {
		&.mod-S {
			@include S;
		}

		&.mod-XS {
			@include XS;
		}

		@each $value in config.$fieldsWidth {
			&.mod-width#{$value} {
				@include width($value);
			}
		}

		&.mod-checkable,
		&:has(.radioField),
		&:has(.checkboxField),
		&:has(.switchField) {
			@include checkable;
		}
	}

	@layer states {
		&:not(lu-form-field) {
			&:has(
					.textField-input-value[aria-invalid='true'],
					.timePicker-fieldset-group-textfield-input[aria-invalid='true'],
					.simpleSelect-field-input[aria-invalid='true'],
					.multipleSelect-displayer-search[aria-invalid='true']
				) {
				@include invalid;
			}
		}

		&:has(.radioField-input:disabled),
		&:has(.checkboxField-input:disabled),
		&:has(.switchField-input:disabled) {
			.formLabel {
				@include formLabel.disabled;
			}

			.inlineMessage {
				@include inlineMessage.disabled;
			}
		.formLabel-tag {
			@include tag.disabled;
		}

		.inlineMessage {
			@include inlineMessage.disabled;
		}
	}

	@layer mods {
		&.mod-withArrow {
			@include withArrow;

			&.mod-S {
				@include withArrowS;
			}
		}
	}
}

// deprecated

// stylelint-disable no-duplicate-selectors -- deprecated
.form {
	@layer components {
		@include vars;
	}
}

.form-group {
	@layer components {
		@include vars;
		@include componentDeprecated;
	}
}

.form-group-line-col {
	@layer mods {
		&[class*='mod-overlay'] {
			@include overlay;
		}

		&.mod-overlay-top {
			@include overlayTop;
		}

		@each $breakpoint, $value in config.$breakpoints {
			@for $i from 1 through 12 {
				&.mod-#{$i}\@mediaMin#{$breakpoint} {
					@include breakpoint($breakpoint, $i);
				}
			}
		}
	}
}

.form-group-label,
.radiosfield-label,
.checkboxesfield-label,
.textfield-label {
	@layer states {
		&:is(.is-required, .required) {
			@include required;
		}
	}
}

.checkboxesfield.mod-framed,
.radiosfield.mod-framed,
.form.mod-framed .fieldsetWrapper {
	@layer mods {
		@include framed;
	}
}

.checkboxesfield.mod-framed,
.radiosfield.mod-framed {
	@layer mods {
		margin-block-start: 0;
		padding-block: var(--components-field-framed-side-padding) var(--components-field-framed-bottom-padding);
		padding-inline: var(--components-field-framed-side-padding);
	}
}

.form-group-label {
	@layer states {
		&.is-required {
			&:not(:empty) {
				&::after {
					@extend %isRequired;
				}
			}
		}
	}
}

.radiosfield-label,
.checkboxesfield-label,
.textfield-label {
	@layer states {
		&.is-required {
			&:not(:empty) {
				&::after {
					@extend %isRequired;
				}
			}
		}
	}
}
// stylelint-enable
