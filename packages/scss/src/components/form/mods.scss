@use 'sass:math';

@use '../../commons/utils/form';
@use '../../commons/utils/media';
@use '../../commons/utils/loading';

@mixin overlay {
	&:focus-within {
		.textfield-input {
			box-shadow: form.fakeBorderOverlay(var(--components-field-framed-color)), 0 0 0 4px var(--components-field-framed-color50);
			z-index: 4;
		}

		.is-error {
			.textfield-input {
				background-color: var(--colors-white-color) !important;
			}
		}

		.is-warning {
			.textfield-input {
				background-color: #444242;
				box-shadow: form.fakeBorderOverlay(var(--palettes-warning-700)), 0 0 0 4px var(--palettes-warning-50);
			}
		}

		.is-valid,
		.is-success {
			.textfield-input {
				background-color: var(--colors-white-color);
				box-shadow: form.fakeBorderOverlay(var(--palettes-success-700)), 0 0 0 4px var(--palettes-success-50);
			}
		}
	}

	.textfield,
	.checkbox,
	.radio,
	.select {
		+ .textfield,
		+ .checkbox,
		+ .radio,
		+ .select {
			position: absolute;
			bottom: 0;
			right: 0;
			z-index: 10;
			padding: var(--components-field-framed-label-top-offset) var(--components-field-framed-side-padding)
				var(--components-field-framed-bottom-padding);
		}
	}
}

@mixin overlayTop {
	.textfield,
	.checkbox,
	.radio,
	.select {
		+ .textfield,
		+ .checkbox,
		+ .radio,
		+ .select {
			top: 0;
			bottom: auto;
		}
	}
}

@mixin breakpoint($breakpoint, $i) {
	flex-basis: 100%;
	flex-grow: 0;

	@include media.largerThan($breakpoint) {
		flex-basis: (math.div(100%, 12) * $i);
	}
}

@mixin framed {
	margin-bottom: 0;
	background-color: _color('white');
	padding: 0;
	box-shadow: form.fakeBorderOverlay(var(--palettes-grey-200));
	transition: background-color var(--commons-animations-durations-standard);
	margin-bottom: 0 !important;

	&::before,
	&::after {
		content: ' ';
		display: table;
	}

	&::after {
		clear: both;
	}

	&:not(.is-disabled, :disabled, .is-error, .is-success, .is-valid, .is-warning, .is-invalid) {
		&:hover,
		&:focus {
			position: relative;
			z-index: 1;
			background-color: _color('white');
			box-shadow: form.fakeBorderOverlay(var(--palettes-grey-600));
		}

		&:focus {
			z-index: 4;
			box-shadow: form.fakeBorderOverlay(var(--palettes-grey-600)), 0 0 0 4px var(--palettes-grey-50);
		}
	}

	.radiosfield,
	.checkboxesfield {
		margin-top: var(--components-field-framed-side-padding);
		padding: 0 var(--components-field-framed-side-padding) var(--components-field-framed-bottom-padding);
	}

	&.is-error {
		@include fieldFramedState('error');
	}

	&.is-warning {
		@include fieldFramedState('warning');
	}

	&.is-valid,
	&.is-success {
		@include fieldFramedState('success');
	}

	&.is-disabled,
	&.is-readonly {
		background-color: var(--commons-disabled-background);
	}

	&.is-loading {
		@include loading.spinner;

		&::before,
		&::after {
			left: auto !important;
			bottom: auto !important;
			right: var(--components-field-framed-side-padding) !important;
			top: var(--components-field-framed-side-padding) !important;
		}
	}
}

@mixin fieldState($fieldname, $state) {
	&:not(:disabled, .is-disabled) {
		background-color: var(--palettes-#{$state}-50);

		~ .#{$fieldname}-label,
		~ .#{$fieldname}-suffix {
			color: var(--palettes-#{$state}-700);
		}

		&::placeholder {
			color: var(--palettes-#{$state}-400);
		}

		&:focus {
			&::placeholder {
				color: var(--palettes-#{$state}-300);
			}
		}

		&:focus ~ .#{$fieldname}-label,
		&.is-focused ~ .#{$fieldname}-label {
			color: var(--palettes-#{$state}-700);
		}

		&:focus {
			background-color: white;
			box-shadow: 0 0 0 4px var(--palettes-#{$state}-200), 0 0 0 1px var(--palettes-#{$state}-700) inset;
		}

		@if ($state == 'error') {
			box-shadow: 0 0 0 1px var(--palettes-#{$state}-700);
		}
	}
}

@mixin fieldError($fieldname) {
	@include fieldState($fieldname, 'error');
}

@mixin fieldMaterialState($fieldname, $state) {
	&:focus {
		box-shadow: 0 2px 0 0 var(--palettes-#{$state}-700);
	}

	@if ($state == 'error') {
		box-shadow: 0 2px 0 0 var(--palettes-#{$state}-700);
	}

	~ .#{$fieldname}-label {
		color: var(--palettes-#{$state}-700);
	}

	&:focus ~ .#{$fieldname}-label {
		color: var(--palettes-#{$state}-700);
	}
}

@mixin fieldMaterialError($fieldname) {
	@include fieldMaterialState($fieldname, 'error');
}

@mixin fieldFramedState($state) {
	@if ($state == 'error') {
		z-index: 3;
		box-shadow: fakeborderoverlay(var(--palettes-#{$state}-700));
		background-color: var(--palettes-#{$state}-50);

		&:focus-within,
		&:hover {
			z-index: 4;
		}
	}

	&.mod-search,
	&.mod-autocomplete,
	&.mod-select {
		&::after {
			color: var(--palettes-#{$state}-700);
		}
	}

	.radiosfield-label,
	.checkboxesfield-label,
	.textfield-label {
		color: var(--palettes-#{$state}-700);
	}

	.textfield-input {
		&:hover {
			background-color: var(--palettes-#{$state}-50) !important;
		}

		&:focus {
			background-color: white !important;
			box-shadow: fakeborderoverlay(var(--palettes-#{$state}-700)), 0 0 0 4px var(--palettes-#{$state}-50) !important;
		}

		&::placeholder {
			color: var(--palettes-#{$state}-300);
		}

		@if ($state == 'error') {
			background-color: var(--palettes-#{$state}-50) !important;
			box-shadow: fakeborderoverlay(var(--palettes-#{$state}-700)) !important;

			&:hover {
				background-color: var(--palettes-#{$state}-100) !important;
			}

			&:focus {
				box-shadow: fakeborderoverlay(var(--palettes-#{$state}-700)), 0 0 0 4px var(--palettes-#{$state}-50) !important;
				background-color: white !important;
			}
		}
	}

	&:hover {
		background-color: var(--palettes-#{$state}-50);

		.textfield-messages,
		.radiosfield-messages,
		.checkboxesfield-messages {
			transform: translateY(100%);
		}
	}

	&:focus-within {
		background-color: white;
		box-shadow: fakeborderoverlay(var(--palettes-#{$state}-700)), 0 0 0 4px var(--palettes-#{$state}-50);

		.textfield-messages,
		.radiosfield-messages,
		.checkboxesfield-messages {
			transform: translateY(100%);
		}
	}
}

@mixin fieldFramedError($fieldname) {
	@if ($fieldname == 'textfield') {
		&:not(:disabled) {
			z-index: 3;
			box-shadow: fakeborderoverlay(var(--palettes-error-700));
			background-color: var(--palettes-#{$state}-50);
			transition: background-color _theme('commons.animations.durations.fast');

			~ .textfield-label {
				color: var(--palettes-error-700);
			}

			&:hover {
				z-index: 4;
				background-color: var(--palettes-error-100);

				~ .textfield-messages {
					transform: translateY(100%);
				}
			}

			&:focus {
				background-color: white;
				box-shadow: fakeborderoverlay(var(--palettes-error-700)), 0 0 0 4px var(--palettes-error-50);

				~ .textfield-messages {
					transform: translateY(100%);
				}
			}
		}
	}

	@if ($fieldname == 'radiosfield') {
		&:not(:disabled) {
			~ .radio-label,
			~ .checkbox-label {
				&::before {
					border-color: var(--palettes-error-700);
				}
			}
		}
	}
}

@mixin fieldMaterialFilled($fieldname) {
	~ .#{$fieldname}-label {
		font-size: --var(--sizes-small-font-size);
		top: 0;
	}
}

%isRequired {
	color: var(--palettes-error-700);
	display: inline-block;
	margin-left: 0.2em;

	@supports (content: '*' / '') {
		content: '*' / '';
	}

	@supports not (content: '*' / '') {
		content: '*';
	}
}
