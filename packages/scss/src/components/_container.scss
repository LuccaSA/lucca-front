.container {
	margin: _component("container.margin-top") auto _component("container.margin-bottom");
	max-width: _component("container.max-width");
	padding: 0 .5rem;

	@each $bp-name, $bp-obj in $breakpoints {
		@media only screen and (min-width: map-get($bp-obj, breakAt)) {
			width: map-get($bp-obj, breakAt) -  map-get($bp-obj, spacing);
		}
	}

	@media (max-width: _component("container.min-width")) {
		width: 100%;
	}

	&:last-child {
		margin-bottom: 0;
		padding-bottom: _component("container.margin-bottom");
	}
}


// MODS
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.container {
	@each $bp-name, $bp-obj in $breakpoints {
		&.mod-#{$bp-name} {
			max-width: map-get($bp-obj, breakAt) - map-get($bp-obj, spacing);
		}
	}
}


// LAYOUT WITH ASIDE
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

.navSide ~ .main-content {
	.container {
		@each $bp-name, $bp-obj in $breakpoints {
			@media only screen and (min-width: map-get($bp-obj, breakAt)) {
				width: calc(#{map-get($bp-obj, breakAt)} - #{map-get($bp-obj, spacing)} - #{_theme("components.navSide.width")});
			}
		}

		@media (max-width: _theme("breakpoints.sm.breakAt")) {
			width: calc(100% - _theme("components.navSide.width"));
		}
	}
}

.navSide.mod-compact ~ .main-content {
	.container {
		@each $bp-name, $bp-obj in $breakpoints {
			@media only screen and (min-width: map-get($bp-obj, breakAt)) {
				width: calc(#{map-get($bp-obj, breakAt)} - #{map-get($bp-obj, spacing)} - #{_theme("components.navSide.compact.width")});
			}
		}

		@media (max-width: _theme("breakpoints.sm.breakAt")) {
			width: calc(100% - _theme("components.navSide.compact.width"));
		}
	}
}
