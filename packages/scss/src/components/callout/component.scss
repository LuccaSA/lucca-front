@use '@lucca-front/icons/src/commons/utils/icon';
@use '@lucca-front/scss/src/commons/utils/reset';
@use '@lucca-front/scss/src/commons/utils/a11y';

@mixin component($atRoot: 'without: rule') {
	align-items: flex-start;
	border-radius: var(--commons-borderRadius-L);
	background-color: var(--palettes-50, var(--palettes-neutral-50));
	color: var(--palettes-neutral-800);
	box-shadow: 0 0 0 var(--commons-divider-width) var(--palettes-300, var(--palettes-neutral-300));
	gap: 0.75rem;
	padding: var(--spacings-XS) 0.75rem;
	position: relative;

	&:not([hidden]) {
		display: flex;
	}

	a,
	.link {
		--commons-text-link-color: var(--palettes-neutral-800);
		--commons-text-link-hover: var(--palettes-neutral-700);
	}

	@at-root ($atRoot) {
		.callout-content {
			flex: 1;
			display: flex;
			flex-direction: column;
			gap: var(--spacings-XXS);
		}

		.callout-content-title {
			font-weight: 600;
		}

		.callout-icon {
			display: inline-flex;
			color: var(--palettes-700, var(--palettes-neutral-700));

			.lucca-icon {
				font-size: var(--sizes-M-lineHeight);
			}
		}

		.callout-kill {
			@include reset.button;

			color: currentColor;
			transition-duration: var(--commons-animations-durations-fast);
			transition-property: background-color;
			width: auto;

			&:focus-visible {
				@include a11y.focusVisible($borderRadius: var(--commons-borderRadius-M));
			}

			&::before {
				@include icon.generate('sign_close');

				font-size: var(--sizes-S-lineHeight);
			}
		}
	}
}
