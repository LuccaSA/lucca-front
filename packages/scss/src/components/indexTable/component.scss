@use 'vars' as *;
@use '@lucca-front/scss/src/commons/utils/a11y';

@mixin component($atRoot: 'without: rule') {
    position: relative;
    display: table;
    width: 100%;
    padding: var(--components-indexTable-padding);
    padding-top: 0;
    border-collapse: separate;
    border-spacing: 0 var(--components-indexTable-row-spacing);
    border-radius: var(--components-indexTable-border-radius);
    background-color: var(--components-indexTable-background-color);
    color: var(--palettes-neutral-800);

    @at-root ($atRoot) {
        .indexTable-head {
            display: table-header-group;
            vertical-align: bottom;
        }

        .indexTable-body {
            display: table-row-group;
        }

        //There might be more than one footer
        .indexTable-foot {
            display: table-row-group;
            &:is(tfoot) {
                display: table-footer-group;
            }
        }

        .indexTable-head-row,
        .indexTable-body-row,
        .indexTable-foot-row {
            display: table-row;
        }

        .indexTable-body-row {
            border-radius: var(--commons-borderRadius-L);
            cursor: pointer;
        }

        .indexTable-head-row-transparentCell,
        .indexTable-body-row-transparentCell,
        .indexTable-head-row-cell,
        .indexTable-body-row-cell,
        .indexTable-foot-row-cell {
            display: table-cell;
            vertical-align: middle;
            text-align: left;
        }

        .indexTable-head-row-cell {
            padding: var(--spacings-XS) var(--components-indexTable-cell-padding);
            color: var(--palettes-neutral-600);
            font-weight: 400;
        }

        .indexTable-head-row-transparentCell,
        .indexTable-body-row-transparentCell {
            padding-right: var(--components-indexTable-cell-padding);
        }

        .indexTable-body-row-cell {
            position: relative;
            z-index: var(--components-indexTable-cell-z-index, 1);
            padding: var(--components-indexTable-cell-padding);
            border-radius: var(--components-table-cardList-cell-border-radius);

            // apparence of the first cell with a card apparence.
            // we do this because there migh be one or two cells before without background and containing a checkbox
            --components-indexTable-shadow-mask: 0 0 0 0;
            --components-indexTable-cell-border-radius: var(--components-indexTable-cell-border-radius-default) 0 0 var(--components-indexTable-cell-border-radius-default);
            --components-indexTable-cell-inset-x-left: var(--components-indexTable-cell-inset-x);
            --components-indexTable-outline-border-width: var(--components-indexTable-outline-border-width-default) 0 var(--components-indexTable-outline-border-width-default) var(--components-indexTable-outline-border-width-default);
            --components-indexTable-outline-border-radius: var(--components-indexTable-outline-border-radius-default) 0 0 var(--components-indexTable-outline-border-radius-default);

            // apparence of the nexts cells
            ~ .indexTable-body-row-cell {
                --components-indexTable-shadow-mask: var(--components-indexTable-shadow-mask-default);
                --components-indexTable-cell-border-radius: 0;
                --components-indexTable-cell-inset-x-left: 0px;
                --components-indexTable-outline-border-width: var(--components-indexTable-outline-border-width-default) 0;
                --components-indexTable-outline-border-radius: 0;
            }

            // apparence of the last cell with a card apparence
            &:last-child {
                --components-indexTable-cell-border-radius: 0 var(--components-indexTable-cell-border-radius-default) var(--components-indexTable-cell-border-radius-default) 0;
                --components-indexTable-cell-inset-x-right: var(--components-indexTable-cell-inset-x);
                --components-indexTable-outline-border-width: var(--components-indexTable-outline-border-width-default) var(--components-indexTable-outline-border-width-default) var(--components-indexTable-outline-border-width-default) 0;
                --components-indexTable-outline-border-radius: 0 var(--components-indexTable-outline-border-radius-default) var(--components-indexTable-outline-border-radius-default) 0;
            }

            &::before,
            &::after {
                content: '';
                position: absolute;
                z-index: -1;
                transition-duration: var(--commons-animations-durations-standard);
            }

            // the "card" apparence is put on a ::before pseudo element
            &::before {
                inset: var(--components-indexTable-cell-inset-y, 0) var(--components-indexTable-cell-inset-x-right, 0) var(--components-indexTable-cell-inset-y, 0) var(--components-indexTable-cell-inset-x-left, 0);
                border-radius: var(--components-indexTable-cell-border-radius, 0);
                background-color: var(--components-indexTable-cell-background-color, var(--colors-white-color));
                // shadow-mask : since the card apparence is put on every cell (du to a Safari bug), we need to hide the left part of the box shadow for everycell exept the first one.
                // We do this with a rectangular white box-shadow above it.
                box-shadow: var(--components-indexTable-shadow-mask), var(--components-indexTable-cell-shadow, var(--components-indexTable-cell-shadow-default));
                transition-property: inset, box-shadow, background-color, background-image;
            }

            // the focus outline, when needed
            &::after {
                inset: calc(var(--components-indexTable-cell-inset-y, 0px) - var(--components-indexTable-outline-offset)) calc(var(--components-indexTable-cell-inset-x-right, 0px) - var(--components-indexTable-outline-offset))
                    calc(var(--components-indexTable-cell-inset-y, 0px) - var(--components-indexTable-outline-offset)) calc(var(--components-indexTable-cell-inset-x-left, 0px) - var(--components-indexTable-outline-offset));
                border-radius: var(--components-indexTable-outline-border-radius);
                border-width: var(--components-indexTable-outline-border-width);
                border-style: solid;
                border-color: var(--components-indexTable-outline-color);
                opacity: var(--components-indexTable-outline-opacity, 0);
                transition-property: opacity;
            }
        }

        .indexTable-body-row-cell-action {
            @include a11y.mask;
        }

        .indexTable-body-row-cellTitle {
            display: flex;
            align-items: center;
            gap: var(--spacings-XXS);
        }

        .indexTable-body-row-cellTitle-button .lucca-icon {
            transition: transform var(--commons-animations-durations-fast) ease;
        }

        .indexTable-body-row-cellTitle-title {
            font-weight: 600;
        }

        .indexTable-foot-row-cell {
            padding: var(--spacings-XS) var(--components-indexTable-cell-padding);
            text-align: right;
        }

        //A wrapper is needed for mass selection and pagination that are undex an indexTable
        .indexTableWrapper {
            @include vars;
            display: grid;
            grid-template-areas: 'table table' 'massSelection pagination';
            padding: var(--components-indexTable-cell-padding) var(--components-indexTable-cell-padding) var(--spacings-XXS);
            gap: var(--spacings-XS) var(--components-indexTable-cell-padding);
            border-radius: var(--components-indexTable-border-radius);
            background-color: var(--components-indexTable-background-color);
            .indexTable {
                grid-area: table;
                padding: 0;
            }
            .pagination {
                grid-area: pagination;
                padding: var(--spacings-XXS) 0;
            }
            .indexTable_massSelection {
                grid-area: massSelection;
                display: flex;
                align-items: center;
                padding-left: var(--spacings-XS);
                gap: var(--spacings-XS);
            }
        }
    }
}
