@use 'vars' as *;
@use '@lucca-front/scss/src/commons/utils/media';
@mixin selectable {
    .indexTable-head-row-transparentCell,
    .indexTable-body-row-transparentCell {
        width: var(--components-indexTable-row-cell-transparent-width);
    }

    .indexTable-body-row {
        &:is(:focus-within, :hover) {
            outline: none;
        }
        &:not(:hover):has(.checkbox-input:checked) {
            --components-indexTable-cell-background-color: var(--palettes-product-50);
            --components-indexTable-cell-shadow: 0 0 0 var(--commons-divider-width) var(--palettes-product-700);
            --components-indexTable-shadow-mask-default: -10px 0px 0px 0px var(--palettes-product-50);
            //selected stackable row : we change the stacks background color
            --components-indexTable-stack-svg: var(--components-indexTable-stack-svg-selected);
        }
    }
}

@mixin stackable {
    .indexTable-body-row {
        &.mod-stack2,
        &.mod-stack3 {
            --components-indexTable-row-stack-border-bottom: var(--components-indexTable-stack2-row-spacing);
            --components-indexTable-row-stack2-background-image: var(--components-indexTable-stack-svg);
        }

        &.mod-stack3 {
            --components-indexTable-row-stack-border-bottom: var(--components-indexTable-stack3-row-spacing);
            --components-indexTable-row-stack3-background-image: var(--components-indexTable-stack-svg);
            // Different border-bottom with between stack2 and stack3 mess up background bottom position.
            // this css vars is here to reset this
            --components-indexTable-row-stack3-row-background-position-fix: calc(
                var(--components-indexTable-stack3-row-spacing) - var(--components-indexTable-stack2-row-spacing)
            );
        }
    }

    .indexTable-body-row-cell {
        // because we can't set an individual spacing for each row, transparent border are used for this
        border-bottom: var(--components-indexTable-row-stack-border-bottom) solid transparent;

        // apparence of the first cell with a card apparence.
        // we do this because there migh be one or two cells before without background and containing a checkbox
        --components-indexTable-row-stack2-background-position: left -8px bottom calc(-9px + var(--components-indexTable-row-stack3-row-background-position-fix, 0px));
        --components-indexTable-row-stack3-background-position: left -4px bottom -9px;

        // apparence of the nexts cells
        & ~ .indexTable-body-row-cell {
            --components-indexTable-row-stack2-background-position: left -20px bottom calc(-9px + var(--components-indexTable-row-stack3-row-background-position-fix, 0px));
            --components-indexTable-row-stack3-background-position: left -20px bottom -9px;
        }

        // apparence of the last cell with a card apparence
        &:last-child {
            --components-indexTable-row-stack2-background-position: right -8px bottom calc(-9px + var(--components-indexTable-row-stack3-row-background-position-fix, 0px));
            --components-indexTable-row-stack3-background-position: right -1px bottom -9px;
        }

        // stack apparence
        &::after {
            content: '';
            position: absolute;
            inset: 0 var(--components-indexTable-cell-inset-x-right, 0)
                calc(var(--components-indexTable-row-stack-border-bottom) * -1)
                var(--components-indexTable-cell-inset-x-left, 0);
            z-index: -2;
            background-image: var(--components-indexTable-row-stack2-background-image, none),
                var(--components-indexTable-row-stack3-background-image, none);
            background-position: var(--components-indexTable-row-stack2-background-position, 0 0),
                var(--components-indexTable-row-stack3-background-position, 0 0);
            background-repeat: no-repeat, no-repeat;
        }
    }
}

@mixin stickyHeader {
    .indexTable-head {
        position: sticky;
        top: 0;
        z-index: 2;
        background-color: var(--components-indexTable-background-color);
    }

    //hide box-shadow from underneath rows that slighly appear on edges of the sticky header when scrolling
    .indexTable-head-row-cell {
        position: relative;
        &::before {
            content: '';
            position: absolute;
            inset: 0 var(--components-indexTable-hover-offset-x);
            z-index: -1;
            background-color: var(--components-indexTable-background-color);
        }
    }
}

@mixin mod-withPagination {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
    & + .pagination {
        @include vars;
        padding: 0 var(--spacings-S) 0.75rem 0;
        border-bottom-left-radius: var(--components-indexTable-border-radius);
        border-bottom-right-radius: var(--components-indexTable-border-radius);
        background-color: var(--components-indexTable-background-color);
    }
}

@mixin responsiveCardList {
    @include media.max('S') {
        display: flex;
        flex-direction: column;
        gap: var(--components-indexTable-row-spacing);
        padding-top: var(--components-indexTable-padding);

        .indexTable-head {
            display: none;
        }

        .indexTable-body {
            display: flex;
            flex-direction: column;
            gap: var(--components-indexTable-row-spacing-responsive);
        }

        .indexTable-body-row {
            position: relative;
            display: grid;
            // Grid layout by default is a basic one column template.
            // The user can override this and build a specific layout by using --components-indexTable-row-responsive-grid-template-columns, --components-indexTable-row-responsive-grid-template-rows and --components-indexTable-row-responsive-grid-template-areas
            grid-template-columns: var(--components-indexTable-row-responsive-grid-template-columns, 1fr);
            grid-template-rows: var(--components-indexTable-row-responsive-grid-template-rows, none);
            grid-auto-rows: auto;
            grid-template-areas: var(--components-indexTable-row-responsive-grid-template-areas, none);
            align-items: center;
            padding: var(--components-indexTable-row-spacing-responsive) 0;
        }

        .indexTable-body-row-cell {
            position: static;
            grid-column-start: 1;
            padding-top: 0;
            padding-bottom: 0;
            &::before {
                border-radius: var(--components-indexTable-border-radius);
            }

            ~ .indexTable-body-row-cell {
                &::before {
                    display: none;
                }
            }
        }

        .indexTable-body-row-cell-content[data-label] {
            display: flex;
            flex-direction: column;
            margin-top: var(--spacings-XXS);
            &::before {
                content: attr(data-label);
                font-weight: 600;
            }
        }
    }
}

@mixin selectableResponsiveCardList {
    @include media.max('S') {
        .indexTable-body-row {
            grid-template-columns: min-content var(--components-indexTable-row-responsive-grid-template-columns, 1fr);
            // Padding add too much vertical spacing on title rows
            &:not(:has(.indexTable-body-row-cell)) {
                padding: 0;
            }
        }
        .indexTable-body-row-transparentCell {
            width: auto;
            // Nested cell offset
            &[colspan='2'] + .indexTable-body-row-transparentCell {
                padding-left: var(--components-indexTable-row-cell-transparent-width);
            }
        }
        .indexTable-body-row-cell {
            --components-indexTable-cell-inset-x-left: var(--components-indexTable-row-cell-transparent-width);
            grid-column-start: 2;
        }
    }
}

@mixin stackableResponsiveCardList {
    @include media.max('S') {
        .indexTable-body-row-cell {
            &::after {
                --components-indexTable-cell-inset-x-right: 50%;
            }
            ~ .indexTable-body-row-cell:not(:last-child)::after {
                display: none;
            }
            //placeholder. Need to find another way to do this
            &:last-child {
                &::after {
                    top: 100%;
                    --components-indexTable-cell-inset-x-right: 3px;
                    --components-indexTable-cell-inset-x-left: 50%;
                    border-top: 2px solid #acbbd733;
                }
            }
        }
    }
}
