@use 'vars' as *;
@use '@lucca-front/scss/src/commons/utils/media';
@use '@lucca-front/scss/src/commons/config';
@mixin selectable {
    .indexTable-head-row-transparentCell,
    .indexTable-body-row-transparentCell {
        width: var(--components-indexTable-row-cell-transparent-width);
        &:first-child {
            padding-right: 0;
        }
    }

    .indexTable-body-row {
        &:is(:focus-within, :hover) {
            outline: none;
        }
    }
}

@mixin stackable {
    .indexTable-body-row {
        &.mod-stack2,
        &.mod-stack3 {
            --components-indexTable-row-stack-border-bottom: var(--components-indexTable-stack2-row-spacing);
            --components-indexTable-row-stack2-background-image: var(--components-indexTable-stack-svg);
        }

        &.mod-stack3 {
            --components-indexTable-row-stack-border-bottom: var(--components-indexTable-stack3-row-spacing);
            --components-indexTable-row-stack3-background-image: var(--components-indexTable-stack-svg);
            // Different border-bottom with between stack2 and stack3 mess up background bottom position.
            // this css vars is here to reset this
            --components-indexTable-row-stack3-row-background-position-fix: calc(
                var(--components-indexTable-stack3-row-spacing) - var(--components-indexTable-stack2-row-spacing)
            );
        }
    }

    .indexTable-body-row-cell {
        // because we can't set an individual spacing for each row, transparent border are used for this
        border-bottom: var(--components-indexTable-row-stack-border-bottom) solid transparent;

        // apparence of the first cell with a card apparence.
        // we do this because there migh be one or two cells before without background and containing a checkbox
        --components-indexTable-row-stack2-background-position: left -1px bottom calc(-5px + var(--components-indexTable-row-stack3-row-background-position-fix, 0px));
        --components-indexTable-row-stack3-background-position: left 2px bottom -5px;

        // apparence of the nexts cells
        & ~ .indexTable-body-row-cell {
            --components-indexTable-row-stack2-background-position: left -20px bottom calc(-5px + var(--components-indexTable-row-stack3-row-background-position-fix, 0px));
            --components-indexTable-row-stack3-background-position: left -20px bottom -5px;
        }

        // apparence of the last cell with a card apparence
        &:last-child {
            --components-indexTable-row-stack2-background-position: right -1px bottom calc(-5px + var(--components-indexTable-row-stack3-row-background-position-fix, 0px));
            --components-indexTable-row-stack3-background-position: right 2px bottom -5px;
        }

        // stack apparence
        &::after {
            content: '';
            position: absolute;
            inset: 0 var(--components-indexTable-cell-inset-x-right, 0)
                calc(var(--components-indexTable-row-stack-border-bottom) * -1)
                var(--components-indexTable-cell-inset-x-left, 0);
            z-index: -2;
            background-image: var(--components-indexTable-row-stack2-background-image, none),
                var(--components-indexTable-row-stack3-background-image, none);
            background-position: var(--components-indexTable-row-stack2-background-position, 0 0),
                var(--components-indexTable-row-stack3-background-position, 0 0);
            background-repeat: no-repeat, no-repeat;
        }
    }
}

@mixin stickyHeader {
    .indexTable-head {
        position: sticky;
        top: var(--components-indexTable-row-spacing);
        z-index: 2;
    }

    //hide box-shadow from underneath rows that slighly appear on edges of the sticky header when scrolling
    .indexTable-head-row-cell {
        position: relative;
        &::before,
        &::after {
            content: '';
            position: absolute;
            inset: calc(var(--components-indexTable-row-spacing) * -1) calc(var(--components-indexTable-padding) * -1) 0;
            z-index: -1;
        }
        &::before {
            background-color: var(--commons-background-base);
        }
        &::after {
            background-color: var(--components-indexTable-background-color);
        }
        &:first-child::after {
            border-top-left-radius: var(--components-indexTable-border-radius);
        }
        &:last-child::after {
            border-top-right-radius: var(--components-indexTable-border-radius);
        }
    }
}

@mixin responsiveCardList {
    @include media.max('S') {
        display: flex;
        flex-direction: column;
        gap: var(--components-indexTable-row-spacing);
        padding-top: var(--components-indexTable-cell-padding);

        .indexTable-head {
            display: none;
        }

        .indexTable-body {
            display: flex;
            flex-direction: column;
        }

        .indexTable-body-row {
            position: relative;
            display: grid;
            // Grid layout by default is a basic one column template.
            // The user can override this and build a specific layout by using --components-indexTable-row-responsive-grid-template-columns, --components-indexTable-row-responsive-grid-template-rows and --components-indexTable-row-responsive-grid-template-areas
            grid-template-columns: var(--components-indexTable-row-responsive-grid-template-columns, 1fr);
            grid-template-rows: var(--components-indexTable-row-responsive-grid-template-rows, none);
            grid-auto-rows: auto;
            grid-template-areas: var(--components-indexTable-row-responsive-grid-template-areas, none);
            align-items: center;
            padding: var(--components-indexTable-row-spacing-responsive) 0;
            margin-bottom: var(--components-indexTable-row-spacing-responsive);
            &:not(:has(.indexTable-body-row-cell)) {
                padding: 0;
                margin-bottom: 0;
            }
        }

        .indexTable-body-row-cell {
            position: static;
            grid-column-start: 1;
            padding-top: 0;
            padding-bottom: 0;
            &::before {
                --components-indexTable-cell-inset-x-right: 50%;
            }
            &:last-child::before {
                --components-indexTable-cell-inset-x-right: 0;
                --components-indexTable-cell-inset-x-left: 50%;
            }
            ~ .indexTable-body-row-cell:not(:last-child) {
                &::before {
                    display: none;
                }
            }
        }

        .indexTable-body-row-cell-content[data-label] {
            display: flex;
            flex-direction: column;
            margin-top: var(--spacings-XXS);
            &::before {
                content: attr(data-label);
                font-weight: 600;
            }
        }
    }
}

@mixin selectableResponsiveCardList {
    @include media.max('S') {
        .indexTable-body-row {
            grid-template-columns: var(--components-indexTable-row-cell-transparent-width) var(
                    --components-indexTable-row-responsive-grid-template-columns,
                    1fr
                );
        }
        .indexTable-body-row-transparentCell {
            width: auto;
            // Nested cell offset
            &:first-child[colspan='2'] + .indexTable-body-row-transparentCell {
                padding-left: var(--components-indexTable-row-cell-transparent-width);
            }
        }
        .indexTable-body-row-cell {
            --components-indexTable-cell-inset-x-left: var(--components-indexTable-row-cell-transparent-width);
            grid-column-start: 2;
        }
    }
}

@mixin stackableResponsiveCardList {
    @include media.max('S') {
        .indexTable-body-row[class*='mod-stack'] {
            margin-bottom: calc(
                var(--components-indexTable-row-spacing-responsive) +
                    var(--components-indexTable-row-stack-border-bottom)
            );
        }
        .indexTable-body-row-cell {
            border-bottom: 0;
            &::after {
                --components-indexTable-cell-inset-x-right: 50%;
            }
            ~ .indexTable-body-row-cell:not(:last-child)::after {
                display: none;
            }
            &:last-child {
                &::after {
                    --components-indexTable-cell-inset-x-left: 50%;
                    --components-indexTable-cell-inset-x-right: 0;
                }
            }
        }
    }
}

@mixin actions {
    // ~ equivalent to width: min-content for a table-cell but prevent line-break;
    width: 1%;
    white-space: nowrap;

    // All devices expect touch ones : subActions are hidden and appears when their row is hover or selected
    // see mixin visibleSubActions() in states.scss
    @include media.isNotTouchDevice {
        .indexTable-body-row-cell-subAction {
            opacity: var(--components-indexTable-cell-subAction-opacity, 0);
            transition: opacity ease var(--commons-animations-durations-fast);
        }

        //If there are 4 actions or more, the buttons are hidden (not on touch device) and replaced should be replaced with a dropdown
        &:has(.indexTable-body-row-cell-subActionDropdownTrigger) {
            .indexTable-body-row-cell-subAction {
                display: none;
            }
        }
    }

    // All touch devices : subActions are always visibles, subActionDropdownTrigger is hidden
    @include media.isTouchDevice {
        .indexTable-body-row-cell-subActionDropdownTrigger {
            display: none;
        }
    }
}

@mixin layoutFixed {
    table-layout: fixed;

    [class*='row-cell'] {
        --cell-width: calc(
            var(--components-indexTable-cell-fixed-width, var(--components-index-table-cell-fixed-width)) * 1rem
        );
    }

    &.mod-layoutFixed [class*='row-cell'] {
        @include cellFixedWidth;
    }

    //Layout fixed at breakpoint
    @each $breakpoint, $value in config.$breakpoints {
        @include media.min($breakpoint) {
            &.mod-layoutFixedAtMediaMin#{$breakpoint} {
                table-layout: fixed;
                [class*='row-cell'] {
                    @include cellFixedWidth;
                }
            }
        }
    }
}

@mixin cellFixedWidth {
    min-width: var(--cell-width, auto);
    max-width: var(--cell-width, auto);
    width: var(--cell-width, auto);
}
