@use 'exports' as *;
@use '@lucca-front/scss/src/commons/utils/media';
@use '@lucca-front/scss/src/commons/utils/container';

.indexTable {
	@include vars;
	@include component;

	&.mod-selectable {
		@include selectable;
		// Selectable states
		@include selectableSelectedRow;
		@include selectableHoveredRow;
	}

	&.mod-stackable {
		@include stackable;
	}

	&.mod-stickyHeader {
		@include stickyHeader;
	}

	&[class*='mod-layoutFixed'] {
		@include layoutFixed;
	}

	.indexTable-head-row.mod-massSelection {
		@include massSelection;
	}

	.indexTable-body-row-cell.mod-actions {
		@include actions;
	}

	.indexTable-head-row-cell,
	.indexTable-body-row-cell,
	.indexTable-foot-row-cell {
		&.mod-alignRight {
			@include alignRight;
		}

		&.mod-alignCenter {
			@include alignCenter;
		}
	}

	// generic states, non tied to a mod
	&:not(:has(.indexTable-head[inert='inert'])) {
		// focus-within
		@include focusedRow;

		// hover
		@include hoveredRow;
	}

	// nested open / closed row
	@include openClosedRow;
}

@mixin responsive(
	$breakpoint: 'S',
	$breakpoint2: null,
	$inverted: true,
	$at: 'media',
	$containerName: 'indexTable',
	$responsiveSelector: null,
	$axis: 'width',
	$selector: '.indexTable'
) {
	@if ($at == 'container') {
		@include container.auto($containerName);
	}

	#{if($responsiveSelector, $selector + '.rwd-' + $responsiveSelector, $selector)} {
		@include media.query(
			$breakpoint: $breakpoint,
			$breakpoint2: $breakpoint2,
			$inverted: $inverted,
			$at: $at,
			$containerName: $containerName,
			$axis: $axis
		) {
			@include cardList;
			@include selectableCardList;
			@include stackableCardList;
			@include selectableStackableCardList;
		}
	}
}

$defaultResponsive: true !default;

@if $defaultResponsive {
	@include responsive;
}
