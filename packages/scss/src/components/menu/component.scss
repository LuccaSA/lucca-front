@use '@lucca-front/scss/src/commons/utils/reset';
@use '@lucca-front/scss/src/commons/utils/namespace';

@mixin component($atRoot: namespace.$defaultAtRoot) {
	column-gap: var(--pr-t-spacings-400);
	align-items: center;
	display: flex;
	position: relative;
	flex-wrap: wrap;
	padding: var(--components-menu-listPadding);

	&::after {
		content: var(--components-menu-borderContent);
		border-bottom-width: var(--commons-divider-width);
		border-bottom-color: var(--commons-divider-color);
		border-bottom-style: solid;
		position: absolute;
		height: 1px;
		inset: auto 0 0;
	}

	// .label is deprecated
	.label {
		margin-right: 0;
		background-color: var(--palettes-neutral-100);
		color: var(--palettes-neutral-700);
	}

	@at-root ($atRoot) {
		.menu-containerOptionnal {
			max-width: var(--commons-container-maxWidth);
			padding-inline: var(--commons-container-padding);
		}

		.menu-list {
			@include reset.list;

			align-items: var(--components-menu-listAlign);
			gap: var(--components-menu-listGap);
			flex-direction: var(--components-menu-listDirection);
			display: flex;
			flex-grow: 1;
			flex-wrap: wrap;
		}

		// .menu-link is deprecated
		.menu-list-item-action,
		.menu-link {
			@include reset.button;

			font-size: var(--components-menu-listItemActionFontSize);
			line-height: var(--components-menu-listItemActionLineHeight);
			padding: var(--components-menu-listItemActionPadding);
			border-radius: var(--commons-borderRadius-M);
			color: var(--components-menu-listItemActionColor);
			display: var(--components-menu-listItemActionDisplay);
			text-align: var(--components-menu-listItemActionAlign);
			transition-duration: var(--commons-animations-durations-fast);
			gap: var(--pr-t-spacings-100);
			align-items: center;
			transition-property: color;
			position: relative;
			text-decoration: none;
			width: auto;
			z-index: 1;
			scroll-margin-inline: var(--pr-t-spacings-200);

			&::after {
				background-color: var(--palettes-700, var(--palettes-product-700));
				border-radius: var(--components-menu-listItemActionRadius);
				transition-duration: var(--commons-animations-durations-fast);
				height: var(--components-menu-listItemActionRadiusHeight);
				width: var(--components-menu-listItemActionRadiusWidth);
				transform: var(--components-menu-listItemActionTransform);
				inset: var(--components-menu-listItemActionInset);
				transition-property: transform;
				display: block;
				position: absolute;
				z-index: 1;
				content: '';
			}

			&:not(.is-disabled, [disabled]) {
				&:hover {
					&:not(.is-active, [aria-current='page']) {
						color: var(--palettes-neutral-900);
					}

					// .label is deprecated
					.label {
						background-color: var(--palettes-100, var(--palettes-product-100));
						color: var(--palettes-700, var(--palettes-product-700));
					}

					&::after {
						--components-menu-listItemActionTransform: scale(0.75, 1);
					}
				}
			}
		}

		.menu-link-placeholder {
			&::after {
				content: attr(data-content-after);
				display: block;
				height: 0;
				overflow: hidden;
				font-weight: 600;
			}
		}
	}
}
