@use 'sass:list';

@use '@lucca-front/scss/src/commons/config';
@use '@lucca-front/icons/src/commons/core' as transform;
@use '@lucca-front/scss/src/commons/core';

@use '@lucca-front/scss/src/commons/utils/keyframe';
@use '@lucca-front/scss/src/commons/utils/reset';
@use '@lucca-front/scss/src/commons/utils/text';
@use '@lucca-front/scss/src/commons/utils/a11y';

@use '@lucca-front/scss/src/components/title/exports' as title;

[data-content-before] {
	&::before {
		content: attr(data-content-before);
	}
}

[data-content-after] {
	&::after {
		content: attr(data-content-after);
	}
}

[class*='pr-u-animated'] {
	animation-duration: var(--commons-animations-duration, var(--commons-animations-durations-standard));
	animation-timing-function: var(--commons-animations-function);

	&.mod-animation-duration-fast {
		--commons-animations-duration: var(--commons-animations-durations-fast);
	}

	&.mod-animation-duration-slow {
		--commons-animations-duration: var(--commons-animations-durations-slow);
	}
}

.#{config.$utilityPrefix}-animated {
	&FadeIn,
	&FadeOut {
		animation-name: fadeIn;

		@include keyframe.fadeIn;
	}

	&ScaleIn,
	&ScaleOut {
		animation-name: scaleIn;

		@include keyframe.scaleIn;
	}

	&ScaleInTop,
	&ScaleOutTop {
		animation-name: scaleInTop;

		@include keyframe.scaleIn;
	}

	&ScaleInRight,
	&ScaleOutRight {
		animation-name: scaleInRight;

		@include keyframe.scaleInRight;
	}

	&ScaleInBottom,
	&ScaleOutBottom {
		animation-name: scaleInBottom;

		@include keyframe.scaleInBottom;
	}

	&ScaleInLeft,
	&ScaleOutLeft {
		animation-name: scaleInLeft;

		@include keyframe.scaleInLeft;
	}

	&SlideIn,
	&SlideInTop,
	&SlideOut,
	&SlideOutTop {
		animation-name: slideIn;

		@include keyframe.slideIn;
	}

	&SlideInRight,
	&SlideOutRight {
		animation-name: slideInRight;

		@include keyframe.slideInRight;
	}

	&SlideInBottom,
	&SlideOutBottom {
		animation-name: slideInBottom;

		@include keyframe.slideInBottom;
	}

	&SlideInLeft,
	&SlideOutLeft {
		animation-name: slideInLeft;

		@include keyframe.slideInLeft;
	}

	&Shake {
		animation-name: shake;

		@include keyframe.shake;
	}

	&Pulse {
		animation-name: pulse;
		animation-direction: alternate;
		animation-iteration-count: var(--commons-animations-iteration-count);

		@include keyframe.pulse;
	}

	&FadeOut,
	&SlideOut,
	&SlideOutTop,
	&SlideOutRight,
	&SlideOutBottom,
	&SlideOutLeft,
	&ScaleOut,
	&ScaleOutTop,
	&ScaleOutRight,
	&ScaleOutBottom,
	&ScaleOutLeft {
		animation-direction: reverse;
	}
}

.#{config.$utilityPrefix}-mask {
	@include a11y.mask('!important');
}

.#{config.$utilityPrefix}-clearfix {
	@include reset.clearfix('!important');
}

// clear is deprecated
.#{config.$utilityPrefix}-clearBoth,
.#{config.$utilityPrefix}-clear {
	@include reset.clear('both', '!important');
}

// clearLeft is deprecated
.#{config.$utilityPrefix}-clearInlineStart,
.#{config.$utilityPrefix}-clearLeft {
	@include reset.clear('inline-start', '!important');
}

// clearRight is deprecated
.#{config.$utilityPrefix}-clearInlineEnd,
.#{config.$utilityPrefix}-clearRight {
	@include reset.clear('inline-end', '!important');
}

.#{config.$utilityPrefix}-listReset {
	@include reset.list('!important');
}

.#{config.$utilityPrefix}-descriptionListReset {
	@include reset.list($list: 'dl', $suffix: '!important');
}

.#{config.$utilityPrefix}-summaryReset {
	@include reset.summary('!important');
}

.#{config.$utilityPrefix}-buttonReset {
	@include reset.button('!important');
}

.#{config.$utilityPrefix}-ellipsis {
	@include text.ellipsis('!important');
}

.#{config.$utilityPrefix}-h1 {
	font: var(--pr-t-font-heading-1);
	color: var(--pr-t-color-text-heading);

	&.mod-XXXL {
		// Deprecated
		@include title.XXXL;
	}
}

.#{config.$utilityPrefix}-h2 {
	font: var(--pr-t-font-heading-2);
	color: var(--pr-t-color-text-heading);
}

.#{config.$utilityPrefix}-h3 {
	font: var(--pr-t-font-heading-3);
	color: var(--pr-t-color-text-heading);
}

.#{config.$utilityPrefix}-h4 {
	font: var(--pr-t-font-heading-4);
	color: var(--pr-t-color-text-heading);
}

.#{config.$utilityPrefix}-h5 {
	// Deprecated
	@include title.h5;
}

.#{config.$utilityPrefix}-h6 {
	// Deprecated
	@include title.h6;
}

.#{config.$utilityPrefix}-bodyM {
	font: var(--pr-t-font-body-M);
}

.#{config.$utilityPrefix}-bodyS {
	font: var(--pr-t-font-body-S);
}

.#{config.$utilityPrefix}-bodyXS {
	font: var(--pr-t-font-body-XS);
}

// textLeft is deprecated
.#{config.$utilityPrefix}-textLeft {
	text-align: start !important;
}

// textRight is deprecated
.#{config.$utilityPrefix}-textRight {
	text-align: end !important;
}

// textCenter is deprecated
.#{config.$utilityPrefix}-textCenter {
	text-align: center !important;
}

.#{config.$utilityPrefix}-textLight {
	color: var(--palettes-neutral-600) !important;
}

.#{config.$utilityPrefix}-textPlaceholder {
	color: var(--palettes-neutral-400) !important;
}

.#{config.$utilityPrefix}-textDefault {
	color: var(--palettes-neutral-700) !important;
}

.#{config.$utilityPrefix}-fontWeightRegular {
	font-weight: 400 !important;
}

.#{config.$utilityPrefix}-fontWeightSemiBold {
	font-weight: 600 !important;
}

.#{config.$utilityPrefix}-noSpinButtons {
	&::-webkit-outer-spin-button,
	&::-webkit-inner-spin-button {
		appearance: none !important;
	}

	&[type='number'] {
		appearance: textfield !important;
	}
}

.#{config.$utilityPrefix}-fontFamily {
	font-family: var(--pr-t-font-family) !important;
}

.#{config.$utilityPrefix}-fontFamilyCursive {
	font-family: var(--pr-t-font-family-cursive) !important;
}

.#{config.$utilityPrefix}-fontFamilyBrand {
	font-family: var(--pr-t-font-family-brand) !important;
}

.pr-u-focusVisible {
	&:focus-visible {
		@include a11y.focusVisible;
	}
}

@include core.classes('float', core.$float);
@include core.classes('vertical-align', core.$verticalAlign);
@include core.classes('white-space', core.$whiteSpace);
@include core.classes('display', core.$displays);
@include core.classes('flex-direction', core.$direction);
@include core.classes('flex-wrap', core.$wrap);
@include core.classes('justify-content', core.$justify);
@include core.classes('align-items', core.$align);
@include core.classes('flex-grow', core.$flex);
@include core.classes('flex-shrink', core.$flex);
@include core.classes('flex-basis', core.$basis);
@include core.classes('order', core.$order);
@include core.classes('align-self', core.$align);
@include core.classes('position', core.$position);

@include core.classes('width', core.$contents);
@include core.classes('height', core.$contents);
@include core.classes('min-width', '0');
@include core.classes('min-height', '0');

@include core.classes('inline-size', core.$contents);
@include core.classes('block-size', core.$contents);
@include core.classes('min-inline-size', '0');
@include core.classes('min-block-size', '0');
@include core.classes('max-inline-size', core.$contents);

@include core.classes('visibility', core.$visibility);
@include core.classes('font-weight', core.$fontWeight);
@include core.classes('font-style', core.$fontStyle);
@include core.classes('pointer-events', core.$pointerEvents);
@include core.classes('cursor', core.$cursor);
@include core.classes('text-align', core.$textAlign);
@include core.classes('text-decoration', core.$decoration);
@include core.classes('overflow', core.$overflow);

@media (prefers-reduced-motion: no-preference) {
	@include core.classes('scroll-behavior', core.$scrollBehavior);
}

@media only print {
	@include core.classes('display', core.$displays, $prefix: 'onlyPrint');
}

%displayNone {
	display: none;
}

@each $display in core.$displays {
	@if $display != 'none' {
		.#{config.$utilityPrefix}-onlyPrintDisplay#{transform.capitalize(transform.camelize($display))} {
			@extend %displayNone;
		}
	}
}

@each $direction in core.$boxDirection {
	@if $direction == '' {
		// insetReset is deprecated
		.#{config.$utilityPrefix}-inset0,
		.#{config.$utilityPrefix}-insetReset {
			inset: 0 !important;
		}
	} @else if $direction == 'top' or $direction == 'bottom' or $direction == 'left' or $direction == 'right' {
		// Reset is deprecated
		.#{config.$utilityPrefix}-#{$direction}0,
		.#{config.$utilityPrefix}-#{$direction}Reset {
			#{$direction}: 0 !important;
		}
	} @else {
		@each $boxModel in core.$boxModel {
			@if $boxModel != 'border' {
				.#{config.$utilityPrefix}-#{$boxModel}#{transform.capitalize($direction)}0 {
					#{$boxModel}-#{$direction}: 0 !important;
				}
			}
		}
	}
}

@include core.spacings;
@include core.sizes;
@include core.borderRadius;
@include core.palettes;
