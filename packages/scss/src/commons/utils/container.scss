@use 'sass:string';
@use '@lucca-front/scss/src/commons/utils/media';

@mixin auto($containerName) {
	*:has(> .#{$containerName}:not(.rwd-disableAutoContainer)) {
		container-type: inline-size;
		container-name: string.unquote($containerName);
	}
}

// dans ce qui suit tous les mixins sont des raccourcis vers media.query et media.queries

// les raccourcis des requêtes simples et multiples

@mixin query($breakpoint, $breakpoint2, $axis: 'width', $inverted: false, $containerName: '') {
	// si on breakpoint supplémentaire est passé, c’est queries qu’il faut appeler
	@if $breakpoint2 != null {
		@include queries(
			$breakpoint1: $breakpoint,
			$breakpoint2: $breakpoint2,
			$axis: $axis,
			$at: 'container',
			$containerName: $containerName,
			$inverted: $inverted
		) {
			@content;
		}
	} @else {
		@include media.query($breakpoint: $breakpoint, $axis: $axis, $inverted: $inverted, $at: 'container', $containerName: $containerName) {
			@content;
		}
	}
}

@mixin queries($breakpoint1, $breakpoint2, $inverted: false, $axis: 'width', $containerName: '') {
	@include media.queries($breakpoint1, $breakpoint2, $inverted: $inverted, $axis: $axis, $at: 'container', $containerName: $containerName) {
		@content;
	}
}

// les raccourcis pour min/max/inside/outside

@mixin min($breakpoint, $axis: 'width', $containerName: '') {
	@include media.query($breakpoint: $breakpoint, $axis: $axis, $at: 'container', $containerName: $containerName) {
		@content;
	}
}

@mixin max($breakpoint, $axis: 'width', $containerName: '') {
	@include media.query($breakpoint, $axis: $axis, $inverted: true, $at: 'container', $containerName: $containerName) {
		@content;
	}
}

@mixin inside($breakpoint1, $breakpoint2, $axis: 'width', $containerName: '') {
	@include media.queries($breakpoint1, $breakpoint2, $axis: $axis, $at: 'container', $containerName: $containerName) {
		@content;
	}
}

@mixin outside($breakpoint1, $breakpoint2, $axis: 'width', $containerName: '') {
	@include media.queries($breakpoint1, $breakpoint2, $axis: $axis, $at: 'container', $containerName: $containerName, $inverted: true) {
		@content;
	}
}

// les raccourcis pour minWidth/maxWidth/insideWidths/outsideWidths

@mixin minWidth($breakpoint, $containerName: '') {
	@include media.query($breakpoint, $at: 'container', $containerName: $containerName) {
		@content;
	}
}

@mixin maxWidth($breakpoint, $containerName: '') {
	@include media.query($breakpoint, $inverted: true, $at: 'container', $containerName: $containerName) {
		@content;
	}
}

@mixin insideWidths($breakpoint1, $breakpoint2, $containerName: '') {
	@include media.queries($breakpoint1, $breakpoint2, $at: 'container', $containerName: $containerName) {
		@content;
	}
}

@mixin outsideWidths($breakpoint1, $breakpoint2, $containerName: '') {
	@include media.queries($breakpoint1, $breakpoint2, $at: 'container', $containerName: $containerName, $inverted: true) {
		@content;
	}
}

// les raccourcis pour minHeight/maxHeight/insideHeights/outsideHeights

@mixin minHeight($breakpoint, $containerName: '') {
	@include media.query($breakpoint, $axis: 'height', $at: 'container', $containerName: $containerName) {
		@content;
	}
}

@mixin maxHeight($breakpoint, $containerName: '') {
	@include media.query($breakpoint, $inverted: true, $axis: 'height', $at: 'container', $containerName: $containerName) {
		@content;
	}
}

@mixin insideHeights($breakpoint1, $breakpoint2, $containerName: '') {
	@include media.queries($breakpoint1, $breakpoint2, $axis: 'height', $at: 'container', $containerName: $containerName) {
		@content;
	}
}

@mixin outsideHeights($breakpoint1, $breakpoint2, $containerName: '') {
	@include media.queries($breakpoint1, $breakpoint2, $axis: 'height', $at: 'container', $containerName: $containerName, $inverted: true) {
		@content;
	}
}
