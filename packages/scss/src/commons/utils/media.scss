@use 'sass:string';
@use 'sass:map';
@use 'sass:math';

@use '@lucca-front/scss/src/commons/config';

@function pxToEm($value) {
	@return math.div($value, 16px) * 1em;
}

// Range queries have been supported since Safari 16.4. They can therefore be used in theory.
// However, they only provide a different syntax and penalize some users who don’t have their browser up to date.

// les requêtes simples et multiples

@mixin query($breakpoint, $breakpoint2: null, $axis: 'width', $inverted: false, $at: 'media', $containerName: '') {
	// si on breakpoint supplémentaire est passé, c’est queries qu’il faut appeler
	@if $breakpoint2 != null {
		@include queries(
			$breakpoint1: $breakpoint,
			$breakpoint2: $breakpoint2,
			$axis: $axis,
			$at: $at,
			$containerName: $containerName,
			$inverted: $inverted
		) {
			@content;
		}
	} @else {
		$reversed: '';

		@if $inverted {
			$reversed: 'not all and';

			@if $at == 'container' {
				$reversed: 'not';
			}
		}

		@if $at == 'media' {
			$containerName: '';
		}

		@if map.get(config.$breakpoints, $breakpoint) {
			$breakpoint: pxToEm(map.get(config.$breakpoints, $breakpoint));
		}

		@#{$at} #{$containerName} #{$reversed} (min-#{$axis}: #{$breakpoint}) {
			@content;
		}
	}
}

@mixin queries($breakpoint1, $breakpoint2, $axis: 'width', $at: 'media', $containerName: '', $inverted: false) {
	$reversed: 'not all and';

	@if $at == 'container' {
		$reversed: 'not';
	}

	@if $at == 'media' {
		$containerName: '';
	}

	@if map.get(config.$breakpoints, $breakpoint1) {
		$breakpoint1: pxToEm(map.get(config.$breakpoints, $breakpoint1));
	}

	@if map.get(config.$breakpoints, $breakpoint2) {
		$breakpoint2: pxToEm(map.get(config.$breakpoints, $breakpoint2));
	}

	// si le breakpoint2 est plus petit que le breakpoint1, on les inverse
	@if ($breakpoint2 < $breakpoint1) {
		$breakpointTmp: $breakpoint2;
		$breakpoint2: $breakpoint1;
		$breakpoint1: $breakpointTmp;
	}

	// si on souhaite inverser, ce sont deux queries combinées (or)
	@if $inverted == true {
		@#{$at} #{$containerName} #{$reversed} (min-#{$axis}: #{$breakpoint1}), (min-#{$axis}: #{$breakpoint2}) {
			@content;
		}
	}
	// sinon, ce sont deux queries imbriquées (and)
	@else {
		@#{$at} #{$containerName} (min-#{$axis}: #{$breakpoint1}) {
			@#{$at} #{$containerName} #{$reversed} (min-#{$axis}: #{$breakpoint2}) {
				@content;
			}
		}
	}
}

// les raccourcis vers les requêtes pour min/max/inside/outside

@mixin min($breakpoint, $axis: 'width', $at: 'media') {
	@include query($breakpoint, $axis: $axis, $at: $at) {
		@content;
	}
}

@mixin max($breakpoint, $axis: 'width', $at: 'media') {
	@include query($breakpoint, $axis: $axis, $inverted: true, $at: $at) {
		@content;
	}
}

@mixin inside($breakpoint1, $breakpoint2, $axis: 'width', $at: 'media') {
	@include queries($breakpoint1, $breakpoint2, $axis: $axis, $at: $at) {
		@content;
	}
}

@mixin outside($breakpoint1, $breakpoint2, $axis: 'width', $at: 'media', $inverted: true) {
	@include queries($breakpoint1, $breakpoint2, $axis: $axis, $at: $at) {
		@content;
	}
}

// les raccourcis vers les requêtes pour minWidth/maxWidth/insideWidths/outsideWidths

@mixin minWidth($breakpoint, $at: 'media') {
	@include query($breakpoint, $at: $at) {
		@content;
	}
}

@mixin maxWidth($breakpoint, $at: 'media') {
	@include query($breakpoint, $inverted: true, $at: $at) {
		@content;
	}
}

@mixin insideWidths($breakpoint1, $breakpoint2, $at: 'media') {
	@include queries($breakpoint1, $breakpoint2, $at: $at) {
		@content;
	}
}

@mixin outsideWidths($breakpoint1, $breakpoint2, $at: 'media') {
	@include queries($breakpoint1, $breakpoint2, $at: $at, $inverted: true) {
		@content;
	}
}

// les raccourcis vers les requêtes pour minHeight/maxHeight/insideHeights/outsideHeights

@mixin minHeight($breakpoint, $at: 'media') {
	@include query($breakpoint, 'height', $at: $at) {
		@content;
	}
}

@mixin maxHeight($breakpoint, $at: 'media') {
	@include query($breakpoint, $inverted: true, $axis: 'height', $at: $at) {
		@content;
	}
}

@mixin insideHeights($breakpoint1, $breakpoint2, $at: 'media') {
	@include queries($breakpoint1, $breakpoint2, $axis: 'height', $at: $at) {
		@content;
	}
}

@mixin outsideHeights($breakpoint1, $breakpoint2, $at: 'media') {
	@include queries($breakpoint1, $breakpoint2, $axis: 'height', $at: $at, $inverted: true) {
		@content;
	}
}

// Touch detection
@mixin isTouchDevice {
	@media (any-pointer: coarse) {
		@content;
	}
}

@mixin isNotTouchDevice {
	@media not (any-pointer: coarse) {
		@content;
	}
}
