@use 'sass:map';
@use '@lucca-front/scss/src/commons/core';
@use '@lucca-front/scss/src/commons/config';
@use '@lucca-front/scss/src/commons/utils/a11y';
@use '@lucca-front/scss/src/commons/utils/namespace';
@use '@lucca-front/scss/src/commons/utils/color';

@mixin body {
	background-color: var(--pr-t-elevation-surface-default);
	color: var(--pr-t-color-text);
	font: var(--pr-t-font-body-M);

	@supports (-webkit-touch-callout: none) {
		min-block-size: -webkit-fill-available;
	}
}

@mixin html {
	block-size: -webkit-fill-available;
}

@mixin base($atRoot: namespace.$defaultAtRoot) {
	@at-root ($atRoot) {
		@if config.$fontFamily {
			@include core.fontFace(config.$fontFamily, config.$fontWeights, config.$fontStyles);
		}

		@if config.$fontFamilyBrand {
			@include core.fontFace(config.$fontFamilyBrand, config.$fontWeightsBrand, config.$fontStylesBrand);
		}

		@if config.$fontFamilyCursive {
			@include core.fontFace(config.$fontFamilyCursive, config.$fontWeightsCursive, config.$fontStylesCursive);
		}

		*,
		::after,
		::before {
			box-sizing: border-box;
		}

		::placeholder {
			opacity: 1;
		}

		@if config.$isNamespaced {
			& {
				@include body;
				@include html;
			}
		} @else {
			html {
				@include html;
			}

			body {
				@include body;
			}
		}

		p {
			margin: 0;

			@if config.$deprecatedSpacings {
				margin-block-end: var(--pr-t-spacings-150);
			}
		}

		ul,
		ol {
			margin: 0;
			padding-inline-start: var(--pr-t-spacings-400);

			@if config.$deprecatedSpacings {
				margin-block-end: var(--pr-t-spacings-150);
			}
		}

		abbr {
			&[title] {
				border: none;
				text-decoration: none;
			}
		}

		a {
			color: var(--commons-text-link-color);
			cursor: pointer;
			text-decoration: underline;

			&:hover {
				color: var(--commons-text-link-hover);
			}

			&:focus-visible {
				@include a11y.focusVisible($borderRadius: var(--commons-borderRadius-M));
			}
		}

		button {
			&:focus-visible {
				@include a11y.focusVisible;
			}
		}

		strong,
		b {
			font-weight: 600;
		}

		@each $palette in config.$palettesAll {
			$paletteExists: map.get(config.$palettesInterpolation, $palette);

			@if $paletteExists {
				.palette-#{$palette} {
					@include color.palette($name: $palette, $palette: $paletteExists);
				}
			}
		}
	}
}
