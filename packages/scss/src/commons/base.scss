@use 'sass:map';
@use 'sass:list';

@use '@lucca-front/scss/src/commons/config';
@use '@lucca-front/scss/src/commons/utils/a11y';
@use '@lucca-front/scss/src/commons/utils/namespace';

@mixin body {
	background-color: var(--pr-t-elevation-surface-default);
	color: var(--palettes-neutral-800);
	font-family: var(--commons-font-family);
	font-size: var(--sizes-M-fontSize);
	line-height: var(--sizes-M-lineHeight);

	@supports (-webkit-touch-callout: none) {
		min-height: -webkit-fill-available;
	}
}

@mixin html {
	height: -webkit-fill-available;
}

@mixin base($atRoot: namespace.$defaultAtRoot) {
	@at-root ($atRoot) {
		@if config.$fontFamily != 'Source Sans Pro' {
			@font-face {
				font-family: '#{config.$fontFamily}';
				src:
					url('//cdn.lucca.fr/fonts/#{config.$fontFamily}/regular.woff2') format('woff2'),
					url('//cdn.lucca.fr/fonts/#{config.$fontFamily}/regular.woff') format('woff');
				font-weight: 400;
				font-style: normal;
				font-display: swap;
			}

			@font-face {
				font-family: '#{config.$fontFamily}';
				src:
					url('//cdn.lucca.fr/fonts/#{config.$fontFamily}/semibold.woff2') format('woff2'),
					url('//cdn.lucca.fr/fonts/#{config.$fontFamily}/semibold.woff') format('woff');
				font-weight: 600;
				font-style: normal;
				font-display: swap;
			}

			@font-face {
				font-family: '#{config.$fontFamily}';
				src:
					url('//cdn.lucca.fr/fonts/#{config.$fontFamily}/bold.woff2') format('woff2'),
					url('//cdn.lucca.fr/fonts/#{config.$fontFamily}/bold.woff') format('woff');
				font-weight: 700;
				font-style: normal;
				font-display: swap;
			}

			@font-face {
				font-family: '#{config.$fontFamily}';
				src:
					url('//cdn.lucca.fr/fonts/#{config.$fontFamily}/black.woff2') format('woff2'),
					url('//cdn.lucca.fr/fonts/#{config.$fontFamily}/black.woff') format('woff');
				font-weight: 900;
				font-style: normal;
				font-display: swap;
			}
		} @else {
			@font-face {
				font-family: 'Source Sans Pro';
				src:
					url('//cdn.lucca.fr/fonts/SourceSans/sourcesanspro-regular.woff2') format('woff2'),
					url('//cdn.lucca.fr/fonts/SourceSans/sourcesanspro-regular.woff') format('woff');
				font-weight: 400;
				font-style: normal;
				font-display: swap;
			}

			@font-face {
				font-family: 'Source Sans Pro';
				src:
					url('//cdn.lucca.fr/fonts/SourceSans/sourcesanspro-semibold.woff2') format('woff2'),
					url('//cdn.lucca.fr/fonts/SourceSans/sourcesanspro-semibold.woff') format('woff');
				font-weight: 600;
				font-style: normal;
				font-display: swap;
			}

			@font-face {
				font-family: 'Source Sans Pro';
				src:
					url('//cdn.lucca.fr/fonts/SourceSans/sourcesanspro-bold.woff2') format('woff2'),
					url('//cdn.lucca.fr/fonts/SourceSans/sourcesanspro-bold.woff') format('woff');
				font-weight: 700;
				font-style: normal;
				font-display: swap;
			}

			@font-face {
				font-family: 'Source Sans Pro';
				src:
					url('//cdn.lucca.fr/fonts/SourceSans/sourcesanspro-black.woff2') format('woff2'),
					url('//cdn.lucca.fr/fonts/SourceSans/sourcesanspro-black.woff') format('woff');
				font-weight: 900;
				font-style: normal;
				font-display: swap;
			}
		}

		*,
		::after,
		::before {
			box-sizing: border-box;
		}

		::placeholder {
			opacity: 1;
		}

		@if config.$isNamespaced {
			& {
				@include body;
				@include html;
			}
		} @else {
			html {
				@include html;
			}

			body {
				@include body;
			}
		}

		p {
			margin: 0 0 var(--pr-t-spacings-200);
		}

		abbr {
			&[title] {
				border: none;
				text-decoration: none;
			}
		}

		a {
			color: var(--commons-text-link-color);
			cursor: pointer;
			text-decoration: underline;

			&:hover {
				color: var(--commons-text-link-hover);
			}

			&:focus-visible {
				@include a11y.focusVisible($borderRadius: var(--commons-borderRadius-M));
			}
		}

		button {
			&:focus-visible {
				@include a11y.focusVisible();
			}
		}

		strong,
		b {
			font-weight: 600;
		}

		@each $palette in config.$palettesAll {
			$paletteExists: map.get(config.$palettesInterpolation, $palette);

			@if $paletteExists {
				.palette-#{$palette} {
					@each $shade in config.$palettesShades {
						@if map.get($paletteExists, $shade) {
							--palettes-#{$shade}: var(--palettes-#{$palette}-#{$shade});
						}
					}
				}
			}
		}
	}
}
