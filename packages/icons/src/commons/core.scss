@use 'sass:string';
@use 'sass:list';

@use '@lucca-front/icons/src/commons/config';

@function capitalize($string) {
	@return string.to-upper-case(string.slice($string, 1, 1)) + string.slice($string, 2);
}

@function camelize($string) {
	$progress: $string;
	$result: '';
	$exclude: ' ', '-', '–', '—', '_', ',', ';', ':', '.';

	@while string.length($progress) > 0 {
		$char: string.slice($progress, 1, 1);

		@if not not list.index($exclude, $char) {
			$progress: capitalize(string.slice($progress, 2, 2)) + string.slice($progress, 3);
		} @else {
			$result: $result + $char;
			$progress: string.slice($progress, 2);
		}
	}

	@return $result;
}

@function replace($string, $search, $replace: '') {
	$index: string.index($string, $search);

	@if $index {
		@return string.slice($string, 1, $index - 1) + $replace +
			replace(string.slice($string, $index + string.length($search)), $search, $replace);
	}

	@return $string;
}

// This mixin allows style to be applied at the root of the document or at the root of a namespace.
// It also allows to keep component nested inside the selector based on the $nestChildren parameter.
@mixin atRoot($nestChildren: false) {
	@if $nestChildren {
		// When atRoot is used inside a selector with $nestChildren set to true,
		// the content is kept inside the selector.
		// Example: .parent { @include atRoot { .child { color: red; } } }
		// Output: .parent .child { color: red; }
		@content;
	} @else {
		@at-root {
			@if config.$namespace {
				// When a namespace is set, the content is wrapped inside it.
				// Example: .parent { @include atRoot($nestChildren: false) { .child { color: red; } } }
				// Output: .namespace .child { color: red; }
				#{config.$namespace} {
					@content;
				}
			} @else {
				// When no namespace is set, the content is kept at the root.
				// Example: .parent { @include atRoot($nestChildren: false) { .child { color: red; } } }
				// Output: .child { color: red; }
				@content;
			}
		}
	}
}
