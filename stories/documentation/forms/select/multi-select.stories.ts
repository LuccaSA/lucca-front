import { CommonModule, I18nPluralPipe } from '@angular/common';
import { HttpClientModule } from '@angular/common/http';
import { FormsModule } from '@angular/forms';
import { provideAnimations } from '@angular/platform-browser/animations';
import { LuDisabledOptionDirective, LuDisplayerDirective, LuOptionDirective, LuOptionGroupDirective } from '@lucca-front/ng/core-select';
import { LuMultiDisplayerDirective, LuMultiSelectDisplayerInputDirective, LuMultiSelectInputComponent } from '@lucca-front/ng/multi-select';
import { LuSimpleSelectApiV3Directive, LuSimpleSelectApiV4Directive } from '@lucca-front/ng/simple-select/api';
import { LuTooltipModule } from '@lucca-front/ng/tooltip';
import { Meta, applicationConfig, moduleMetadata } from '@storybook/angular';
import { HiddenArgType } from 'stories/helpers/common-arg-types';
import { FilterLegumesPipe, ILegume, LuSelectInputStoryComponent, allLegumes, colorNameByColor, generateStory } from './select.utils';

// We have to declare it here to avoid type conflict with autogenerated story type from the generateStory function call.
const hiddenArgTypes = {
	expandedPositionStrategy: HiddenArgType,
	panelRef: HiddenArgType,
	valuesTpl: HiddenArgType,
	optionComparer: HiddenArgType,
	options: HiddenArgType,
	overlayConfig: HiddenArgType,
	valueTpl: HiddenArgType,
};

export const Basic = generateStory({
	name: 'Basic',
	description: '',
	template: `
	<lu-multi-select
		#selectRef
		class="multiSelect"
		[placeholder]="placeholder"
		[clearable]="clearable"
		[disabled]="disabled"
		[loading]="loading"
		[(ngModel)]="selectedLegumes"
		[options]="legumes | filterLegumes:clue"
		(clueChange)="clue = $event"
		[maxValuesShown]="maxValuesShown"
	>
	</lu-multi-select>
`,
	neededImports: {
		'@lucca-front/ng/multi-select': ['LuMultiSelectInputComponent'],
	},
	storyPartial: {
		args: {
			selectedLegumes: allLegumes.slice(0, 15),
		},
	},
});
// Override argTypes to display loading/clearable/disabled/placeholder controls
Basic.argTypes = hiddenArgTypes;

export const WithMultiDisplayer = generateStory({
	name: 'With MultiDisplayer',
	description:
		"Il est possible de personnaliser le contenu de la valeur s√©lectionn√©e en utilisant la directive `luMultiDisplayer`. Le *template* prend le tableau contenant l'ensemble des valeurs s√©lectionn√©es.",
	template: `
	<lu-multi-select
		#selectRef
		class="multiSelect"
		[clearable]="clearable"
		[disabled]="disabled"
		[loading]="loading"
		[(ngModel)]="selectedLegumes"
		placeholder="Placeholder..."
		[options]="legumes | filterLegumes:clue"
		(clueChange)="clue = $event"
		[maxValuesShown]="maxValuesShown"
	>
		<ng-container *luMultiDisplayer="let legumes; select: selectRef">
			<div class="multipleSelect-displayer mod-filter" [class.is-filled]="legumes?.length > 0">
				<input
					type="text"
					luInput
					luMultiSelectDisplayerInput
					ngModel
					(ngModelChange)="selectRef.clueChanged($event)"
				/>
				<div class="multipleSelect-displayer-filter">
					<div class="multipleSelect-displayer-chip chip mod-unkillable" *ngIf="legumes?.length === 1">{{legumes[0]?.name}}</div>
					<ng-container *ngIf="legumes?.length > 1"><span class="multipleSelect-displayer-numericBadge numericBadge">{{ legumes?.length }}</span><span class="multipleSelect-displayer-label">l√©gumes s√©lectionn√©s</span></ng-container>
				</div>
			</div>
		</ng-container>
	</lu-multi-select>`,
	neededImports: {
		'@lucca-front/ng/multi-select': ['LuMultiSelectInputComponent', 'LuMultiDisplayerDirective', 'MultiSelectDisplayerInputDirective'],
	},
	storyPartial: {
		args: {
			selectedLegumes: allLegumes.slice(0, 5),
		},
	},
});

export const WithDisplayer = generateStory({
	name: 'With Displayer',
	description:
		"Il est possible de personnaliser le contenu des *chips* dans l'affichage de la valeur s√©lectionn√©e en utilisant la directive `luDisplayer`. Le *template* prend une option parmi les valeurs s√©lectionn√©es.",
	template: `
	<lu-multi-select
		#selectRef
		class="multiSelect"
		[placeholder]="placeholder"
		[options]="legumes | filterLegumes:clue"
		(clueChange)="clue = $event"
		[clearable]="clearable"
		[disabled]="disabled"
		[loading]="loading"
		[(ngModel)]="selectedLegumes"
		[maxValuesShown]="maxValuesShown"
	>
		<span *luDisplayer="let legume; select: selectRef" [luTooltip]="'Vive les ' + legume.name + '!'">
			ü•î {{ legume.name }} ü•î
		</span>
	</lu-multi-select>`,
	neededImports: {
		'@lucca-front/ng/multi-select': ['LuMultiSelectInputComponent', 'LuMultiDisplayerDirective'],
		'@lucca-front/ng/core-select': ['LuDisplayerDirective'],
	},
	storyPartial: {
		args: {
			selectedLegumes: allLegumes.slice(0, 5),
		},
	},
});

export const WithPagination = generateStory({
	name: 'Pagination',
	description: "Il est possible de charger les options au fur et √† mesure en √©coutant l'√©v√®nement `(nextPage)`.",
	template: `
	<lu-multi-select
		#selectRef
		class="multiSelect"
		placeholder="Placeholder..."
		[(ngModel)]="selectedLegumes"
		[options]="legumes.slice(0, page * 10)"
		(nextPage)="page = page + 1"
		[maxValuesShown]="maxValuesShown"
	>
		<ng-container *luOption="let legume; select: selectRef">{{ legume.name }}</ng-container>
	</lu-multi-select>
`,
	neededImports: {
		'@lucca-front/ng/core-select': ['LuOptionDirective'],
		'@lucca-front/ng/multi-select': ['LuMultiSelectInputComponent'],
	},
});

export const WithDisabledOptions = generateStory({
	name: 'Disabled options',
	description: "Il est possible de d√©sactiver certaines options en utilisant la directive `luDisabledOption` sur l'option.",
	template: `
	<lu-multi-select
		#selectRef
		class="multiSelect"
		placeholder="Placeholder..."
		[(ngModel)]="selectedLegumes"
		[options]="legumes | filterLegumes:clue"
		(clueChange)="clue = $event"
		[maxValuesShown]="maxValuesShown"
	>
		<ng-container *luOption="let legume; select: selectRef" [luDisabledOption]="legume.index % 2 === 0">{{ legume.name }}</ng-container>
	</lu-multi-select>
`,
	neededImports: {
		'@lucca-front/ng/core-select': ['LuOptionDirective', 'LuDisabledOptionDirective'],
		'@lucca-front/ng/multi-select': ['LuMultiSelectInputComponent'],
	},
});

export const ApiV3 = generateStory({
	name: 'Api V3',
	description: "Pour r√©cup√©rer automatiquement les options depuis une api V3 avec pagination et recherche, il suffit d'utiliser la directive `apiV3`.",
	template: `
	<lu-multi-select
		class="multiSelect"
		placeholder="Placeholder..."
		apiV3="/api/v3/axisSections"
		[(ngModel)]="selectedAxisSection"
		[maxValuesShown]="maxValuesShown"
	></lu-multi-select>
	`,
	neededImports: {
		'@lucca-front/ng/multi-select': ['LuMultiSelectInputComponent'],
		'@lucca-front/ng/simple-select/api': ['LuSimpleSelectApiV3Directive'],
	},
});

export const ApiV4 = generateStory({
	name: 'Api V4',
	description: "Pour r√©cup√©rer automatiquement les options depuis une api V4 avec pagination et recherche, il suffit d'utiliser la directive `apiV4`.",
	template: `
	<lu-multi-select
		class="multiSelect"
		placeholder="Placeholder..."
		apiV4="/organization/structure/api/establishments"
		[(ngModel)]="selectedEstablishment"
		[maxValuesShown]="maxValuesShown"
	></lu-multi-select>
	`,
	neededImports: {
		'@lucca-front/ng/multi-select': ['LuMultiSelectInputComponent'],
		'@lucca-front/ng/simple-select/api': ['LuSimpleSelectApiV4Directive'],
	},
});

export const GroupBy = generateStory({
	name: 'Group options',
	description: "Pour grouper les options, il suffit d'utiliser la directive `luOptionGroup`.",
	template: `
	<lu-multi-select
		#selectRef
		class="textfield-input"
		placeholder="Placeholder..."
		[(ngModel)]="selectedLegumes"
		[options]="legumes | filterLegumes:clue"
		(clueChange)="clue = $event"
		[maxValuesShown]="maxValuesShown"
	>
		<ng-container *luOptionGroup="let group by legumeColor; select: selectRef">
			L√©gume {{colorNameByColor[group.key]}}{{group.options.length > 1 ? 's' : ''}}
		</ng-container>
	</lu-multi-select>
	`,
	neededImports: {
		'@lucca-front/ng/core-select': ['LuOptionDirective', 'LuOptionGroupDirective'],
		'@lucca-front/ng/multi-select': ['LuMultiSelectInputComponent'],
	},
	storyPartial: {
		args: {
			legumes: [...allLegumes].sort((a, b) => colorNameByColor[a.color].localeCompare(colorNameByColor[b.color])),
			legumeColor: (legume: ILegume) => legume.color,
			colorNameByColor: {
				green: 'vert',
				purple: 'violet',
				red: 'rouge',
				orange: 'orange',
				white: 'blanc',
				yellow: 'jaune',
				brown: 'marron',
			},
		},
	},
});

const meta: Meta<LuSelectInputStoryComponent> = {
	title: 'Documentation/Forms/MultiSelect',
	component: LuMultiSelectInputComponent,
	decorators: [
		moduleMetadata({
			imports: [
				I18nPluralPipe,
				FormsModule,
				FilterLegumesPipe,
				HttpClientModule,
				LuMultiSelectInputComponent,
				LuMultiDisplayerDirective,
				LuOptionDirective,
				LuOptionGroupDirective,
				LuDisplayerDirective,
				LuTooltipModule,
				LuSimpleSelectApiV3Directive,
				LuSimpleSelectApiV4Directive,
				LuDisabledOptionDirective,
				LuMultiSelectDisplayerInputDirective,
				CommonModule,
			],
		}),
		applicationConfig({
			providers: [provideAnimations()],
		}),
	],
	args: {
		placeholder: 'Placeholder...',
		legumes: allLegumes,
		clearable: true,
		disabled: false,
		loading: false,
		maxValuesShown: 500,
		selectedLegumes: [],
		page: 1,
	},
	argTypes: {
		options: { control: false },
		optionTpl: { control: false },
		overlayConfig: { control: false },
		valueTpl: { control: false },
		optionComparer: { control: false },
		clueChange: { control: false },
		nextPage: { control: false },
		previousPage: { control: false },
		legumes: { control: false },
		selectedLegumes: { control: false },
		legumeColor: { control: false },
		colorNameByColor: { control: false },
	},
	parameters: {
		docs: {
			description: {
				component: Basic.parameters['docs'].description.story,
			},
		},
	},
};

export default meta;
