{
    "pipes": [
        {
            "name": "LuDateAdapterPipe",
            "id": "pipe-LuDateAdapterPipe-bb74c31879d75a4401de3483d71480eb",
            "file": "packages/ng/libraries/date/src/lib/adapter/date-adapter.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "defaultValue": "'mediumDate'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "defaultValue": "'mediumDate'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "pure": true,
            "ngname": "luDate",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { ALuDateAdapter } from '@lucca-front/ng/core';\r\n\r\n@Pipe({\r\n\tname: 'luDate',\r\n\tpure: true,\r\n})\r\nexport class LuDateAdapterPipe<D> implements PipeTransform {\r\n\tconstructor(private _adapter: ALuDateAdapter<D>) {}\r\n\ttransform(d: D, format: string = 'mediumDate'): string {\r\n\t\tif (d && this._adapter.isValid(d)) {\r\n\t\t\treturn this._adapter.format(d, format);\r\n\t\t}\r\n\t\treturn '';\r\n\t}\r\n}\r\n"
        },
        {
            "name": "LuNumberPipe",
            "id": "pipe-LuNumberPipe-bbcc73201ff7ec74c8403a5388e8935d",
            "file": "packages/ng/libraries/number/src/lib/number.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "number",
                            "type": "number"
                        },
                        {
                            "name": "precision",
                            "type": "number",
                            "defaultValue": "2"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "name": "number",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "precision",
                            "type": "number",
                            "defaultValue": "2",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "pure": true,
            "ngname": "luNumber",
            "sourceCode": "import { Pipe, PipeTransform, Inject, LOCALE_ID } from '@angular/core';\r\nimport { formatNumber, getLocaleNumberSymbol, NumberSymbol } from '@angular/common';\r\n\r\n@Pipe({\r\n\tname: 'luNumber',\r\n\tpure: true,\r\n})\r\nexport class LuNumberPipe implements PipeTransform {\r\n\tconstructor(@Inject(LOCALE_ID) protected locale) {}\r\n\ttransform(number: number, precision = 2) {\r\n\t\tconst formatted = formatNumber(number, this.locale, `1.${precision}-${precision}`);\r\n\t\tconst separator = getLocaleNumberSymbol(this.locale, NumberSymbol.Decimal);\r\n\t\tconst split = formatted.split(separator);\r\n\t\tconst integral = split[0];\r\n\t\tconst decimal = split[1];\r\n\t\tconst hideDecimal = Math.round(number) === number;\r\n\t\tif (precision > 0) {\r\n\t\t\treturn `${integral}<span class=\"decimal-part${hideDecimal ? ' u-hidden' : ''}\">${separator}${decimal}</span>`;\r\n\t\t} else {\r\n\t\t\treturn integral;\r\n\t\t}\r\n\r\n\t}\r\n}\r\n"
        },
        {
            "name": "LuSafeContentPipe",
            "id": "pipe-LuSafeContentPipe-c1edc0111d58fbfbd1fbb208fe89935a",
            "file": "packages/ng/libraries/safe-content/src/lib/safe-content.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        },
                        {
                            "name": "type",
                            "type": "LuSafeContentType",
                            "defaultValue": "'html'"
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl",
                    "typeParameters": [],
                    "line": 10,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "LuSafeContentType",
                            "defaultValue": "'html'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "luSafeContent",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml, SafeStyle, SafeScript, SafeUrl, SafeResourceUrl } from '@angular/platform-browser';\r\nimport { LuSafeContentType } from './safe-content.model';\r\n\r\n@Pipe({name: 'luSafeContent'})\r\nexport class LuSafeContentPipe implements PipeTransform {\r\n\r\n\tconstructor(protected sanitizer: DomSanitizer) { }\r\n\r\n\tpublic transform(value: any, type: LuSafeContentType = 'html'): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\r\n\t\tswitch (type) {\r\n\t\t\tcase 'html': return this.sanitizer.bypassSecurityTrustHtml(value);\r\n\t\t\tcase 'style': return this.sanitizer.bypassSecurityTrustStyle(value);\r\n\t\t\tcase 'script': return this.sanitizer.bypassSecurityTrustScript(value);\r\n\t\t\tcase 'url': return this.sanitizer.bypassSecurityTrustUrl(value);\r\n\t\t\tcase 'resourceUrl': return this.sanitizer.bypassSecurityTrustResourceUrl(value);\r\n\t\t\tdefault: throw new Error(`Invalid safe type specified: ${type}`);\r\n\t\t}\r\n\t}\r\n}\r\n"
        },
        {
            "name": "LuUserDisplayPipe",
            "id": "pipe-LuUserDisplayPipe-b58f83c3ac48e981aa79a7cdf2ee4e30",
            "file": "packages/ng/libraries/user/src/lib/display/user-display.pipe.ts",
            "type": "pipe",
            "description": "<p>Displays a user name according to specified format. Supported formats: f for first name,\nF for first initial, l for last name, L for last initial.</p>\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "user",
                            "type": "ILuUser"
                        },
                        {
                            "name": "format",
                            "type": "LuDisplayFormat",
                            "defaultValue": "LuDisplayFullname.lastfirst"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "ILuUser",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "LuDisplayFormat",
                            "defaultValue": "LuDisplayFullname.lastfirst",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "luUserDisplay",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { ILuUser } from '../user.model';\r\nimport {\r\n\tLuDisplayFullname,\r\n\tLuDisplayHybrid,\r\n\tLuDisplayInitials,\r\n\tLuDisplayFormat,\r\n} from './display-format.model';\r\n/**\r\n * Displays a user name according to specified format. Supported formats: f for first name,\r\n * F for first initial, l for last name, L for last initial.\r\n */\r\n@Pipe({ name: 'luUserDisplay' })\r\nexport class LuUserDisplayPipe implements PipeTransform {\r\n\ttransform(user: ILuUser, format: LuDisplayFormat = LuDisplayFullname.lastfirst): string {\r\n\t\tlet result = '';\r\n\r\n\t\tif (!!user && !!user.firstName && !!user.lastName) {\r\n\t\t\tswitch (format) {\r\n\t\t\t\tcase LuDisplayFullname.lastfirst:\r\n\t\t\t\t\tresult = user.lastName + ' ' + user.firstName;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase LuDisplayFullname.firstlast:\r\n\t\t\t\t\tresult = user.firstName + ' ' + user.lastName;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase LuDisplayFullname.first:\r\n\t\t\t\t\tresult = user.firstName;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase LuDisplayFullname.last:\r\n\t\t\t\t\tresult = user.lastName;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase LuDisplayInitials.lastfirst:\r\n\t\t\t\t\tresult = user.lastName.charAt(0) + user.firstName.charAt(0);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase LuDisplayInitials.firstlast:\r\n\t\t\t\t\tresult = user.firstName.charAt(0) + user.lastName.charAt(0);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase LuDisplayInitials.first:\r\n\t\t\t\t\tresult = user.firstName.charAt(0);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase LuDisplayInitials.last:\r\n\t\t\t\t\tresult = user.lastName.charAt(0);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase LuDisplayHybrid.firstIlastFull:\r\n\t\t\t\t\tresult = user.firstName.charAt(0) + '. ' + user.lastName;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase LuDisplayHybrid.lastIfirstFull:\r\n\t\t\t\t\tresult = user.lastName.charAt(0) + '. ' + user.firstName;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase LuDisplayHybrid.lastFullfirstI:\r\n\t\t\t\t\tresult = user.lastName + ' ' + user.firstName.charAt(0) + '.';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase LuDisplayHybrid.firstFulllastI:\r\n\t\t\t\t\tresult = user.firstName + ' ' + user.lastName.charAt(0) + '.';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "ICalendarItem",
            "id": "interface-ICalendarItem-edf359d113893c5352efabb62a9e2994",
            "file": "packages/ng/libraries/date/src/lib/calendar/calendar-item.interface.ts",
            "type": "interface",
            "sourceCode": "import { ELuDateGranularity } from '@lucca-front/ng/core';\r\n\r\nexport interface ICalendarItem<D> {\r\n\tid: string;\r\n\tdate: D;\r\n\tmods: string[];\r\n\tlabel: string;\r\n\tisDisabled: boolean;\r\n\tgranularity: ELuDateGranularity;\r\n}\r\n",
            "properties": [
                {
                    "name": "date",
                    "type": "D",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "granularity",
                    "type": "ELuDateGranularity",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "isDisabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "mods",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ICountry",
            "id": "interface-ICountry-56fac675212407d68ee4218709f8497b",
            "file": "packages/ng/applications/sandbox/src/app/issues/establishment/establishment.component.ts",
            "type": "interface",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\ninterface ICountry {\r\n\tid: number;\r\n\tname: string;\r\n}\r\n\r\n@Component({\r\n\tselector: 'lu-establishment-issue',\r\n\ttemplateUrl: './establishment.component.html'\r\n})\r\nexport class EstablishmentComponent {\r\n\tcollection = [];\r\n\titem;\r\n\titem2;\r\n\r\n\tcountriesByLegalUnitId$: Observable<Map<number, ICountry>>;\r\n\r\n\ttrackBy(idx, item): string {\r\n\t\treturn item.code;\r\n\t}\r\n\r\n\tdisplay(collection) {\r\n\t\treturn (collection ?? []).map(item => ({ id: item.id, name: item.name }));\r\n\t}\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuApiCollectionResponse",
            "id": "interface-ILuApiCollectionResponse-89867438d31ca283baf649cef0d020d4",
            "file": "packages/ng/libraries/api/src/lib/api.model.ts",
            "type": "interface",
            "sourceCode": "export interface ILuApiSuggestion<T> {\r\n\trelevance: any;\r\n\titem: T;\r\n}\r\nexport interface ILuApiItem<TId = number> {\r\n\tid: TId;\r\n\tname?: string;\r\n}\r\nexport interface ILuApiResponse<D = any> {\r\n\tdata: D;\r\n}\r\nexport interface ILuApiCollectionResponse<T extends ILuApiItem = ILuApiItem> extends ILuApiResponse<{ items: T[] }> {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "ILuApiResponse"
        },
        {
            "name": "ILuApiFeederService",
            "id": "interface-ILuApiFeederService-ac82cf2e80660d0ab341f1c56c87d434",
            "file": "packages/ng/libraries/api/src/lib/select/feeder/api-feeder.model.ts",
            "type": "interface",
            "sourceCode": "import { ILuOptionOperator } from '@lucca-front/ng/option';\r\nimport { ILuApiItem } from '../../api.model';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { ILuApiService } from '../../service/index';\r\n\r\nexport interface ILuApiOptionFeeder<T extends ILuApiItem = ILuApiItem> extends ILuOptionOperator<T> {}\r\nexport interface ILuApiFeederService<T extends ILuApiItem = ILuApiItem> {\r\n\tgetAll(): Observable<T[]>;\r\n}\r\n\r\nexport abstract class ALuApiOptionFeeder<T extends ILuApiItem = ILuApiItem, S extends ILuApiService<T> =  ILuApiService<T>>\r\nimplements ILuApiOptionFeeder<T> {\r\n\toutOptions$ = new BehaviorSubject<T[]>([]);\r\n\tprotected _service: S;\r\n\tconstructor(service: S) {\r\n\t\tthis._service = service;\r\n\t}\r\n\tonOpen() {\r\n\t\tthis._service.getAll()\r\n\t\t.subscribe(items => this.outOptions$.next(items));\r\n\t}\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 8
                }
            ]
        },
        {
            "name": "ILuApiItem",
            "id": "interface-ILuApiItem-89867438d31ca283baf649cef0d020d4",
            "file": "packages/ng/libraries/api/src/lib/api.model.ts",
            "type": "interface",
            "sourceCode": "export interface ILuApiSuggestion<T> {\r\n\trelevance: any;\r\n\titem: T;\r\n}\r\nexport interface ILuApiItem<TId = number> {\r\n\tid: TId;\r\n\tname?: string;\r\n}\r\nexport interface ILuApiResponse<D = any> {\r\n\tdata: D;\r\n}\r\nexport interface ILuApiCollectionResponse<T extends ILuApiItem = ILuApiItem> extends ILuApiResponse<{ items: T[] }> {}\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "TId",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuApiOptionFeeder",
            "id": "interface-ILuApiOptionFeeder-ac82cf2e80660d0ab341f1c56c87d434",
            "file": "packages/ng/libraries/api/src/lib/select/feeder/api-feeder.model.ts",
            "type": "interface",
            "sourceCode": "import { ILuOptionOperator } from '@lucca-front/ng/option';\r\nimport { ILuApiItem } from '../../api.model';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { ILuApiService } from '../../service/index';\r\n\r\nexport interface ILuApiOptionFeeder<T extends ILuApiItem = ILuApiItem> extends ILuOptionOperator<T> {}\r\nexport interface ILuApiFeederService<T extends ILuApiItem = ILuApiItem> {\r\n\tgetAll(): Observable<T[]>;\r\n}\r\n\r\nexport abstract class ALuApiOptionFeeder<T extends ILuApiItem = ILuApiItem, S extends ILuApiService<T> =  ILuApiService<T>>\r\nimplements ILuApiOptionFeeder<T> {\r\n\toutOptions$ = new BehaviorSubject<T[]>([]);\r\n\tprotected _service: S;\r\n\tconstructor(service: S) {\r\n\t\tthis._service = service;\r\n\t}\r\n\tonOpen() {\r\n\t\tthis._service.getAll()\r\n\t\t.subscribe(items => this.outOptions$.next(items));\r\n\t}\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "ILuOptionOperator"
        },
        {
            "name": "ILuApiOptionPagedSearcher",
            "id": "interface-ILuApiOptionPagedSearcher-d83aba88740f53a2e381162c54c4b831",
            "file": "packages/ng/libraries/api/src/lib/select/searcher/api-searcher.model.ts",
            "type": "interface",
            "sourceCode": "import { Observable, Subject, combineLatest, merge, of } from 'rxjs';\r\nimport {\r\n\tmapTo,\r\n\ttap,\r\n\twithLatestFrom,\r\n\tshare,\r\n\tswitchMap,\r\n\tdistinctUntilChanged,\r\n\tcatchError,\r\n\tmap,\r\n\tdebounceTime,\r\n} from 'rxjs/operators';\r\n\r\nimport { ILuApiItem } from '../../api.model';\r\nimport { ILuApiOptionFeeder } from '../feeder/index';\r\nimport { ILuOnOpenSubscriber, ILuOnScrollBottomSubscriber } from '@lucca-front/ng/core';\r\nimport { ILuApiService } from '../../service/index';\r\n\r\nexport interface ILuApiOptionSearcher<T extends ILuApiItem = ILuApiItem> extends ILuApiOptionFeeder<T> {}\r\n\r\nexport abstract class ALuApiOptionSearcher<T extends ILuApiItem = ILuApiItem, S extends ILuApiService<T> = ILuApiService<T>>\r\nimplements ILuApiOptionFeeder<T>, ILuOnOpenSubscriber {\r\n\toutOptions$ = new Subject<T[]>();\r\n\tloading$: Observable<boolean>;\r\n\tempty$: Observable<boolean>;\r\n\r\n\tprotected _clue$: Observable<string>;\r\n\r\n\tset clue$(clue$: Observable<string>) {\r\n\t\t// this.initObservables(clue$);\r\n\t\tthis._clue$ = clue$;\r\n\t}\r\n\tconstructor(protected _service: S) {}\r\n\tinit() {\r\n\t\tthis.initObservables();\r\n\t}\r\n\tonOpen() {\r\n\t\tthis.resetClue();\r\n\t}\r\n\tonClose() {\r\n\t\tthis.clearOptions();\r\n\t}\r\n\tprotected initObservables() {\r\n\t\t// this._clue$ = clue$.pipe(share());\r\n\t\tconst results$ = this._clue$\r\n\t\t.pipe(\r\n\t\t\tswitchMap(clue => this._service.searchAll(clue)),\r\n\t\t\tcatchError(err => of([])),\r\n\t\t\tshare(),\r\n\t\t);\r\n\r\n\t\tresults$.subscribe(items => this.outOptions$.next(items));\r\n\t\tthis.loading$ = merge(\r\n\t\t\tthis._clue$.pipe(mapTo(true)),\r\n\t\t\tresults$.pipe(mapTo(false)),\r\n\t\t);\r\n\t\tthis.empty$ = results$.pipe(\r\n\t\t\tmap(o => o.length === 0),\r\n\t\t);\r\n\t}\r\n\tabstract resetClue();\r\n\tprotected clearOptions() {\r\n\t\tthis.outOptions$.next([]);\r\n\t}\r\n}\r\n\r\nexport interface ILuApiOptionPagedSearcher<T extends ILuApiItem = ILuApiItem> extends ILuApiOptionSearcher<T> {}\r\n\r\nexport abstract class ALuApiOptionPagedSearcher<T extends ILuApiItem = ILuApiItem, S extends ILuApiService<T> = ILuApiService<T>>\r\nextends ALuApiOptionSearcher<T, S>\r\nimplements ILuApiOptionPagedSearcher<T>, ILuOnScrollBottomSubscriber {\r\n\toutOptions$ = new Subject<T[]>();\r\n\tloading$: Observable<boolean>;\r\n\tprotected _loading = false;\r\n\tprotected _page$ = new Subject<number>();\r\n\tprotected _page: number;\r\n\tprotected _options: T[] = [];\r\n\r\n\tconstructor(service: S) {\r\n\t\tsuper(service);\r\n\t}\r\n\tonOpen() {\r\n\t\tthis.resetClue();\r\n\t\tthis.resetPage();\r\n\t}\r\n\tonScrollBottom() {\r\n\t\tif (!this._loading) {\r\n\t\t\tthis._page$.next(this._page + 1);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected initObservables() {\r\n\t\tconst distinctPage$ = this._page$.pipe(\r\n\t\t\tdistinctUntilChanged(),\r\n\t\t\ttap(p => this._page = p),\r\n\t\t);\r\n\r\n\t\t// this._clue$ = clue$.pipe(\r\n\t\t// \ttap(() => this._page$.next(0)),\r\n\t\t// \t// distinctUntilChanged(),\r\n\t\t// \tshare()\r\n\t\t// );\r\n\t\tconst results$ = combineLatest(\r\n\t\t\tdistinctPage$,\r\n\t\t\tthis._clue$,\r\n\t\t).pipe(\r\n\t\t\tdebounceTime(100),\r\n\t\t\tswitchMap(([page, clue]) => this._service.searchPaged(clue, page)),\r\n\t\t\tcatchError(err => of([])),\r\n\t\t\tshare(),\r\n\t\t);\r\n\r\n\t\tresults$\r\n\t\t.pipe(withLatestFrom(distinctPage$))\r\n\t\t.subscribe(([items, page]) => {\r\n\t\t\tif (page === 0) {\r\n\t\t\t\tthis._options = [...items];\r\n\t\t\t} else {\r\n\t\t\t\tthis._options.push(...items);\r\n\t\t\t}\r\n\t\t\tthis.outOptions$.next([...this._options]);\r\n\t\t});\r\n\t\tthis.loading$ = merge(\r\n\t\t\tthis._clue$.pipe(mapTo(true)),\r\n\t\t\tresults$.pipe(mapTo(false)),\r\n\t\t);\r\n\t\tthis.loading$.subscribe(l => this._loading = l);\r\n\t\tthis.empty$ = this.outOptions$.pipe(\r\n\t\t\tmap(o => o.length === 0),\r\n\t\t);\r\n\t}\r\n\tabstract resetClue();\r\n\tresetPage() {\r\n\t\tthis._page$.next(0);\r\n\t}\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "ILuApiOptionSearcher"
        },
        {
            "name": "ILuApiOptionPager",
            "id": "interface-ILuApiOptionPager-870d7448a7f7752bbcd04d03297e9d90",
            "file": "packages/ng/libraries/api/src/lib/select/pager/api-pager.model.ts",
            "type": "interface",
            "sourceCode": "import { ILuOnOpenSubscriber, ILuOnScrollBottomSubscriber } from '@lucca-front/ng/core';\r\nimport { ILuOptionOperator } from '@lucca-front/ng/option';\r\nimport { ILuApiItem } from '../../api.model';\r\nimport { Observable, of, merge, Subject } from 'rxjs';\r\nimport { switchMap, catchError, mapTo, tap, map, distinctUntilChanged } from 'rxjs/operators';\r\nimport { ILuApiService } from '../../service/index';\r\n\r\nenum Strategy {\r\n\tappend,\r\n\treplace,\r\n}\r\nconst MAGIC_PAGE_SIZE = 20;\r\nexport interface ILuApiOptionPager<T extends ILuApiItem = ILuApiItem> extends ILuOptionOperator<T> {}\r\nexport interface ILuApiPagerService<T extends ILuApiItem = ILuApiItem> {\r\n\tgetPaged(page: number): Observable<T[]>;\r\n}\r\n\r\nexport abstract class ALuApiOptionPager<T extends ILuApiItem = ILuApiItem, S extends ILuApiService<T> = ILuApiService<T>>\r\nimplements ILuApiOptionPager<T>, ILuOnOpenSubscriber, ILuOnScrollBottomSubscriber {\r\n\toutOptions$ = new Subject<T[]>();\r\n\tloading$: Observable<boolean>;\r\n\r\n\tprotected _loading = false;\r\n\tprotected _results$: Observable<{ items: T[], strategy: Strategy }>;\r\n\tprotected _options: T[] = [];\r\n\tprotected _page$ = new Subject<number>();\r\n\tprotected _page: number;\r\n\tprotected _initialized = false;\r\n\tconstructor(protected _service: S) {\r\n\t}\r\n\tprotected init() {\r\n\t\tthis.initObservables();\r\n\t}\r\n\tonOpen() {\r\n\t\tif (!this._initialized) {\r\n\t\t\tthis._page$.next(0);\r\n\t\t\tthis._initialized = true;\r\n\t\t}\r\n\t}\r\n\t// onClose() {\r\n\t// \tthis._page$.next(0);\r\n\t// }\r\n\tonScrollBottom() {\r\n\t\tif (!this._loading) {\r\n\t\t\tthis._page$.next(this._page + 1);\r\n\t\t}\r\n\t}\r\n\tprotected initObservables() {\r\n\t\tconst _results$: Observable<{ items: T[], strategy: Strategy }> = this._page$\r\n\t\t.pipe(\r\n\t\t\tdistinctUntilChanged(),\r\n\t\t\ttap(p => this._page = p),\r\n\t\t\tswitchMap(page => {\r\n\t\t\t\tif (page === undefined) {\r\n\t\t\t\t\treturn of({ items: [], strategy: Strategy.replace });\r\n\t\t\t\t}\r\n\t\t\t\treturn this._service.getPaged(page).pipe(\r\n\t\t\t\t\tmap(items => ({ items: items, strategy: page === 0 ? Strategy.replace : Strategy.append }))\r\n\t\t\t\t);\r\n\t\t\t}),\r\n\t\t\tcatchError(err => of({ items: [], strategy: Strategy.replace })),\r\n\t\t\ttap(results => {\r\n\t\t\t\tif (results.strategy === Strategy.replace) {\r\n\t\t\t\t\tthis._options = [...results.items];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._options.push(...results.items);\r\n\t\t\t\t}\r\n\t\t\t\tthis.outOptions$.next([...this._options]);\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tthis.loading$ = merge(\r\n\t\t\tthis._page$.pipe(mapTo(true)),\r\n\t\t\t_results$.pipe(mapTo(false)),\r\n\t\t);\r\n\t\tthis.loading$.subscribe(l => this._loading = l);\r\n\t}\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "ILuOptionOperator"
        },
        {
            "name": "ILuApiOptionSearcher",
            "id": "interface-ILuApiOptionSearcher-d83aba88740f53a2e381162c54c4b831",
            "file": "packages/ng/libraries/api/src/lib/select/searcher/api-searcher.model.ts",
            "type": "interface",
            "sourceCode": "import { Observable, Subject, combineLatest, merge, of } from 'rxjs';\r\nimport {\r\n\tmapTo,\r\n\ttap,\r\n\twithLatestFrom,\r\n\tshare,\r\n\tswitchMap,\r\n\tdistinctUntilChanged,\r\n\tcatchError,\r\n\tmap,\r\n\tdebounceTime,\r\n} from 'rxjs/operators';\r\n\r\nimport { ILuApiItem } from '../../api.model';\r\nimport { ILuApiOptionFeeder } from '../feeder/index';\r\nimport { ILuOnOpenSubscriber, ILuOnScrollBottomSubscriber } from '@lucca-front/ng/core';\r\nimport { ILuApiService } from '../../service/index';\r\n\r\nexport interface ILuApiOptionSearcher<T extends ILuApiItem = ILuApiItem> extends ILuApiOptionFeeder<T> {}\r\n\r\nexport abstract class ALuApiOptionSearcher<T extends ILuApiItem = ILuApiItem, S extends ILuApiService<T> = ILuApiService<T>>\r\nimplements ILuApiOptionFeeder<T>, ILuOnOpenSubscriber {\r\n\toutOptions$ = new Subject<T[]>();\r\n\tloading$: Observable<boolean>;\r\n\tempty$: Observable<boolean>;\r\n\r\n\tprotected _clue$: Observable<string>;\r\n\r\n\tset clue$(clue$: Observable<string>) {\r\n\t\t// this.initObservables(clue$);\r\n\t\tthis._clue$ = clue$;\r\n\t}\r\n\tconstructor(protected _service: S) {}\r\n\tinit() {\r\n\t\tthis.initObservables();\r\n\t}\r\n\tonOpen() {\r\n\t\tthis.resetClue();\r\n\t}\r\n\tonClose() {\r\n\t\tthis.clearOptions();\r\n\t}\r\n\tprotected initObservables() {\r\n\t\t// this._clue$ = clue$.pipe(share());\r\n\t\tconst results$ = this._clue$\r\n\t\t.pipe(\r\n\t\t\tswitchMap(clue => this._service.searchAll(clue)),\r\n\t\t\tcatchError(err => of([])),\r\n\t\t\tshare(),\r\n\t\t);\r\n\r\n\t\tresults$.subscribe(items => this.outOptions$.next(items));\r\n\t\tthis.loading$ = merge(\r\n\t\t\tthis._clue$.pipe(mapTo(true)),\r\n\t\t\tresults$.pipe(mapTo(false)),\r\n\t\t);\r\n\t\tthis.empty$ = results$.pipe(\r\n\t\t\tmap(o => o.length === 0),\r\n\t\t);\r\n\t}\r\n\tabstract resetClue();\r\n\tprotected clearOptions() {\r\n\t\tthis.outOptions$.next([]);\r\n\t}\r\n}\r\n\r\nexport interface ILuApiOptionPagedSearcher<T extends ILuApiItem = ILuApiItem> extends ILuApiOptionSearcher<T> {}\r\n\r\nexport abstract class ALuApiOptionPagedSearcher<T extends ILuApiItem = ILuApiItem, S extends ILuApiService<T> = ILuApiService<T>>\r\nextends ALuApiOptionSearcher<T, S>\r\nimplements ILuApiOptionPagedSearcher<T>, ILuOnScrollBottomSubscriber {\r\n\toutOptions$ = new Subject<T[]>();\r\n\tloading$: Observable<boolean>;\r\n\tprotected _loading = false;\r\n\tprotected _page$ = new Subject<number>();\r\n\tprotected _page: number;\r\n\tprotected _options: T[] = [];\r\n\r\n\tconstructor(service: S) {\r\n\t\tsuper(service);\r\n\t}\r\n\tonOpen() {\r\n\t\tthis.resetClue();\r\n\t\tthis.resetPage();\r\n\t}\r\n\tonScrollBottom() {\r\n\t\tif (!this._loading) {\r\n\t\t\tthis._page$.next(this._page + 1);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected initObservables() {\r\n\t\tconst distinctPage$ = this._page$.pipe(\r\n\t\t\tdistinctUntilChanged(),\r\n\t\t\ttap(p => this._page = p),\r\n\t\t);\r\n\r\n\t\t// this._clue$ = clue$.pipe(\r\n\t\t// \ttap(() => this._page$.next(0)),\r\n\t\t// \t// distinctUntilChanged(),\r\n\t\t// \tshare()\r\n\t\t// );\r\n\t\tconst results$ = combineLatest(\r\n\t\t\tdistinctPage$,\r\n\t\t\tthis._clue$,\r\n\t\t).pipe(\r\n\t\t\tdebounceTime(100),\r\n\t\t\tswitchMap(([page, clue]) => this._service.searchPaged(clue, page)),\r\n\t\t\tcatchError(err => of([])),\r\n\t\t\tshare(),\r\n\t\t);\r\n\r\n\t\tresults$\r\n\t\t.pipe(withLatestFrom(distinctPage$))\r\n\t\t.subscribe(([items, page]) => {\r\n\t\t\tif (page === 0) {\r\n\t\t\t\tthis._options = [...items];\r\n\t\t\t} else {\r\n\t\t\t\tthis._options.push(...items);\r\n\t\t\t}\r\n\t\t\tthis.outOptions$.next([...this._options]);\r\n\t\t});\r\n\t\tthis.loading$ = merge(\r\n\t\t\tthis._clue$.pipe(mapTo(true)),\r\n\t\t\tresults$.pipe(mapTo(false)),\r\n\t\t);\r\n\t\tthis.loading$.subscribe(l => this._loading = l);\r\n\t\tthis.empty$ = this.outOptions$.pipe(\r\n\t\t\tmap(o => o.length === 0),\r\n\t\t);\r\n\t}\r\n\tabstract resetClue();\r\n\tresetPage() {\r\n\t\tthis._page$.next(0);\r\n\t}\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "ILuApiOptionFeeder"
        },
        {
            "name": "ILuApiPagerService",
            "id": "interface-ILuApiPagerService-870d7448a7f7752bbcd04d03297e9d90",
            "file": "packages/ng/libraries/api/src/lib/select/pager/api-pager.model.ts",
            "type": "interface",
            "sourceCode": "import { ILuOnOpenSubscriber, ILuOnScrollBottomSubscriber } from '@lucca-front/ng/core';\r\nimport { ILuOptionOperator } from '@lucca-front/ng/option';\r\nimport { ILuApiItem } from '../../api.model';\r\nimport { Observable, of, merge, Subject } from 'rxjs';\r\nimport { switchMap, catchError, mapTo, tap, map, distinctUntilChanged } from 'rxjs/operators';\r\nimport { ILuApiService } from '../../service/index';\r\n\r\nenum Strategy {\r\n\tappend,\r\n\treplace,\r\n}\r\nconst MAGIC_PAGE_SIZE = 20;\r\nexport interface ILuApiOptionPager<T extends ILuApiItem = ILuApiItem> extends ILuOptionOperator<T> {}\r\nexport interface ILuApiPagerService<T extends ILuApiItem = ILuApiItem> {\r\n\tgetPaged(page: number): Observable<T[]>;\r\n}\r\n\r\nexport abstract class ALuApiOptionPager<T extends ILuApiItem = ILuApiItem, S extends ILuApiService<T> = ILuApiService<T>>\r\nimplements ILuApiOptionPager<T>, ILuOnOpenSubscriber, ILuOnScrollBottomSubscriber {\r\n\toutOptions$ = new Subject<T[]>();\r\n\tloading$: Observable<boolean>;\r\n\r\n\tprotected _loading = false;\r\n\tprotected _results$: Observable<{ items: T[], strategy: Strategy }>;\r\n\tprotected _options: T[] = [];\r\n\tprotected _page$ = new Subject<number>();\r\n\tprotected _page: number;\r\n\tprotected _initialized = false;\r\n\tconstructor(protected _service: S) {\r\n\t}\r\n\tprotected init() {\r\n\t\tthis.initObservables();\r\n\t}\r\n\tonOpen() {\r\n\t\tif (!this._initialized) {\r\n\t\t\tthis._page$.next(0);\r\n\t\t\tthis._initialized = true;\r\n\t\t}\r\n\t}\r\n\t// onClose() {\r\n\t// \tthis._page$.next(0);\r\n\t// }\r\n\tonScrollBottom() {\r\n\t\tif (!this._loading) {\r\n\t\t\tthis._page$.next(this._page + 1);\r\n\t\t}\r\n\t}\r\n\tprotected initObservables() {\r\n\t\tconst _results$: Observable<{ items: T[], strategy: Strategy }> = this._page$\r\n\t\t.pipe(\r\n\t\t\tdistinctUntilChanged(),\r\n\t\t\ttap(p => this._page = p),\r\n\t\t\tswitchMap(page => {\r\n\t\t\t\tif (page === undefined) {\r\n\t\t\t\t\treturn of({ items: [], strategy: Strategy.replace });\r\n\t\t\t\t}\r\n\t\t\t\treturn this._service.getPaged(page).pipe(\r\n\t\t\t\t\tmap(items => ({ items: items, strategy: page === 0 ? Strategy.replace : Strategy.append }))\r\n\t\t\t\t);\r\n\t\t\t}),\r\n\t\t\tcatchError(err => of({ items: [], strategy: Strategy.replace })),\r\n\t\t\ttap(results => {\r\n\t\t\t\tif (results.strategy === Strategy.replace) {\r\n\t\t\t\t\tthis._options = [...results.items];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._options.push(...results.items);\r\n\t\t\t\t}\r\n\t\t\t\tthis.outOptions$.next([...this._options]);\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tthis.loading$ = merge(\r\n\t\t\tthis._page$.pipe(mapTo(true)),\r\n\t\t\t_results$.pipe(mapTo(false)),\r\n\t\t);\r\n\t\tthis.loading$.subscribe(l => this._loading = l);\r\n\t}\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "ILuApiResponse",
            "id": "interface-ILuApiResponse-89867438d31ca283baf649cef0d020d4",
            "file": "packages/ng/libraries/api/src/lib/api.model.ts",
            "type": "interface",
            "sourceCode": "export interface ILuApiSuggestion<T> {\r\n\trelevance: any;\r\n\titem: T;\r\n}\r\nexport interface ILuApiItem<TId = number> {\r\n\tid: TId;\r\n\tname?: string;\r\n}\r\nexport interface ILuApiResponse<D = any> {\r\n\tdata: D;\r\n}\r\nexport interface ILuApiCollectionResponse<T extends ILuApiItem = ILuApiItem> extends ILuApiResponse<{ items: T[] }> {}\r\n",
            "properties": [
                {
                    "name": "data",
                    "type": "D",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuApiService",
            "id": "interface-ILuApiService-213d3b2078772cd6854c57ae2c84c1a6",
            "file": "packages/ng/libraries/api/src/lib/service/api-service.model.ts",
            "type": "interface",
            "sourceCode": "import { ILuApiItem } from '../api.model';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface ILuApiService<T extends ILuApiItem = ILuApiItem> {\r\n\tgetAll(filters?: string[]): Observable<T[]>;\r\n\tgetPaged(page: number, filters?: string[]): Observable<T[]>;\r\n\tsearchAll(clue: string, filters?: string[]): Observable<T[]>;\r\n\tsearchPaged(clue: string, page: number, filters?: string[]): Observable<T[]>;\r\n}\r\n\r\nexport abstract class ALuApiService<T extends ILuApiItem = ILuApiItem> implements ILuApiService<T> {\r\n\tabstract getAll(filters?: string[]): Observable<T[]>;\r\n\tabstract getPaged(page: number, filters?: string[]): Observable<T[]>;\r\n\tabstract searchAll(clue: string, filters?: string[]): Observable<T[]>;\r\n\tabstract searchPaged(clue: string, page: number, filters?: string[]): Observable<T[]>;\r\n}",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 5,
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchAll",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchPaged",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "ILuApiSuggestion",
            "id": "interface-ILuApiSuggestion-89867438d31ca283baf649cef0d020d4",
            "file": "packages/ng/libraries/api/src/lib/api.model.ts",
            "type": "interface",
            "sourceCode": "export interface ILuApiSuggestion<T> {\r\n\trelevance: any;\r\n\titem: T;\r\n}\r\nexport interface ILuApiItem<TId = number> {\r\n\tid: TId;\r\n\tname?: string;\r\n}\r\nexport interface ILuApiResponse<D = any> {\r\n\tdata: D;\r\n}\r\nexport interface ILuApiCollectionResponse<T extends ILuApiItem = ILuApiItem> extends ILuApiResponse<{ items: T[] }> {}\r\n",
            "properties": [
                {
                    "name": "item",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "relevance",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuClearer",
            "id": "interface-ILuClearer-5db382dbad88f956515fa792abc124c7",
            "file": "packages/ng/libraries/input/src/lib/clearer/clearer.model.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nexport interface ILuClearer<T = any> {\r\n\tonClear: Observable<T>;\r\n}\r\nexport abstract class ALuClearer<T = any> implements ILuClearer<T> {\r\n\tonClear: Observable<T>;\r\n}\r\n",
            "properties": [
                {
                    "name": "onClear",
                    "type": "Observable<T>",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuDateAdapter",
            "id": "interface-ILuDateAdapter-0c78a59880e211a93b7c21c1740d7604",
            "file": "packages/ng/libraries/core/src/lib/date/date-adapter.interface.ts",
            "type": "interface",
            "sourceCode": "import { ELuDateGranularity } from './date-granularity.enum';\r\n\r\nexport interface ILuDateAdapter<D> {\r\n\tforge(year: number, month: number, date: number): D;\r\n\tforgeToday(): D;\r\n\tforgeInvalid(): D;\r\n\tisValid(d: D): boolean;\r\n\tcompare(a: D, b: D, granularity: ELuDateGranularity): number;\r\n\tisParsable(text: string, granularity?: ELuDateGranularity): boolean;\r\n\tparse(text: string, granularity?: ELuDateGranularity): D;\r\n\tformat(d: D, format: string): string;\r\n\tclone(d: D): D;\r\n\r\n\tgetYear(d: D): number;\r\n\tgetMonth(d: D): number;\r\n\tgetDate(d: D): number;\r\n\tgetDay(d: D): number;\r\n\r\n\tadd(d: D, count: number, granularity: ELuDateGranularity): D;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        },
                        {
                            "name": "count",
                            "type": "number"
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity"
                        }
                    ],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "count",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "compare",
                    "args": [
                        {
                            "name": "a",
                            "type": "D"
                        },
                        {
                            "name": "b",
                            "type": "D"
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "forge",
                    "args": [
                        {
                            "name": "year",
                            "type": "number"
                        },
                        {
                            "name": "month",
                            "type": "number"
                        },
                        {
                            "name": "date",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 4,
                    "jsdoctags": [
                        {
                            "name": "year",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "forgeInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 6
                },
                {
                    "name": "forgeToday",
                    "args": [],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 5
                },
                {
                    "name": "format",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        },
                        {
                            "name": "format",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDate",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDay",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMonth",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getYear",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isParsable",
                    "args": [
                        {
                            "name": "text",
                            "type": "string"
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValid",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parse",
                    "args": [
                        {
                            "name": "text",
                            "type": "string"
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "ILuDateInputLabel",
            "id": "interface-ILuDateInputLabel-f71774277dda7d5a8799fd784db6a13b",
            "file": "packages/ng/libraries/date/src/lib/input/date-input.translate.ts",
            "type": "interface",
            "sourceCode": "import { ILuTranslation } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuDateInputLabel {\r\n\tplaceholderDay: string;\r\n\tplaceholderMonth: string;\r\n\tplaceholderYear: string;\r\n\tformatDay: string;\r\n\tformatMonth: string;\r\n\tformatYear: string;\r\n}\r\nexport abstract class ALuDateInputLabel {\r\n\tplaceholderDay: string;\r\n\tplaceholderMonth: string;\r\n\tplaceholderYear: string;\r\n\tformatDay: string;\r\n\tformatMonth: string;\r\n\tformatYear: string;\r\n}\r\n\r\nexport const luDateInputTranslations = {\r\n\ten: {\r\n\t\tplaceholderDay: 'dd/mm/yyyy',\r\n\t\tplaceholderMonth: 'mm/yyyy',\r\n\t\tplaceholderYear: 'yyyy',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n\t'en-GB': {\r\n\t\tplaceholderDay: 'dd/mm/yyyy',\r\n\t\tplaceholderMonth: 'mm/yyyy',\r\n\t\tplaceholderYear: 'yyyy',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n\t'en-US': {\r\n\t\tplaceholderDay: 'mm/dd/yyyy',\r\n\t\tplaceholderMonth: 'mm/yyyy',\r\n\t\tplaceholderYear: 'yyyy',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n\tfr: {\r\n\t\tplaceholder: 'jj/mm/aaaa',\r\n\t\tplaceholderDay: 'jj/mm/aaaa',\r\n\t\tplaceholderMonth: 'mm/aaaa',\r\n\t\tplaceholderYear: 'aaaa',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n} as ILuTranslation<ILuDateInputLabel>;\r\n",
            "properties": [
                {
                    "name": "formatDay",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "formatMonth",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "formatYear",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "placeholderDay",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "placeholderMonth",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "placeholderYear",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuDateSelectInputLabel",
            "id": "interface-ILuDateSelectInputLabel-b85fbfd635c92c577c1657def9c19d07",
            "file": "packages/ng/libraries/date/src/lib/select/date-select-input.translate.ts",
            "type": "interface",
            "sourceCode": "import { ILuTranslation } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuDateSelectInputLabel {\r\n\tplaceholderDay: string;\r\n\tplaceholderMonth: string;\r\n\tplaceholderYear: string;\r\n\tformatDay: string;\r\n\tformatMonth: string;\r\n\tformatYear: string;\r\n}\r\nexport abstract class ALuDateSelectInputLabel {\r\n\tplaceholderDay: string;\r\n\tplaceholderMonth: string;\r\n\tplaceholderYear: string;\r\n\tformatDay: string;\r\n\tformatMonth: string;\r\n\tformatYear: string;\r\n}\r\n\r\nexport const luDateSelectInputTranslations = {\r\n\ten: {\r\n\t\tplaceholderDay: 'dd/mm/yyyy',\r\n\t\tplaceholderMonth: 'mm/yyyy',\r\n\t\tplaceholderYear: 'yyyy',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n\t'en-US': {\r\n\t\tplaceholderDay: 'mm/dd/yyyy',\r\n\t\tplaceholderMonth: 'mm/yyyy',\r\n\t\tplaceholderYear: 'yyyy',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n\tfr: {\r\n\t\tplaceholder: 'jj/mm/aaaa',\r\n\t\tplaceholderDay: 'jj/mm/aaaa',\r\n\t\tplaceholderMonth: 'mm/aaaa',\r\n\t\tplaceholderYear: 'aaaa',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n} as ILuTranslation<ILuDateSelectInputLabel>;\r\n",
            "properties": [
                {
                    "name": "formatDay",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "formatMonth",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "formatYear",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "placeholderDay",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "placeholderMonth",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "placeholderYear",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuDepartment",
            "id": "interface-ILuDepartment-3e089e3f10742f9ba0118cb469e3e613",
            "file": "packages/ng/libraries/department/src/lib/department.model.ts",
            "type": "interface",
            "sourceCode": "export interface ILuDepartment {\r\n\tid: number;\r\n\tname: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuDepartmentSelectInputLabel",
            "id": "interface-ILuDepartmentSelectInputLabel-caddf4d3f0eb16df516c1a5a47034635",
            "file": "packages/ng/libraries/department/src/lib/select/input/department-select-input.translate.ts",
            "type": "interface",
            "sourceCode": "import { ILuTranslation } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuDepartmentSelectInputLabel {\r\n\tdepartments: string;\r\n}\r\nexport abstract class ALuDepartmentSelectInputLabel {\r\n\tdepartments: string;\r\n}\r\n\r\nexport const luDepartmentSelectInputTranslations = {\r\n\ten: {\r\n\t\tdepartments: 'departments',\r\n\t},\r\n\tfr: {\r\n\t\tdepartments: 'départements',\r\n\t},\r\n} as ILuTranslation<ILuDepartmentSelectInputLabel>;\r\n",
            "properties": [
                {
                    "name": "departments",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuDepartmentService",
            "id": "interface-ILuDepartmentService-b04d24353c6cfc5fd8e6d063275b48a5",
            "file": "packages/ng/libraries/department/src/lib/service/department-service.model.ts",
            "type": "interface",
            "sourceCode": "import { ILuTree } from '@lucca-front/ng/core';\r\nimport { ILuDepartment } from '../department.model';\r\nimport { Observable } from 'rxjs';\r\nimport { ILuApiService, ALuApiService } from '@lucca-front/ng/api';\r\n\r\nexport interface ILuDepartmentService<D extends ILuDepartment = ILuDepartment> extends ILuApiService<D> {\r\n\tgetTrees(): Observable<ILuTree<D>[]>;\r\n}\r\nexport abstract class ALuDepartmentService<D extends ILuDepartment = ILuDepartment> extends ALuApiService<D>  implements ILuDepartmentService<D> {\r\n\tabstract getTrees(): Observable<ILuTree<D>[]>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "getTrees",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ILuTree[]>",
                    "typeParameters": [],
                    "line": 7
                }
            ],
            "extends": "ILuApiService"
        },
        {
            "name": "ILuDropdownItem",
            "id": "interface-ILuDropdownItem-38f6cd3308c53a474c766697dbf28b5a",
            "file": "packages/ng/libraries/dropdown/src/lib/item/dropdown-item.model.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nexport interface ILuDropdownItem {\r\n\tonSelect: Observable<boolean>;\r\n\tfocus(): void;\r\n}\r\nexport abstract class ALuDropdownItem implements ILuDropdownItem {\r\n\tabstract onSelect: Observable<boolean>;\r\n\tabstract focus(): void;\r\n}\r\n",
            "properties": [
                {
                    "name": "onSelect",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 5
                }
            ]
        },
        {
            "name": "ILuDropdownPanel",
            "id": "interface-ILuDropdownPanel-e91632295be63c6e764e941286a18262",
            "file": "packages/ng/libraries/dropdown/src/lib/panel/dropdown-panel.model.ts",
            "type": "interface",
            "sourceCode": "import { ILuPopoverPanel } from '@lucca-front/ng/popover';\r\n\r\nexport interface ILuDropdownPanel extends ILuPopoverPanel {}",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "ILuPopoverPanel"
        },
        {
            "name": "ILuEstablishment",
            "id": "interface-ILuEstablishment-9c252cb5254c063656395c2c6fdc0d66",
            "file": "packages/ng/libraries/establishment/src/lib/establishment.model.ts",
            "type": "interface",
            "sourceCode": "import { ILuApiItem } from '@lucca-front/ng/api';\r\n\r\nexport interface ILuLegalUnit extends ILuApiItem {\r\n\tcountryId: number;\r\n}\r\n\r\nexport interface ILuEstablishment extends ILuApiItem {\r\n\tcode: string;\r\n\tlegalUnitId: number;\r\n\tlegalUnit: ILuLegalUnit;\r\n}\r\n",
            "properties": [
                {
                    "name": "code",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "legalUnit",
                    "type": "ILuLegalUnit",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "legalUnitId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ILuApiItem"
        },
        {
            "name": "ILuEstablishmentSelectInputLabel",
            "id": "interface-ILuEstablishmentSelectInputLabel-e66108052e3e4fbd846a61e82fcf5aad",
            "file": "packages/ng/libraries/establishment/src/lib/select/input/establishment-select-input.translate.ts",
            "type": "interface",
            "sourceCode": "import { ILuTranslation } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuEstablishmentSelectInputLabel {\r\n\testablishments: string;\r\n}\r\nexport abstract class ALuEstablishmentSelectInputLabel {\r\n\testablishments: string;\r\n}\r\n\r\nexport const luEstablishmentSelectInputTranslations = {\r\n\ten: {\r\n\t\testablishments: 'establishments',\r\n\t},\r\n\tfr: {\r\n\t\testablishments: 'établissements',\r\n\t},\r\n} as ILuTranslation<ILuEstablishmentSelectInputLabel>;\r\n",
            "properties": [
                {
                    "name": "establishments",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuEstablishmentService",
            "id": "interface-ILuEstablishmentService-c71cdc137fc4d703e10c5b70119a36f2",
            "file": "packages/ng/libraries/establishment/src/lib/service/establishment-service.model.ts",
            "type": "interface",
            "sourceCode": "import { ILuApiService, ALuApiService } from '@lucca-front/ng/api';\r\nimport { ILuEstablishment } from '../establishment.model';\r\n\r\nexport interface ILuEstablishmentService<E extends ILuEstablishment = ILuEstablishment>\r\n\textends ILuApiService<E> { }\r\n\r\nexport abstract class ALuEstablishmentService<E extends ILuEstablishment = ILuEstablishment>\r\n\textends ALuApiService<E>\r\n\timplements ILuEstablishmentService<E> { }",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "ILuApiService"
        },
        {
            "name": "ILuGroup",
            "id": "interface-ILuGroup-ea33acc9e86aad481773cd736647ca81",
            "file": "packages/ng/libraries/core/src/lib/group/group.interface.ts",
            "type": "interface",
            "sourceCode": "export interface ILuGroup<TItem = any, TKey = any> {\r\n\tkey: TKey,\r\n\titems: TItem[],\r\n}\r\n",
            "properties": [
                {
                    "name": "items",
                    "type": "TItem[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "key",
                    "type": "TKey",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuInput",
            "id": "interface-ILuInput-1aefde7130f0d9ee8ef49e0a14e44ed5",
            "file": "packages/ng/libraries/input/src/lib/input.model.ts",
            "type": "interface",
            "sourceCode": "import { ControlValueAccessor } from '@angular/forms';\r\nimport { ChangeDetectorRef, Renderer2, ElementRef } from '@angular/core';\r\n\r\nexport declare interface ILuInput<T = any> extends ControlValueAccessor {}\r\n\r\nexport abstract class ALuInput<T = any> implements ILuInput<T> {\r\n\tprotected _placeholder: string;\r\n\tget placeholder() { return this._placeholder; }\r\n\tprotected _value: T;\r\n\tconstructor(\r\n\t\tprotected _changeDetectorRef: ChangeDetectorRef,\r\n\t\tprotected _elementRef: ElementRef,\r\n\t\tprotected _renderer: Renderer2,\r\n\t) {}\r\n\tsetValue(value) {\r\n\t\tthis.value = value;\r\n\t\tthis._cvaOnChange(value);\r\n\t\tthis._onTouched();\r\n\t}\r\n\tget value(): T {\r\n\t\treturn this._value;\r\n\t}\r\n\tset value(value: T) {\r\n\t\tthis._value = value;\r\n\t\tthis.render();\r\n\t\tthis.applyClasses();\r\n\t\tthis._changeDetectorRef.markForCheck();\r\n\t}\r\n\t// From ControlValueAccessor interface\r\n\twriteValue(value: T) {\r\n\t\tthis.value = value;\r\n\t}\r\n\t// From ControlValueAccessor interface\r\n\tprotected _cvaOnChange = (v: T) => {};\r\n\tregisterOnChange(fn: any) {\r\n\t\tthis._cvaOnChange = fn;\r\n\t}\r\n\t// From ControlValueAccessor interface\r\n\tprotected _onTouched = () => {};\r\n\tregisterOnTouched(fn: any) {\r\n\t\tthis._onTouched = fn;\r\n\t}\r\n\tprotected isEmpty() {\r\n\t\treturn this.value === null || this.value === undefined;\r\n\t}\r\n\tprotected applyClasses() {\r\n\t\tif (this.isEmpty()) {\r\n\t\t\tthis._renderer.removeClass(this._elementRef.nativeElement, 'is-filled');\r\n\t\t} else {\r\n\t\t\tthis._renderer.addClass(this._elementRef.nativeElement, 'is-filled');\r\n\t\t}\r\n\t}\r\n\r\n\tprotected abstract render(): void;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "ControlValueAccessor"
        },
        {
            "name": "ILuInputDisplayer",
            "id": "interface-ILuInputDisplayer-6e39909d985e7eaab753249c43a2686e",
            "file": "packages/ng/libraries/input/src/lib/displayer/input-displayer.model.ts",
            "type": "interface",
            "sourceCode": "import { ViewRef } from '@angular/core';\r\n\r\nexport interface ILuInputDisplayer<T = any> {\r\n\tmultiple: boolean;\r\n\tgetViewRef(value: T | T[]): ViewRef;\r\n}\r\nexport abstract class ALuInputDisplayer<T = any> implements ILuInputDisplayer<T> {\r\n\tmultiple = false;\r\n\tabstract getViewRef(value: T | T[]): ViewRef;\r\n}\r\n",
            "properties": [
                {
                    "name": "multiple",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "getViewRef",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "ViewRef",
                    "typeParameters": [],
                    "line": 5,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "ILuInputWithPicker",
            "id": "interface-ILuInputWithPicker-0c49ea8602ba0198b5e6697de64bffa6",
            "file": "packages/ng/libraries/picker/src/lib/input-picker.model.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { ILuPopoverPanel, ALuPopoverPanel, ILuPopoverTrigger } from '@lucca-front/ng/popover';\r\nimport { ILuInput } from '@lucca-front/ng/input';\r\n\r\nexport declare interface ILuPickerPanel<T = any> extends ILuPopoverPanel {\r\n\t/**\r\n\t * self explainatory\r\n\t */\r\n\tmultiple: boolean;\r\n\t/**\r\n\t * emits when a value was selected on the picker\r\n\t */\r\n\tonSelectValue: Observable<T | T[]>;\r\n\t/**\r\n\t * called to tell the picker what's the current value\r\n\t * @param value\r\n\t */\r\n\tsetValue(value: T | T[]): void;\r\n}\r\nexport abstract class ALuPickerPanel<T = any> extends ALuPopoverPanel implements ILuPickerPanel<T> {\r\n\tmultiple: boolean;\r\n\tonSelectValue: Observable<T | T[]>;\r\n\tabstract setValue(value: T | T[]): void;\r\n}\r\n\r\nexport declare interface ILuInputWithPicker<TValue = any>\r\nextends ILuInput<TValue>, ILuPopoverTrigger<ILuPickerPanel<TValue>> {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "ILuInput"
        },
        {
            "name": "ILuLegalUnit",
            "id": "interface-ILuLegalUnit-9c252cb5254c063656395c2c6fdc0d66",
            "file": "packages/ng/libraries/establishment/src/lib/establishment.model.ts",
            "type": "interface",
            "sourceCode": "import { ILuApiItem } from '@lucca-front/ng/api';\r\n\r\nexport interface ILuLegalUnit extends ILuApiItem {\r\n\tcountryId: number;\r\n}\r\n\r\nexport interface ILuEstablishment extends ILuApiItem {\r\n\tcode: string;\r\n\tlegalUnitId: number;\r\n\tlegalUnit: ILuLegalUnit;\r\n}\r\n",
            "properties": [
                {
                    "name": "countryId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ILuApiItem"
        },
        {
            "name": "ILuModalConfig",
            "id": "interface-ILuModalConfig-3b856c209db4c327dff9192ea839aa69",
            "file": "packages/ng/libraries/modal/src/lib/modal-config.model.ts",
            "type": "interface",
            "sourceCode": "import { ILuPopupConfig } from '@lucca-front/ng/popup';\r\nimport { ChangeDetectionStrategy } from '@angular/core';\r\n\r\nexport interface ILuModalConfig extends ILuPopupConfig {\r\n\tchangeDetection?: ChangeDetectionStrategy;\r\n}\r\n",
            "properties": [
                {
                    "name": "changeDetection",
                    "type": "ChangeDetectionStrategy",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ILuPopupConfig"
        },
        {
            "name": "ILuModalContent",
            "id": "interface-ILuModalContent-ff08cded233c79942c15c138787b412f",
            "file": "packages/ng/libraries/modal/src/lib/modal.model.ts",
            "type": "interface",
            "sourceCode": "import { ILuPopupContent } from '@lucca-front/ng/popup';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface ILuModalContent<T = any> extends ILuPopupContent {\r\n\ttitle: string;\r\n\tsubmitAction?: () => T | Observable<T>;\r\n\tsubmitLabel?: string;\r\n\tsubmitPalette?: string;\r\n\tsubmitDisabled?: boolean;\r\n\tsubmitCounter?: number;\r\n\tcancelLabel?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "cancelLabel",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "submitAction",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "submitCounter",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "submitDisabled",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "submitLabel",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "submitPalette",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ILuPopupContent"
        },
        {
            "name": "ILuModalLabel",
            "id": "interface-ILuModalLabel-1ab18b8781734db9543447b5f80fa54f",
            "file": "packages/ng/libraries/modal/src/lib/modal.translate.ts",
            "type": "interface",
            "sourceCode": "import { ILuTranslation } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuModalLabel {\r\n\tsubmit: string;\r\n\tcancel: string;\r\n}\r\nexport abstract class ALuModalLabel {\r\n\tsubmit: string;\r\n\tcancel: string;\r\n}\r\n\r\nexport const luModalTranslations = {\r\n\ten: {\r\n\t\tsubmit: 'Ok',\r\n\t\tcancel: 'Cancel',\r\n\t},\r\n\tfr: {\r\n\t\tsubmit: 'Ok',\r\n\t\tcancel: 'Annuler',\r\n\t},\r\n} as ILuTranslation<ILuModalLabel>;\r\n",
            "properties": [
                {
                    "name": "cancel",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "submit",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuModalRef",
            "id": "interface-ILuModalRef-8372ee5b63f57257515c896873edd48b",
            "file": "packages/ng/libraries/modal/src/lib/modal-ref.model.ts",
            "type": "interface",
            "sourceCode": "import { ILuPopupRef, ALuPopupRef } from '@lucca-front/ng/popup';\r\nimport { ILuModalContent } from './modal.model';\r\n\r\nexport interface ILuModalRef<T extends ILuModalContent = ILuModalContent, D = any, R = any> extends ILuPopupRef<T, D, R> {}\r\nexport abstract class ALuModalRef<T extends ILuModalContent = ILuModalContent, D = any, R = any> extends ALuPopupRef<T, D, R> implements ILuModalRef<T, D, R> {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "ILuPopupRef"
        },
        {
            "name": "ILuNativeDateAdapterOptions",
            "id": "interface-ILuNativeDateAdapterOptions-5b88710fbcce7abf45dc77e00a0d53ad",
            "file": "packages/ng/libraries/core/src/lib/date/native/native-date.option.ts",
            "type": "interface",
            "sourceCode": "import { InjectionToken } from '@angular/core';\r\n\r\nexport interface ILuNativeDateAdapterOptions {\r\n\tuseUtc?: boolean;\r\n}\r\nexport const luDefaultNativeDateAdapterOptions: ILuNativeDateAdapterOptions = {\r\n\tuseUtc: false,\r\n};\r\nexport const LU_NATIVE_DATE_ADAPTER_OPTIONS = new InjectionToken<ILuNativeDateAdapterOptions>('Native date adapter options');\r\n",
            "properties": [
                {
                    "name": "useUtc",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuOnCloseSubscriber",
            "id": "interface-ILuOnCloseSubscriber-3db89012092932db38f5853b7617b900",
            "file": "packages/ng/libraries/core/src/lib/event/on-close.subscriber.ts",
            "type": "interface",
            "sourceCode": "export interface ILuOnCloseSubscriber {\r\n\tonClose(): void;\r\n}\r\nexport abstract class ALuOnCloseSubscriber implements ILuOnCloseSubscriber {\r\n\tabstract onClose(): void;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 2
                }
            ]
        },
        {
            "name": "ILuOnOpenSubscriber",
            "id": "interface-ILuOnOpenSubscriber-3035776533a0e11caa7d667378d57f7d",
            "file": "packages/ng/libraries/core/src/lib/event/on-open.subscriber.ts",
            "type": "interface",
            "sourceCode": "export interface ILuOnOpenSubscriber {\r\n\tonOpen(): void;\r\n}\r\nexport abstract class ALuOnOpenSubscriber implements ILuOnOpenSubscriber {\r\n\tabstract onOpen(): void;\r\n}\r\n\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 2
                }
            ]
        },
        {
            "name": "ILuOnScrollBottomSubscriber",
            "id": "interface-ILuOnScrollBottomSubscriber-03853129f0baef83a91c4e50de952b0e",
            "file": "packages/ng/libraries/core/src/lib/event/on-scroll-bottom.subscriber.ts",
            "type": "interface",
            "sourceCode": "export interface ILuOnScrollBottomSubscriber {\r\n\tonScrollBottom(): void;\r\n}\r\nexport abstract class ALuOnScrollBottomSubscriber implements ILuOnScrollBottomSubscriber {\r\n\tabstract onScrollBottom(): void;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "onScrollBottom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 2
                }
            ]
        },
        {
            "name": "ILuOptionItem",
            "id": "interface-ILuOptionItem-06436e59abab567bd6f6baa78f471bc0",
            "file": "packages/ng/libraries/option/src/lib/item/option-item.model.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { ElementRef } from '@angular/core';\r\n\r\nexport interface ILuOptionItem<T = any> {\r\n\tvalue: T;\r\n\tonSelect: Observable<this>;\r\n\telement: ElementRef;\r\n\tselected: boolean;\r\n\thighlighted: boolean;\r\n}\r\nexport abstract class ALuOptionItem<T = any> implements ILuOptionItem<T> {\r\n\tabstract value: T;\r\n\tabstract onSelect: Observable<this>;\r\n\tabstract element: ElementRef;\r\n\tabstract selected: boolean;\r\n\tabstract highlighted: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "element",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "highlighted",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "onSelect",
                    "type": "Observable<>",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "selected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "value",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuOptionOperator",
            "id": "interface-ILuOptionOperator-acd5adc99faff4a9772e2226fdf1a758",
            "file": "packages/ng/libraries/option/src/lib/operator/option-operator.model.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nexport interface ILuOptionOperator<T = any> {\r\n\tinOptions$?: Observable<T[]>;\r\n\toutOptions$?: Observable<T[]>;\r\n}\r\nexport abstract class ALuOptionOperator<T = any> implements ILuOptionOperator<T> {\r\n\tabstract inOptions$?: Observable<T[]>;\r\n\tabstract outOptions$?: Observable<T[]>;\r\n}\r\n",
            "properties": [
                {
                    "name": "inOptions$",
                    "type": "Observable<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "outOptions$",
                    "type": "Observable<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuOptionPickerPanel",
            "id": "interface-ILuOptionPickerPanel-c316b7f189aa79e19b8c38bcdd94e2c7",
            "file": "packages/ng/libraries/option/src/lib/picker/option-picker.model.ts",
            "type": "interface",
            "sourceCode": "import { ILuPickerPanel, ALuPickerPanel } from '@lucca-front/ng/picker';\r\nimport { Subscription, Observable, merge } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { ILuOptionItem } from '../item/index';\r\nimport { ESCAPE, TAB } from '@angular/cdk/keycodes';\r\n\r\nexport interface ILuOptionPickerPanel<T = any, O extends ILuOptionItem<T> = ILuOptionItem<T>> extends ILuPickerPanel<T> {}\r\n\r\nexport type LuOptionComparer<T> = (option1: T, option2: T) => boolean;\r\n\r\nexport abstract class ALuOptionPicker<T = any, O extends ILuOptionItem<T> = ILuOptionItem<T>> extends ALuPickerPanel<T> implements ILuOptionPickerPanel<T, O> {\r\n\tprotected _subs = new Subscription();\r\n\tonSelectValue: Observable<T | T[]>;\r\n\tprotected _value: T | T[];\r\n\tsetValue(value: T | T[]) {\r\n\t\tthis._value = value;\r\n\t\tthis._applySelected();\r\n\t}\r\n\tprivate __options$: Observable<O[]>;\r\n\tprotected get _options$() { return this.__options$; }\r\n\tprotected set _options$(options$: Observable<O[]>) {\r\n\t\tthis.__options$ = options$;\r\n\t\t// reapply selected when the options change\r\n\t\tthis._subs.add(\r\n\t\t\toptions$\r\n\t\t\t.subscribe(o => {\r\n\t\t\t\tthis._applySelected();\r\n\t\t\t\tthis._applyHighlight();\r\n\t\t\t})\r\n\t\t);\r\n\t\t// subscribe to any option.onSelect\r\n\t\tconst singleFlow$ = options$.pipe(switchMap(\r\n\t\t\titems => merge(...items.map(i => i.onSelect))\r\n\t\t));\r\n\t\tthis._subs.add(\r\n\t\t\tsingleFlow$.subscribe(option => this._toggle(option))\r\n\t\t);\r\n\t}\r\n\tprotected optionComparer: LuOptionComparer<T> =\r\n\t\t(option1: T, option2: T) => JSON.stringify(option1) === JSON.stringify(option2)\r\n\tprotected _toggle(option: O) {\r\n\t\tconst value = option.value;\r\n\t\tif (!this.multiple) {\r\n\t\t\tthis._select(value);\r\n\t\t} else {\r\n\t\t\tconst values = <T[]>this._value || [];\r\n\t\t\tlet newValues;\r\n\t\t\tif (values.some(v => this.optionComparer(v, value))) {\r\n\t\t\t\t// value was present, we remove it\r\n\t\t\t\tnewValues = values.filter(v => !this.optionComparer(v, value));\r\n\t\t\t} else {\r\n\t\t\t\t// value was absent, we add it\r\n\t\t\t\tnewValues = [...values, value];\r\n\t\t\t}\r\n\t\t\tthis._select(newValues);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _select(val: T | T[]) {\r\n\t\tthis._emitSelectValue(val);\r\n\t\tif (!this.multiple) {\r\n\t\t\tthis._emitCloseEvent();\r\n\t\t}\r\n\t}\r\n\tprotected abstract _applySelected();\r\n\tprotected abstract _applyHighlight();\r\n\tprotected destroy() {\r\n\t\tthis._subs.unsubscribe();\r\n\t}\r\n\t_handleKeydown(event: KeyboardEvent) {\r\n\t\tswitch (event.keyCode) {\r\n\t\t\tcase ESCAPE:\r\n\t\t\t\tthis._emitCloseEvent();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tbreak;\r\n\t\t\tcase TAB:\r\n\t\t\t\tthis._emitCloseEvent();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected abstract _emitSelectValue(value: T | T[]);\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "ILuPickerPanel"
        },
        {
            "name": "ILuOptionPlaceholderLabel",
            "id": "interface-ILuOptionPlaceholderLabel-4faa7c54b87b8435fff346ec8f7b95b6",
            "file": "packages/ng/libraries/option/src/lib/placeholder/option-placeholder.translate.ts",
            "type": "interface",
            "sourceCode": "import { ILuTranslation } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuOptionPlaceholderLabel {\r\n\tplaceholderDescription: string;\r\n\tplaceholderAction: string;\r\n}\r\nexport abstract class ALuOptionPlaceholderLabel implements ILuOptionPlaceholderLabel {\r\n\tplaceholderDescription: string;\r\n\tplaceholderAction: string;\r\n}\r\n\r\nexport const luOptionPlaceholderTranslations = {\r\n\ten: {\r\n\t\tplaceholderDescription: 'No results match your search criteria.',\r\n\t\tplaceholderAction: 'Clear search',\r\n\t},\r\n\tfr: {\r\n\t\tplaceholderDescription: 'Aucun résultat pour votre recherche',\r\n\t\tplaceholderAction: 'Vider la recherche',\r\n\t},\r\n} as ILuTranslation<ILuOptionPlaceholderLabel>;\r\n",
            "properties": [
                {
                    "name": "placeholderAction",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "placeholderDescription",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuOptionSelectAllLabel",
            "id": "interface-ILuOptionSelectAllLabel-ba2acbadf618d33996d65907e38db1fa",
            "file": "packages/ng/libraries/option/src/lib/selector/all/select-all.translate.ts",
            "type": "interface",
            "sourceCode": "import { ILuTranslation } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuOptionSelectAllLabel {\r\n\tselect: string;\r\n\tdeselect: string;\r\n}\r\nexport abstract class ALuOptionSelectAllLabel {\r\n\tselect: string;\r\n\tdeselect: string;\r\n}\r\n\r\nexport const luOptionSelectAllTranslations = {\r\n\ten: {\r\n\t\tselect: 'Select all',\r\n\t\tdeselect: 'Deselect all',\r\n\t},\r\n\tfr: {\r\n\t\tselect: 'Tout sélectionner',\r\n\t\tdeselect: 'Tout Déselectionner'\r\n\t},\r\n\tde: {\r\n\t\tselect: 'Alle auswählen',\r\n\t\tdeselect: 'Alle abwählen'\r\n\t},\r\n\tpt: {\r\n\t\tselect: 'Selecionar tudo',\r\n\t\tdeselect: 'Desselecionar tudo'\r\n\t},\r\n\tes: {\r\n\t\tselect: 'Seleccionar todo',\r\n\t\tdeselect: 'Desmarcar todo'\r\n\t},\r\n} as ILuTranslation<ILuOptionSelectAllLabel>;\r\n",
            "properties": [
                {
                    "name": "deselect",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "select",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuOptionSelector",
            "id": "interface-ILuOptionSelector-e769808cc58587f885dbe1971aeb0895",
            "file": "packages/ng/libraries/option/src/lib/selector/option-selector.model.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nexport interface ILuOptionSelector<T = any> {\r\n\tmultiple: boolean;\r\n\tonSelectValue: Observable<T | T[]>;\r\n\tsetValue(value: T | T[]): void;\r\n}\r\nexport abstract class ALuOptionSelector<T = any> implements ILuOptionSelector<T> {\r\n\tmultiple: boolean;\r\n\tabstract onSelectValue: Observable<T | T[]>;\r\n\tabstract setValue(value: T | T[]): void;\r\n}\r\n",
            "properties": [
                {
                    "name": "multiple",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "onSelectValue",
                    "type": "Observable<T | []>",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "ILuPickerPanel",
            "id": "interface-ILuPickerPanel-0c49ea8602ba0198b5e6697de64bffa6",
            "file": "packages/ng/libraries/picker/src/lib/input-picker.model.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { ILuPopoverPanel, ALuPopoverPanel, ILuPopoverTrigger } from '@lucca-front/ng/popover';\r\nimport { ILuInput } from '@lucca-front/ng/input';\r\n\r\nexport declare interface ILuPickerPanel<T = any> extends ILuPopoverPanel {\r\n\t/**\r\n\t * self explainatory\r\n\t */\r\n\tmultiple: boolean;\r\n\t/**\r\n\t * emits when a value was selected on the picker\r\n\t */\r\n\tonSelectValue: Observable<T | T[]>;\r\n\t/**\r\n\t * called to tell the picker what's the current value\r\n\t * @param value\r\n\t */\r\n\tsetValue(value: T | T[]): void;\r\n}\r\nexport abstract class ALuPickerPanel<T = any> extends ALuPopoverPanel implements ILuPickerPanel<T> {\r\n\tmultiple: boolean;\r\n\tonSelectValue: Observable<T | T[]>;\r\n\tabstract setValue(value: T | T[]): void;\r\n}\r\n\r\nexport declare interface ILuInputWithPicker<TValue = any>\r\nextends ILuInput<TValue>, ILuPopoverTrigger<ILuPickerPanel<TValue>> {}\r\n",
            "properties": [
                {
                    "name": "multiple",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>self explainatory</p>\n",
                    "line": 9
                },
                {
                    "name": "onSelectValue",
                    "type": "Observable<T | []>",
                    "optional": false,
                    "description": "<p>emits when a value was selected on the picker</p>\n",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "description": "<p>called to tell the picker what&#39;s the current value</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 491,
                                "end": 496,
                                "flags": 4194304,
                                "escapedText": "value"
                            },
                            "type": "T | T[]",
                            "tagName": {
                                "pos": 485,
                                "end": 490,
                                "flags": 4194304,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "extends": "ILuPopoverPanel"
        },
        {
            "name": "ILuPopoverPanel",
            "id": "interface-ILuPopoverPanel-2fe0734a6531a2b48be8e682c62d502c",
            "file": "packages/ng/libraries/popover/src/lib/panel/popover-panel.model.ts",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { ESCAPE } from '@angular/cdk/keycodes';\r\nimport { HorizontalConnectionPos, VerticalConnectionPos } from '@angular/cdk/overlay';\r\n\r\nexport type LuPopoverScrollStrategy = 'reposition' | 'block' | 'close';\r\n\r\nexport declare interface ILuPopoverPanel {\r\n\tscrollStrategy: LuPopoverScrollStrategy;\r\n\tcloseOnClick: boolean;\r\n\tpanelId?: string;\r\n\ttriggerId?: string;\r\n\ttemplateRef?: TemplateRef<any>;\r\n\r\n\t/** will emit when the panel wants to close */\r\n\tclose: Observable<void>;\r\n\t/** will emit when the panel wants to open */\r\n\topen: Observable<void>;\r\n\t/** will emit when the panel is hovered */\r\n\thovered: Observable<boolean>;\r\n\t/** classes to apply to the panel, uses ' ' for separating values */\r\n\tpanelClasses: string;\r\n\t/** class to apply to the panel content, uses ' ' for separating values */\r\n\tcontentClasses: string;\r\n\r\n\tkeydownEvents$: Observable<KeyboardEvent>;\r\n\r\n\tsetPositionClasses: (posX: HorizontalConnectionPos, posY: VerticalConnectionPos) => void;\r\n\r\n\t/** method called by the trigger when it opens the popover */\r\n\tonOpen(): void;\r\n\t/** method called by the trigger when it closes the popover */\r\n\tonClose(): void;\r\n}\r\n/**\r\n * abstract class for basic implementation of a popover panel\r\n */\r\nexport abstract class ALuPopoverPanel implements ILuPopoverPanel {\r\n\tpanelId: string;\r\n\ttriggerId: string;\r\n\r\n\tprotected _isOpen: boolean;\r\n\tget isOpen() { return this._isOpen; }\r\n\r\n\r\n\tprotected _closeOnClick = false;\r\n\tget closeOnClick() { return this._closeOnClick; }\r\n\tset closeOnClick(coc: boolean) { this._closeOnClick = coc; }\r\n\r\n\tprotected _trapFocus = false;\r\n\tget trapFocus() { return this._trapFocus; }\r\n\tset trapFocus(tf: boolean) { this._trapFocus = tf; }\r\n\r\n\tprotected _scrollStrategy: LuPopoverScrollStrategy = 'reposition';\r\n\tget scrollStrategy() { return this._scrollStrategy; }\r\n\tset scrollStrategy(ss: LuPopoverScrollStrategy) { this._scrollStrategy = ss; }\r\n\r\n\tprotected _templateRef: TemplateRef<any>;\r\n\tget templateRef() { return this._templateRef; }\r\n\tset templateRef(tr: TemplateRef<any>) { this._templateRef = tr; }\r\n\r\n\tprotected _positionClassesMap: any = {};\r\n\tprotected _panelClasses = '';\r\n\tget panelClasses() { return this._panelClasses; }\r\n\tset panelClasses(cl: string) {\r\n\t\tthis._panelClasses = cl;\r\n\t}\r\n\tget panelClassesMap() {\r\n\t\tconst map = this._panelClasses\r\n\t\t\t.split(' ')\r\n\t\t\t.filter(c => !!c)\r\n\t\t\t.reduce((obj: any, className: string) => {\r\n\t\t\t\tobj[className] = true;\r\n\t\t\t\treturn obj;\r\n\t\t\t}, {});\r\n\t\t// also add positiopn classes\r\n\t\treturn { ...map, ...this._positionClassesMap };\r\n\t}\r\n\r\n\tprotected _contentClasses = '';\r\n\tget contentClasses() { return this._contentClasses; }\r\n\tset contentClasses(cl: string) {\r\n\t\tthis._contentClasses = cl;\r\n\t}\r\n\tget contentClassesMap() {\r\n\t\treturn this._contentClasses\r\n\t\t\t.split(' ')\r\n\t\t\t.reduce((obj: any, className: string) => {\r\n\t\t\t\tobj[className] = true;\r\n\t\t\t\treturn obj;\r\n\t\t\t}, {});\r\n\t}\r\n\r\n\r\n\t/** Classes to be passed into the popover's overlay */\r\n\tprotected _overlayPaneClass: string | string[];\r\n\tpublic get overlayPaneClass() { return this._overlayPaneClass; }\r\n\tpublic set overlayPaneClass(opc) { this._overlayPaneClass = opc; }\r\n\r\n\t// /** Config object to be passed into the popover's content ngStyle */\r\n\r\n\tprotected _keydownEventsSub: Subscription;\r\n\tset keydownEvents$(evt$: Observable<KeyboardEvent>) {\r\n\t\tif (!this._keydownEventsSub) {\r\n\t\t\tthis._keydownEventsSub = evt$.subscribe(e => this._handleKeydown(e));\r\n\t\t}\r\n\t}\r\n\r\n\tclose: Observable<void>;\r\n\topen: Observable<void>;\r\n\thovered: Observable<boolean>;\r\n\tabstract _emitCloseEvent(): void;\r\n\tabstract _emitOpenEvent(): void;\r\n\tabstract _emitHoveredEvent(hovered: boolean): void;\r\n\r\n\tsetPositionClasses(posX: HorizontalConnectionPos, posY: VerticalConnectionPos): void {\r\n\t\tthis._positionClassesMap['is-before'] = posX === 'end';\r\n\t\tthis._positionClassesMap['is-after'] = posX === 'start';\r\n\t\tthis._positionClassesMap['is-above'] = posY === 'bottom';\r\n\t\tthis._positionClassesMap['is-below'] = posY === 'top';\r\n\t}\r\n\r\n\tonClick() {\r\n\t\tif (this.closeOnClick) {\r\n\t\t\tthis._emitCloseEvent();\r\n\t\t}\r\n\t}\r\n\r\n\tonOpen() {\r\n\t\tthis._isOpen = true;\r\n\t}\r\n\tonClose() {\r\n\t\tthis._isOpen = false;\r\n\t}\r\n\t/**\r\n\t * TODO: Refactor when @angular/cdk includes feature I mentioned on github see link below.\r\n\t * https://github.com/angular/material2/pull/5493#issuecomment-313085323\r\n\t */\r\n\t/** Disables close of popover when leaving trigger element and mouse over the popover */\r\n\tonMouseOver() {\r\n\t\tthis._emitHoveredEvent(true);\r\n\t}\r\n\t/** Enables close of popover when mouse leaving popover element */\r\n\tonMouseLeave() {\r\n\t\tthis._emitHoveredEvent(false);\r\n\t}\r\n\t/** does nothing but must be overridable */\r\n\tonMouseDown($event) {}\r\n\r\n\t_handleKeydown(event: KeyboardEvent) {\r\n\t\tswitch (event.keyCode) {\r\n\t\t\tcase ESCAPE:\r\n\t\t\t\tthis._emitCloseEvent();\r\n\t\t\t\treturn;\r\n\t\t}\r\n\t}\r\n}\r\n",
            "properties": [
                {
                    "name": "close",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "<p>will emit when the panel wants to close </p>\n",
                    "line": 16
                },
                {
                    "name": "closeOnClick",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "contentClasses",
                    "type": "string",
                    "optional": false,
                    "description": "<p>class to apply to the panel content, uses &#39; &#39; for separating values </p>\n",
                    "line": 24
                },
                {
                    "name": "hovered",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "<p>will emit when the panel is hovered </p>\n",
                    "line": 20
                },
                {
                    "name": "keydownEvents$",
                    "type": "Observable<KeyboardEvent>",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "open",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "<p>will emit when the panel wants to open </p>\n",
                    "line": 18
                },
                {
                    "name": "panelClasses",
                    "type": "string",
                    "optional": false,
                    "description": "<p>classes to apply to the panel, uses &#39; &#39; for separating values </p>\n",
                    "line": 22
                },
                {
                    "name": "panelId",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "scrollStrategy",
                    "type": "LuPopoverScrollStrategy",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "setPositionClasses",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "templateRef",
                    "type": "TemplateRef<any>",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "triggerId",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "description": "<p>method called by the trigger when it closes the popover </p>\n"
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "description": "<p>method called by the trigger when it opens the popover </p>\n"
                }
            ]
        },
        {
            "name": "ILuPopoverTarget",
            "id": "interface-ILuPopoverTarget-2aab5bad871ef6a1264eba116f8b3e84",
            "file": "packages/ng/libraries/popover/src/lib/target/popover-target.model.ts",
            "type": "interface",
            "sourceCode": "import { ElementRef } from '@angular/core';\r\nimport { throwLuPopoverInvalidAlignement, throwLuPopoverInvalidPosition } from './popover-target.error';\r\n\r\nexport type LuPopoverPosition = 'above' | 'below' | 'before' | 'after';\r\nexport type LuPopoverAlignment = 'top' | 'bottom' | 'left' | 'right' | 'center';\r\n\r\n/**\r\n * anchor for a popover panel\r\n */\r\nexport interface ILuPopoverTarget {\r\n\t/** how the panel will be align with the target, allowed values: top, bottom, left, right */\r\n\talignment: LuPopoverAlignment;\r\n\t/** the element used to position the panel */\r\n\telementRef: ElementRef;\r\n\t// /** set to true if you want the panel to appear on top of the target */\r\n\toverlap: boolean;\r\n\t/** how you want to position the panel relative to the target, allowed values: above, below, before, after */\r\n\tposition: LuPopoverPosition;\r\n\r\n\toffsetX: number;\r\n\toffsetY: number;\r\n}\r\n\r\nexport abstract class ALuPopoverTarget implements ILuPopoverTarget {\r\n\tprotected _elementRef: ElementRef;\r\n\t/** the element used to position the panel */\r\n\tget elementRef() { return this._elementRef; }\r\n\tset elementRef(ref: ElementRef) { this._elementRef = ref; }\r\n\r\n\tprotected _position: LuPopoverPosition = 'below';\r\n\t/** how you want to position the panel relative to the target, allowed values: above, below, before, after */\r\n\tget position(): LuPopoverPosition { return this._position; }\r\n\tset position(position: LuPopoverPosition) {\r\n\t\tif (\r\n\t\t\tposition !== 'above' &&\r\n\t\t\tposition !== 'below' &&\r\n\t\t\tposition !== 'after' &&\r\n\t\t\tposition !== 'before'\r\n\t\t) {\r\n\t\t\tthrowLuPopoverInvalidPosition();\r\n\t\t}\r\n\t\tthis._position = position;\r\n\t\t// this.setPositionClasses(this._position, this._alignment);\r\n\t}\r\n\r\n\tprotected _alignment: LuPopoverAlignment = 'center';\r\n\t/** how the panel will be align with the target, allowed values: top, bottom, left, right */\r\n\tget alignment(): LuPopoverAlignment { return this._alignment; }\r\n\tset alignment(alignment: LuPopoverAlignment) {\r\n\t\tif (\r\n\t\t\talignment !== 'center' &&\r\n\t\t\talignment !== 'top' &&\r\n\t\t\talignment !== 'bottom' &&\r\n\t\t\talignment !== 'right' &&\r\n\t\t\talignment !== 'left'\r\n\t\t) {\r\n\t\t\tthrowLuPopoverInvalidAlignement();\r\n\t\t}\r\n\t\tthis._alignment = alignment;\r\n\t\t// this.setPositionClasses(this._position, this._alignment);\r\n\t}\r\n\r\n\tprotected _overlap = false;\r\n\t/** set to true if you want the panel to appear on top of the target */\r\n\tget overlap() { return this._overlap; }\r\n\tset overlap(ot: boolean) { this._overlap = ot; }\r\n\r\n\tprotected _offsetX = 0;\r\n\tget offsetX() { return this._offsetX; }\r\n\tset offsetX(ox: number) { this._offsetX = ox; }\r\n\r\n\tprotected _offsetY = 0;\r\n\tget offsetY() { return this._offsetY; }\r\n\tset offsetY(oy: number) { this._offsetY = oy; }\r\n}\r\n\r\nexport class LuPopoverTarget extends ALuPopoverTarget {\r\n\tconstructor() { super(); }\r\n}\r\n",
            "properties": [
                {
                    "name": "alignment",
                    "type": "LuPopoverAlignment",
                    "optional": false,
                    "description": "<p>how the panel will be align with the target, allowed values: top, bottom, left, right </p>\n",
                    "line": 12
                },
                {
                    "name": "elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "<p>the element used to position the panel </p>\n",
                    "line": 14
                },
                {
                    "name": "offsetX",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "offsetY",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "overlap",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "position",
                    "type": "LuPopoverPosition",
                    "optional": false,
                    "description": "<p>how you want to position the panel relative to the target, allowed values: above, below, before, after </p>\n",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>anchor for a popover panel</p>\n",
            "methods": []
        },
        {
            "name": "ILuPopoverTrigger",
            "id": "interface-ILuPopoverTrigger-50b693595441ed0b40dac75bc66f81be",
            "file": "packages/ng/libraries/popover/src/lib/trigger/popover-trigger.model.ts",
            "type": "interface",
            "sourceCode": "import {\r\n\tElementRef,\r\n\tViewContainerRef,\r\n} from '@angular/core';\r\n\r\nimport { isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\r\nimport { Direction } from '@angular/cdk/bidi';\r\nimport {\r\n\tConnectedPositionStrategy,\r\n\tOriginConnectionPosition,\r\n\tOverlay,\r\n\tOverlayConnectionPosition,\r\n\tOverlayRef,\r\n\tOverlayConfig,\r\n\tHorizontalConnectionPos,\r\n\tVerticalConnectionPos,\r\n} from '@angular/cdk/overlay';\r\nimport { TemplatePortal, ComponentPortal } from '@angular/cdk/portal';\r\n\r\nimport { Subscription, Subject, timer, Observable } from 'rxjs';\r\nimport { generateId } from '@lucca-front/ng/core';\r\n\r\nimport {\r\n\tILuPopoverPanel,\r\n} from '../panel/index';\r\nimport {\r\n\tILuPopoverTarget,\r\n} from '../target/index';\r\nimport { throwLuPopoverMissingTargetError, throwLuPopoverMissingPanelError } from './popover-trigger.error';\r\nimport { debounce, map, distinctUntilChanged } from 'rxjs/operators';\r\n\r\nexport type LuPopoverTriggerEvent = 'click' | 'hover' | 'none' | 'focus';\r\n\r\n/**\r\n * component that will decide when to show the popover and attach it to the target\r\n */\r\nexport declare interface ILuPopoverTrigger<TPanel extends ILuPopoverPanel = ILuPopoverPanel, TTarget extends ILuPopoverTarget = ILuPopoverTarget> {\r\n\t/** the popover panel to display */\r\n\tpanel: TPanel;\r\n\t/** the popover target to attach the panel */\r\n\ttarget: TTarget;\r\n\r\n\t/** when to display the popover */\r\n\ttriggerEvent: LuPopoverTriggerEvent;\r\n\t/** delay before popover apparition when trigger is 'hover' */\r\n\tenterDelay: number;\r\n\t/** delay before popover disparition when trigger is 'hover' */\r\n\tleaveDelay: number;\r\n\r\n\t/** disable popover apparition */\r\n\tdisabled: boolean;\r\n\t/** Event emitted when the associated popover is opened. */\r\n\tonOpen: Observable<void>;\r\n\t/** Event emitted when the associated popover is closed. */\r\n\tonClose: Observable<void>;\r\n\r\n\topenPopover();\r\n\tclosePopover();\r\n\ttogglePopover();\r\n\tdestroyPopover();\r\n}\r\n\r\n// tslint:disable-next-line: max-line-length\r\nexport abstract class ALuPopoverTrigger<TPanel extends ILuPopoverPanel = ILuPopoverPanel, TTarget extends ILuPopoverTarget = ILuPopoverTarget>\r\nimplements ILuPopoverTrigger<TPanel, TTarget> {\r\n\tprotected _portal: TemplatePortal<any> | ComponentPortal<any>;\r\n\tprotected _overlayRef: OverlayRef | null = null;\r\n\tprotected _popoverOpen = false;\r\n\t// protected _halt = false;\r\n\tprotected _backdropSubscription: Subscription;\r\n\tprotected _positionSubscription: Subscription;\r\n\r\n\tprotected _mouseoverTimer: any;\r\n\r\n\tprotected _hovered$ = new Subject();\r\n\tprotected _hoveredSubscription: Subscription;\r\n\tprotected _panelEventsSubscriptions: Subscription;\r\n\r\n\t// tracking input type is necessary so it's possible to only auto-focus\r\n\t// the first item of the list when the popover is opened via the keyboard\r\n\tprotected _openedByMouse = false;\r\n\r\n\tprotected _panel: TPanel;\r\n\t/** References the popover instance that the trigger is associated with. */\r\n\tget panel() { return this._panel; }\r\n\tset panel(p: TPanel) { this._panel = p; }\r\n\r\n\tprotected _target: TTarget;\r\n\t/** References the popover target instance that the trigger is associated with. */\r\n\tget target() { return this._target; }\r\n\tset target(t: TTarget) { this._target = t; }\r\n\r\n\tprotected _triggerEvent: LuPopoverTriggerEvent = 'click';\r\n\tget triggerEvent() { return this._triggerEvent; }\r\n\tset triggerEvent(te: LuPopoverTriggerEvent) {\r\n\t\tthis._triggerEvent = te;\r\n\t\tif (te = 'hover') {\r\n\t\t\tif (this._hoveredSubscription) {\r\n\t\t\t\tthis._hoveredSubscription.unsubscribe();\r\n\t\t\t}\r\n\t\t\tthis._hoveredSubscription = this._hovered$.pipe(\r\n\t\t\t\tdebounce(h => h ? timer(this.enterDelay) : timer(this.leaveDelay))\r\n\t\t\t).subscribe(h => h ? this.openPopover() : this.closePopover());\r\n\t\t}\r\n\t}\r\n\tprotected _enterDelay = 50;\r\n\tget enterDelay() { return this._enterDelay; }\r\n\tset enterDelay(d: number) { this._enterDelay = d; }\r\n\tprotected _leaveDelay = 50;\r\n\tget leaveDelay() { return this._leaveDelay; }\r\n\tset leaveDelay(d: number) { this._leaveDelay = d; }\r\n\r\n\tprotected _disabled = false;\r\n\tget disabled() { return this._disabled; }\r\n\tset disabled(d: boolean) { this._disabled = d; }\r\n\r\n\tprotected _triggerId: string;\r\n\tprotected _panelId: string;\r\n\r\n\r\n\t/** Event emitted when the associated popover is opened. */\r\n\tabstract onOpen: Observable<void>;\r\n\t/** Event emitted when the associated popover is closed. */\r\n\tabstract onClose: Observable<void>;\r\n\r\n\tprotected abstract _emitOpen(): void;\r\n\tprotected abstract _emitClose(): void;\r\n\r\n\tconstructor(\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _elementRef: ElementRef,\r\n\t\tprotected _viewContainerRef: ViewContainerRef,\r\n\t) {\r\n\t\tthis._triggerId = `popoverTrigger_${generateId()}`;\r\n\t\tthis._panelId = `popoverPanel_${generateId()}`;\r\n\t}\r\n\r\n\tonClick() {\r\n\t\tif (this.triggerEvent === 'click') {\r\n\t\t\tthis.togglePopover();\r\n\t\t}\r\n\t}\r\n\r\n\tonMouseEnter() {\r\n\t\tif (this.triggerEvent === 'hover') {\r\n\t\t\tthis._hovered$.next(true);\r\n\t\t}\r\n\t}\r\n\r\n\tonMouseLeave() {\r\n\t\tif (this.triggerEvent === 'hover') {\r\n\t\t\tthis._hovered$.next(false);\r\n\t\t}\r\n\t}\r\n\tonFocus() {\r\n\t\tif (this.triggerEvent === 'focus') {\r\n\t\t\tthis.openPopover();\r\n\t\t}\r\n\t}\r\n\tonBlur() {\r\n\t\tif (this.triggerEvent === 'focus') {\r\n\t\t\tthis.closePopover();\r\n\t\t}\r\n\t}\r\n\r\n\t/** Toggles the popover between the open and closed states. */\r\n\ttogglePopover(): void {\r\n\t\treturn this._popoverOpen ? this.closePopover() : this.openPopover();\r\n\t}\r\n\r\n\t/** Opens the popover. */\r\n\topenPopover(): void {\r\n\t\tif (!this._popoverOpen && !this._disabled) {\r\n\t\t\tthis._createOverlay();\r\n\t\t\tthis._overlayRef.attach(this._portal);\r\n\r\n\t\t\t/** Only subscribe to backdrop if trigger event is click */\r\n\t\t\tif (this.triggerEvent === 'click') {\r\n\t\t\t\tthis._subscribeToBackdrop();\r\n\t\t\t}\r\n\r\n\t\t\t/** Only subscribe to mouse enter/leave of the panel if trigger = hover */\r\n\r\n\t\t\tthis._initPopover();\r\n\t\t\tthis._emitOpen();\r\n\t\t}\r\n\t}\r\n\r\n\t/** Closes the popover. */\r\n\tclosePopover(): void {\r\n\t\tif (this._overlayRef && this._overlayRef.hasAttached()) {\r\n\t\t\tthis._overlayRef.detach();\r\n\r\n\t\t\t/** unsubscribe to backdrop click if it was defined */\r\n\t\t\tif (!!this._backdropSubscription) {\r\n\t\t\t\t// if (this.popover.triggerEvent === 'click') {\r\n\t\t\t\tthis._backdropSubscription.unsubscribe();\r\n\t\t\t}\r\n\r\n\t\t\tthis._resetPopover();\r\n\t\t\tthis._emitClose();\r\n\t\t}\r\n\t}\r\n\r\n\t/** Removes the popover from the DOM. */\r\n\tdestroyPopover(): void {\r\n\t\tif (this._overlayRef) {\r\n\t\t\tthis._overlayRef.dispose();\r\n\t\t\tthis._overlayRef = null;\r\n\t\t\tthis._cleanUpSubscriptions();\r\n\t\t}\r\n\t}\r\n\r\n\t/** Focuses the popover trigger. */\r\n\tfocus() {\r\n\t\tthis._elementRef.nativeElement.focus();\r\n\t}\r\n\r\n\t_handleMousedown(event: MouseEvent): void {\r\n\t\tif (!isFakeMousedownFromScreenReader(event)) {\r\n\t\t\tthis._openedByMouse = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/** The text direction of the containing app. */\r\n\tget dir(): Direction {\r\n\t\t// return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\r\n\t\treturn 'ltr';\r\n\t}\r\n\r\n\t/** Return if the popover main positionning is vertical */\r\n\tget isVerticallyPositionned(): boolean {\r\n\t\tconst position = this.target.position;\r\n\t\treturn (\r\n\t\t\tposition === 'below' || position === 'above'\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * This method ensures that the popover\r\n\t */\r\n\tprotected _subscribeToPanelEvents(): void {\r\n\t\tif (this._overlayRef) {\r\n\t\t\tthis._panelEventsSubscriptions = new Subscription();\r\n\t\t\tif (this.triggerEvent === 'hover') {\r\n\r\n\t\t\t\tthis._panelEventsSubscriptions.add(\r\n\t\t\t\t\tthis.panel.hovered\r\n\t\t\t\t\t.subscribe((hovered) => {\r\n\t\t\t\t\t\tthis._hovered$.next(hovered);\r\n\t\t\t\t\t}),\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tthis._panelEventsSubscriptions.add(\r\n\t\t\t\tthis.panel.close\r\n\t\t\t\t.subscribe(() => {\r\n\t\t\t\t\tthis.closePopover();\r\n\t\t\t\t}),\r\n\t\t\t);\r\n\t\t\tthis._panelEventsSubscriptions.add(\r\n\t\t\t\tthis.panel.open\r\n\t\t\t\t.subscribe(() => {\r\n\t\t\t\t\tthis.openPopover();\r\n\t\t\t\t}),\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t\t/**\r\n\t * This method ensures that the popover closes when the overlay backdrop is clicked.\r\n\t * We do not use first() here because doing so would not catch clicks from within\r\n\t * the popover, and it would fail to unsubscribe properly. Instead, we unsubscribe\r\n\t * explicitly when the popover is closed or destroyed.\r\n\t */\r\n\tprotected _subscribeToBackdrop(): void {\r\n\t\tif (this._overlayRef) {\r\n\t\t\tthis._backdropSubscription = this._overlayRef\r\n\t\t\t\t.backdropClick()\r\n\t\t\t\t.subscribe(() => {\r\n\t\t\t\t\tthis.closePopover();\r\n\t\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * This method sets the popover state to open and focuses the first item if\r\n\t * the popover was opened via the keyboard.\r\n\t */\r\n\tprotected _initPopover(): void {\r\n\t\tthis._setIsPopoverOpen(true);\r\n\t\tthis.panel.panelId = this._panelId;\r\n\t\tthis.panel.triggerId = this._triggerId;\r\n\t\tthis.panel.keydownEvents$ = this._overlayRef.keydownEvents();\r\n\t\tthis._subscribeToPanelEvents();\r\n\t}\r\n\r\n\t/**\r\n\t * This method resets the popover when it's closed, most importantly restoring\r\n\t * focus to the popover trigger if the popover was opened via the keyboard.\r\n\t */\r\n\tprotected _resetPopover(): void {\r\n\t\tthis._setIsPopoverOpen(false);\r\n\r\n\t\t// Focus only needs to be reset to the host element if the popover was opened\r\n\t\t// by the keyboard and manually shifted to the first popover item.\r\n\t\tif (!this._openedByMouse && this.triggerEvent === 'click') {\r\n\t\t\tthis.focus();\r\n\t\t}\r\n\t\tthis._openedByMouse = false;\r\n\t}\r\n\r\n\t/** set state rather than toggle to support triggers sharing a popover */\r\n\tprotected _setIsPopoverOpen(isOpen: boolean): void {\r\n\t\tthis._popoverOpen = isOpen;\r\n\t\t// tell the panel it's opening/closing\r\n\t\tisOpen ? this.panel.onOpen() : this.panel.onClose();\r\n\t}\r\n\r\n\t/**\r\n\t *  This method checks that a valid instance of MdPopover has been passed into\r\n\t *  mdPopoverTriggerFor. If not, an exception is thrown.\r\n\t */\r\n\tprotected _checkPanel() {\r\n\t\tif (!this.panel) {\r\n\t\t\tthrowLuPopoverMissingPanelError();\r\n\t\t}\r\n\t}\r\n\tprotected _checkTarget() {\r\n\t\tif (!this.target) {\r\n\t\t\tthrowLuPopoverMissingTargetError();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *  This method creates the overlay from the provided popover's template and saves its\r\n\t *  OverlayRef so that it can be attached to the DOM when openPopover is called.\r\n\t */\r\n\tprotected _createOverlay(): OverlayRef {\r\n\t\tif (!this._overlayRef) {\r\n\t\t\tthis._portal = new TemplatePortal(\r\n\t\t\t\tthis.panel.templateRef,\r\n\t\t\t\tthis._viewContainerRef,\r\n\t\t\t);\r\n\t\t\tconst config = this._getOverlayConfig();\r\n\t\t\tthis._subscribeToPositions(\r\n\t\t\t\tconfig.positionStrategy as ConnectedPositionStrategy,\r\n\t\t\t);\r\n\t\t\tthis._overlayRef = this._overlay.create(config);\r\n\t\t}\r\n\r\n\t\treturn this._overlayRef;\r\n\t}\r\n\r\n\t/**\r\n\t * This method builds the configuration object needed to create the overlay, the OverlayConfig.\r\n\t * @returns OverlayConfig\r\n\t */\r\n\tprotected _getOverlayConfig(): OverlayConfig {\r\n\t\tconst overlayState = new OverlayConfig();\r\n\t\toverlayState.positionStrategy = this._getPosition().withDirection(this.dir);\r\n\t\t/** Display overlay backdrop if trigger event is click */\r\n\t\tif (this.triggerEvent === 'click') {\r\n\t\t\toverlayState.hasBackdrop = true;\r\n\t\t\toverlayState.backdropClass = 'cdk-overlay-transparent-backdrop';\r\n\t\t}\r\n\r\n\t\toverlayState.direction = this.dir;\r\n\t\tconst scrollStrategy = this.panel.scrollStrategy;\r\n\t\tswitch (scrollStrategy) {\r\n\t\t\tcase 'block':\r\n\t\t\t\toverlayState.scrollStrategy = this._overlay.scrollStrategies.block();\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'close':\r\n\t\t\t\toverlayState.scrollStrategy = this._overlay.scrollStrategies.close();\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\toverlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn overlayState;\r\n\t}\r\n\r\n\t/**\r\n\t * Listens to changes in the position of the overlay and sets the correct classes\r\n\t * on the popover based on the new position. This ensures the animation origin is always\r\n\t * correct, even if a fallback position is used for the overlay.\r\n\t */\r\n\tprotected _subscribeToPositions(position: ConnectedPositionStrategy): void {\r\n\t\tthis._positionSubscription = position.onPositionChange.pipe(\r\n\t\t\tmap(c => c.connectionPair),\r\n\t\t\tdistinctUntilChanged(),\r\n\t\t)\r\n\t\t.subscribe(connectionPair => {\r\n\t\t\tthis.panel.setPositionClasses(connectionPair.overlayX, connectionPair.overlayY);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * This method builds the position strategy for the overlay, so the popover is properly connected\r\n\t * to the trigger.\r\n\t * @returns ConnectedPositionStrategy\r\n\t */\r\n\tprotected _getPosition(): ConnectedPositionStrategy {\r\n\t\tconst connectionPosition: OriginConnectionPosition = {\r\n\t\t\toriginX: 'start',\r\n\t\t\toriginY: 'top',\r\n\t\t};\r\n\r\n\t\t// Position\r\n\t\tconst position = this.target.position;\r\n\t\tconst overlap = this.target.overlap;\r\n\t\tif (position === 'above') {\r\n\t\t\tconnectionPosition.originY = overlap ? 'bottom' : 'top';\r\n\t\t} else if (position === 'below') {\r\n\t\t\tconnectionPosition.originY = overlap ? 'top' : 'bottom';\r\n\t\t} else if (position === 'before') {\r\n\t\t\tconnectionPosition.originX = overlap ? 'end' : 'start';\r\n\t\t} else if (position === 'after') {\r\n\t\t\tconnectionPosition.originX = overlap ? 'start' : 'end';\r\n\t\t}\r\n\r\n\t\t// Alignment\r\n\t\tconst alignment = this.target.alignment;\r\n\t\tif (this.isVerticallyPositionned) {\r\n\t\t\tif (alignment === 'left') {\r\n\t\t\t\tconnectionPosition.originX = 'start';\r\n\t\t\t} else if (alignment === 'right') {\r\n\t\t\t\tconnectionPosition.originX = 'end';\r\n\t\t\t} else {\r\n\t\t\t\tconnectionPosition.originX = 'center';\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (alignment === 'top') {\r\n\t\t\t\tconnectionPosition.originY = 'top';\r\n\t\t\t} else if (alignment === 'bottom') {\r\n\t\t\t\tconnectionPosition.originY = 'bottom';\r\n\t\t\t} else {\r\n\t\t\t\tconnectionPosition.originY = 'center';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst overlayPosition: OverlayConnectionPosition = {\r\n\t\t\toverlayX: 'start',\r\n\t\t\toverlayY: 'top',\r\n\t\t};\r\n\r\n\t\tif (overlap) {\r\n\t\t\toverlayPosition.overlayX = connectionPosition.originX;\r\n\t\t\toverlayPosition.overlayY = connectionPosition.originY;\r\n\t\t} else if (this.isVerticallyPositionned) {\r\n\t\t\toverlayPosition.overlayX = connectionPosition.originX;\r\n\t\t\toverlayPosition.overlayY =\r\n\t\t\t\tposition === 'above' ? 'bottom' : 'top';\r\n\t\t} else {\r\n\t\t\toverlayPosition.overlayX =\r\n\t\t\t\tposition === 'before' ? 'end' : 'start';\r\n\t\t\toverlayPosition.overlayY = connectionPosition.originY;\r\n\t\t}\r\n\r\n\r\n\t\tconst offsetX = this.target.offsetX;\r\n\t\tconst offsetY = this.target.offsetY;\r\n\r\n\t\t/**\r\n\t\t * For overriding position element, when LuPopoverTargetAt has a valid element reference.\r\n\t\t * Useful for sticking popover to parent element and offsetting arrow to trigger element.\r\n\t\t * If undefined defaults to the trigger element reference.\r\n\t\t */\r\n\t\tconst element = this.target.elementRef;\r\n\t\t// if (typeof this.targetElement !== 'undefined' && this.popover) {\r\n\t\t// \tthis.popover.containerPositioning = true;\r\n\t\t// \telement = this.targetElement._elementRef;\r\n\t\t// }\r\n\r\n\t\t/**\r\n\t\t * TODO: Updates when withFallbackPosition takes individual offsets\r\n\t\t */\r\n\r\n\t\treturn this._overlay\r\n\t\t\t.position()\r\n\t\t\t.connectedTo(element, connectionPosition, overlayPosition)\r\n\t\t\t.withFallbackPosition(\r\n\t\t\t\t{\r\n\t\t\t\t\toriginX: connectionPosition.originX,\r\n\t\t\t\t\toriginY: this._invertVerticalPos(connectionPosition.originY),\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\toverlayX: overlayPosition.overlayX,\r\n\t\t\t\t\toverlayY: this._invertVerticalPos(overlayPosition.overlayY),\r\n\t\t\t\t},\r\n\t\t\t)\r\n\t\t\t.withFallbackPosition(\r\n\t\t\t\t{\r\n\t\t\t\t\toriginX: this._invertHorizontalPos(connectionPosition.originX),\r\n\t\t\t\t\toriginY: connectionPosition.originY,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\toverlayX: this._invertHorizontalPos(overlayPosition.overlayX),\r\n\t\t\t\t\toverlayY: overlayPosition.overlayY,\r\n\t\t\t\t},\r\n\t\t\t)\r\n\t\t\t.withFallbackPosition(\r\n\t\t\t\t{\r\n\t\t\t\t\toriginX: this._invertHorizontalPos(connectionPosition.originX),\r\n\t\t\t\t\toriginY: this._invertVerticalPos(connectionPosition.originY),\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\toverlayX: this._invertHorizontalPos(overlayPosition.overlayX),\r\n\t\t\t\t\toverlayY: this._invertVerticalPos(overlayPosition.overlayY),\r\n\t\t\t\t},\r\n\t\t\t)\r\n\t\t\t.withOffsetX(offsetX)\r\n\t\t\t.withOffsetY(offsetY);\r\n\t}\r\n\r\n\tprotected _invertVerticalPos(y: VerticalConnectionPos) {\r\n\t\tif (y === 'top') {\r\n\t\t\ty = 'bottom';\r\n\t\t} else if (y === 'bottom') {\r\n\t\t\ty = 'top';\r\n\t\t}\r\n\t\treturn y;\r\n\t}\r\n\r\n\tprotected _invertHorizontalPos(x: HorizontalConnectionPos) {\r\n\t\tif (x === 'end') {\r\n\t\t\tx = 'start';\r\n\t\t} else if (x === 'start') {\r\n\t\t\tx = 'end';\r\n\t\t}\r\n\r\n\t\treturn x;\r\n\t}\r\n\r\n\tprotected _cleanUpSubscriptions(): void {\r\n\t\tif (this._backdropSubscription) {\r\n\t\t\tthis._backdropSubscription.unsubscribe();\r\n\t\t}\r\n\t\tif (this._positionSubscription) {\r\n\t\t\tthis._positionSubscription.unsubscribe();\r\n\t\t}\r\n\t\tif (this._hoveredSubscription) {\r\n\t\t\tthis._hoveredSubscription.unsubscribe();\r\n\t\t}\r\n\t\tif (this._panelEventsSubscriptions) {\r\n\t\t\tthis._panelEventsSubscriptions.unsubscribe();\r\n\t\t}\r\n\t}\r\n}\r\n",
            "properties": [
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>disable popover apparition </p>\n",
                    "line": 51
                },
                {
                    "name": "enterDelay",
                    "type": "number",
                    "optional": false,
                    "description": "<p>delay before popover apparition when trigger is &#39;hover&#39; </p>\n",
                    "line": 46
                },
                {
                    "name": "leaveDelay",
                    "type": "number",
                    "optional": false,
                    "description": "<p>delay before popover disparition when trigger is &#39;hover&#39; </p>\n",
                    "line": 48
                },
                {
                    "name": "onClose",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "<p>Event emitted when the associated popover is closed. </p>\n",
                    "line": 55
                },
                {
                    "name": "onOpen",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "<p>Event emitted when the associated popover is opened. </p>\n",
                    "line": 53
                },
                {
                    "name": "panel",
                    "type": "TPanel",
                    "optional": false,
                    "description": "<p>the popover panel to display </p>\n",
                    "line": 39
                },
                {
                    "name": "target",
                    "type": "TTarget",
                    "optional": false,
                    "description": "<p>the popover target to attach the panel </p>\n",
                    "line": 41
                },
                {
                    "name": "triggerEvent",
                    "type": "LuPopoverTriggerEvent",
                    "optional": false,
                    "description": "<p>when to display the popover </p>\n",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 152,
            "description": "<p>component that will decide when to show the popover and attach it to the target</p>\n",
            "methods": [
                {
                    "name": "closePopover",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "destroyPopover",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "openPopover",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57
                },
                {
                    "name": "togglePopover",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59
                }
            ]
        },
        {
            "name": "ILuPopupConfig",
            "id": "interface-ILuPopupConfig-5105015ad0012b3cbcd063bf7b4916a0",
            "file": "packages/ng/libraries/popup/src/lib/popup-config.model.ts",
            "type": "interface",
            "sourceCode": "export interface ILuPopupConfig {\r\n\tposition?: 'center' | 'top' | 'bottom' | 'left' | 'right';\r\n\tnoBackdrop?: boolean;\r\n\t/** popup dismisses if `esc` is pressed or backdrop is clicked, set it to true if you want to prevent it but be aware that your popup might become unclosable */\r\n\tundismissable?: boolean;\r\n\tbackdropClass?: string | string[];\r\n\tpanelClass?: string | string[];\r\n\tsize?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "backdropClass",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "noBackdrop",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "panelClass",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "position",
                    "type": "\"center\" | \"top\" | \"bottom\" | \"left\" | \"right\"",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "size",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "undismissable",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>popup dismisses if <code>esc</code> is pressed or backdrop is clicked, set it to true if you want to prevent it but be aware that your popup might become unclosable </p>\n",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuPopupContent",
            "id": "interface-ILuPopupContent-2d96814e9ad222654352fbae4d2b2c07",
            "file": "packages/ng/libraries/popup/src/lib/popup.model.ts",
            "type": "interface",
            "sourceCode": "export interface ILuPopupContent {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "ILuPopupRef",
            "id": "interface-ILuPopupRef-4fdd8b656048079547c33278abb886a6",
            "file": "packages/ng/libraries/popup/src/lib/popup-ref.model.ts",
            "type": "interface",
            "sourceCode": "import { Observable, Subject, Subscription, merge } from 'rxjs';\r\nimport { Overlay, OverlayRef, OverlayConfig } from '@angular/cdk/overlay';\r\nimport { ComponentPortal, PortalInjector, ComponentType } from '@angular/cdk/portal';\r\nimport { first, filter } from 'rxjs/operators';\r\nimport { ComponentRef } from '@angular/core';\r\nimport { ESCAPE } from '@angular/cdk/keycodes';\r\nimport { Injector } from '@angular/core';\r\nimport { LU_POPUP_DATA } from './popup.token';\r\nimport { ILuPopupConfig } from './popup-config.model';\r\nimport { ILuPopupContent } from './popup.model';\r\n\r\nexport interface ILuPopupRef<T extends ILuPopupContent = ILuPopupContent, D = any, R = any> {\r\n\tonOpen: Observable<D>;\r\n\tonClose: Observable<R>;\r\n\tonDismiss: Observable<void>;\r\n\topen(data: D): void;\r\n\tclose(result: R): void;\r\n\tdismiss(): void;\r\n}\r\nexport interface ILuPopupRefFactory<TComponent = any, TConfig extends ILuPopupConfig = ILuPopupConfig> {\r\n\tforge<T extends TComponent, C extends TConfig>(component: ComponentType<T>, config: C): ILuPopupRef<T>;\r\n}\r\n\r\nexport abstract class ALuPopupRef<T extends ILuPopupContent = ILuPopupContent, D = any, R = any> implements ILuPopupRef<T, D, R> {\r\n\tonOpen = new Subject<D>();\r\n\tonClose = new Subject<R>();\r\n\tonDismiss = new Subject<void>();\r\n\r\n\tprotected _overlayRef: OverlayRef;\r\n\tprotected _componentRef: ComponentRef<T>;\r\n\r\n\tprotected _subs = new Subscription();\r\n\r\n\tconstructor(\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _injector: Injector,\r\n\t\tprotected _component: ComponentType<T>,\r\n\t\tprotected _config: ILuPopupConfig,\r\n\t) {}\r\n\r\n\r\n\topen(data?: D) {\r\n\t\tthis._createOverlay();\r\n\t\tthis._openPopup(data);\r\n\r\n\t\tthis._subToCloseEvents();\r\n\r\n\t\tthis.onOpen.next(data);\r\n\t\tthis.onOpen.complete();\r\n\t}\r\n\tclose(result?: R) {\r\n\t\tthis.onClose.next(result);\r\n\t\tthis._destroy();\r\n\t}\r\n\tdismiss() {\r\n\t\tthis.onDismiss.next();\r\n\t\tthis._destroy();\r\n\t}\r\n\t/**\r\n\t *  This method creates the overlay from the provided popover's template and saves its\r\n\t *  OverlayRef so that it can be attached to the DOM when openPopover is called.\r\n\t */\r\n\tprotected _createOverlay() {\r\n\t\tif (!this._overlayRef) {\r\n\t\t\tconst overlayConfig = this._getOverlayConfig();\r\n\t\t\tthis._overlayRef = this._overlay.create(overlayConfig);\r\n\t\t}\r\n\t}\r\n\t\t/**\r\n\t * This method builds the configuration object needed to create the overlay, the OverlayConfig.\r\n\t * @returns OverlayConfig\r\n\t */\r\n\tprotected _getOverlayConfig(): OverlayConfig {\r\n\t\tconst overlayConfig = new OverlayConfig();\r\n\t\tswitch (this._config.position) {\r\n\t\t\tcase 'top':\r\n\t\t\t\toverlayConfig.positionStrategy =  this._overlay.position().global().centerHorizontally().top('0');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'bottom':\r\n\t\t\t\toverlayConfig.positionStrategy =  this._overlay.position().global().centerHorizontally().bottom('0');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'left':\r\n\t\t\t\toverlayConfig.positionStrategy =  this._overlay.position().global().centerVertically().left('0');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'right':\r\n\t\t\t\toverlayConfig.positionStrategy =  this._overlay.position().global().centerVertically().right('0');\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'center':\r\n\t\t\tdefault:\r\n\t\t\t\toverlayConfig.positionStrategy =  this._overlay.position().global().centerHorizontally().centerVertically();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\toverlayConfig.hasBackdrop = !this._config.noBackdrop;\r\n\t\toverlayConfig.backdropClass = this._config.backdropClass;\r\n\t\tconst panelClasses = [];\r\n\t\tif (Array.isArray(this._config.panelClass)) {\r\n\t\t\tpanelClasses.push(...this._config.panelClass);\r\n\t\t} else {\r\n\t\t\tpanelClasses.push(this._config.panelClass);\r\n\t\t}\r\n\t\tpanelClasses.push(`size-${this._config.size}`);\r\n\t\toverlayConfig.panelClass = panelClasses;\r\n\t\toverlayConfig.scrollStrategy = this._overlay.scrollStrategies.block();\r\n\t\treturn overlayConfig;\r\n\t}\r\n\tprotected _openPopup(data?: D) {\r\n\t\tconst injectionMap = new WeakMap();\r\n\t\tinjectionMap.set(ALuPopupRef, this);\r\n\t\tinjectionMap.set(LU_POPUP_DATA, data);\r\n\t\tconst injector = new PortalInjector(this._injector, injectionMap);\r\n\t\tconst portal = new ComponentPortal(this._component, undefined, injector);\r\n\t\tthis._componentRef = this._overlayRef.attach<T>(portal);\r\n\t}\r\n\r\n\tprotected _destroy() {\r\n\t\tthis._cleanSubscription();\r\n\t\tthis._closePopup();\r\n\t\tthis._destroyOverlay();\r\n\t\tthis._completeSubjects();\r\n\r\n\t}\r\n\t_completeSubjects() {\r\n\t\tthis.onClose.complete();\r\n\t\tthis.onOpen.complete();\r\n\t\tthis.onDismiss.complete();\r\n\t}\r\n\r\n\tprotected _destroyOverlay() {\r\n\t\tthis._overlayRef.detachBackdrop();\r\n\t\tthis._overlayRef.detach();\r\n\t}\r\n\tprotected _closePopup() {\r\n\t\tthis._componentRef.destroy();\r\n\t}\r\n\tprotected _subToCloseEvents() {\r\n\t\tif (!this._config.undismissable) {\r\n\r\n\t\t\tconst bdClicked$ = this._overlayRef.backdropClick();\r\n\t\t\tconst escPressed$ = this._overlayRef.keydownEvents().pipe(\r\n\t\t\t\tfilter(evt => evt.keyCode === ESCAPE),\r\n\t\t\t);\r\n\t\t\tconst sub = merge(bdClicked$, escPressed$).pipe(first())\r\n\t\t\t.subscribe(e => this.dismiss());\r\n\t\t\tthis._subs.add(sub);\r\n\t\t}\r\n\t}\r\n\tprotected _cleanSubscription() {\r\n\t\tthis._subs.unsubscribe();\r\n\t}\r\n}\r\n",
            "properties": [
                {
                    "name": "onClose",
                    "type": "Observable<R>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "onDismiss",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "onOpen",
                    "type": "Observable<D>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "result",
                            "type": "R"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "R",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "data",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "ILuPopupRefFactory",
            "id": "interface-ILuPopupRefFactory-4fdd8b656048079547c33278abb886a6",
            "file": "packages/ng/libraries/popup/src/lib/popup-ref.model.ts",
            "type": "interface",
            "sourceCode": "import { Observable, Subject, Subscription, merge } from 'rxjs';\r\nimport { Overlay, OverlayRef, OverlayConfig } from '@angular/cdk/overlay';\r\nimport { ComponentPortal, PortalInjector, ComponentType } from '@angular/cdk/portal';\r\nimport { first, filter } from 'rxjs/operators';\r\nimport { ComponentRef } from '@angular/core';\r\nimport { ESCAPE } from '@angular/cdk/keycodes';\r\nimport { Injector } from '@angular/core';\r\nimport { LU_POPUP_DATA } from './popup.token';\r\nimport { ILuPopupConfig } from './popup-config.model';\r\nimport { ILuPopupContent } from './popup.model';\r\n\r\nexport interface ILuPopupRef<T extends ILuPopupContent = ILuPopupContent, D = any, R = any> {\r\n\tonOpen: Observable<D>;\r\n\tonClose: Observable<R>;\r\n\tonDismiss: Observable<void>;\r\n\topen(data: D): void;\r\n\tclose(result: R): void;\r\n\tdismiss(): void;\r\n}\r\nexport interface ILuPopupRefFactory<TComponent = any, TConfig extends ILuPopupConfig = ILuPopupConfig> {\r\n\tforge<T extends TComponent, C extends TConfig>(component: ComponentType<T>, config: C): ILuPopupRef<T>;\r\n}\r\n\r\nexport abstract class ALuPopupRef<T extends ILuPopupContent = ILuPopupContent, D = any, R = any> implements ILuPopupRef<T, D, R> {\r\n\tonOpen = new Subject<D>();\r\n\tonClose = new Subject<R>();\r\n\tonDismiss = new Subject<void>();\r\n\r\n\tprotected _overlayRef: OverlayRef;\r\n\tprotected _componentRef: ComponentRef<T>;\r\n\r\n\tprotected _subs = new Subscription();\r\n\r\n\tconstructor(\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _injector: Injector,\r\n\t\tprotected _component: ComponentType<T>,\r\n\t\tprotected _config: ILuPopupConfig,\r\n\t) {}\r\n\r\n\r\n\topen(data?: D) {\r\n\t\tthis._createOverlay();\r\n\t\tthis._openPopup(data);\r\n\r\n\t\tthis._subToCloseEvents();\r\n\r\n\t\tthis.onOpen.next(data);\r\n\t\tthis.onOpen.complete();\r\n\t}\r\n\tclose(result?: R) {\r\n\t\tthis.onClose.next(result);\r\n\t\tthis._destroy();\r\n\t}\r\n\tdismiss() {\r\n\t\tthis.onDismiss.next();\r\n\t\tthis._destroy();\r\n\t}\r\n\t/**\r\n\t *  This method creates the overlay from the provided popover's template and saves its\r\n\t *  OverlayRef so that it can be attached to the DOM when openPopover is called.\r\n\t */\r\n\tprotected _createOverlay() {\r\n\t\tif (!this._overlayRef) {\r\n\t\t\tconst overlayConfig = this._getOverlayConfig();\r\n\t\t\tthis._overlayRef = this._overlay.create(overlayConfig);\r\n\t\t}\r\n\t}\r\n\t\t/**\r\n\t * This method builds the configuration object needed to create the overlay, the OverlayConfig.\r\n\t * @returns OverlayConfig\r\n\t */\r\n\tprotected _getOverlayConfig(): OverlayConfig {\r\n\t\tconst overlayConfig = new OverlayConfig();\r\n\t\tswitch (this._config.position) {\r\n\t\t\tcase 'top':\r\n\t\t\t\toverlayConfig.positionStrategy =  this._overlay.position().global().centerHorizontally().top('0');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'bottom':\r\n\t\t\t\toverlayConfig.positionStrategy =  this._overlay.position().global().centerHorizontally().bottom('0');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'left':\r\n\t\t\t\toverlayConfig.positionStrategy =  this._overlay.position().global().centerVertically().left('0');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'right':\r\n\t\t\t\toverlayConfig.positionStrategy =  this._overlay.position().global().centerVertically().right('0');\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'center':\r\n\t\t\tdefault:\r\n\t\t\t\toverlayConfig.positionStrategy =  this._overlay.position().global().centerHorizontally().centerVertically();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\toverlayConfig.hasBackdrop = !this._config.noBackdrop;\r\n\t\toverlayConfig.backdropClass = this._config.backdropClass;\r\n\t\tconst panelClasses = [];\r\n\t\tif (Array.isArray(this._config.panelClass)) {\r\n\t\t\tpanelClasses.push(...this._config.panelClass);\r\n\t\t} else {\r\n\t\t\tpanelClasses.push(this._config.panelClass);\r\n\t\t}\r\n\t\tpanelClasses.push(`size-${this._config.size}`);\r\n\t\toverlayConfig.panelClass = panelClasses;\r\n\t\toverlayConfig.scrollStrategy = this._overlay.scrollStrategies.block();\r\n\t\treturn overlayConfig;\r\n\t}\r\n\tprotected _openPopup(data?: D) {\r\n\t\tconst injectionMap = new WeakMap();\r\n\t\tinjectionMap.set(ALuPopupRef, this);\r\n\t\tinjectionMap.set(LU_POPUP_DATA, data);\r\n\t\tconst injector = new PortalInjector(this._injector, injectionMap);\r\n\t\tconst portal = new ComponentPortal(this._component, undefined, injector);\r\n\t\tthis._componentRef = this._overlayRef.attach<T>(portal);\r\n\t}\r\n\r\n\tprotected _destroy() {\r\n\t\tthis._cleanSubscription();\r\n\t\tthis._closePopup();\r\n\t\tthis._destroyOverlay();\r\n\t\tthis._completeSubjects();\r\n\r\n\t}\r\n\t_completeSubjects() {\r\n\t\tthis.onClose.complete();\r\n\t\tthis.onOpen.complete();\r\n\t\tthis.onDismiss.complete();\r\n\t}\r\n\r\n\tprotected _destroyOverlay() {\r\n\t\tthis._overlayRef.detachBackdrop();\r\n\t\tthis._overlayRef.detach();\r\n\t}\r\n\tprotected _closePopup() {\r\n\t\tthis._componentRef.destroy();\r\n\t}\r\n\tprotected _subToCloseEvents() {\r\n\t\tif (!this._config.undismissable) {\r\n\r\n\t\t\tconst bdClicked$ = this._overlayRef.backdropClick();\r\n\t\t\tconst escPressed$ = this._overlayRef.keydownEvents().pipe(\r\n\t\t\t\tfilter(evt => evt.keyCode === ESCAPE),\r\n\t\t\t);\r\n\t\t\tconst sub = merge(bdClicked$, escPressed$).pipe(first())\r\n\t\t\t.subscribe(e => this.dismiss());\r\n\t\t\tthis._subs.add(sub);\r\n\t\t}\r\n\t}\r\n\tprotected _cleanSubscription() {\r\n\t\tthis._subs.unsubscribe();\r\n\t}\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "forge",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>"
                        },
                        {
                            "name": "config",
                            "type": "C"
                        }
                    ],
                    "optional": false,
                    "returnType": "ILuPopupRef<T>",
                    "typeParameters": [
                        "T",
                        "C"
                    ],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "C",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "ILuScrollable",
            "id": "interface-ILuScrollable-bc0484681bf7479c263eddf0911a6e0b",
            "file": "packages/ng/libraries/scroll/src/lib/scroll.model.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nexport interface ILuScrollable {\r\n\tonScroll: Observable<Event>;\r\n\tonScrollTop: Observable<Event>;\r\n\tonScrollBottom: Observable<Event>;\r\n\tonScrollLeft: Observable<Event>;\r\n\tonScrollRight: Observable<Event>;\r\n}\r\n",
            "properties": [
                {
                    "name": "onScroll",
                    "type": "Observable<Event>",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "onScrollBottom",
                    "type": "Observable<Event>",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "onScrollLeft",
                    "type": "Observable<Event>",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "onScrollRight",
                    "type": "Observable<Event>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "onScrollTop",
                    "type": "Observable<Event>",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuSidepanelConfig",
            "id": "interface-ILuSidepanelConfig-7bfb59b2a151ae5a15b0d25305cb3f43",
            "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel-config.model.ts",
            "type": "interface",
            "sourceCode": "import { ILuModalConfig } from '@lucca-front/ng/modal';\r\n\r\nexport interface ILuSidepanelConfig extends ILuModalConfig {\r\n\tposition?: 'left' | 'right';\r\n}\r\n",
            "properties": [
                {
                    "name": "position",
                    "type": "\"left\" | \"right\"",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ILuModalConfig"
        },
        {
            "name": "ILuSidepanelContent",
            "id": "interface-ILuSidepanelContent-23b7d74ed63d1fa50f61e623bb272236",
            "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel.model.ts",
            "type": "interface",
            "sourceCode": "import { ILuModalContent } from '@lucca-front/ng/modal';\r\n\r\nexport interface ILuSidepanelContent<T = any> extends ILuModalContent<T> {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "ILuModalContent"
        },
        {
            "name": "ILuSidepanelLabel",
            "id": "interface-ILuSidepanelLabel-13487508a8a1ad8d9f99c0c75ad40548",
            "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel.translate.ts",
            "type": "interface",
            "sourceCode": "import { ILuTranslation } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuSidepanelLabel {\r\n\tsubmit: string;\r\n\tcancel: string;\r\n}\r\nexport abstract class ALuSidepanelLabel {\r\n\tsubmit: string;\r\n\tcancel: string;\r\n}\r\n\r\nexport const luSidepanelTranslations = {\r\n\ten: {\r\n\t\tsubmit: 'Ok',\r\n\t\tcancel: 'Cancel',\r\n\t},\r\n\tfr: {\r\n\t\tsubmit: 'Ok',\r\n\t\tcancel: 'Annuler',\r\n\t},\r\n} as ILuTranslation<ILuSidepanelLabel>;\r\n",
            "properties": [
                {
                    "name": "cancel",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "submit",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuSidepanelRef",
            "id": "interface-ILuSidepanelRef-e897a44b70b7aa8ac5be41cd80c6de6d",
            "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel-ref.model.ts",
            "type": "interface",
            "sourceCode": "import { ILuSidepanelContent } from './sidepanel.model';\r\nimport { ILuModalRef, ALuModalRef } from '@lucca-front/ng/modal';\r\n\r\nexport interface ILuSidepanelRef<T extends ILuSidepanelContent = ILuSidepanelContent, D = any, R = any> extends ILuModalRef<T, D, R> {}\r\nexport abstract class ALuSidepanelRef<T extends ILuSidepanelContent = ILuSidepanelContent, D = any, R = any> extends ALuModalRef<T, D, R> implements ILuSidepanelRef<T, D, R> {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "ILuModalRef"
        },
        {
            "name": "ILuTranslation",
            "id": "interface-ILuTranslation-a0e80792ec5a05220844a4691516ee23",
            "file": "packages/ng/libraries/core/src/lib/translate/translation.model.ts",
            "type": "interface",
            "sourceCode": "export interface ILuTranslation<T> {\r\n\ten: { [P in keyof T]?: string };\r\n\tes?: { [P in keyof T]?: string };\r\n\tde?: { [P in keyof T]?: string };\r\n\tfr?: { [P in keyof T]?: string };\r\n}\r\n",
            "properties": [
                {
                    "name": "de",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "en",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "es",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "fr",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuTree",
            "id": "interface-ILuTree-edca35648d37ca7f98de731a3cbd45b0",
            "file": "packages/ng/libraries/core/src/lib/tree/tree.model.ts",
            "type": "interface",
            "sourceCode": "export interface ILuTree<T = any> {\r\n\tvalue: T;\r\n\tchildren: ILuTree<T>[];\r\n}\r\n",
            "properties": [
                {
                    "name": "children",
                    "type": "ILuTree<T>[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "value",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuTreeOptionItem",
            "id": "interface-ILuTreeOptionItem-e476ad10b12d45cae3d6da8ed09fd3d2",
            "file": "packages/ng/libraries/option/src/lib/item/tree-option-item.model.ts",
            "type": "interface",
            "sourceCode": "import { ILuOptionItem, ALuOptionItem } from './option-item.model';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface ILuTreeOptionItem<T = any> extends ILuOptionItem<T> {\r\n\tchildren: this[];\r\n\tallChildren: this[];\r\n\r\n\tonSelectSelf: Observable<this>;\r\n\tonSelectChildren: Observable<this>;\r\n}\r\nexport abstract class ALuTreeOptionItem<T = any>extends ALuOptionItem<T> implements ILuTreeOptionItem<T> {\r\n\tabstract children: this[];\r\n\tget allChildren(): this[] {\r\n\t\treturn this.children\r\n\t\t.map(c => [c, ...c.allChildren])\r\n\t\t.reduce((aggr, val) => [...aggr, ...val], []);\r\n\t}\r\n\tabstract onSelectSelf: Observable<this>;\r\n\tabstract onSelectChildren: Observable<this>;\r\n}\r\n",
            "properties": [
                {
                    "name": "allChildren",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "children",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "onSelectChildren",
                    "type": "Observable<>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "onSelectSelf",
                    "type": "Observable<>",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ILuOptionItem"
        },
        {
            "name": "ILuTreeOptionItemLabel",
            "id": "interface-ILuTreeOptionItemLabel-3f3aaf29fed7cf64112eb98ebdc8723e",
            "file": "packages/ng/libraries/option/src/lib/item/tree-option-item.translate.ts",
            "type": "interface",
            "sourceCode": "import { ILuTranslation } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuTreeOptionItemLabel {\r\n\tparentOnly: string;\r\n\tchildrenOnly: string;\r\n}\r\nexport abstract class ALuTreeOptionItemLabel {\r\n\tparentOnly: string;\r\n\tchildrenOnly: string;\r\n}\r\n\r\nexport const luTreeOptionItemTranslations = {\r\n\ten: {\r\n\t\tparentOnly: 'Parent only',\r\n\t\tchildrenOnly: 'Children only',\r\n\t},\r\n\tfr: {\r\n\t\tparentOnly: 'Seulement le parent',\r\n\t\tchildrenOnly: 'Seulement les enfants',\r\n\t},\r\n} as ILuTranslation<ILuTreeOptionItemLabel>;\r\n",
            "properties": [
                {
                    "name": "childrenOnly",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "parentOnly",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuTreeOptionOperator",
            "id": "interface-ILuTreeOptionOperator-19c48a2aa099b69be75b8ab46ed2b898",
            "file": "packages/ng/libraries/option/src/lib/operator/tree-option-operator.model.ts",
            "type": "interface",
            "sourceCode": "import { ILuOptionOperator, ALuOptionOperator } from './option-operator.model';\r\nimport { ILuTree } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuTreeOptionOperator<T> extends ILuOptionOperator<ILuTree<T>> {}\r\n\r\nexport abstract class ALuTreeOptionOperator<T> extends ALuOptionOperator<ILuTree<T>> implements ILuTreeOptionOperator<T> {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "ILuOptionOperator"
        },
        {
            "name": "ILuTreeOptionPickerPanel",
            "id": "interface-ILuTreeOptionPickerPanel-2d807d48707d5bbed50968c653c53c7e",
            "file": "packages/ng/libraries/option/src/lib/picker/tree-option-picker.model.ts",
            "type": "interface",
            "sourceCode": "import { ILuOptionPickerPanel, ALuOptionPicker } from './option-picker.model';\r\nimport { ILuTreeOptionItem } from '../item/index';\r\n\r\nexport interface ILuTreeOptionPickerPanel<T = any, I extends ILuTreeOptionItem<T> = ILuTreeOptionItem<T>> extends ILuOptionPickerPanel<T, I> {}\r\n\r\nexport abstract class ALuTreeOptionPicker<T = any, I extends ILuTreeOptionItem<T> = ILuTreeOptionItem<T>> extends ALuOptionPicker<T, I> implements ILuTreeOptionPickerPanel<T, I> {\r\n\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "ILuOptionPickerPanel"
        },
        {
            "name": "ILuTreeOptionSelector",
            "id": "interface-ILuTreeOptionSelector-fdc207480ffb26f11920d62d2a1d2689",
            "file": "packages/ng/libraries/option/src/lib/selector/tree-option-selector.model.ts",
            "type": "interface",
            "sourceCode": "import { ILuOptionSelector, ALuOptionSelector } from './option-selector.model';\r\n\r\nexport interface ILuTreeOptionSelector<T = any> extends ILuOptionSelector {}\r\nexport abstract class ALuTreeOptionSelector<T = any> extends ALuOptionSelector implements ILuTreeOptionSelector<T> {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "ILuOptionSelector"
        },
        {
            "name": "ILuUser",
            "id": "interface-ILuUser-3b06276dd39d1c996ac14c9b84533f89",
            "file": "packages/ng/libraries/user/src/lib/user.model.ts",
            "type": "interface",
            "sourceCode": "export interface ILuUser {\r\n\tid: number;\r\n\tfirstName: string;\r\n\tlastName: string;\r\n\tpicture?: { href: string };\r\n\tpictureHref?: string;\r\n\tjobTitle?: string;\r\n\tadditionalInformation?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "additionalInformation",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "firstName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "jobTitle",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "lastName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "picture",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "pictureHref",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuUserHomonymsService",
            "id": "interface-ILuUserHomonymsService-de93a27f0f8719fcb3da3cf0fa613579",
            "file": "packages/ng/libraries/user/src/lib/select/homonyms/user-homonyms.service.ts",
            "type": "interface",
            "sourceCode": "import { ILuUser } from '../../user.model';\r\nimport { Observable, of } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { LuUserDisplayPipe, LuDisplayFullname } from '../../display/index';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\n\r\ninterface IV3CollectionResponse<T = any> {\r\n\tdata: { items: T[] };\r\n}\r\n\r\nexport interface ILuUserHomonymsService<U extends ILuUser = ILuUser> {\r\n\textractHomonyms(users: U[]): U[];\r\n\tenrichHomonyms(homonyms: U[]): Observable<U[]>;\r\n}\r\n\r\nexport abstract class ALuUserHomonymsService<U extends ILuUser = ILuUser> implements ILuUserHomonymsService<U> {\r\n\tabstract extractHomonyms(users: U[]): U[];\r\n\tabstract enrichHomonyms(homonyms: U[]): Observable<U[]>;\r\n}\r\n@Injectable()\r\nexport class LuUserHomonymsService<U extends ILuUser = ILuUser> extends ALuUserHomonymsService<U> implements ILuUserHomonymsService<U> {\r\n\tprivate _format = LuDisplayFullname.lastfirst;\r\n\textractHomonyms(users: U[]): U[] {\r\n\t\tconst namesCount = {} as { [key: string]: number};\r\n\t\tusers.forEach(user => {\r\n\t\t\tconst name = this._pipe.transform(user, this._format);\r\n\t\t\tconst count = namesCount[name] || 0;\r\n\t\t\tnamesCount[name] = count + 1;\r\n\t\t});\r\n\r\n\t\tconst nonUniqNames = Object.keys(namesCount)\r\n\t\t.filter(key => namesCount[key] > 1);\r\n\r\n\t\tconst homonyms = [] as U[];\r\n\t\tnonUniqNames.forEach(name => {\r\n\t\t\thomonyms.push(...users.filter(u => name === this._pipe.transform(u, this._format)));\r\n\t\t});\r\n\t\treturn homonyms;\r\n\t}\r\n\r\n\tenrichHomonyms(homonyms: U[]): Observable<U[]> {\r\n\t\tif (!homonyms || homonyms.length === 0) { return of([]); }\r\n\t\treturn this._http.get<IV3CollectionResponse<{ id: number, department: { name: string }}>>(`/api/v3/users`, { params: {\r\n\t\t\t'id': homonyms.map(u => u.id).join(','),\r\n\t\t\t'fields': 'id,department.name',\r\n\t\t}}).pipe(\r\n\t\t\tmap(res => res.data.items as { id: number, department?: { name: string }}[]),\r\n\t\t\tmap(infos => infos.map(info => {\r\n\t\t\t\t\tconst homonym = homonyms.find(h => h.id === info.id);\r\n\t\t\t\t\treturn { ...homonym, additionalInformation: info.department ? info.department.name : '' } as U;\r\n\t\t\t\t}) as U[]\r\n\t\t\t),\r\n\t\t\tcatchError(err => of([])),\r\n\t\t);\r\n\t}\r\n\tconstructor(\r\n\t\tprivate _pipe: LuUserDisplayPipe,\r\n\t\tprivate _http: HttpClient,\r\n\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "enrichHomonyms",
                    "args": [
                        {
                            "name": "homonyms",
                            "type": "U[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<U[]>",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "homonyms",
                            "type": "U[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "extractHomonyms",
                    "args": [
                        {
                            "name": "users",
                            "type": "U[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "U[]",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "users",
                            "type": "U[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "ILuUserSearcherLabel",
            "id": "interface-ILuUserSearcherLabel-d83a9f04486f7606ac0992af50a4ab2e",
            "file": "packages/ng/libraries/user/src/lib/select/searcher/user-searcher.translate.ts",
            "type": "interface",
            "sourceCode": "import { ILuTranslation } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuUserSearcherLabel {\r\n\tincludeFormerEmployees: string;\r\n}\r\nexport abstract class ALuUserSearcherLabel {\r\n\tincludeFormerEmployees: string;\r\n}\r\n\r\nexport const luUserSearcherTranslations = {\r\n\ten: {\r\n\t\tincludeFormerEmployees: 'Include former employees',\r\n\t},\r\n\tfr: {\r\n\t\tincludeFormerEmployees: 'Inclure les salariés partis',\r\n\t},\r\n} as ILuTranslation<ILuUserSearcherLabel>;\r\n",
            "properties": [
                {
                    "name": "includeFormerEmployees",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuUserSelectInputLabel",
            "id": "interface-ILuUserSelectInputLabel-bd4132548ba8fbf068a6ffd3fd4033b4",
            "file": "packages/ng/libraries/user/src/lib/select/input/user-select-input.translate.ts",
            "type": "interface",
            "sourceCode": "import { ILuTranslation } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuUserSelectInputLabel {\r\n\tusers: string;\r\n\tme: string;\r\n}\r\nexport abstract class ALuUserSelectInputLabel {\r\n\tusers: string;\r\n\tme: string;\r\n}\r\n\r\nexport const luUserSelectInputTranslations = {\r\n\ten: {\r\n\t\tusers: 'users',\r\n\t\tme: 'Me:'\r\n\t},\r\n\tfr: {\r\n\t\tusers: 'utilisateurs',\r\n\t\tme: 'Moi :'\r\n\t},\r\n} as ILuTranslation<ILuUserSelectInputLabel>;\r\n",
            "properties": [
                {
                    "name": "me",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "users",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILuUserService",
            "id": "interface-ILuUserService-3b4866e6fb496adac7d46d827e9638de",
            "file": "packages/ng/libraries/user/src/lib/service/user-service.model.ts",
            "type": "interface",
            "sourceCode": "import { ILuUser } from '../user.model';\r\nimport { ILuApiService, ALuApiService } from '@lucca-front/ng/api';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface ILuUserService<U extends ILuUser = ILuUser> extends ILuApiService<U> {\r\n\tgetMe(): Observable<U>;\r\n}\r\n\r\nexport abstract class ALuUserService<U extends ILuUser = ILuUser> extends ALuApiService<U> implements ILuUserService<U> {\r\n\tabstract getMe(): Observable<U>;\r\n}",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "getMe",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<U>",
                    "typeParameters": [],
                    "line": 6
                }
            ],
            "extends": "ILuApiService"
        },
        {
            "name": "IV3CollectionResponse",
            "id": "interface-IV3CollectionResponse-de93a27f0f8719fcb3da3cf0fa613579",
            "file": "packages/ng/libraries/user/src/lib/select/homonyms/user-homonyms.service.ts",
            "type": "interface",
            "sourceCode": "import { ILuUser } from '../../user.model';\r\nimport { Observable, of } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { LuUserDisplayPipe, LuDisplayFullname } from '../../display/index';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\n\r\ninterface IV3CollectionResponse<T = any> {\r\n\tdata: { items: T[] };\r\n}\r\n\r\nexport interface ILuUserHomonymsService<U extends ILuUser = ILuUser> {\r\n\textractHomonyms(users: U[]): U[];\r\n\tenrichHomonyms(homonyms: U[]): Observable<U[]>;\r\n}\r\n\r\nexport abstract class ALuUserHomonymsService<U extends ILuUser = ILuUser> implements ILuUserHomonymsService<U> {\r\n\tabstract extractHomonyms(users: U[]): U[];\r\n\tabstract enrichHomonyms(homonyms: U[]): Observable<U[]>;\r\n}\r\n@Injectable()\r\nexport class LuUserHomonymsService<U extends ILuUser = ILuUser> extends ALuUserHomonymsService<U> implements ILuUserHomonymsService<U> {\r\n\tprivate _format = LuDisplayFullname.lastfirst;\r\n\textractHomonyms(users: U[]): U[] {\r\n\t\tconst namesCount = {} as { [key: string]: number};\r\n\t\tusers.forEach(user => {\r\n\t\t\tconst name = this._pipe.transform(user, this._format);\r\n\t\t\tconst count = namesCount[name] || 0;\r\n\t\t\tnamesCount[name] = count + 1;\r\n\t\t});\r\n\r\n\t\tconst nonUniqNames = Object.keys(namesCount)\r\n\t\t.filter(key => namesCount[key] > 1);\r\n\r\n\t\tconst homonyms = [] as U[];\r\n\t\tnonUniqNames.forEach(name => {\r\n\t\t\thomonyms.push(...users.filter(u => name === this._pipe.transform(u, this._format)));\r\n\t\t});\r\n\t\treturn homonyms;\r\n\t}\r\n\r\n\tenrichHomonyms(homonyms: U[]): Observable<U[]> {\r\n\t\tif (!homonyms || homonyms.length === 0) { return of([]); }\r\n\t\treturn this._http.get<IV3CollectionResponse<{ id: number, department: { name: string }}>>(`/api/v3/users`, { params: {\r\n\t\t\t'id': homonyms.map(u => u.id).join(','),\r\n\t\t\t'fields': 'id,department.name',\r\n\t\t}}).pipe(\r\n\t\t\tmap(res => res.data.items as { id: number, department?: { name: string }}[]),\r\n\t\t\tmap(infos => infos.map(info => {\r\n\t\t\t\t\tconst homonym = homonyms.find(h => h.id === info.id);\r\n\t\t\t\t\treturn { ...homonym, additionalInformation: info.department ? info.department.name : '' } as U;\r\n\t\t\t\t}) as U[]\r\n\t\t\t),\r\n\t\t\tcatchError(err => of([])),\r\n\t\t);\r\n\t}\r\n\tconstructor(\r\n\t\tprivate _pipe: LuUserDisplayPipe,\r\n\t\tprivate _http: HttpClient,\r\n\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "LolIntl",
            "id": "injectable-LolIntl-4b918fc81a30b8c43dd3a44ba0a06c09",
            "file": "packages/ng/applications/sandbox/src/app/issues/poc-translate/lol.intl.ts",
            "properties": [
                {
                    "name": "lol",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable, LOCALE_ID, Inject } from '@angular/core';\r\nimport { LOL_TRANSLATIONS_TOKEN } from './lol.translate';\r\n\r\n@Injectable()\r\nexport class LolIntl {\r\n\tlol;\r\n\tconstructor(@Inject(LOL_TRANSLATIONS_TOKEN) translations, @Inject(LOCALE_ID) locale) {\r\n\t\tconst fallback = translations['en'] || {};\r\n\t\tconst current = translations[locale] || translations[locale.substring(0, 2)] || {};\r\n\r\n\t\tconst all = { ...fallback, ...current };\r\n\t\tObject.keys(all).forEach(k => {\r\n\t\t\tObject.defineProperty(this, k, {\r\n\t\t\t\tget: () => all[k],\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translations",
                        "type": ""
                    },
                    {
                        "name": "locale",
                        "type": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "translations",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locale",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LuApiHybridService",
            "id": "injectable-LuApiHybridService-9586fe23ef94e847b49e4a07556cd811",
            "file": "packages/ng/libraries/api/src/lib/service/api-hybrid.service.ts",
            "properties": [
                {
                    "name": "_standard",
                    "defaultValue": "'v3'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_v3Service",
                    "type": "LuApiV3Service<T>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_v4Service",
                    "type": "LuApiV4Service<T>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchAll",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 62,
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchPaged",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 66,
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "searchAll",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "searchPaged",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ILuApiItem } from '../api.model';\r\nimport { ALuApiService } from './api-service.model';\r\nimport { LuApiV3Service } from './api-v3.service';\r\nimport { LuApiV4Service } from './api-v4.service';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class LuApiHybridService<T extends ILuApiItem = ILuApiItem> extends ALuApiService<T> {\r\n\tprivate _v3Service: LuApiV3Service<T>;\r\n\tprivate _v4Service: LuApiV4Service<T>;\r\n\r\n\tprivate _standard = 'v3';\r\n\tset standard(std: string) { this._standard = std; }\r\n\r\n\t// both\r\n\tset api(api: string) {\r\n\t\tthis._v3Service.api = api;\r\n\t\tthis._v4Service.api = api;\r\n\t}\r\n\tset filters(filters: string[]) {\r\n\t\tthis._v3Service.filters = filters;\r\n\t\tthis._v4Service.filters = filters;\r\n\t}\r\n\r\n\t// api v3 only\r\n\tset fields(fields: string) { this._v3Service.fields = fields; }\r\n\tset orderBy(orderBy: string) { this._v3Service.orderBy = orderBy; }\r\n\r\n\t// api v4 only\r\n\tset sort(sort: string) {\r\n\t\tthis._v4Service.sort = sort;\r\n\t}\r\n\r\n\tprivate get _service(): ALuApiService<T> {\r\n\t\tswitch(this._standard) {\r\n\t\t\tcase 'v4':\r\n\t\t\t\treturn this._v4Service;\r\n\t\t\tcase 'v3':\r\n\t\t\tdefault:\r\n\t\t\t\treturn this._v3Service;\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tprivate _http: HttpClient,\r\n\t) {\r\n\t\tsuper();\r\n\t\tthis._v3Service = new LuApiV3Service(this._http);\r\n\t\tthis._v4Service = new LuApiV4Service(this._http);\r\n\t}\r\n\r\n\tgetAll(filters: string[] = []): Observable<T[]> {\r\n\t\treturn this._service.getAll(filters);\r\n\t}\r\n\r\n\tgetPaged(page: number, filters: string[] = []): Observable<T[]> {\r\n\t\treturn this._service.getPaged(page, filters);\r\n\t}\r\n\r\n\tsearchAll(clue: string, filters: string[] = []): Observable<T[]> {\r\n\t\treturn this._service.searchAll(clue, filters);\r\n\t}\r\n\r\n\tsearchPaged(clue: string, page: number, filters: string[] = []): Observable<T[]> {\r\n\t\treturn this._service.searchPaged(clue, page, filters);\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_http",
                        "type": "HttpClient"
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "standard": {
                    "name": "standard",
                    "setSignature": {
                        "name": "standard",
                        "type": "void",
                        "args": [
                            {
                                "name": "std",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 15,
                        "jsdoctags": [
                            {
                                "name": "std",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "api": {
                    "name": "api",
                    "setSignature": {
                        "name": "api",
                        "type": "void",
                        "args": [
                            {
                                "name": "api",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 18,
                        "jsdoctags": [
                            {
                                "name": "api",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "filters": {
                    "name": "filters",
                    "setSignature": {
                        "name": "filters",
                        "type": "void",
                        "args": [
                            {
                                "name": "filters",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 22,
                        "jsdoctags": [
                            {
                                "name": "filters",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "fields": {
                    "name": "fields",
                    "setSignature": {
                        "name": "fields",
                        "type": "void",
                        "args": [
                            {
                                "name": "fields",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "fields",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "orderBy": {
                    "name": "orderBy",
                    "setSignature": {
                        "name": "orderBy",
                        "type": "void",
                        "args": [
                            {
                                "name": "orderBy",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 29,
                        "jsdoctags": [
                            {
                                "name": "orderBy",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "sort": {
                    "name": "sort",
                    "setSignature": {
                        "name": "sort",
                        "type": "void",
                        "args": [
                            {
                                "name": "sort",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "jsdoctags": [
                            {
                                "name": "sort",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "_service": {
                    "name": "_service",
                    "getSignature": {
                        "name": "_service",
                        "type": "",
                        "returnType": "ALuApiService<T>",
                        "line": 36
                    }
                }
            },
            "extends": "ALuApiService",
            "type": "injectable"
        },
        {
            "name": "LuApiV3Service",
            "id": "injectable-LuApiV3Service-ee6a6feb598ea111d672ce3d0394461e",
            "file": "packages/ng/libraries/api/src/lib/service/api-v3.service.ts",
            "properties": [
                {
                    "name": "_api",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_fields",
                    "defaultValue": "'fields=id,name'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_filters",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_orderBy",
                    "defaultValue": "'orderBy=name,asc'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_clueFilter",
                    "args": [
                        {
                            "name": "clue",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_get",
                    "args": [
                        {
                            "name": "url",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchAll",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchPaged",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 45,
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "searchAll",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "searchPaged",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ILuApiItem, ILuApiCollectionResponse } from '../api.model';\r\nimport { ALuApiService } from './api-service.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nconst MAGIC_PAGE_SIZE = 20;\r\n\r\n@Injectable()\r\nexport class LuApiV3Service<T extends ILuApiItem = ILuApiItem> extends ALuApiService<T> {\r\n\tprotected _api: string;\r\n\tset api(api: string) { this._api = api; }\r\n\tprotected _fields = 'fields=id,name';\r\n\tset fields(fields: string) { this._fields = `fields=${fields}`; }\r\n\tprotected _filters: string[] = [];\r\n\tset filters(filters: string[]) { this._filters = filters || []; }\r\n\tprotected _orderBy = 'orderBy=name,asc';\r\n\tset orderBy(orderBy: string) { this._orderBy = `orderBy=${orderBy}`; }\r\n\r\n\tget url() {\r\n\t\treturn `${this._api}?${[...this._filters, this._orderBy, this._fields].filter(f => !!f).join('&')}`;\r\n\t}\r\n\r\n\tconstructor(protected _http: HttpClient) { super(); }\r\n\r\n\tgetAll(filters: string[] = []): Observable<T[]> {\r\n\t\treturn this._get([this.url, ...filters].join('&'));\r\n\t}\r\n\r\n\tgetPaged(page: number, filters: string[] = []): Observable<T[]> {\r\n\t\tconst paging = `paging=${page * MAGIC_PAGE_SIZE},${MAGIC_PAGE_SIZE}`;\r\n\t\tconst url = [this.url, paging, ...filters].join('&');\r\n\t\treturn this._get(url);\r\n\t}\r\n\r\n\tsearchAll(clue: string, filters: string[] = []): Observable<T[]> {\r\n\t\tif (!clue) {\r\n\t\t\treturn this.getAll(filters);\r\n\t\t}\r\n\t\tconst url = [this.url, this._clueFilter(clue), ...filters].join('&');\r\n\t\treturn this._get(url);\r\n\t}\r\n\r\n\tsearchPaged(clue: string, page: number, filters: string[] = []): Observable<T[]> {\r\n\t\tif (!clue) {\r\n\t\t\treturn this.getPaged(page, filters);\r\n\t\t}\r\n\t\tconst paging = `paging=${page * MAGIC_PAGE_SIZE},${MAGIC_PAGE_SIZE}`;\r\n\t\tconst url = [this.url, this._clueFilter(clue), paging, ...filters].join('&');\r\n\t\treturn this._get(url);\r\n\t}\r\n\r\n\tprotected _get(url): Observable<T[]> {\r\n\t\treturn this._http.get<ILuApiCollectionResponse<any>>(url)\r\n\t\t.pipe(\r\n\t\t\tmap(response => response.data.items)\r\n\t\t);\r\n\t}\r\n\tprotected _clueFilter(clue) {\r\n\t\tconst urlSafeClue = encodeURIComponent(clue);\r\n\t\treturn `name=like,${urlSafeClue}`;\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_http",
                        "type": "HttpClient"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "api": {
                    "name": "api",
                    "setSignature": {
                        "name": "api",
                        "type": "void",
                        "args": [
                            {
                                "name": "api",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 13,
                        "jsdoctags": [
                            {
                                "name": "api",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "fields": {
                    "name": "fields",
                    "setSignature": {
                        "name": "fields",
                        "type": "void",
                        "args": [
                            {
                                "name": "fields",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 15,
                        "jsdoctags": [
                            {
                                "name": "fields",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "filters": {
                    "name": "filters",
                    "setSignature": {
                        "name": "filters",
                        "type": "void",
                        "args": [
                            {
                                "name": "filters",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 17,
                        "jsdoctags": [
                            {
                                "name": "filters",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "orderBy": {
                    "name": "orderBy",
                    "setSignature": {
                        "name": "orderBy",
                        "type": "void",
                        "args": [
                            {
                                "name": "orderBy",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 19,
                        "jsdoctags": [
                            {
                                "name": "orderBy",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "url": {
                    "name": "url",
                    "getSignature": {
                        "name": "url",
                        "type": "",
                        "returnType": "",
                        "line": 21
                    }
                }
            },
            "extends": "ALuApiService",
            "type": "injectable"
        },
        {
            "name": "LuApiV4Service",
            "id": "injectable-LuApiV4Service-0546909c24a5852085d4d371daaa7d03",
            "file": "packages/ng/libraries/api/src/lib/service/api-v4.service.ts",
            "properties": [
                {
                    "name": "_api",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_filters",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_sort",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "defaultValue": "0"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchAll",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string",
                            "defaultValue": "''"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchPaged",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string",
                            "defaultValue": "''"
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "defaultValue": "0"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "searchAll",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "searchPaged",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ILuApiItem } from '../api.model';\r\nimport { ALuApiService } from './api-service.model';\r\n\r\n@Injectable()\r\nexport class LuApiV4Service<T extends ILuApiItem = ILuApiItem> extends ALuApiService<T> {\r\n\tprotected _api: string;\r\n\tset api(api: string) { this._api = api; }\r\n\r\n\tprotected _filters: string[] = [];\r\n\tset filters(filters: string[]) { this._filters = filters || []; }\r\n\tget filters(): string[] { return this._filters; }\r\n\r\n\tprotected _sort: string;\r\n\tset sort(sort: string) { this._sort = `sort=${sort}`; }\r\n\r\n\tconstructor(protected _http: HttpClient) { super(); }\r\n\r\n\tgetAll(filters: string[] = []): Observable<T[]> {\r\n\t\tconst query = [...this.filters, ...filters, this._sort].filter(f => !!f);\r\n\t\tconst url = [this._api, query.join('&')].join('?');\r\n\t\treturn this._http.get<{ items: T[] }>(url).pipe(\r\n\t\t\tmap(res => res.items),\r\n\t\t);\r\n\t}\r\n\tgetPaged(page: number = 0, filters: string[] = []): Observable<T[]> {\r\n\t\tconst query = [`page=${page + 1}`, ...this.filters, ...filters, this._sort].filter(f => !!f);\r\n\t\tconst url = [this._api, query.join('&')].join('?');\r\n\t\treturn this._http.get<{ items: T[] }>(url).pipe(\r\n\t\t\tmap(res => res.items),\r\n\t\t);\r\n\t}\r\n\tsearchAll(clue: string = '', filters: string[] = []): Observable<T[]> {\r\n\t\tif (!clue) {\r\n\t\t\treturn this.getAll(filters);\r\n\t\t}\r\n\t\tconst urlSafeClues = clue.split(' ').map(c => encodeURIComponent(c));\r\n\t\tconst query = [`search=${urlSafeClues}`, ...this.filters, ...filters, this._sort].filter(f => !!f);\r\n\t\tconst url = [this._api, query.join('&')].join('?');\r\n\t\treturn this._http.get<{ items: T[] }>(url).pipe(\r\n\t\t\tmap(res => res.items),\r\n\t\t);\r\n\t}\r\n\tsearchPaged(clue: string = '', page: number = 0, filters: string[] = []): Observable<T[]> {\r\n\t\tif (!clue) {\r\n\t\t\treturn this.getPaged(page, filters);\r\n\t\t}\r\n\t\tconst urlSafeClues = clue.split(' ').map(c => encodeURIComponent(c));\r\n\t\tconst query = [`search=${urlSafeClues}`, `page=${page + 1}`, ...this.filters, ...filters, this._sort].filter(f => !!f);\r\n\t\tconst url = [this._api, query.join('&')].join('?');\r\n\t\treturn this._http.get<{ items: T[] }>(url).pipe(\r\n\t\t\tmap(res => res.items),\r\n\t\t);\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_http",
                        "type": "HttpClient"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "api": {
                    "name": "api",
                    "setSignature": {
                        "name": "api",
                        "type": "void",
                        "args": [
                            {
                                "name": "api",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 11,
                        "jsdoctags": [
                            {
                                "name": "api",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "filters": {
                    "name": "filters",
                    "setSignature": {
                        "name": "filters",
                        "type": "void",
                        "args": [
                            {
                                "name": "filters",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 14,
                        "jsdoctags": [
                            {
                                "name": "filters",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "filters",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 15
                    }
                },
                "sort": {
                    "name": "sort",
                    "setSignature": {
                        "name": "sort",
                        "type": "void",
                        "args": [
                            {
                                "name": "sort",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 18,
                        "jsdoctags": [
                            {
                                "name": "sort",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "extends": "ALuApiService",
            "type": "injectable"
        },
        {
            "name": "LuCalendarItemFactory",
            "id": "injectable-LuCalendarItemFactory-96f29d75c32adc4ff0a70cc69bc17c60",
            "file": "packages/ng/libraries/date/src/lib/calendar/calendar-item.factory.ts",
            "properties": [],
            "methods": [
                {
                    "name": "forgeDay",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "defaultValue": "'d'"
                        }
                    ],
                    "optional": false,
                    "returnType": "DayItem<D>",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "defaultValue": "'d'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "forgeDecade",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "defaultValue": "'y'"
                        }
                    ],
                    "optional": false,
                    "returnType": "DecadeItem<D>",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "defaultValue": "'y'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "forgeMonth",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "defaultValue": "'MMM'"
                        }
                    ],
                    "optional": false,
                    "returnType": "MonthItem<D>",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "defaultValue": "'MMM'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "forgeYear",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "defaultValue": "'y'"
                        }
                    ],
                    "optional": false,
                    "returnType": "YearItem<D>",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "defaultValue": "'y'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { DayItem, MonthItem, YearItem, DecadeItem } from './calendar-item.class';\r\nimport { ALuDateAdapter } from '@lucca-front/ng/core';\r\n\r\n@Injectable()\r\nexport class LuCalendarItemFactory<D> {\r\n\tconstructor(\r\n\t\tprivate _adapter: ALuDateAdapter<D>,\r\n\t) {}\r\n\tforgeDay(d: D, format = 'd'): DayItem<D> {\r\n\t\tconst date = this._adapter.clone(d);\r\n\t\treturn new DayItem(date, this._adapter.format(date, format));\r\n\t}\r\n\tforgeMonth(d: D, format = 'MMM'): MonthItem<D> {\r\n\t\tconst year = this._adapter.getYear(d);\r\n\t\tconst month = this._adapter.getMonth(d);\r\n\t\tconst date = this._adapter.getDate(d);\r\n\t\tconst monthStart = this._adapter.forge(year, month, 1);\r\n\t\treturn new MonthItem(monthStart, this._adapter.format(monthStart, format));\r\n\t}\r\n\tforgeYear(d: D, format = 'y'): YearItem<D> {\r\n\t\tconst year = this._adapter.getYear(d);\r\n\t\tconst yearStart = this._adapter.forge(year, 1, 1);\r\n\t\treturn new YearItem(yearStart, this._adapter.format(yearStart, format));\r\n\t}\r\n\tforgeDecade(d: D, format = 'y'): DecadeItem<D> {\r\n\t\tconst year = this._adapter.getYear(d);\r\n\t\tconst decadeStart = this._adapter.forge(10 * Math.floor(year / 10), 1, 1);\r\n\t\tconst decadeEnd = this._adapter.forge(10 * Math.floor(year / 10) + 9, 1, 1);\r\n\t\tconst label = `${this._adapter.format(decadeStart, format)} - ${this._adapter.format(decadeEnd, format)}`;\r\n\t\treturn new DecadeItem(decadeStart, label);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_adapter",
                        "type": "ALuDateAdapter<D>"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "_adapter",
                        "type": "ALuDateAdapter<D>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LuDateInputIntl",
            "id": "injectable-LuDateInputIntl-a01cb6d7c5773494ac8988e70595ec45",
            "file": "packages/ng/libraries/date/src/lib/input/date-input.intl.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable, LOCALE_ID, Inject } from '@angular/core';\r\nimport { LU_DATE_INPUT_TRANSLATIONS } from './date-input.token';\r\nimport { ILuDateInputLabel } from './date-input.translate';\r\nimport { ALuIntl } from '@lucca-front/ng/core';\r\n\r\n@Injectable()\r\nexport class LuDateInputIntl extends ALuIntl<ILuDateInputLabel> {\r\n\tconstructor(@Inject(LU_DATE_INPUT_TRANSLATIONS) translations, @Inject(LOCALE_ID) locale) {\r\n\t\tsuper(translations, locale);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translations",
                        "type": ""
                    },
                    {
                        "name": "locale",
                        "type": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "translations",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locale",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuIntl",
            "type": "injectable"
        },
        {
            "name": "LuDateSelectInputIntl",
            "id": "injectable-LuDateSelectInputIntl-9ef9b8a91803682cef474099897afa10",
            "file": "packages/ng/libraries/date/src/lib/select/date-select-input.intl.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable, LOCALE_ID, Inject } from '@angular/core';\r\nimport { LU_DATE_SELECT_INPUT_TRANSLATIONS } from './date-select-input.token';\r\nimport { ILuDateSelectInputLabel } from './date-select-input.translate';\r\nimport { ALuIntl } from '@lucca-front/ng/core';\r\n\r\n@Injectable()\r\nexport class LuDateSelectInputIntl extends ALuIntl<ILuDateSelectInputLabel> {\r\n\tconstructor(@Inject(LU_DATE_SELECT_INPUT_TRANSLATIONS) translations, @Inject(LOCALE_ID) locale) {\r\n\t\tsuper(translations, locale);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translations",
                        "type": ""
                    },
                    {
                        "name": "locale",
                        "type": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "translations",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locale",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuIntl",
            "type": "injectable"
        },
        {
            "name": "LuDepartmentSelectInputIntl",
            "id": "injectable-LuDepartmentSelectInputIntl-5f8fd767fb2bfc83e8abf2f6092b06fa",
            "file": "packages/ng/libraries/department/src/lib/select/input/department-select-input.intl.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable, LOCALE_ID, Inject } from '@angular/core';\r\nimport { LU_DEPARTMENT_SELECT_INPUT_TRANSLATIONS } from './department-select-input.token';\r\nimport { ILuDepartmentSelectInputLabel } from './department-select-input.translate';\r\nimport { ALuIntl } from '@lucca-front/ng/core';\r\n\r\n@Injectable()\r\nexport class LuDepartmentSelectInputIntl extends ALuIntl<ILuDepartmentSelectInputLabel> {\r\n\tconstructor(@Inject(LU_DEPARTMENT_SELECT_INPUT_TRANSLATIONS) translations, @Inject(LOCALE_ID) locale) {\r\n\t\tsuper(translations, locale);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translations",
                        "type": ""
                    },
                    {
                        "name": "locale",
                        "type": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "translations",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locale",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuIntl",
            "type": "injectable"
        },
        {
            "name": "LuDepartmentService",
            "id": "injectable-LuDepartmentService-aec63b2932d42fc01ba24a5bda293b4e",
            "file": "packages/ng/libraries/department/src/lib/service/department-v3.service.ts",
            "properties": [
                {
                    "name": "_api",
                    "defaultValue": "`/api/v3/departments`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_api",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "_fields",
                    "defaultValue": "'fields=id,name'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "_filters",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "_orderBy",
                    "defaultValue": "'orderBy=name,asc'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                }
            ],
            "methods": [
                {
                    "name": "format",
                    "args": [
                        {
                            "name": "t",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ILuTree<ILuDepartment>",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "t",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTrees",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "_clueFilter",
                    "args": [
                        {
                            "name": "clue",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "_get",
                    "args": [
                        {
                            "name": "url",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "searchAll",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "searchPaged",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 45,
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "searchAll",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "searchPaged",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "searchAll",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "searchPaged",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ILuDepartmentService } from './department-service.model';\r\nimport { map } from 'rxjs/operators';\r\nimport { ILuTree } from '@lucca-front/ng/core';\r\nimport { ILuDepartment } from '../department.model';\r\nimport { LuApiV3Service } from '@lucca-front/ng/api';\r\n\r\n@Injectable()\r\nexport class LuDepartmentService extends LuApiV3Service<ILuDepartment> implements ILuDepartmentService<ILuDepartment> {\r\n\tprotected _api = `/api/v3/departments`;\r\n\r\n\tconstructor(protected _http: HttpClient) { super(_http); }\r\n\r\n\tgetTrees() {\r\n\t\treturn this._http.get('/api/v3/departments/tree?fields=id,name').pipe(\r\n\t\t\tmap((response: any): ILuTree<ILuDepartment>[] => {\r\n\t\t\t\tconst tree = response.data;\r\n\t\t\t\treturn tree.children.map(c => this.format(c));\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\tprivate format(t): ILuTree<ILuDepartment> {\r\n\t\treturn { value: t.node, children: t.children.map(c => this.format(c)) };\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_http",
                        "type": "HttpClient"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LuApiV3Service",
            "type": "injectable"
        },
        {
            "name": "LuEstablishmentSelectInputIntl",
            "id": "injectable-LuEstablishmentSelectInputIntl-c3a9b759a7fa2237890bf8685e89f9e8",
            "file": "packages/ng/libraries/establishment/src/lib/select/input/establishment-select-input.intl.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable, LOCALE_ID, Inject } from '@angular/core';\r\nimport { ALuIntl } from '@lucca-front/ng/core';\r\nimport { LU_ESTABLISHMENT_SELECT_INPUT_TRANSLATIONS } from './establishment-select-input.token';\r\nimport { ILuEstablishmentSelectInputLabel } from './establishment-select-input.translate';\r\n\r\n@Injectable()\r\nexport class LuEstablishmentSelectInputIntl extends ALuIntl<ILuEstablishmentSelectInputLabel> {\r\n\tconstructor(@Inject(LU_ESTABLISHMENT_SELECT_INPUT_TRANSLATIONS) translations, @Inject(LOCALE_ID) locale) {\r\n\t\tsuper(translations, locale);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translations",
                        "type": ""
                    },
                    {
                        "name": "locale",
                        "type": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "translations",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locale",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuIntl",
            "type": "injectable"
        },
        {
            "name": "LuEstablishmentService",
            "id": "injectable-LuEstablishmentService-655306390d07216ad64a07757982a9cb",
            "file": "packages/ng/libraries/establishment/src/lib/service/establishment.service.ts",
            "properties": [
                {
                    "name": "_api",
                    "defaultValue": "`/organization/structure/api/establishments`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_appInstanceId",
                    "defaultValue": "null",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_operations",
                    "defaultValue": "[]",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_api",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LuApiV4Service"
                    }
                },
                {
                    "name": "_filters",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LuApiV4Service"
                    }
                },
                {
                    "name": "_sort",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LuApiV4Service"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV4Service"
                    }
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "defaultValue": "0"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV4Service"
                    }
                },
                {
                    "name": "searchAll",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string",
                            "defaultValue": "''"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV4Service"
                    }
                },
                {
                    "name": "searchPaged",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string",
                            "defaultValue": "''"
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "defaultValue": "0"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV4Service"
                    }
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV4Service"
                    }
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV4Service"
                    }
                },
                {
                    "name": "searchAll",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV4Service"
                    }
                },
                {
                    "name": "searchPaged",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV4Service"
                    }
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "searchAll",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "searchPaged",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ILuEstablishment } from '../establishment.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { LuApiV4Service } from '@lucca-front/ng/api';\r\n\r\n@Injectable()\r\nexport class LuEstablishmentService extends LuApiV4Service<ILuEstablishment> {\r\n\tprotected _api = `/organization/structure/api/establishments`;\r\n\r\n\tprotected _appInstanceId: number = null;\r\n\tset appInstanceId(id: number) { this._appInstanceId = id; }\r\n\tprotected _operations: number[] = [];\r\n\tset operations(ops: number[]) { this._operations = ops || []; } \r\n\tget filters(): string[] {\r\n\t\tconst isScopeFiltered = this._appInstanceId && this._operations.length;\r\n\r\n\t\tif (isScopeFiltered) {\r\n\t\t\tconst appIdFilter = `appInstanceId=${this._appInstanceId}`;\r\n\t\t\tconst operationFilter = `operations=${this._operations.join(',')}`;\r\n\r\n\t\t\treturn [...this._filters, appIdFilter, operationFilter];\r\n\t\t}\r\n\r\n\t\treturn this._filters;\r\n\t}\r\n\tset filters(filters: string[]) {\r\n\t\tthis._filters = filters || [];\r\n\t}\r\n\r\n\tconstructor(protected _http: HttpClient) { super(_http); }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_http",
                        "type": "HttpClient"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "appInstanceId": {
                    "name": "appInstanceId",
                    "setSignature": {
                        "name": "appInstanceId",
                        "type": "void",
                        "args": [
                            {
                                "name": "id",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 11,
                        "jsdoctags": [
                            {
                                "name": "id",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "operations": {
                    "name": "operations",
                    "setSignature": {
                        "name": "operations",
                        "type": "void",
                        "args": [
                            {
                                "name": "ops",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 13,
                        "jsdoctags": [
                            {
                                "name": "ops",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "filters": {
                    "name": "filters",
                    "setSignature": {
                        "name": "filters",
                        "type": "void",
                        "args": [
                            {
                                "name": "filters",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 26,
                        "jsdoctags": [
                            {
                                "name": "filters",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "filters",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 14
                    }
                }
            },
            "extends": "LuApiV4Service",
            "type": "injectable"
        },
        {
            "name": "LuModal",
            "id": "injectable-LuModal-7b8d398434bab87aedaec4d2b9c12e2f",
            "file": "packages/ng/libraries/modal/src/lib/modal.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>"
                        },
                        {
                            "name": "data",
                            "type": "D",
                            "defaultValue": "undefined"
                        },
                        {
                            "name": "config",
                            "type": "C",
                            "defaultValue": "{} as any"
                        }
                    ],
                    "optional": false,
                    "returnType": "ILuPopupRef<T, D, R>",
                    "typeParameters": [
                        "T",
                        "D",
                        "R"
                    ],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "D",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "C",
                            "defaultValue": "{} as any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuPopup"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, Inject } from '@angular/core';\r\nimport { LuPopup, ILuPopupRefFactory } from '@lucca-front/ng/popup';\r\nimport { ILuModalConfig } from './modal-config.model';\r\nimport { LU_MODAL_CONFIG, LU_MODAL_REF_FACTORY } from './modal.token';\r\n\r\n@Injectable()\r\nexport class LuModal<C extends ILuModalConfig = ILuModalConfig> extends LuPopup<C> {\r\n\tconstructor(\r\n\t\t@Inject(LU_MODAL_REF_FACTORY) protected _factory: ILuPopupRefFactory,\r\n\t\t@Inject(LU_MODAL_CONFIG) protected _config: ILuModalConfig,\r\n\t) {\r\n\t\tsuper(_factory, _config);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_factory",
                        "type": "ILuPopupRefFactory"
                    },
                    {
                        "name": "_config",
                        "type": "ILuModalConfig"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "_factory",
                        "type": "ILuPopupRefFactory",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_config",
                        "type": "ILuModalConfig",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LuPopup",
            "type": "injectable"
        },
        {
            "name": "LuModalIntl",
            "id": "injectable-LuModalIntl-2b20227b854996ecab1eacf9d2f1f86c",
            "file": "packages/ng/libraries/modal/src/lib/modal.intl.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable, LOCALE_ID, Inject } from '@angular/core';\r\nimport { LU_MODAL_TRANSLATIONS } from './modal.token';\r\nimport { ILuModalLabel } from './modal.translate';\r\nimport { ALuIntl } from '@lucca-front/ng/core';\r\n\r\n@Injectable()\r\nexport class LuModalIntl extends ALuIntl<ILuModalLabel> {\r\n\tconstructor(@Inject(LU_MODAL_TRANSLATIONS) translations, @Inject(LOCALE_ID) locale) {\r\n\t\tsuper(translations, locale);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translations",
                        "type": ""
                    },
                    {
                        "name": "locale",
                        "type": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "translations",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locale",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuIntl",
            "type": "injectable"
        },
        {
            "name": "LuModalRefFactory",
            "id": "injectable-LuModalRefFactory-2caad8bc36c6ae441d6c17b92d43303f",
            "file": "packages/ng/libraries/modal/src/lib/modal-ref.factory.ts",
            "properties": [],
            "methods": [
                {
                    "name": "forge",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>"
                        },
                        {
                            "name": "config",
                            "type": "C"
                        }
                    ],
                    "optional": false,
                    "returnType": "LuModalRef<any, any, any>",
                    "typeParameters": [
                        "T",
                        "C"
                    ],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "C",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { ALuPopupRef, ILuPopupRefFactory } from '@lucca-front/ng/popup';\r\nimport { Overlay, ComponentType } from '@angular/cdk/overlay';\r\nimport { Injector, Injectable, ComponentRef, ChangeDetectionStrategy } from '@angular/core';\r\nimport { ILuModalContent } from './modal.model';\r\nimport { ILuModalRef, ALuModalRef } from './modal-ref.model';\r\nimport { LuModalPanelComponent, LuModalPanelComponentDefaultCD } from './modal-panel.component';\r\nimport { PortalOutlet, PortalInjector, ComponentPortal } from '@angular/cdk/portal';\r\nimport { ILuModalConfig } from './modal-config.model';\r\nimport { LU_MODAL_DATA } from './modal.token';\r\n\r\nclass LuModalRef<T extends ILuModalContent = ILuModalContent, D = any, R = any> extends ALuPopupRef<T, D, R> implements ILuModalRef<T, D, R> {\r\n\tprotected _containerRef: ComponentRef<LuModalPanelComponent>;\r\n\tprotected _containerOutlet: PortalOutlet;\r\n\tconstructor(\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _injector: Injector,\r\n\t\tprotected _component: ComponentType<T>,\r\n\t\tprotected _config: ILuModalConfig,\r\n\t) {\r\n\t\tsuper(_overlay, _injector, _component, _config);\r\n\t}\r\n\tprotected _openPopup(data?: D) {\r\n\t\tconst injectionMap = new WeakMap();\r\n\t\tinjectionMap.set(ALuModalRef, this);\r\n\t\tinjectionMap.set(LU_MODAL_DATA, data);\r\n\t\tconst injector = new PortalInjector(this._injector, injectionMap);\r\n\t\tif (this._config.changeDetection === ChangeDetectionStrategy.OnPush) {\r\n\t\t\tconst containerPortal = new ComponentPortal(LuModalPanelComponent, undefined, injector);\r\n\t\t\tthis._containerRef = this._overlayRef.attach<LuModalPanelComponent>(containerPortal);\r\n\t\t} else {\r\n\t\t\tconst containerPortal = new ComponentPortal(LuModalPanelComponentDefaultCD, undefined, injector);\r\n\t\t\tthis._containerRef = this._overlayRef.attach<LuModalPanelComponent>(containerPortal);\r\n\t\t}\r\n\t\tthis._containerOutlet = this._containerRef.instance;\r\n\t\tconst portal = new ComponentPortal(this._component, undefined, injector);\r\n\t\tthis._componentRef = this._containerOutlet.attach(portal) as ComponentRef<T>;\r\n\t}\r\n\tprotected _closePopup() {\r\n\t\tthis._componentRef.destroy();\r\n\t\tthis._containerRef.destroy();\r\n\t}\r\n}\r\n\r\n@Injectable()\r\nexport class LuModalRefFactory implements ILuPopupRefFactory<ILuModalContent, ILuModalConfig> {\r\n\tconstructor(\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _injector: Injector,\r\n\t) {}\r\n\tforge<T extends ILuModalContent, C extends ILuModalConfig>(component: ComponentType<T>, config: C) {\r\n\t\treturn new LuModalRef(this._overlay, this._injector, component, config);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "_injector",
                        "type": "Injector"
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LuNativeDateAdapter",
            "id": "injectable-LuNativeDateAdapter-fa279df6aa4e773a207798d53d8c14c7",
            "file": "packages/ng/libraries/core/src/lib/date/native/native-date.adapter.ts",
            "properties": [
                {
                    "name": "_order",
                    "defaultValue": "{\r\n\t\tdate: 0,\r\n\t\tmonth: 1,\r\n\t\tyear: 2,\r\n\t}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_regex",
                    "defaultValue": "/[\\/\\,\\.\\-\\s]/i",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "d",
                            "type": "Date"
                        },
                        {
                            "name": "count",
                            "type": "number"
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity"
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 164,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "count",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "d",
                            "type": "Date"
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "extract",
                    "args": [
                        {
                            "name": "text",
                            "type": "string"
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "defaultValue": "ELuDateGranularity.day"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "defaultValue": "ELuDateGranularity.day",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "forge",
                    "args": [
                        {
                            "name": "year",
                            "type": "number"
                        },
                        {
                            "name": "month",
                            "type": "number"
                        },
                        {
                            "name": "date",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 106,
                    "jsdoctags": [
                        {
                            "name": "year",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "forgeInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 122
                },
                {
                    "name": "forgeToday",
                    "args": [],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 113
                },
                {
                    "name": "format",
                    "args": [
                        {
                            "name": "d",
                            "type": "Date"
                        },
                        {
                            "name": "format",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 99,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDate",
                    "args": [
                        {
                            "name": "d",
                            "type": "Date"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 149,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDay",
                    "args": [
                        {
                            "name": "d",
                            "type": "Date"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 156,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMonth",
                    "args": [
                        {
                            "name": "d",
                            "type": "Date"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 142,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getYear",
                    "args": [
                        {
                            "name": "d",
                            "type": "Date"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 135,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initOrder",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isParsable",
                    "args": [
                        {
                            "name": "text",
                            "type": "string"
                        },
                        {
                            "name": "granularity",
                            "type": "",
                            "defaultValue": "ELuDateGranularity.day"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "",
                            "defaultValue": "ELuDateGranularity.day",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValid",
                    "args": [
                        {
                            "name": "d",
                            "type": "Date"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 125,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parse",
                    "args": [
                        {
                            "name": "text",
                            "type": "string"
                        },
                        {
                            "name": "granularity",
                            "type": "",
                            "defaultValue": "ELuDateGranularity.day"
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "",
                            "defaultValue": "ELuDateGranularity.day",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        },
                        {
                            "name": "count",
                            "type": "number"
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity"
                        }
                    ],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 49,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "count",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "compare",
                    "args": [
                        {
                            "name": "a",
                            "type": "D"
                        },
                        {
                            "name": "b",
                            "type": "D"
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "forge",
                    "args": [
                        {
                            "name": "year",
                            "type": "number"
                        },
                        {
                            "name": "month",
                            "type": "number"
                        },
                        {
                            "name": "date",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "year",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "forgeInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 7,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "forgeToday",
                    "args": [],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 6,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "format",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        },
                        {
                            "name": "format",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "getDate",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "getDay",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 47,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "getMonth",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "getYear",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "isParsable",
                    "args": [
                        {
                            "name": "text",
                            "type": "string"
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "isValid",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "parse",
                    "args": [
                        {
                            "name": "text",
                            "type": "string"
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { ALuDateAdapter } from '../date-adapter.class';\r\nimport { ELuDateGranularity } from '../date-granularity.enum';\r\nimport { ILuDateAdapter } from '../date-adapter.interface';\r\nimport { LOCALE_ID, Inject, Injectable, Optional } from '@angular/core';\r\nimport { getLocaleDateFormat, FormatWidth, formatDate } from '@angular/common';\r\nimport { ILuNativeDateAdapterOptions, LU_NATIVE_DATE_ADAPTER_OPTIONS, luDefaultNativeDateAdapterOptions } from './native-date.option';\r\n\r\n@Injectable()\r\nexport class LuNativeDateAdapter extends ALuDateAdapter<Date> implements ILuDateAdapter<Date> {\r\n\r\n\tprivate _regex = /[\\/\\,\\.\\-\\s]/i;\r\n\tprivate _order = {\r\n\t\tdate: 0,\r\n\t\tmonth: 1,\r\n\t\tyear: 2,\r\n\t};\r\n\tconstructor(\r\n\t\t@Inject(LOCALE_ID) private _locale: string,\r\n\t\t@Inject(LU_NATIVE_DATE_ADAPTER_OPTIONS) @Optional() private _options: ILuNativeDateAdapterOptions,\r\n\t) {\r\n\t\tsuper();\r\n\t\tthis._options = this._options || luDefaultNativeDateAdapterOptions;\r\n\t\tthis.initOrder();\r\n\t}\r\n\tprivate initOrder() {\r\n\t\tconst format = getLocaleDateFormat(this._locale, FormatWidth.Short);\r\n\t\tconst groups = format.split(this._regex);\r\n\t\tgroups.forEach((g, i) => {\r\n\t\t\tif (g.indexOf('d') !== -1) { return this._order.date = i; }\r\n\t\t\tif (g.indexOf('M') !== -1) { return this._order.month = i; }\r\n\t\t\tif (g.indexOf('y') !== -1) { return this._order.year = i; }\r\n\t\t});\r\n\t}\r\n\tprivate extract(text: string, granularity: ELuDateGranularity = ELuDateGranularity.day): { date: number, month: number, year: number } {\r\n\t\tconst groups = text.split(this._regex);\r\n\t\tlet date = 1, month = 1, year = 1;\r\n\t\tswitch(granularity) {\r\n\t\t\tcase ELuDateGranularity.year:\r\n\t\t\t\tyear = parseInt(groups[Math.max(this._order.year - 2, 0)], 10);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ELuDateGranularity.month:\r\n\t\t\t\tmonth = parseInt(groups[Math.max(this._order.month - 1, 0)], 10);\r\n\t\t\t\tyear = parseInt(groups[Math.max(this._order.year - 1, 0)], 10) || new Date().getFullYear();\r\n\t\t\t\tbreak;\r\n\t\t\tcase ELuDateGranularity.day:\r\n\t\t\tdefault:\r\n\t\t\t\tdate = parseInt(groups[this._order.date], 10);\r\n\t\t\t\tmonth = parseInt(groups[this._order.month], 10);\r\n\t\t\t\tyear = parseInt(groups[this._order.year], 10) || new Date().getFullYear();\r\n\t\t}\r\n\t\treturn { date, month, year };\r\n\t}\r\n\tisParsable(text: string, granularity = ELuDateGranularity.day): boolean {\r\n\t\tif (!text) { return false; }\r\n\t\tconst groups = text.split(this._regex);\r\n\t\tif (groups.length !== 3 && groups.length !== 2) { return false; }\r\n\t\ttry {\r\n\r\n\t\t\tconst { date, month, year } = this.extract(text, granularity);\r\n\r\n\t\t\tlet d : Date;\r\n\t\t\tif (this._options.useUtc) {\r\n\t\t\t\td = new Date(Date.UTC(year, month - 1, date));\r\n\t\t\t} else {\r\n\t\t\t\td = new Date(year, month - 1, date);\r\n\t\t\t}\r\n\t\t\t// checking if its a valid date\r\n\t\t\t// https://stackoverflow.com/questions/1353684/detecting-an-invalid-date-date-instance-in-javascript\r\n\t\t\tif (!(d instanceof Date)) { return false; }\r\n\t\t\tif (isNaN(d.getTime())) { return false; }\r\n\t\t\t// d is a valid date, but\r\n\t\t\t// as i can write new Date(1234, 56, 78) and mr javascript accepts it\r\n\t\t\t// i check now that the generated date has the same year/month/date as what i entered\r\n\t\t\tif (this._options.useUtc) {\r\n\t\t\t\tif (d.getUTCFullYear() % 100 !== year) { return false; }\r\n\t\t\t\tif (d.getUTCMonth() !== month - 1) { return false; }\r\n\t\t\t\tif (d.getUTCDate() !== date) { return false; }\r\n\t\t\t} else {\r\n\t\t\t\tif (d.getFullYear() % 100 !== year) { return false; }\r\n\t\t\t\tif (d.getMonth() !== month - 1) { return false; }\r\n\t\t\t\tif (d.getDate() !== date) { return false; }\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t} catch {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\tparse(text: string, granularity = ELuDateGranularity.day): Date {\r\n\t\tif (!text) { return undefined; }\r\n\t\tif (!this.isParsable(text)) {\r\n\t\t\tthis.forgeInvalid();\r\n\t\t}\r\n\r\n\t\tconst { date, month, year } = this.extract(text, granularity);\r\n\r\n\t\treturn this.forge(year, month, date);\r\n\t}\r\n\tformat(d: Date, format: string): string {\r\n\t\tif (this._options.useUtc) {\r\n\t\t\treturn formatDate(d, format, this._locale, 'UTC');\r\n\t\t} else {\r\n\t\t\treturn formatDate(d, format, this._locale);\r\n\t\t}\r\n\t}\r\n\tforge(year: number, month: number, date: number): Date {\r\n\t\tif (this._options.useUtc) {\r\n\t\t\treturn new Date(Date.UTC(year, month - 1, date)); // month-1 cuz 0 -> january\r\n\t\t} else {\r\n\t\t\treturn new Date(year, month - 1, date); // month-1 cuz 0 -> january\r\n\t\t}\r\n\t}\r\n\tforgeToday(): Date {\r\n\t\tif (this._options.useUtc) {\r\n\t\t\tconst nonUTCToday = new Date();\r\n\t\t\treturn new Date(Date.UTC(nonUTCToday.getFullYear(), nonUTCToday.getMonth(), nonUTCToday.getDate()));\r\n\t\t} else {\r\n\t\t\tconst today = new Date();\r\n\t\t\treturn new Date(today.getFullYear(), today.getMonth(), today.getDate());\r\n\t\t}\r\n\t}\r\n\tforgeInvalid(): Date {\r\n\t\treturn new Date('Invalid Date');\r\n\t}\r\n\tisValid(d: Date): boolean {\r\n\t\tif (!(d instanceof Date)) { return false; }\r\n\t\tif (isNaN(d.getTime())) { return false; }\r\n\t\treturn true;\r\n\t}\r\n\r\n\tclone(d: Date): Date {\r\n\t\treturn new Date(d);\r\n\t}\r\n\r\n\tgetYear(d: Date): number {\r\n\t\tif (this._options.useUtc) {\r\n\t\t\treturn d.getUTCFullYear();\r\n\t\t} else {\r\n\t\t\treturn d.getFullYear();\r\n\t\t}\r\n\t}\r\n\tgetMonth(d: Date): number {\r\n\t\tif (this._options.useUtc) {\r\n\t\t\treturn d.getUTCMonth() + 1;\r\n\t\t} else {\r\n\t\t\treturn d.getMonth() + 1;\r\n\t\t}\r\n\t}\r\n\tgetDate(d: Date): number {\r\n\t\tif (this._options.useUtc) {\r\n\t\t\treturn d.getUTCDate();\r\n\t\t} else {\r\n\t\t\treturn d.getDate();\r\n\t\t}\r\n\t}\r\n\tgetDay(d: Date): number {\r\n\t\tif (this._options.useUtc) {\r\n\t\t\treturn d.getUTCDay();\r\n\t\t} else {\r\n\t\t\treturn d.getDay();\r\n\t\t}\r\n\t}\r\n\r\n\tadd(d: Date, count: number, granularity: ELuDateGranularity): Date {\r\n\t\tlet year = this.getYear(d);\r\n\t\tlet month = this.getMonth(d);\r\n\t\tlet date = this.getDate(d);\r\n\t\tswitch (granularity) {\r\n\t\t\tcase ELuDateGranularity.decade:\r\n\t\t\t\tyear += 10 * count;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ELuDateGranularity.year:\r\n\t\t\t\tyear += count;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ELuDateGranularity.month:\r\n\t\t\t\tmonth += count;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ELuDateGranularity.day:\r\n\t\t\t\tdate += count;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn this.forge(year, month, date);\r\n\t}\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_locale",
                        "type": "string"
                    },
                    {
                        "name": "_options",
                        "type": "ILuNativeDateAdapterOptions"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_locale",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_options",
                        "type": "ILuNativeDateAdapterOptions",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuDateAdapter",
            "type": "injectable"
        },
        {
            "name": "LuOptionPlaceholderIntl",
            "id": "injectable-LuOptionPlaceholderIntl-a97ea6f78e74a5f175178b1d86772f42",
            "file": "packages/ng/libraries/option/src/lib/placeholder/option-placeholder.intl.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable, LOCALE_ID, Inject } from '@angular/core';\r\nimport { ALuIntl } from '@lucca-front/ng/core';\r\nimport { ILuOptionPlaceholderLabel } from './option-placeholder.translate';\r\nimport { LU_OPTION_PLACEHOLDER_TRANSLATIONS } from './option-placeholder.token';\r\n\r\n@Injectable()\r\nexport class LuOptionPlaceholderIntl extends ALuIntl<ILuOptionPlaceholderLabel> {\r\n\tconstructor(@Inject(LU_OPTION_PLACEHOLDER_TRANSLATIONS) translations, @Inject(LOCALE_ID) locale) {\r\n\t\tsuper(translations, locale);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translations",
                        "type": ""
                    },
                    {
                        "name": "locale",
                        "type": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "translations",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locale",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuIntl",
            "type": "injectable"
        },
        {
            "name": "LuOptionSelectAllIntl",
            "id": "injectable-LuOptionSelectAllIntl-c265845dfeba56b46e9a9955444cefbe",
            "file": "packages/ng/libraries/option/src/lib/selector/all/select-all.intl.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable, LOCALE_ID, Inject } from '@angular/core';\r\nimport { ALuIntl } from '@lucca-front/ng/core';\r\nimport { ILuOptionSelectAllLabel } from './select-all.translate';\r\nimport { LU_OPTION_SELECT_ALL_TRANSLATIONS } from './select-all.token';\r\n\r\n@Injectable()\r\nexport class LuOptionSelectAllIntl extends ALuIntl<ILuOptionSelectAllLabel> {\r\n\tconstructor(@Inject(LU_OPTION_SELECT_ALL_TRANSLATIONS) translations, @Inject(LOCALE_ID) locale) {\r\n\t\tsuper(translations, locale);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translations",
                        "type": ""
                    },
                    {
                        "name": "locale",
                        "type": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "translations",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locale",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuIntl",
            "type": "injectable"
        },
        {
            "name": "LuPopup",
            "id": "injectable-LuPopup-31a1a6c4e970bea104dc6c9cc9f483a5",
            "file": "packages/ng/libraries/popup/src/lib/popup.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>"
                        },
                        {
                            "name": "data",
                            "type": "D",
                            "defaultValue": "undefined"
                        },
                        {
                            "name": "config",
                            "type": "C",
                            "defaultValue": "{} as any"
                        }
                    ],
                    "optional": false,
                    "returnType": "ILuPopupRef<T, D, R>",
                    "typeParameters": [
                        "T",
                        "D",
                        "R"
                    ],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "D",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "C",
                            "defaultValue": "{} as any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, Inject } from '@angular/core';\r\nimport { ComponentType } from '@angular/cdk/overlay';\r\nimport { ILuPopupRef, ILuPopupRefFactory } from './popup-ref.model';\r\nimport { LU_POPUP_CONFIG, LU_POPUP_REF_FACTORY } from './popup.token';\r\nimport { ILuPopupConfig } from './popup-config.model';\r\nimport { ILuPopupContent } from './popup.model';\r\n\r\n@Injectable()\r\nexport class LuPopup<C extends ILuPopupConfig = ILuPopupConfig> {\r\n\tconstructor(\r\n\t\t@Inject(LU_POPUP_REF_FACTORY) protected _factory: ILuPopupRefFactory,\r\n\t\t@Inject(LU_POPUP_CONFIG) protected _config: ILuPopupConfig,\r\n\t) {}\r\n\r\n\topen<T extends ILuPopupContent = ILuPopupContent, D = any, R = any>(component: ComponentType<T>, data: D = undefined, config: C = {} as any): ILuPopupRef<T, D, R> {\r\n\t\tconst extendedConfig = { ...this._config, ...config };\r\n\t\tconst ref = this._factory.forge(component, extendedConfig);\r\n\t\tref.open(data);\r\n\t\treturn ref;\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_factory",
                        "type": "ILuPopupRefFactory"
                    },
                    {
                        "name": "_config",
                        "type": "ILuPopupConfig"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "_factory",
                        "type": "ILuPopupRefFactory",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_config",
                        "type": "ILuPopupConfig",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LuPopupRefFactory",
            "id": "injectable-LuPopupRefFactory-eb3b39916f650c7efd4c34ed7a0e2f5a",
            "file": "packages/ng/libraries/popup/src/lib/popup-ref.factory.ts",
            "properties": [],
            "methods": [
                {
                    "name": "forge",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>"
                        },
                        {
                            "name": "config",
                            "type": "ILuPopupConfig"
                        }
                    ],
                    "optional": false,
                    "returnType": "LuPopupRef<any, any, any>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "ILuPopupConfig",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { ILuPopupContent } from './popup.model';\r\nimport { ALuPopupRef, ILuPopupRefFactory } from './popup-ref.model';\r\nimport { Overlay, ComponentType } from '@angular/cdk/overlay';\r\nimport { Injector, Injectable } from '@angular/core';\r\nimport { ILuPopupConfig } from './popup-config.model';\r\n\r\nexport class LuPopupRef<T extends ILuPopupContent = ILuPopupContent, D = any, R = any> extends ALuPopupRef<T, D, R> {\r\n\tconstructor(\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _injector: Injector,\r\n\t\tprotected _component: ComponentType<T>,\r\n\t\tprotected _config: ILuPopupConfig,\r\n\t) {\r\n\t\tsuper (_overlay, _injector, _component, _config);\r\n\t}\r\n}\r\n\r\n@Injectable()\r\nexport class LuPopupRefFactory implements ILuPopupRefFactory {\r\n\tconstructor(\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _injector: Injector,\r\n\t) {}\r\n\tforge<T>(component: ComponentType<T>, config: ILuPopupConfig) {\r\n\t\treturn new LuPopupRef(this._overlay, this._injector, component, config);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "_injector",
                        "type": "Injector"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LuSidepanel",
            "id": "injectable-LuSidepanel-e182f34afc2287a78091570b1fd2be09",
            "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>"
                        },
                        {
                            "name": "data",
                            "type": "D",
                            "defaultValue": "undefined"
                        },
                        {
                            "name": "config",
                            "type": "C",
                            "defaultValue": "{} as any"
                        }
                    ],
                    "optional": false,
                    "returnType": "ILuPopupRef<T, D, R>",
                    "typeParameters": [
                        "T",
                        "D",
                        "R"
                    ],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "D",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "C",
                            "defaultValue": "{} as any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuModal"
                    }
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>"
                        },
                        {
                            "name": "data",
                            "type": "D",
                            "defaultValue": "undefined"
                        },
                        {
                            "name": "config",
                            "type": "C",
                            "defaultValue": "{} as any"
                        }
                    ],
                    "optional": false,
                    "returnType": "ILuPopupRef<T, D, R>",
                    "typeParameters": [
                        "T",
                        "D",
                        "R"
                    ],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "D",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "C",
                            "defaultValue": "{} as any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuPopup"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, Inject } from '@angular/core';\r\nimport { LuModal } from '@lucca-front/ng/modal';\r\nimport { ILuSidepanelConfig } from './sidepanel-config.model';\r\nimport { LU_SIDEPANEL_CONFIG, LU_SIDEPANEL_REF_FACTORY } from './sidepanel.token';\r\nimport { ILuPopupRefFactory } from '@lucca-front/ng/popup';\r\n\r\n@Injectable()\r\nexport class LuSidepanel<C extends ILuSidepanelConfig = ILuSidepanelConfig> extends LuModal<C> {\r\n\tconstructor(\r\n\t\t@Inject(LU_SIDEPANEL_REF_FACTORY) protected _factory: ILuPopupRefFactory,\r\n\t\t@Inject(LU_SIDEPANEL_CONFIG) protected _config: ILuSidepanelConfig,\r\n\t) {\r\n\t\tsuper(_factory, _config);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_factory",
                        "type": "ILuPopupRefFactory"
                    },
                    {
                        "name": "_config",
                        "type": "ILuSidepanelConfig"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "_factory",
                        "type": "ILuPopupRefFactory",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_config",
                        "type": "ILuSidepanelConfig",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LuModal",
            "type": "injectable"
        },
        {
            "name": "LuSidepanelIntl",
            "id": "injectable-LuSidepanelIntl-8fc11a4b41a5e55c75d4f225870b51d4",
            "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel.intl.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable, LOCALE_ID, Inject } from '@angular/core';\r\nimport { ALuIntl } from '@lucca-front/ng/core';\r\nimport { ILuSidepanelLabel } from './sidepanel.translate';\r\nimport { LU_SIDEPANEL_TRANSLATIONS } from './sidepanel.token';\r\n\r\n@Injectable()\r\nexport class LuSidepanelIntl extends ALuIntl<ILuSidepanelLabel> {\r\n\tconstructor(@Inject(LU_SIDEPANEL_TRANSLATIONS) translations, @Inject(LOCALE_ID) locale) {\r\n\t\tsuper(translations, locale);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translations",
                        "type": ""
                    },
                    {
                        "name": "locale",
                        "type": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "translations",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locale",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuIntl",
            "type": "injectable"
        },
        {
            "name": "LuSidepanelRefFactory",
            "id": "injectable-LuSidepanelRefFactory-5ebdc21acd75cfcddeb00bd3b1e987cb",
            "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel-ref.factory.ts",
            "properties": [],
            "methods": [
                {
                    "name": "forge",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>"
                        },
                        {
                            "name": "config",
                            "type": "C"
                        }
                    ],
                    "optional": false,
                    "returnType": "LuSidepanelRef<any, any, any>",
                    "typeParameters": [
                        "T",
                        "C"
                    ],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "C",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { ILuPopupRefFactory } from '@lucca-front/ng/popup';\r\nimport { Overlay, ComponentType } from '@angular/cdk/overlay';\r\nimport { Injector, Injectable, ComponentRef, ChangeDetectionStrategy } from '@angular/core';\r\nimport { PortalOutlet, PortalInjector, ComponentPortal } from '@angular/cdk/portal';\r\nimport { ILuSidepanelContent } from './sidepanel.model';\r\nimport { ALuSidepanelRef, ILuSidepanelRef } from './sidepanel-ref.model';\r\nimport { LU_SIDEPANEL_DATA } from './sidepanel.token';\r\nimport { LuSidepanelPanelComponent, LuSidepanelPanelComponentDefaultCD } from './sidepanel-panel.component';\r\nimport { ILuSidepanelConfig } from './sidepanel-config.model';\r\n\r\nclass LuSidepanelRef<T extends ILuSidepanelContent = ILuSidepanelContent, D = any, R = any> extends ALuSidepanelRef<T, D, R> implements ILuSidepanelRef<T, D, R> {\r\n\tprotected _containerRef: ComponentRef<LuSidepanelPanelComponent>;\r\n\tprotected _containerOutlet: PortalOutlet;\r\n\tconstructor(\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _injector: Injector,\r\n\t\tprotected _component: ComponentType<T>,\r\n\t\tprotected _config: ILuSidepanelConfig,\r\n\t) {\r\n\t\tsuper(_overlay, _injector, _component, _config);\r\n\t}\r\n\tprotected _openPopup(data?: D) {\r\n\t\tconst injectionMap = new WeakMap();\r\n\t\tinjectionMap.set(ALuSidepanelRef, this);\r\n\t\tinjectionMap.set(LU_SIDEPANEL_DATA, data);\r\n\t\tconst injector = new PortalInjector(this._injector, injectionMap);\r\n\t\tif (this._config.changeDetection === ChangeDetectionStrategy.OnPush) {\r\n\t\t\tconst containerPortal = new ComponentPortal(LuSidepanelPanelComponent, undefined, injector);\r\n\t\t\tthis._containerRef = this._overlayRef.attach<LuSidepanelPanelComponent>(containerPortal);\r\n\t\t} else {\r\n\t\t\tconst containerPortal = new ComponentPortal(LuSidepanelPanelComponentDefaultCD, undefined, injector);\r\n\t\t\tthis._containerRef = this._overlayRef.attach<LuSidepanelPanelComponent>(containerPortal);\r\n\t\t}\r\n\t\tthis._containerOutlet = this._containerRef.instance;\r\n\t\tconst portal = new ComponentPortal(this._component, undefined, injector);\r\n\t\tthis._componentRef = this._containerOutlet.attach(portal) as ComponentRef<T>;\r\n\t}\r\n\tprotected _closePopup() {\r\n\t\tthis._componentRef.destroy();\r\n\t\tthis._containerRef.destroy();\r\n\t}\r\n}\r\n\r\n@Injectable()\r\nexport class LuSidepanelRefFactory implements ILuPopupRefFactory<ILuSidepanelContent, ILuSidepanelConfig> {\r\n\tconstructor(\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _injector: Injector,\r\n\t) {}\r\n\tforge<T extends ILuSidepanelContent, C extends ILuSidepanelConfig>(component: ComponentType<T>, config: C) {\r\n\t\treturn new LuSidepanelRef(this._overlay, this._injector, component, config);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "_injector",
                        "type": "Injector"
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LuStringDateAdapter",
            "id": "injectable-LuStringDateAdapter-b349c647145cc74a20b4109a2e04d34e",
            "file": "packages/ng/libraries/core/src/lib/date/string/string-date.adapter.ts",
            "properties": [
                {
                    "name": "_nativeAdapter",
                    "type": "LuNativeDateAdapter",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "d",
                            "type": "string"
                        },
                        {
                            "name": "count",
                            "type": "number"
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "count",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "d",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "compare",
                    "args": [
                        {
                            "name": "a",
                            "type": "string"
                        },
                        {
                            "name": "b",
                            "type": "string"
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dateToString",
                    "args": [
                        {
                            "name": "d",
                            "type": "Date"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 86,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "forge",
                    "args": [
                        {
                            "name": "year",
                            "type": "number"
                        },
                        {
                            "name": "month",
                            "type": "number"
                        },
                        {
                            "name": "date",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "year",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "forgeInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "forgeToday",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "format",
                    "args": [
                        {
                            "name": "d",
                            "type": "string"
                        },
                        {
                            "name": "format",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDate",
                    "args": [
                        {
                            "name": "d",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDay",
                    "args": [
                        {
                            "name": "d",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMonth",
                    "args": [
                        {
                            "name": "d",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 66,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getYear",
                    "args": [
                        {
                            "name": "d",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 62,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isParsable",
                    "args": [
                        {
                            "name": "text",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValid",
                    "args": [
                        {
                            "name": "d",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parse",
                    "args": [
                        {
                            "name": "text",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stringToDate",
                    "args": [
                        {
                            "name": "s",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 82,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "s",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        },
                        {
                            "name": "count",
                            "type": "number"
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity"
                        }
                    ],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 49,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "count",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "compare",
                    "args": [
                        {
                            "name": "a",
                            "type": "D"
                        },
                        {
                            "name": "b",
                            "type": "D"
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "forge",
                    "args": [
                        {
                            "name": "year",
                            "type": "number"
                        },
                        {
                            "name": "month",
                            "type": "number"
                        },
                        {
                            "name": "date",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "year",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "forgeInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 7,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "forgeToday",
                    "args": [],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 6,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "format",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        },
                        {
                            "name": "format",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "getDate",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "getDay",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 47,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "getMonth",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "getYear",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "isParsable",
                    "args": [
                        {
                            "name": "text",
                            "type": "string"
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "isValid",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                },
                {
                    "name": "parse",
                    "args": [
                        {
                            "name": "text",
                            "type": "string"
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuDateAdapter"
                    }
                }
            ],
            "description": "<p>bind to a string with iso 26001 format YYYY-MM-DD </p>\n",
            "sourceCode": "import { Injectable, Inject, LOCALE_ID } from '@angular/core';\r\nimport { LuNativeDateAdapter } from '../native/index';\r\nimport { ALuDateAdapter } from '../date-adapter.class';\r\nimport { ELuDateGranularity } from '../date-granularity.enum';\r\nimport { ILuDateAdapter } from '../date-adapter.interface';\r\n\r\n/** bind to a string with iso 26001 format YYYY-MM-DD */\r\n@Injectable()\r\nexport class LuStringDateAdapter extends ALuDateAdapter<string> implements ILuDateAdapter<string> {\r\n\r\n\t// i'm going to implement this by doing some inheritance by composition\r\n\t// i'll just use the native date adapter and just parse/format to interface it with a string\r\n\r\n\tprivate _nativeAdapter: LuNativeDateAdapter;\r\n\r\n\tconstructor(\r\n\t\t@Inject(LOCALE_ID) private _locale: string,\r\n\t) {\r\n\t\tsuper();\r\n\t\tthis._nativeAdapter = new LuNativeDateAdapter(this._locale, { useUtc: true });\r\n\t}\r\n\r\n\tforge(year: number, month: number, date: number): string {\r\n\t\treturn this.dateToString(this._nativeAdapter.forge(year, month, date))\r\n\t}\r\n\r\n\tforgeToday(): string {\r\n\t\treturn this.dateToString(this._nativeAdapter.forgeToday())\r\n\t}\r\n\r\n\tforgeInvalid(): string {\r\n\t\treturn 'Invalid Date';\r\n\t}\r\n\r\n\tisValid(d: string): boolean {\r\n\t\treturn this._nativeAdapter.isValid(this.stringToDate(d));\r\n\t}\r\n\r\n\tcompare(a: string, b: string, granularity: ELuDateGranularity): number {\r\n\t\tconst da = this.stringToDate(a);\r\n\t\tconst db = this.stringToDate(b);\r\n\r\n\t\treturn this._nativeAdapter.compare(da, db, granularity);\r\n\t}\r\n\r\n\tisParsable(text: string): boolean {\r\n\t\treturn this._nativeAdapter.isParsable(text);\r\n\t}\r\n\r\n\tparse(text: string): string {\r\n\t\treturn this.dateToString(this._nativeAdapter.parse(text));\r\n\t}\r\n\r\n\tformat(d: string, format: string): string {\r\n\t\treturn this._nativeAdapter.format(this.stringToDate(d), format);\r\n\t}\r\n\r\n\tclone(d: string): string {\r\n\t\treturn `${d}`;\r\n\t}\r\n\r\n\tgetYear(d: string): number {\r\n\t\treturn this._nativeAdapter.getYear(this.stringToDate(d));\r\n\t}\r\n\r\n\tgetMonth(d: string): number {\r\n\t\treturn this._nativeAdapter.getMonth(this.stringToDate(d));\r\n\t}\r\n\r\n\tgetDate(d: string): number {\r\n\t\treturn this._nativeAdapter.getDate(this.stringToDate(d));\r\n\t}\r\n\r\n\tgetDay(d: string): number {\r\n\t\treturn this._nativeAdapter.getDay(this.stringToDate(d));\r\n\t}\r\n\r\n\tadd(d: string, count: number, granularity: ELuDateGranularity): string {\r\n\t\treturn this.dateToString(this._nativeAdapter.add(this.stringToDate(d), count, granularity));\r\n\t}\r\n\r\n\tprotected stringToDate(s: string): Date {\r\n\t\treturn new Date(`${s}T00:00:00Z`);\r\n\t}\r\n\r\n\tprotected dateToString(d: Date): string {\r\n\t\tlet result: string;\r\n\r\n\t\tif (d === undefined) {\r\n\t\t\tresult = undefined;\r\n\t\t} else if (!this._nativeAdapter.isValid(d)) {\r\n\t\t\tresult = this.forgeInvalid();\r\n\t\t} else {\r\n\t\t\tresult = d.toISOString().substring(0, 10);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_locale",
                        "type": "string"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "_locale",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuDateAdapter",
            "type": "injectable"
        },
        {
            "name": "LuTreeOptionItemIntl",
            "id": "injectable-LuTreeOptionItemIntl-1fe819ca89cce2addc2764cfc4b607c0",
            "file": "packages/ng/libraries/option/src/lib/item/tree-option-item.intl.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable, LOCALE_ID, Inject } from '@angular/core';\r\nimport { LU_TREE_OPTION_ITEM_TRANSLATIONS } from './tree-option-item.token';\r\nimport { ILuTreeOptionItemLabel } from './tree-option-item.translate';\r\nimport { ALuIntl } from '@lucca-front/ng/core';\r\n\r\n@Injectable()\r\nexport class LuTreeOptionItemIntl extends ALuIntl<ILuTreeOptionItemLabel> {\r\n\tconstructor(@Inject(LU_TREE_OPTION_ITEM_TRANSLATIONS) translations, @Inject(LOCALE_ID) locale) {\r\n\t\tsuper(translations, locale);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translations",
                        "type": ""
                    },
                    {
                        "name": "locale",
                        "type": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "translations",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locale",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuIntl",
            "type": "injectable"
        },
        {
            "name": "LuUserHomonymsService",
            "id": "injectable-LuUserHomonymsService-de93a27f0f8719fcb3da3cf0fa613579",
            "file": "packages/ng/libraries/user/src/lib/select/homonyms/user-homonyms.service.ts",
            "properties": [
                {
                    "name": "_format",
                    "defaultValue": "LuDisplayFullname.lastfirst",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "enrichHomonyms",
                    "args": [
                        {
                            "name": "homonyms",
                            "type": "U[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<U[]>",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "homonyms",
                            "type": "U[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "extractHomonyms",
                    "args": [
                        {
                            "name": "users",
                            "type": "U[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "U[]",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "users",
                            "type": "U[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "enrichHomonyms",
                    "args": [
                        {
                            "name": "homonyms",
                            "type": "U[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<U[]>",
                    "typeParameters": [],
                    "line": 19,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "homonyms",
                            "type": "U[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuUserHomonymsService"
                    }
                },
                {
                    "name": "extractHomonyms",
                    "args": [
                        {
                            "name": "users",
                            "type": "U[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "U[]",
                    "typeParameters": [],
                    "line": 18,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "users",
                            "type": "U[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuUserHomonymsService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { ILuUser } from '../../user.model';\r\nimport { Observable, of } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { LuUserDisplayPipe, LuDisplayFullname } from '../../display/index';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\n\r\ninterface IV3CollectionResponse<T = any> {\r\n\tdata: { items: T[] };\r\n}\r\n\r\nexport interface ILuUserHomonymsService<U extends ILuUser = ILuUser> {\r\n\textractHomonyms(users: U[]): U[];\r\n\tenrichHomonyms(homonyms: U[]): Observable<U[]>;\r\n}\r\n\r\nexport abstract class ALuUserHomonymsService<U extends ILuUser = ILuUser> implements ILuUserHomonymsService<U> {\r\n\tabstract extractHomonyms(users: U[]): U[];\r\n\tabstract enrichHomonyms(homonyms: U[]): Observable<U[]>;\r\n}\r\n@Injectable()\r\nexport class LuUserHomonymsService<U extends ILuUser = ILuUser> extends ALuUserHomonymsService<U> implements ILuUserHomonymsService<U> {\r\n\tprivate _format = LuDisplayFullname.lastfirst;\r\n\textractHomonyms(users: U[]): U[] {\r\n\t\tconst namesCount = {} as { [key: string]: number};\r\n\t\tusers.forEach(user => {\r\n\t\t\tconst name = this._pipe.transform(user, this._format);\r\n\t\t\tconst count = namesCount[name] || 0;\r\n\t\t\tnamesCount[name] = count + 1;\r\n\t\t});\r\n\r\n\t\tconst nonUniqNames = Object.keys(namesCount)\r\n\t\t.filter(key => namesCount[key] > 1);\r\n\r\n\t\tconst homonyms = [] as U[];\r\n\t\tnonUniqNames.forEach(name => {\r\n\t\t\thomonyms.push(...users.filter(u => name === this._pipe.transform(u, this._format)));\r\n\t\t});\r\n\t\treturn homonyms;\r\n\t}\r\n\r\n\tenrichHomonyms(homonyms: U[]): Observable<U[]> {\r\n\t\tif (!homonyms || homonyms.length === 0) { return of([]); }\r\n\t\treturn this._http.get<IV3CollectionResponse<{ id: number, department: { name: string }}>>(`/api/v3/users`, { params: {\r\n\t\t\t'id': homonyms.map(u => u.id).join(','),\r\n\t\t\t'fields': 'id,department.name',\r\n\t\t}}).pipe(\r\n\t\t\tmap(res => res.data.items as { id: number, department?: { name: string }}[]),\r\n\t\t\tmap(infos => infos.map(info => {\r\n\t\t\t\t\tconst homonym = homonyms.find(h => h.id === info.id);\r\n\t\t\t\t\treturn { ...homonym, additionalInformation: info.department ? info.department.name : '' } as U;\r\n\t\t\t\t}) as U[]\r\n\t\t\t),\r\n\t\t\tcatchError(err => of([])),\r\n\t\t);\r\n\t}\r\n\tconstructor(\r\n\t\tprivate _pipe: LuUserDisplayPipe,\r\n\t\tprivate _http: HttpClient,\r\n\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_pipe",
                        "type": "LuUserDisplayPipe"
                    },
                    {
                        "name": "_http",
                        "type": "HttpClient"
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "_pipe",
                        "type": "LuUserDisplayPipe",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuUserHomonymsService",
            "type": "injectable"
        },
        {
            "name": "LuUserSearcherIntl",
            "id": "injectable-LuUserSearcherIntl-4b0fb203280dae2f10f9eba4d01cffb8",
            "file": "packages/ng/libraries/user/src/lib/select/searcher/user-searcher.intl.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable, LOCALE_ID, Inject } from '@angular/core';\r\nimport { ALuIntl } from '@lucca-front/ng/core';\r\nimport { ILuUserSearcherLabel } from './user-searcher.translate';\r\nimport { LU_USER_SEARCHER_TRANSLATIONS } from './user-searcher.token';\r\n\r\n@Injectable()\r\nexport class LuUserSearcherIntl extends ALuIntl<ILuUserSearcherLabel> {\r\n\tconstructor(@Inject(LU_USER_SEARCHER_TRANSLATIONS) translations, @Inject(LOCALE_ID) locale) {\r\n\t\tsuper(translations, locale);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translations",
                        "type": ""
                    },
                    {
                        "name": "locale",
                        "type": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "translations",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locale",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuIntl",
            "type": "injectable"
        },
        {
            "name": "LuUserSelectInputIntl",
            "id": "injectable-LuUserSelectInputIntl-2cb5b136019378189bdcd34b038e392f",
            "file": "packages/ng/libraries/user/src/lib/select/input/user-select-input.intl.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable, LOCALE_ID, Inject } from '@angular/core';\r\nimport { LU_USER_SELECT_INPUT_TRANSLATIONS } from './user-select-input.token';\r\nimport { ILuUserSelectInputLabel } from './user-select-input.translate';\r\nimport { ALuIntl } from '@lucca-front/ng/core';\r\n\r\n@Injectable()\r\nexport class LuUserSelectInputIntl extends ALuIntl<ILuUserSelectInputLabel> {\r\n\tconstructor(@Inject(LU_USER_SELECT_INPUT_TRANSLATIONS) translations, @Inject(LOCALE_ID) locale) {\r\n\t\tsuper(translations, locale);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translations",
                        "type": ""
                    },
                    {
                        "name": "locale",
                        "type": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "translations",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locale",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuIntl",
            "type": "injectable"
        },
        {
            "name": "LuUserV3Service",
            "id": "injectable-LuUserV3Service-32c53a4e4f59041b0553d66334cb9b58",
            "file": "packages/ng/libraries/user/src/lib/service/user-v3.service.ts",
            "properties": [
                {
                    "name": "_appInstanceId",
                    "type": "number | string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_operations",
                    "defaultValue": "[]",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_api",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "_fields",
                    "defaultValue": "'fields=id,name'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "_filters",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "_orderBy",
                    "defaultValue": "'orderBy=name,asc'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                }
            ],
            "methods": [
                {
                    "name": "_clueFilter",
                    "args": [
                        {
                            "name": "clue",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 50,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_get",
                    "args": [
                        {
                            "name": "url",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMe",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<U>",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "_clueFilter",
                    "args": [
                        {
                            "name": "clue",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "_get",
                    "args": [
                        {
                            "name": "url",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "searchAll",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "searchPaged",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 45,
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "searchAll",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "searchPaged",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuApiV3Service"
                    }
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "searchAll",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "searchPaged",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { ILuUser } from '../user.model';\r\nimport { ILuUserService } from './user-service.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { LuApiV3Service, ILuApiResponse, ILuApiSuggestion } from '@lucca-front/ng/api';\r\nimport { Observable } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class LuUserV3Service<U extends ILuUser = ILuUser> extends LuApiV3Service<U> implements ILuUserService<U> {\r\n\r\n\tprotected _appInstanceId: number | string;\r\n\tset appInstanceId(appInstanceId: number | string) { this._appInstanceId = appInstanceId; }\r\n\tprotected _operations: number[] = [];\r\n\tset operations(operations: number[]) { this._operations = operations; }\r\n\r\n\tconstructor(protected _http: HttpClient) {\r\n\t\tsuper(_http);\r\n\t\tthis.api = '/api/v3/users/search';\r\n\t\tthis.fields = 'id,firstname,lastname,picture[href]';\r\n\t\tthis.orderBy = 'lastname,asc,firstname,asc';\r\n\t}\r\n\r\n\tgetMe(): Observable<U> {\r\n\t\treturn this._http.get<ILuApiResponse<ILuUser>>(`/api/v3/users/me?fields=id`).pipe(\r\n\t\t\tswitchMap(r => this._get(this.url + `&id=${r.data.id}`)),\r\n\t\t\tmap(users => users[0]),\r\n\t\t);\r\n\t}\r\n\r\n\tget url() {\r\n\t\tif (!this._appInstanceId || !this._operations || !this._operations.length) {\r\n\t\t\treturn `${this._api}?${[...this._filters, this._orderBy, this._fields].filter(f => !!f).join('&')}`;\r\n\t\t} else {\r\n\t\t\treturn `/api/v3/users/scopedsearch?${[\r\n\t\t\t\t...this._filters,\r\n\t\t\t\t`appInstanceId=${this._appInstanceId}`,\r\n\t\t\t\t`operations=${this._operations.join(',')}`,\r\n\t\t\t\tthis._orderBy,\r\n\t\t\t\tthis._fields,\r\n\t\t\t].filter(f => !!f).join('&')}`;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _get(url) {\r\n\t\treturn (<any>super._get(url) as Observable<ILuApiSuggestion<U>[]>)\r\n\t\t.pipe(map(suggestions => suggestions.map(s => s.item)));\r\n\t}\r\n\r\n\tprotected _clueFilter(clue) {\r\n\t\tconst urlSafeClue = clue.split(' ').map(c => encodeURIComponent(c)).join(',');\r\n\t\treturn `clue=${urlSafeClue}`;\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_http",
                        "type": "HttpClient"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "appInstanceId": {
                    "name": "appInstanceId",
                    "setSignature": {
                        "name": "appInstanceId",
                        "type": "void",
                        "args": [
                            {
                                "name": "appInstanceId",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 13,
                        "jsdoctags": [
                            {
                                "name": "appInstanceId",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "operations": {
                    "name": "operations",
                    "setSignature": {
                        "name": "operations",
                        "type": "void",
                        "args": [
                            {
                                "name": "operations",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 15,
                        "jsdoctags": [
                            {
                                "name": "operations",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "url": {
                    "name": "url",
                    "getSignature": {
                        "name": "url",
                        "type": "",
                        "returnType": "",
                        "line": 31
                    }
                }
            },
            "extends": "LuApiV3Service",
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-35bbef105bdc82fce8bc8aaee9c4a9b3",
            "file": "packages/ng-bis/user/src/lib/user.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "ACalendarItem",
            "id": "class-ACalendarItem-ab8ec4d7490bc3ee224f7aae4ca891f0",
            "file": "packages/ng/libraries/date/src/lib/calendar/calendar-item.class.ts",
            "type": "class",
            "sourceCode": "import { ICalendarItem } from './calendar-item.interface';\r\nimport { ELuDateGranularity } from '@lucca-front/ng/core';\r\n\r\nexport abstract class ACalendarItem<D> implements ICalendarItem<D> {\r\n\tget id() { return `${this.granularity}-${this.date.toString()}`; }\r\n\tdate: D;\r\n\tmods: string[] = [];\r\n\tisDisabled: boolean = false;\r\n\tlabel: string;\r\n\treadonly granularity: ELuDateGranularity;\r\n}\r\nexport class DayItem<D> extends ACalendarItem<D> implements ICalendarItem<D> {\r\n\treadonly granularity = ELuDateGranularity.day;\r\n\tconstructor(\r\n\t\tpublic date: D,\r\n\t\tpublic label: string,\r\n\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\nexport class MonthItem<D> extends ACalendarItem<D> implements ICalendarItem<D> {\r\n\treadonly granularity = ELuDateGranularity.month;\r\n\tconstructor(\r\n\t\tpublic date: D,\r\n\t\tpublic label: string,\r\n\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\nexport class YearItem<D> extends ACalendarItem<D> implements ICalendarItem<D> {\r\n\treadonly granularity = ELuDateGranularity.year;\r\n\tconstructor(\r\n\t\tpublic date: D,\r\n\t\tpublic label: string,\r\n\t\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\nexport class DecadeItem<D> extends ACalendarItem<D> implements ICalendarItem<D> {\r\n\treadonly granularity = ELuDateGranularity.decade;\r\n\tconstructor(\r\n\t\tpublic date: D,\r\n\t\tpublic label: string,\r\n\t\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\n",
            "properties": [
                {
                    "name": "date",
                    "type": "D",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "granularity",
                    "type": "ELuDateGranularity",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "mods",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "id": {
                    "name": "id",
                    "getSignature": {
                        "name": "id",
                        "type": "",
                        "returnType": "",
                        "line": 5
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ICalendarItem"
            ]
        },
        {
            "name": "ALuApiOptionFeeder",
            "id": "class-ALuApiOptionFeeder-ac82cf2e80660d0ab341f1c56c87d434",
            "file": "packages/ng/libraries/api/src/lib/select/feeder/api-feeder.model.ts",
            "type": "class",
            "sourceCode": "import { ILuOptionOperator } from '@lucca-front/ng/option';\r\nimport { ILuApiItem } from '../../api.model';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { ILuApiService } from '../../service/index';\r\n\r\nexport interface ILuApiOptionFeeder<T extends ILuApiItem = ILuApiItem> extends ILuOptionOperator<T> {}\r\nexport interface ILuApiFeederService<T extends ILuApiItem = ILuApiItem> {\r\n\tgetAll(): Observable<T[]>;\r\n}\r\n\r\nexport abstract class ALuApiOptionFeeder<T extends ILuApiItem = ILuApiItem, S extends ILuApiService<T> =  ILuApiService<T>>\r\nimplements ILuApiOptionFeeder<T> {\r\n\toutOptions$ = new BehaviorSubject<T[]>([]);\r\n\tprotected _service: S;\r\n\tconstructor(service: S) {\r\n\t\tthis._service = service;\r\n\t}\r\n\tonOpen() {\r\n\t\tthis._service.getAll()\r\n\t\t.subscribe(items => this.outOptions$.next(items));\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "service",
                        "type": "S"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "S",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_service",
                    "type": "S",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "outOptions$",
                    "defaultValue": "new BehaviorSubject<T[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuApiOptionFeeder"
            ]
        },
        {
            "name": "ALuApiOptionPagedSearcher",
            "id": "class-ALuApiOptionPagedSearcher-d83aba88740f53a2e381162c54c4b831",
            "file": "packages/ng/libraries/api/src/lib/select/searcher/api-searcher.model.ts",
            "type": "class",
            "sourceCode": "import { Observable, Subject, combineLatest, merge, of } from 'rxjs';\r\nimport {\r\n\tmapTo,\r\n\ttap,\r\n\twithLatestFrom,\r\n\tshare,\r\n\tswitchMap,\r\n\tdistinctUntilChanged,\r\n\tcatchError,\r\n\tmap,\r\n\tdebounceTime,\r\n} from 'rxjs/operators';\r\n\r\nimport { ILuApiItem } from '../../api.model';\r\nimport { ILuApiOptionFeeder } from '../feeder/index';\r\nimport { ILuOnOpenSubscriber, ILuOnScrollBottomSubscriber } from '@lucca-front/ng/core';\r\nimport { ILuApiService } from '../../service/index';\r\n\r\nexport interface ILuApiOptionSearcher<T extends ILuApiItem = ILuApiItem> extends ILuApiOptionFeeder<T> {}\r\n\r\nexport abstract class ALuApiOptionSearcher<T extends ILuApiItem = ILuApiItem, S extends ILuApiService<T> = ILuApiService<T>>\r\nimplements ILuApiOptionFeeder<T>, ILuOnOpenSubscriber {\r\n\toutOptions$ = new Subject<T[]>();\r\n\tloading$: Observable<boolean>;\r\n\tempty$: Observable<boolean>;\r\n\r\n\tprotected _clue$: Observable<string>;\r\n\r\n\tset clue$(clue$: Observable<string>) {\r\n\t\t// this.initObservables(clue$);\r\n\t\tthis._clue$ = clue$;\r\n\t}\r\n\tconstructor(protected _service: S) {}\r\n\tinit() {\r\n\t\tthis.initObservables();\r\n\t}\r\n\tonOpen() {\r\n\t\tthis.resetClue();\r\n\t}\r\n\tonClose() {\r\n\t\tthis.clearOptions();\r\n\t}\r\n\tprotected initObservables() {\r\n\t\t// this._clue$ = clue$.pipe(share());\r\n\t\tconst results$ = this._clue$\r\n\t\t.pipe(\r\n\t\t\tswitchMap(clue => this._service.searchAll(clue)),\r\n\t\t\tcatchError(err => of([])),\r\n\t\t\tshare(),\r\n\t\t);\r\n\r\n\t\tresults$.subscribe(items => this.outOptions$.next(items));\r\n\t\tthis.loading$ = merge(\r\n\t\t\tthis._clue$.pipe(mapTo(true)),\r\n\t\t\tresults$.pipe(mapTo(false)),\r\n\t\t);\r\n\t\tthis.empty$ = results$.pipe(\r\n\t\t\tmap(o => o.length === 0),\r\n\t\t);\r\n\t}\r\n\tabstract resetClue();\r\n\tprotected clearOptions() {\r\n\t\tthis.outOptions$.next([]);\r\n\t}\r\n}\r\n\r\nexport interface ILuApiOptionPagedSearcher<T extends ILuApiItem = ILuApiItem> extends ILuApiOptionSearcher<T> {}\r\n\r\nexport abstract class ALuApiOptionPagedSearcher<T extends ILuApiItem = ILuApiItem, S extends ILuApiService<T> = ILuApiService<T>>\r\nextends ALuApiOptionSearcher<T, S>\r\nimplements ILuApiOptionPagedSearcher<T>, ILuOnScrollBottomSubscriber {\r\n\toutOptions$ = new Subject<T[]>();\r\n\tloading$: Observable<boolean>;\r\n\tprotected _loading = false;\r\n\tprotected _page$ = new Subject<number>();\r\n\tprotected _page: number;\r\n\tprotected _options: T[] = [];\r\n\r\n\tconstructor(service: S) {\r\n\t\tsuper(service);\r\n\t}\r\n\tonOpen() {\r\n\t\tthis.resetClue();\r\n\t\tthis.resetPage();\r\n\t}\r\n\tonScrollBottom() {\r\n\t\tif (!this._loading) {\r\n\t\t\tthis._page$.next(this._page + 1);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected initObservables() {\r\n\t\tconst distinctPage$ = this._page$.pipe(\r\n\t\t\tdistinctUntilChanged(),\r\n\t\t\ttap(p => this._page = p),\r\n\t\t);\r\n\r\n\t\t// this._clue$ = clue$.pipe(\r\n\t\t// \ttap(() => this._page$.next(0)),\r\n\t\t// \t// distinctUntilChanged(),\r\n\t\t// \tshare()\r\n\t\t// );\r\n\t\tconst results$ = combineLatest(\r\n\t\t\tdistinctPage$,\r\n\t\t\tthis._clue$,\r\n\t\t).pipe(\r\n\t\t\tdebounceTime(100),\r\n\t\t\tswitchMap(([page, clue]) => this._service.searchPaged(clue, page)),\r\n\t\t\tcatchError(err => of([])),\r\n\t\t\tshare(),\r\n\t\t);\r\n\r\n\t\tresults$\r\n\t\t.pipe(withLatestFrom(distinctPage$))\r\n\t\t.subscribe(([items, page]) => {\r\n\t\t\tif (page === 0) {\r\n\t\t\t\tthis._options = [...items];\r\n\t\t\t} else {\r\n\t\t\t\tthis._options.push(...items);\r\n\t\t\t}\r\n\t\t\tthis.outOptions$.next([...this._options]);\r\n\t\t});\r\n\t\tthis.loading$ = merge(\r\n\t\t\tthis._clue$.pipe(mapTo(true)),\r\n\t\t\tresults$.pipe(mapTo(false)),\r\n\t\t);\r\n\t\tthis.loading$.subscribe(l => this._loading = l);\r\n\t\tthis.empty$ = this.outOptions$.pipe(\r\n\t\t\tmap(o => o.length === 0),\r\n\t\t);\r\n\t}\r\n\tabstract resetClue();\r\n\tresetPage() {\r\n\t\tthis._page$.next(0);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "service",
                        "type": "S"
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "S",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_options",
                    "defaultValue": "[]",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_page",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_page$",
                    "defaultValue": "new Subject<number>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "loading$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "outOptions$",
                    "defaultValue": "new Subject<T[]>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "_clue$",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "empty$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "loading$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "outOptions$",
                    "defaultValue": "new Subject<T[]>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                }
            ],
            "methods": [
                {
                    "name": "initObservables",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82
                },
                {
                    "name": "onScrollBottom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86
                },
                {
                    "name": "resetClue",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 132,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "resetPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133
                },
                {
                    "name": "clearOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "initObservables",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "resetClue",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "ALuApiOptionSearcher",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuApiOptionPagedSearcher",
                "ILuOnScrollBottomSubscriber"
            ]
        },
        {
            "name": "ALuApiOptionPager",
            "id": "class-ALuApiOptionPager-870d7448a7f7752bbcd04d03297e9d90",
            "file": "packages/ng/libraries/api/src/lib/select/pager/api-pager.model.ts",
            "type": "class",
            "sourceCode": "import { ILuOnOpenSubscriber, ILuOnScrollBottomSubscriber } from '@lucca-front/ng/core';\r\nimport { ILuOptionOperator } from '@lucca-front/ng/option';\r\nimport { ILuApiItem } from '../../api.model';\r\nimport { Observable, of, merge, Subject } from 'rxjs';\r\nimport { switchMap, catchError, mapTo, tap, map, distinctUntilChanged } from 'rxjs/operators';\r\nimport { ILuApiService } from '../../service/index';\r\n\r\nenum Strategy {\r\n\tappend,\r\n\treplace,\r\n}\r\nconst MAGIC_PAGE_SIZE = 20;\r\nexport interface ILuApiOptionPager<T extends ILuApiItem = ILuApiItem> extends ILuOptionOperator<T> {}\r\nexport interface ILuApiPagerService<T extends ILuApiItem = ILuApiItem> {\r\n\tgetPaged(page: number): Observable<T[]>;\r\n}\r\n\r\nexport abstract class ALuApiOptionPager<T extends ILuApiItem = ILuApiItem, S extends ILuApiService<T> = ILuApiService<T>>\r\nimplements ILuApiOptionPager<T>, ILuOnOpenSubscriber, ILuOnScrollBottomSubscriber {\r\n\toutOptions$ = new Subject<T[]>();\r\n\tloading$: Observable<boolean>;\r\n\r\n\tprotected _loading = false;\r\n\tprotected _results$: Observable<{ items: T[], strategy: Strategy }>;\r\n\tprotected _options: T[] = [];\r\n\tprotected _page$ = new Subject<number>();\r\n\tprotected _page: number;\r\n\tprotected _initialized = false;\r\n\tconstructor(protected _service: S) {\r\n\t}\r\n\tprotected init() {\r\n\t\tthis.initObservables();\r\n\t}\r\n\tonOpen() {\r\n\t\tif (!this._initialized) {\r\n\t\t\tthis._page$.next(0);\r\n\t\t\tthis._initialized = true;\r\n\t\t}\r\n\t}\r\n\t// onClose() {\r\n\t// \tthis._page$.next(0);\r\n\t// }\r\n\tonScrollBottom() {\r\n\t\tif (!this._loading) {\r\n\t\t\tthis._page$.next(this._page + 1);\r\n\t\t}\r\n\t}\r\n\tprotected initObservables() {\r\n\t\tconst _results$: Observable<{ items: T[], strategy: Strategy }> = this._page$\r\n\t\t.pipe(\r\n\t\t\tdistinctUntilChanged(),\r\n\t\t\ttap(p => this._page = p),\r\n\t\t\tswitchMap(page => {\r\n\t\t\t\tif (page === undefined) {\r\n\t\t\t\t\treturn of({ items: [], strategy: Strategy.replace });\r\n\t\t\t\t}\r\n\t\t\t\treturn this._service.getPaged(page).pipe(\r\n\t\t\t\t\tmap(items => ({ items: items, strategy: page === 0 ? Strategy.replace : Strategy.append }))\r\n\t\t\t\t);\r\n\t\t\t}),\r\n\t\t\tcatchError(err => of({ items: [], strategy: Strategy.replace })),\r\n\t\t\ttap(results => {\r\n\t\t\t\tif (results.strategy === Strategy.replace) {\r\n\t\t\t\t\tthis._options = [...results.items];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._options.push(...results.items);\r\n\t\t\t\t}\r\n\t\t\t\tthis.outOptions$.next([...this._options]);\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tthis.loading$ = merge(\r\n\t\t\tthis._page$.pipe(mapTo(true)),\r\n\t\t\t_results$.pipe(mapTo(false)),\r\n\t\t);\r\n\t\tthis.loading$.subscribe(l => this._loading = l);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_service",
                        "type": "S"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "_service",
                        "type": "S",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_initialized",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_options",
                    "defaultValue": "[]",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_page",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_page$",
                    "defaultValue": "new Subject<number>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_results$",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "loading$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "outOptions$",
                    "defaultValue": "new Subject<T[]>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "initObservables",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "onScrollBottom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuApiOptionPager",
                "ILuOnOpenSubscriber",
                "ILuOnScrollBottomSubscriber"
            ]
        },
        {
            "name": "ALuApiOptionSearcher",
            "id": "class-ALuApiOptionSearcher-d83aba88740f53a2e381162c54c4b831",
            "file": "packages/ng/libraries/api/src/lib/select/searcher/api-searcher.model.ts",
            "type": "class",
            "sourceCode": "import { Observable, Subject, combineLatest, merge, of } from 'rxjs';\r\nimport {\r\n\tmapTo,\r\n\ttap,\r\n\twithLatestFrom,\r\n\tshare,\r\n\tswitchMap,\r\n\tdistinctUntilChanged,\r\n\tcatchError,\r\n\tmap,\r\n\tdebounceTime,\r\n} from 'rxjs/operators';\r\n\r\nimport { ILuApiItem } from '../../api.model';\r\nimport { ILuApiOptionFeeder } from '../feeder/index';\r\nimport { ILuOnOpenSubscriber, ILuOnScrollBottomSubscriber } from '@lucca-front/ng/core';\r\nimport { ILuApiService } from '../../service/index';\r\n\r\nexport interface ILuApiOptionSearcher<T extends ILuApiItem = ILuApiItem> extends ILuApiOptionFeeder<T> {}\r\n\r\nexport abstract class ALuApiOptionSearcher<T extends ILuApiItem = ILuApiItem, S extends ILuApiService<T> = ILuApiService<T>>\r\nimplements ILuApiOptionFeeder<T>, ILuOnOpenSubscriber {\r\n\toutOptions$ = new Subject<T[]>();\r\n\tloading$: Observable<boolean>;\r\n\tempty$: Observable<boolean>;\r\n\r\n\tprotected _clue$: Observable<string>;\r\n\r\n\tset clue$(clue$: Observable<string>) {\r\n\t\t// this.initObservables(clue$);\r\n\t\tthis._clue$ = clue$;\r\n\t}\r\n\tconstructor(protected _service: S) {}\r\n\tinit() {\r\n\t\tthis.initObservables();\r\n\t}\r\n\tonOpen() {\r\n\t\tthis.resetClue();\r\n\t}\r\n\tonClose() {\r\n\t\tthis.clearOptions();\r\n\t}\r\n\tprotected initObservables() {\r\n\t\t// this._clue$ = clue$.pipe(share());\r\n\t\tconst results$ = this._clue$\r\n\t\t.pipe(\r\n\t\t\tswitchMap(clue => this._service.searchAll(clue)),\r\n\t\t\tcatchError(err => of([])),\r\n\t\t\tshare(),\r\n\t\t);\r\n\r\n\t\tresults$.subscribe(items => this.outOptions$.next(items));\r\n\t\tthis.loading$ = merge(\r\n\t\t\tthis._clue$.pipe(mapTo(true)),\r\n\t\t\tresults$.pipe(mapTo(false)),\r\n\t\t);\r\n\t\tthis.empty$ = results$.pipe(\r\n\t\t\tmap(o => o.length === 0),\r\n\t\t);\r\n\t}\r\n\tabstract resetClue();\r\n\tprotected clearOptions() {\r\n\t\tthis.outOptions$.next([]);\r\n\t}\r\n}\r\n\r\nexport interface ILuApiOptionPagedSearcher<T extends ILuApiItem = ILuApiItem> extends ILuApiOptionSearcher<T> {}\r\n\r\nexport abstract class ALuApiOptionPagedSearcher<T extends ILuApiItem = ILuApiItem, S extends ILuApiService<T> = ILuApiService<T>>\r\nextends ALuApiOptionSearcher<T, S>\r\nimplements ILuApiOptionPagedSearcher<T>, ILuOnScrollBottomSubscriber {\r\n\toutOptions$ = new Subject<T[]>();\r\n\tloading$: Observable<boolean>;\r\n\tprotected _loading = false;\r\n\tprotected _page$ = new Subject<number>();\r\n\tprotected _page: number;\r\n\tprotected _options: T[] = [];\r\n\r\n\tconstructor(service: S) {\r\n\t\tsuper(service);\r\n\t}\r\n\tonOpen() {\r\n\t\tthis.resetClue();\r\n\t\tthis.resetPage();\r\n\t}\r\n\tonScrollBottom() {\r\n\t\tif (!this._loading) {\r\n\t\t\tthis._page$.next(this._page + 1);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected initObservables() {\r\n\t\tconst distinctPage$ = this._page$.pipe(\r\n\t\t\tdistinctUntilChanged(),\r\n\t\t\ttap(p => this._page = p),\r\n\t\t);\r\n\r\n\t\t// this._clue$ = clue$.pipe(\r\n\t\t// \ttap(() => this._page$.next(0)),\r\n\t\t// \t// distinctUntilChanged(),\r\n\t\t// \tshare()\r\n\t\t// );\r\n\t\tconst results$ = combineLatest(\r\n\t\t\tdistinctPage$,\r\n\t\t\tthis._clue$,\r\n\t\t).pipe(\r\n\t\t\tdebounceTime(100),\r\n\t\t\tswitchMap(([page, clue]) => this._service.searchPaged(clue, page)),\r\n\t\t\tcatchError(err => of([])),\r\n\t\t\tshare(),\r\n\t\t);\r\n\r\n\t\tresults$\r\n\t\t.pipe(withLatestFrom(distinctPage$))\r\n\t\t.subscribe(([items, page]) => {\r\n\t\t\tif (page === 0) {\r\n\t\t\t\tthis._options = [...items];\r\n\t\t\t} else {\r\n\t\t\t\tthis._options.push(...items);\r\n\t\t\t}\r\n\t\t\tthis.outOptions$.next([...this._options]);\r\n\t\t});\r\n\t\tthis.loading$ = merge(\r\n\t\t\tthis._clue$.pipe(mapTo(true)),\r\n\t\t\tresults$.pipe(mapTo(false)),\r\n\t\t);\r\n\t\tthis.loading$.subscribe(l => this._loading = l);\r\n\t\tthis.empty$ = this.outOptions$.pipe(\r\n\t\t\tmap(o => o.length === 0),\r\n\t\t);\r\n\t}\r\n\tabstract resetClue();\r\n\tresetPage() {\r\n\t\tthis._page$.next(0);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_service",
                        "type": "S"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "_service",
                        "type": "S",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_clue$",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "empty$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "loading$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "outOptions$",
                    "defaultValue": "new Subject<T[]>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methods": [
                {
                    "name": "clearOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "initObservables",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "resetClue",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        117
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "clue$": {
                    "name": "clue$",
                    "setSignature": {
                        "name": "clue$",
                        "type": "void",
                        "args": [
                            {
                                "name": "clue$",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 29,
                        "jsdoctags": [
                            {
                                "name": "clue$",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuApiOptionFeeder",
                "ILuOnOpenSubscriber"
            ]
        },
        {
            "name": "ALuApiService",
            "id": "class-ALuApiService-213d3b2078772cd6854c57ae2c84c1a6",
            "file": "packages/ng/libraries/api/src/lib/service/api-service.model.ts",
            "type": "class",
            "sourceCode": "import { ILuApiItem } from '../api.model';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface ILuApiService<T extends ILuApiItem = ILuApiItem> {\r\n\tgetAll(filters?: string[]): Observable<T[]>;\r\n\tgetPaged(page: number, filters?: string[]): Observable<T[]>;\r\n\tsearchAll(clue: string, filters?: string[]): Observable<T[]>;\r\n\tsearchPaged(clue: string, page: number, filters?: string[]): Observable<T[]>;\r\n}\r\n\r\nexport abstract class ALuApiService<T extends ILuApiItem = ILuApiItem> implements ILuApiService<T> {\r\n\tabstract getAll(filters?: string[]): Observable<T[]>;\r\n\tabstract getPaged(page: number, filters?: string[]): Observable<T[]>;\r\n\tabstract searchAll(clue: string, filters?: string[]): Observable<T[]>;\r\n\tabstract searchPaged(clue: string, page: number, filters?: string[]): Observable<T[]>;\r\n}",
            "properties": [],
            "methods": [
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchAll",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchPaged",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuApiService"
            ]
        },
        {
            "name": "ALuClearer",
            "id": "class-ALuClearer-5db382dbad88f956515fa792abc124c7",
            "file": "packages/ng/libraries/input/src/lib/clearer/clearer.model.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nexport interface ILuClearer<T = any> {\r\n\tonClear: Observable<T>;\r\n}\r\nexport abstract class ALuClearer<T = any> implements ILuClearer<T> {\r\n\tonClear: Observable<T>;\r\n}\r\n",
            "properties": [
                {
                    "name": "onClear",
                    "type": "Observable<T>",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuClearer"
            ]
        },
        {
            "name": "ALuDateAdapter",
            "id": "class-ALuDateAdapter-b3ff5e4853ad049536253cbc4884209f",
            "file": "packages/ng/libraries/core/src/lib/date/date-adapter.class.ts",
            "type": "class",
            "sourceCode": "import { ILuDateAdapter } from './date-adapter.interface';\r\nimport { ELuDateGranularity } from './date-granularity.enum';\r\n\r\nexport abstract class ALuDateAdapter<D> implements ILuDateAdapter<D> {\r\n\tabstract forge(year: number, month: number, date: number): D;\r\n\tabstract forgeToday(): D;\r\n\tabstract forgeInvalid(): D;\r\n\tabstract isValid(d: D): boolean;\r\n\tcompare(a: D, b: D, granularity: ELuDateGranularity): number {\r\n\t\tif (!a || !b || !this.isValid(a) || !this.isValid(b)) {\r\n\t\t\tthrow new Error('you must provide valid and not null dates to be compared');\r\n\t\t}\r\n\t\tconst aDecade = Math.floor(this.getYear(a) / 10);\r\n\t\tconst bDecade = Math.floor(this.getYear(b) / 10);\r\n\t\tif (aDecade < bDecade) { return -1; }\r\n\t\tif (aDecade > bDecade) { return 1; }\r\n\t\tif (granularity === ELuDateGranularity.decade) { return 0; }\r\n\r\n\t\tconst aYear = this.getYear(a);\r\n\t\tconst bYear = this.getYear(b);\r\n\t\tif (aYear < bYear) { return -1; }\r\n\t\tif (aYear > bYear) { return 1; }\r\n\t\tif (granularity === ELuDateGranularity.year) { return 0; }\r\n\r\n\t\tconst aMonth = this.getMonth(a);\r\n\t\tconst bMonth = this.getMonth(b);\r\n\t\tif (aMonth < bMonth) { return -1; }\r\n\t\tif (aMonth > bMonth) { return 1; }\r\n\t\tif (granularity === ELuDateGranularity.month) { return 0; }\r\n\r\n\t\tconst aDate = this.getDate(a);\r\n\t\tconst bDate = this.getDate(b);\r\n\t\tif (aDate < bDate) { return -1; }\r\n\t\tif (aDate > bDate) { return 1; }\r\n\t\tif (granularity === ELuDateGranularity.day) { return 0; }\r\n\r\n\t\treturn 0;\r\n\t}\r\n\tabstract isParsable(text: string, granularity?: ELuDateGranularity): boolean;\r\n\tabstract parse(text: string, granularity?: ELuDateGranularity): D;\r\n\tabstract format(d: D, format: string): string;\r\n\tabstract clone(d: D): D;\r\n\r\n\tabstract getYear(d: D): number;\r\n\tabstract getMonth(d: D): number;\r\n\tabstract getDate(d: D): number;\r\n\tabstract getDay(d: D): number;\r\n\r\n\tabstract add(d: D, count: number, granularity: ELuDateGranularity): D;\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        },
                        {
                            "name": "count",
                            "type": "number"
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity"
                        }
                    ],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 49,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "count",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "compare",
                    "args": [
                        {
                            "name": "a",
                            "type": "D"
                        },
                        {
                            "name": "b",
                            "type": "D"
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "forge",
                    "args": [
                        {
                            "name": "year",
                            "type": "number"
                        },
                        {
                            "name": "month",
                            "type": "number"
                        },
                        {
                            "name": "date",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "year",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "forgeInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 7,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "forgeToday",
                    "args": [],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 6,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "format",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        },
                        {
                            "name": "format",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDate",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDay",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 47,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMonth",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getYear",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isParsable",
                    "args": [
                        {
                            "name": "text",
                            "type": "string"
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValid",
                    "args": [
                        {
                            "name": "d",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parse",
                    "args": [
                        {
                            "name": "text",
                            "type": "string"
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "ELuDateGranularity",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuDateAdapter"
            ]
        },
        {
            "name": "ALuDateInputLabel",
            "id": "class-ALuDateInputLabel-f71774277dda7d5a8799fd784db6a13b",
            "file": "packages/ng/libraries/date/src/lib/input/date-input.translate.ts",
            "type": "class",
            "sourceCode": "import { ILuTranslation } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuDateInputLabel {\r\n\tplaceholderDay: string;\r\n\tplaceholderMonth: string;\r\n\tplaceholderYear: string;\r\n\tformatDay: string;\r\n\tformatMonth: string;\r\n\tformatYear: string;\r\n}\r\nexport abstract class ALuDateInputLabel {\r\n\tplaceholderDay: string;\r\n\tplaceholderMonth: string;\r\n\tplaceholderYear: string;\r\n\tformatDay: string;\r\n\tformatMonth: string;\r\n\tformatYear: string;\r\n}\r\n\r\nexport const luDateInputTranslations = {\r\n\ten: {\r\n\t\tplaceholderDay: 'dd/mm/yyyy',\r\n\t\tplaceholderMonth: 'mm/yyyy',\r\n\t\tplaceholderYear: 'yyyy',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n\t'en-GB': {\r\n\t\tplaceholderDay: 'dd/mm/yyyy',\r\n\t\tplaceholderMonth: 'mm/yyyy',\r\n\t\tplaceholderYear: 'yyyy',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n\t'en-US': {\r\n\t\tplaceholderDay: 'mm/dd/yyyy',\r\n\t\tplaceholderMonth: 'mm/yyyy',\r\n\t\tplaceholderYear: 'yyyy',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n\tfr: {\r\n\t\tplaceholder: 'jj/mm/aaaa',\r\n\t\tplaceholderDay: 'jj/mm/aaaa',\r\n\t\tplaceholderMonth: 'mm/aaaa',\r\n\t\tplaceholderYear: 'aaaa',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n} as ILuTranslation<ILuDateInputLabel>;\r\n",
            "properties": [
                {
                    "name": "formatDay",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "formatMonth",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "formatYear",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "placeholderDay",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "placeholderMonth",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "placeholderYear",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ALuDateSelectInputLabel",
            "id": "class-ALuDateSelectInputLabel-b85fbfd635c92c577c1657def9c19d07",
            "file": "packages/ng/libraries/date/src/lib/select/date-select-input.translate.ts",
            "type": "class",
            "sourceCode": "import { ILuTranslation } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuDateSelectInputLabel {\r\n\tplaceholderDay: string;\r\n\tplaceholderMonth: string;\r\n\tplaceholderYear: string;\r\n\tformatDay: string;\r\n\tformatMonth: string;\r\n\tformatYear: string;\r\n}\r\nexport abstract class ALuDateSelectInputLabel {\r\n\tplaceholderDay: string;\r\n\tplaceholderMonth: string;\r\n\tplaceholderYear: string;\r\n\tformatDay: string;\r\n\tformatMonth: string;\r\n\tformatYear: string;\r\n}\r\n\r\nexport const luDateSelectInputTranslations = {\r\n\ten: {\r\n\t\tplaceholderDay: 'dd/mm/yyyy',\r\n\t\tplaceholderMonth: 'mm/yyyy',\r\n\t\tplaceholderYear: 'yyyy',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n\t'en-US': {\r\n\t\tplaceholderDay: 'mm/dd/yyyy',\r\n\t\tplaceholderMonth: 'mm/yyyy',\r\n\t\tplaceholderYear: 'yyyy',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n\tfr: {\r\n\t\tplaceholder: 'jj/mm/aaaa',\r\n\t\tplaceholderDay: 'jj/mm/aaaa',\r\n\t\tplaceholderMonth: 'mm/aaaa',\r\n\t\tplaceholderYear: 'aaaa',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n} as ILuTranslation<ILuDateSelectInputLabel>;\r\n",
            "properties": [
                {
                    "name": "formatDay",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "formatMonth",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "formatYear",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "placeholderDay",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "placeholderMonth",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "placeholderYear",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ALuDepartmentSelectInputLabel",
            "id": "class-ALuDepartmentSelectInputLabel-caddf4d3f0eb16df516c1a5a47034635",
            "file": "packages/ng/libraries/department/src/lib/select/input/department-select-input.translate.ts",
            "type": "class",
            "sourceCode": "import { ILuTranslation } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuDepartmentSelectInputLabel {\r\n\tdepartments: string;\r\n}\r\nexport abstract class ALuDepartmentSelectInputLabel {\r\n\tdepartments: string;\r\n}\r\n\r\nexport const luDepartmentSelectInputTranslations = {\r\n\ten: {\r\n\t\tdepartments: 'departments',\r\n\t},\r\n\tfr: {\r\n\t\tdepartments: 'départements',\r\n\t},\r\n} as ILuTranslation<ILuDepartmentSelectInputLabel>;\r\n",
            "properties": [
                {
                    "name": "departments",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ALuDepartmentService",
            "id": "class-ALuDepartmentService-b04d24353c6cfc5fd8e6d063275b48a5",
            "file": "packages/ng/libraries/department/src/lib/service/department-service.model.ts",
            "type": "class",
            "sourceCode": "import { ILuTree } from '@lucca-front/ng/core';\r\nimport { ILuDepartment } from '../department.model';\r\nimport { Observable } from 'rxjs';\r\nimport { ILuApiService, ALuApiService } from '@lucca-front/ng/api';\r\n\r\nexport interface ILuDepartmentService<D extends ILuDepartment = ILuDepartment> extends ILuApiService<D> {\r\n\tgetTrees(): Observable<ILuTree<D>[]>;\r\n}\r\nexport abstract class ALuDepartmentService<D extends ILuDepartment = ILuDepartment> extends ALuApiService<D>  implements ILuDepartmentService<D> {\r\n\tabstract getTrees(): Observable<ILuTree<D>[]>;\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTrees",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ILuTree[]>",
                    "typeParameters": [],
                    "line": 10,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "searchAll",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "searchPaged",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "ALuApiService",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuDepartmentService"
            ]
        },
        {
            "name": "ALuDropdownItem",
            "id": "class-ALuDropdownItem-38f6cd3308c53a474c766697dbf28b5a",
            "file": "packages/ng/libraries/dropdown/src/lib/item/dropdown-item.model.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nexport interface ILuDropdownItem {\r\n\tonSelect: Observable<boolean>;\r\n\tfocus(): void;\r\n}\r\nexport abstract class ALuDropdownItem implements ILuDropdownItem {\r\n\tabstract onSelect: Observable<boolean>;\r\n\tabstract focus(): void;\r\n}\r\n",
            "properties": [
                {
                    "name": "onSelect",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        117
                    ]
                }
            ],
            "methods": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        117
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuDropdownItem"
            ]
        },
        {
            "name": "ALuEstablishmentSelectInputLabel",
            "id": "class-ALuEstablishmentSelectInputLabel-e66108052e3e4fbd846a61e82fcf5aad",
            "file": "packages/ng/libraries/establishment/src/lib/select/input/establishment-select-input.translate.ts",
            "type": "class",
            "sourceCode": "import { ILuTranslation } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuEstablishmentSelectInputLabel {\r\n\testablishments: string;\r\n}\r\nexport abstract class ALuEstablishmentSelectInputLabel {\r\n\testablishments: string;\r\n}\r\n\r\nexport const luEstablishmentSelectInputTranslations = {\r\n\ten: {\r\n\t\testablishments: 'establishments',\r\n\t},\r\n\tfr: {\r\n\t\testablishments: 'établissements',\r\n\t},\r\n} as ILuTranslation<ILuEstablishmentSelectInputLabel>;\r\n",
            "properties": [
                {
                    "name": "establishments",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ALuEstablishmentService",
            "id": "class-ALuEstablishmentService-c71cdc137fc4d703e10c5b70119a36f2",
            "file": "packages/ng/libraries/establishment/src/lib/service/establishment-service.model.ts",
            "type": "class",
            "sourceCode": "import { ILuApiService, ALuApiService } from '@lucca-front/ng/api';\r\nimport { ILuEstablishment } from '../establishment.model';\r\n\r\nexport interface ILuEstablishmentService<E extends ILuEstablishment = ILuEstablishment>\r\n\textends ILuApiService<E> { }\r\n\r\nexport abstract class ALuEstablishmentService<E extends ILuEstablishment = ILuEstablishment>\r\n\textends ALuApiService<E>\r\n\timplements ILuEstablishmentService<E> { }",
            "properties": [],
            "methods": [
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "searchAll",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "searchPaged",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "ALuApiService",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuEstablishmentService"
            ]
        },
        {
            "name": "ALuInput",
            "id": "class-ALuInput-1aefde7130f0d9ee8ef49e0a14e44ed5",
            "file": "packages/ng/libraries/input/src/lib/input.model.ts",
            "type": "class",
            "sourceCode": "import { ControlValueAccessor } from '@angular/forms';\r\nimport { ChangeDetectorRef, Renderer2, ElementRef } from '@angular/core';\r\n\r\nexport declare interface ILuInput<T = any> extends ControlValueAccessor {}\r\n\r\nexport abstract class ALuInput<T = any> implements ILuInput<T> {\r\n\tprotected _placeholder: string;\r\n\tget placeholder() { return this._placeholder; }\r\n\tprotected _value: T;\r\n\tconstructor(\r\n\t\tprotected _changeDetectorRef: ChangeDetectorRef,\r\n\t\tprotected _elementRef: ElementRef,\r\n\t\tprotected _renderer: Renderer2,\r\n\t) {}\r\n\tsetValue(value) {\r\n\t\tthis.value = value;\r\n\t\tthis._cvaOnChange(value);\r\n\t\tthis._onTouched();\r\n\t}\r\n\tget value(): T {\r\n\t\treturn this._value;\r\n\t}\r\n\tset value(value: T) {\r\n\t\tthis._value = value;\r\n\t\tthis.render();\r\n\t\tthis.applyClasses();\r\n\t\tthis._changeDetectorRef.markForCheck();\r\n\t}\r\n\t// From ControlValueAccessor interface\r\n\twriteValue(value: T) {\r\n\t\tthis.value = value;\r\n\t}\r\n\t// From ControlValueAccessor interface\r\n\tprotected _cvaOnChange = (v: T) => {};\r\n\tregisterOnChange(fn: any) {\r\n\t\tthis._cvaOnChange = fn;\r\n\t}\r\n\t// From ControlValueAccessor interface\r\n\tprotected _onTouched = () => {};\r\n\tregisterOnTouched(fn: any) {\r\n\t\tthis._onTouched = fn;\r\n\t}\r\n\tprotected isEmpty() {\r\n\t\treturn this.value === null || this.value === undefined;\r\n\t}\r\n\tprotected applyClasses() {\r\n\t\tif (this.isEmpty()) {\r\n\t\t\tthis._renderer.removeClass(this._elementRef.nativeElement, 'is-filled');\r\n\t\t} else {\r\n\t\t\tthis._renderer.addClass(this._elementRef.nativeElement, 'is-filled');\r\n\t\t}\r\n\t}\r\n\r\n\tprotected abstract render(): void;\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_cvaOnChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_value",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "methods": [
                {
                    "name": "applyClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "isEmpty",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        113,
                        117
                    ]
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 8
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 23,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "T",
                        "line": 20
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuInput"
            ]
        },
        {
            "name": "ALuInputDisplayer",
            "id": "class-ALuInputDisplayer-6e39909d985e7eaab753249c43a2686e",
            "file": "packages/ng/libraries/input/src/lib/displayer/input-displayer.model.ts",
            "type": "class",
            "sourceCode": "import { ViewRef } from '@angular/core';\r\n\r\nexport interface ILuInputDisplayer<T = any> {\r\n\tmultiple: boolean;\r\n\tgetViewRef(value: T | T[]): ViewRef;\r\n}\r\nexport abstract class ALuInputDisplayer<T = any> implements ILuInputDisplayer<T> {\r\n\tmultiple = false;\r\n\tabstract getViewRef(value: T | T[]): ViewRef;\r\n}\r\n",
            "properties": [
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "getViewRef",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "ViewRef",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuInputDisplayer"
            ]
        },
        {
            "name": "ALuIntl",
            "id": "class-ALuIntl-f41d9e96a8c829cd5b39ede52c511880",
            "file": "packages/ng/libraries/core/src/lib/translate/intl.model.ts",
            "type": "class",
            "sourceCode": "import { ILuTranslation } from './translation.model';\r\n\r\nexport type ILuIntl<T> = { [P in keyof T]: string };\r\n\r\nexport abstract class ALuIntl<T> {\r\n\tconstructor(translations: ILuTranslation<T>, locale: string) {\r\n\t\tconst fallback = translations['en'] || {};\r\n\t\tconst current = translations[locale] || translations[locale.substring(0, 2)] || {};\r\n\r\n\t\tconst all = { ...fallback, ...current };\r\n\t\tObject.keys(all).forEach(k => {\r\n\t\t\tObject.defineProperty(this, k, {\r\n\t\t\t\tget: () => all[k],\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translations",
                        "type": "ILuTranslation<T>"
                    },
                    {
                        "name": "locale",
                        "type": "string"
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "translations",
                        "type": "ILuTranslation<T>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locale",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ALuModalLabel",
            "id": "class-ALuModalLabel-1ab18b8781734db9543447b5f80fa54f",
            "file": "packages/ng/libraries/modal/src/lib/modal.translate.ts",
            "type": "class",
            "sourceCode": "import { ILuTranslation } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuModalLabel {\r\n\tsubmit: string;\r\n\tcancel: string;\r\n}\r\nexport abstract class ALuModalLabel {\r\n\tsubmit: string;\r\n\tcancel: string;\r\n}\r\n\r\nexport const luModalTranslations = {\r\n\ten: {\r\n\t\tsubmit: 'Ok',\r\n\t\tcancel: 'Cancel',\r\n\t},\r\n\tfr: {\r\n\t\tsubmit: 'Ok',\r\n\t\tcancel: 'Annuler',\r\n\t},\r\n} as ILuTranslation<ILuModalLabel>;\r\n",
            "properties": [
                {
                    "name": "cancel",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "submit",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ALuModalRef",
            "id": "class-ALuModalRef-8372ee5b63f57257515c896873edd48b",
            "file": "packages/ng/libraries/modal/src/lib/modal-ref.model.ts",
            "type": "class",
            "sourceCode": "import { ILuPopupRef, ALuPopupRef } from '@lucca-front/ng/popup';\r\nimport { ILuModalContent } from './modal.model';\r\n\r\nexport interface ILuModalRef<T extends ILuModalContent = ILuModalContent, D = any, R = any> extends ILuPopupRef<T, D, R> {}\r\nexport abstract class ALuModalRef<T extends ILuModalContent = ILuModalContent, D = any, R = any> extends ALuPopupRef<T, D, R> implements ILuModalRef<T, D, R> {}\r\n",
            "properties": [
                {
                    "name": "_componentRef",
                    "type": "ComponentRef<T>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_overlayRef",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_subs",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "onClose",
                    "defaultValue": "new Subject<R>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "onDismiss",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "onOpen",
                    "defaultValue": "new Subject<D>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                }
            ],
            "methods": [
                {
                    "name": "_cleanSubscription",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_closePopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_completeSubjects",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_createOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "description": "<p>This method creates the overlay from the provided popover&#39;s template and saves its\nOverlayRef so that it can be attached to the DOM when openPopover is called.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_destroyOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_getOverlayConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "OverlayConfig",
                    "typeParameters": [],
                    "line": 73,
                    "description": "<p>This method builds the configuration object needed to create the overlay, the OverlayConfig.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2340,
                                "end": 2347,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>OverlayConfig</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_openPopup",
                    "args": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_subToCloseEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "result",
                            "type": "R",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "R",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "dismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "ALuPopupRef",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuModalRef"
            ]
        },
        {
            "name": "ALuOnCloseSubscriber",
            "id": "class-ALuOnCloseSubscriber-3db89012092932db38f5853b7617b900",
            "file": "packages/ng/libraries/core/src/lib/event/on-close.subscriber.ts",
            "type": "class",
            "sourceCode": "export interface ILuOnCloseSubscriber {\r\n\tonClose(): void;\r\n}\r\nexport abstract class ALuOnCloseSubscriber implements ILuOnCloseSubscriber {\r\n\tabstract onClose(): void;\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        117
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuOnCloseSubscriber"
            ]
        },
        {
            "name": "ALuOnOpenSubscriber",
            "id": "class-ALuOnOpenSubscriber-3035776533a0e11caa7d667378d57f7d",
            "file": "packages/ng/libraries/core/src/lib/event/on-open.subscriber.ts",
            "type": "class",
            "sourceCode": "export interface ILuOnOpenSubscriber {\r\n\tonOpen(): void;\r\n}\r\nexport abstract class ALuOnOpenSubscriber implements ILuOnOpenSubscriber {\r\n\tabstract onOpen(): void;\r\n}\r\n\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        117
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuOnOpenSubscriber"
            ]
        },
        {
            "name": "ALuOnScrollBottomSubscriber",
            "id": "class-ALuOnScrollBottomSubscriber-03853129f0baef83a91c4e50de952b0e",
            "file": "packages/ng/libraries/core/src/lib/event/on-scroll-bottom.subscriber.ts",
            "type": "class",
            "sourceCode": "export interface ILuOnScrollBottomSubscriber {\r\n\tonScrollBottom(): void;\r\n}\r\nexport abstract class ALuOnScrollBottomSubscriber implements ILuOnScrollBottomSubscriber {\r\n\tabstract onScrollBottom(): void;\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "onScrollBottom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        117
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuOnScrollBottomSubscriber"
            ]
        },
        {
            "name": "ALuOptionItem",
            "id": "class-ALuOptionItem-06436e59abab567bd6f6baa78f471bc0",
            "file": "packages/ng/libraries/option/src/lib/item/option-item.model.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { ElementRef } from '@angular/core';\r\n\r\nexport interface ILuOptionItem<T = any> {\r\n\tvalue: T;\r\n\tonSelect: Observable<this>;\r\n\telement: ElementRef;\r\n\tselected: boolean;\r\n\thighlighted: boolean;\r\n}\r\nexport abstract class ALuOptionItem<T = any> implements ILuOptionItem<T> {\r\n\tabstract value: T;\r\n\tabstract onSelect: Observable<this>;\r\n\tabstract element: ElementRef;\r\n\tabstract selected: boolean;\r\n\tabstract highlighted: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "element",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "highlighted",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "onSelect",
                    "type": "Observable<>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "selected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "value",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        117
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuOptionItem"
            ]
        },
        {
            "name": "ALuOptionOperator",
            "id": "class-ALuOptionOperator-acd5adc99faff4a9772e2226fdf1a758",
            "file": "packages/ng/libraries/option/src/lib/operator/option-operator.model.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nexport interface ILuOptionOperator<T = any> {\r\n\tinOptions$?: Observable<T[]>;\r\n\toutOptions$?: Observable<T[]>;\r\n}\r\nexport abstract class ALuOptionOperator<T = any> implements ILuOptionOperator<T> {\r\n\tabstract inOptions$?: Observable<T[]>;\r\n\tabstract outOptions$?: Observable<T[]>;\r\n}\r\n",
            "properties": [
                {
                    "name": "inOptions$",
                    "type": "Observable<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "outOptions$",
                    "type": "Observable<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        117
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuOptionOperator"
            ]
        },
        {
            "name": "ALuOptionPicker",
            "id": "class-ALuOptionPicker-c316b7f189aa79e19b8c38bcdd94e2c7",
            "file": "packages/ng/libraries/option/src/lib/picker/option-picker.model.ts",
            "type": "class",
            "sourceCode": "import { ILuPickerPanel, ALuPickerPanel } from '@lucca-front/ng/picker';\r\nimport { Subscription, Observable, merge } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { ILuOptionItem } from '../item/index';\r\nimport { ESCAPE, TAB } from '@angular/cdk/keycodes';\r\n\r\nexport interface ILuOptionPickerPanel<T = any, O extends ILuOptionItem<T> = ILuOptionItem<T>> extends ILuPickerPanel<T> {}\r\n\r\nexport type LuOptionComparer<T> = (option1: T, option2: T) => boolean;\r\n\r\nexport abstract class ALuOptionPicker<T = any, O extends ILuOptionItem<T> = ILuOptionItem<T>> extends ALuPickerPanel<T> implements ILuOptionPickerPanel<T, O> {\r\n\tprotected _subs = new Subscription();\r\n\tonSelectValue: Observable<T | T[]>;\r\n\tprotected _value: T | T[];\r\n\tsetValue(value: T | T[]) {\r\n\t\tthis._value = value;\r\n\t\tthis._applySelected();\r\n\t}\r\n\tprivate __options$: Observable<O[]>;\r\n\tprotected get _options$() { return this.__options$; }\r\n\tprotected set _options$(options$: Observable<O[]>) {\r\n\t\tthis.__options$ = options$;\r\n\t\t// reapply selected when the options change\r\n\t\tthis._subs.add(\r\n\t\t\toptions$\r\n\t\t\t.subscribe(o => {\r\n\t\t\t\tthis._applySelected();\r\n\t\t\t\tthis._applyHighlight();\r\n\t\t\t})\r\n\t\t);\r\n\t\t// subscribe to any option.onSelect\r\n\t\tconst singleFlow$ = options$.pipe(switchMap(\r\n\t\t\titems => merge(...items.map(i => i.onSelect))\r\n\t\t));\r\n\t\tthis._subs.add(\r\n\t\t\tsingleFlow$.subscribe(option => this._toggle(option))\r\n\t\t);\r\n\t}\r\n\tprotected optionComparer: LuOptionComparer<T> =\r\n\t\t(option1: T, option2: T) => JSON.stringify(option1) === JSON.stringify(option2)\r\n\tprotected _toggle(option: O) {\r\n\t\tconst value = option.value;\r\n\t\tif (!this.multiple) {\r\n\t\t\tthis._select(value);\r\n\t\t} else {\r\n\t\t\tconst values = <T[]>this._value || [];\r\n\t\t\tlet newValues;\r\n\t\t\tif (values.some(v => this.optionComparer(v, value))) {\r\n\t\t\t\t// value was present, we remove it\r\n\t\t\t\tnewValues = values.filter(v => !this.optionComparer(v, value));\r\n\t\t\t} else {\r\n\t\t\t\t// value was absent, we add it\r\n\t\t\t\tnewValues = [...values, value];\r\n\t\t\t}\r\n\t\t\tthis._select(newValues);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _select(val: T | T[]) {\r\n\t\tthis._emitSelectValue(val);\r\n\t\tif (!this.multiple) {\r\n\t\t\tthis._emitCloseEvent();\r\n\t\t}\r\n\t}\r\n\tprotected abstract _applySelected();\r\n\tprotected abstract _applyHighlight();\r\n\tprotected destroy() {\r\n\t\tthis._subs.unsubscribe();\r\n\t}\r\n\t_handleKeydown(event: KeyboardEvent) {\r\n\t\tswitch (event.keyCode) {\r\n\t\t\tcase ESCAPE:\r\n\t\t\t\tthis._emitCloseEvent();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tbreak;\r\n\t\t\tcase TAB:\r\n\t\t\t\tthis._emitCloseEvent();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected abstract _emitSelectValue(value: T | T[]);\r\n}\r\n",
            "properties": [
                {
                    "name": "__options$",
                    "type": "Observable<O[]>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_subs",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_value",
                    "type": "T | T[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "onSelectValue",
                    "type": "Observable<T | []>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "optionComparer",
                    "defaultValue": "() => {...}",
                    "type": "LuOptionComparer<T>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "multiple",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "onSelectValue",
                    "type": "Observable<T | []>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_closeOnClick",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_contentClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_isOpen",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_keydownEventsSub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_overlayPaneClass",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "<p>Classes to be passed into the popover&#39;s overlay </p>\n",
                    "line": 96,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_panelClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_positionClassesMap",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_scrollStrategy",
                    "defaultValue": "'reposition'",
                    "type": "LuPopoverScrollStrategy",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_templateRef",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_trapFocus",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "close",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "hovered",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "open",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "panelId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "triggerId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_closeOnClick",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_contentClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_isOpen",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_keydownEventsSub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_overlayPaneClass",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "<p>Classes to be passed into the popover&#39;s overlay </p>\n",
                    "line": 96,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_panelClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_positionClassesMap",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_scrollStrategy",
                    "defaultValue": "'reposition'",
                    "type": "LuPopoverScrollStrategy",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_templateRef",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_trapFocus",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "close",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "hovered",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "open",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "panelId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "triggerId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                }
            ],
            "methods": [
                {
                    "name": "_applyHighlight",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "modifierKind": [
                        113,
                        117
                    ]
                },
                {
                    "name": "_applySelected",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "modifierKind": [
                        113,
                        117
                    ]
                },
                {
                    "name": "_emitSelectValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_handleKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_select",
                    "args": [
                        {
                            "name": "val",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_toggle",
                    "args": [
                        {
                            "name": "option",
                            "type": "O"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "O",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_emitCloseEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_emitHoveredEvent",
                    "args": [
                        {
                            "name": "hovered",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "hovered",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_emitOpenEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_handleKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "onMouseDown",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "description": "<p>does nothing but must be overridable </p>\n",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "description": "<p>Enables close of popover when mouse leaving popover element </p>\n",
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "onMouseOver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "description": "<p>TODO: Refactor when @angular/cdk includes feature I mentioned on github see link below.\n<a href=\"https://github.com/angular/material2/pull/5493#issuecomment-313085323\">https://github.com/angular/material2/pull/5493#issuecomment-313085323</a></p>\n",
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "setPositionClasses",
                    "args": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos"
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_emitCloseEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_emitHoveredEvent",
                    "args": [
                        {
                            "name": "hovered",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "hovered",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_emitOpenEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_handleKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onMouseDown",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "description": "<p>does nothing but must be overridable </p>\n",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "description": "<p>Enables close of popover when mouse leaving popover element </p>\n",
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onMouseOver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "description": "<p>TODO: Refactor when @angular/cdk includes feature I mentioned on github see link below.\n<a href=\"https://github.com/angular/material2/pull/5493#issuecomment-313085323\">https://github.com/angular/material2/pull/5493#issuecomment-313085323</a></p>\n",
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "setPositionClasses",
                    "args": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos"
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "ALuPickerPanel",
            "accessors": {
                "_options$": {
                    "name": "_options$",
                    "setSignature": {
                        "name": "_options$",
                        "type": "void",
                        "args": [
                            {
                                "name": "options$",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 21,
                        "jsdoctags": [
                            {
                                "name": "options$",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "_options$",
                        "type": "",
                        "returnType": "",
                        "line": 20
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuOptionPickerPanel"
            ]
        },
        {
            "name": "ALuOptionPlaceholderLabel",
            "id": "class-ALuOptionPlaceholderLabel-4faa7c54b87b8435fff346ec8f7b95b6",
            "file": "packages/ng/libraries/option/src/lib/placeholder/option-placeholder.translate.ts",
            "type": "class",
            "sourceCode": "import { ILuTranslation } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuOptionPlaceholderLabel {\r\n\tplaceholderDescription: string;\r\n\tplaceholderAction: string;\r\n}\r\nexport abstract class ALuOptionPlaceholderLabel implements ILuOptionPlaceholderLabel {\r\n\tplaceholderDescription: string;\r\n\tplaceholderAction: string;\r\n}\r\n\r\nexport const luOptionPlaceholderTranslations = {\r\n\ten: {\r\n\t\tplaceholderDescription: 'No results match your search criteria.',\r\n\t\tplaceholderAction: 'Clear search',\r\n\t},\r\n\tfr: {\r\n\t\tplaceholderDescription: 'Aucun résultat pour votre recherche',\r\n\t\tplaceholderAction: 'Vider la recherche',\r\n\t},\r\n} as ILuTranslation<ILuOptionPlaceholderLabel>;\r\n",
            "properties": [
                {
                    "name": "placeholderAction",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "placeholderDescription",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuOptionPlaceholderLabel"
            ]
        },
        {
            "name": "ALuOptionSelectAllLabel",
            "id": "class-ALuOptionSelectAllLabel-ba2acbadf618d33996d65907e38db1fa",
            "file": "packages/ng/libraries/option/src/lib/selector/all/select-all.translate.ts",
            "type": "class",
            "sourceCode": "import { ILuTranslation } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuOptionSelectAllLabel {\r\n\tselect: string;\r\n\tdeselect: string;\r\n}\r\nexport abstract class ALuOptionSelectAllLabel {\r\n\tselect: string;\r\n\tdeselect: string;\r\n}\r\n\r\nexport const luOptionSelectAllTranslations = {\r\n\ten: {\r\n\t\tselect: 'Select all',\r\n\t\tdeselect: 'Deselect all',\r\n\t},\r\n\tfr: {\r\n\t\tselect: 'Tout sélectionner',\r\n\t\tdeselect: 'Tout Déselectionner'\r\n\t},\r\n\tde: {\r\n\t\tselect: 'Alle auswählen',\r\n\t\tdeselect: 'Alle abwählen'\r\n\t},\r\n\tpt: {\r\n\t\tselect: 'Selecionar tudo',\r\n\t\tdeselect: 'Desselecionar tudo'\r\n\t},\r\n\tes: {\r\n\t\tselect: 'Seleccionar todo',\r\n\t\tdeselect: 'Desmarcar todo'\r\n\t},\r\n} as ILuTranslation<ILuOptionSelectAllLabel>;\r\n",
            "properties": [
                {
                    "name": "deselect",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "select",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ALuOptionSelector",
            "id": "class-ALuOptionSelector-e769808cc58587f885dbe1971aeb0895",
            "file": "packages/ng/libraries/option/src/lib/selector/option-selector.model.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nexport interface ILuOptionSelector<T = any> {\r\n\tmultiple: boolean;\r\n\tonSelectValue: Observable<T | T[]>;\r\n\tsetValue(value: T | T[]): void;\r\n}\r\nexport abstract class ALuOptionSelector<T = any> implements ILuOptionSelector<T> {\r\n\tmultiple: boolean;\r\n\tabstract onSelectValue: Observable<T | T[]>;\r\n\tabstract setValue(value: T | T[]): void;\r\n}\r\n",
            "properties": [
                {
                    "name": "multiple",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "onSelectValue",
                    "type": "Observable<T | []>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        117
                    ]
                }
            ],
            "methods": [
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuOptionSelector"
            ]
        },
        {
            "name": "ALuPickerPanel",
            "id": "class-ALuPickerPanel-0c49ea8602ba0198b5e6697de64bffa6",
            "file": "packages/ng/libraries/picker/src/lib/input-picker.model.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { ILuPopoverPanel, ALuPopoverPanel, ILuPopoverTrigger } from '@lucca-front/ng/popover';\r\nimport { ILuInput } from '@lucca-front/ng/input';\r\n\r\nexport declare interface ILuPickerPanel<T = any> extends ILuPopoverPanel {\r\n\t/**\r\n\t * self explainatory\r\n\t */\r\n\tmultiple: boolean;\r\n\t/**\r\n\t * emits when a value was selected on the picker\r\n\t */\r\n\tonSelectValue: Observable<T | T[]>;\r\n\t/**\r\n\t * called to tell the picker what's the current value\r\n\t * @param value\r\n\t */\r\n\tsetValue(value: T | T[]): void;\r\n}\r\nexport abstract class ALuPickerPanel<T = any> extends ALuPopoverPanel implements ILuPickerPanel<T> {\r\n\tmultiple: boolean;\r\n\tonSelectValue: Observable<T | T[]>;\r\n\tabstract setValue(value: T | T[]): void;\r\n}\r\n\r\nexport declare interface ILuInputWithPicker<TValue = any>\r\nextends ILuInput<TValue>, ILuPopoverTrigger<ILuPickerPanel<TValue>> {}\r\n",
            "properties": [
                {
                    "name": "multiple",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "onSelectValue",
                    "type": "Observable<T | []>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "_closeOnClick",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_contentClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_isOpen",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_keydownEventsSub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_overlayPaneClass",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "<p>Classes to be passed into the popover&#39;s overlay </p>\n",
                    "line": 96,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_panelClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_positionClassesMap",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_scrollStrategy",
                    "defaultValue": "'reposition'",
                    "type": "LuPopoverScrollStrategy",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_templateRef",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_trapFocus",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "close",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "hovered",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "open",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "panelId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "triggerId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                }
            ],
            "methods": [
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_emitCloseEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_emitHoveredEvent",
                    "args": [
                        {
                            "name": "hovered",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "hovered",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_emitOpenEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_handleKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onMouseDown",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "description": "<p>does nothing but must be overridable </p>\n",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "description": "<p>Enables close of popover when mouse leaving popover element </p>\n",
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onMouseOver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "description": "<p>TODO: Refactor when @angular/cdk includes feature I mentioned on github see link below.\n<a href=\"https://github.com/angular/material2/pull/5493#issuecomment-313085323\">https://github.com/angular/material2/pull/5493#issuecomment-313085323</a></p>\n",
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "setPositionClasses",
                    "args": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos"
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "ALuPopoverPanel",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuPickerPanel"
            ]
        },
        {
            "name": "ALuPopoverPanel",
            "id": "class-ALuPopoverPanel-2fe0734a6531a2b48be8e682c62d502c",
            "file": "packages/ng/libraries/popover/src/lib/panel/popover-panel.model.ts",
            "type": "class",
            "sourceCode": "import { TemplateRef } from '@angular/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { ESCAPE } from '@angular/cdk/keycodes';\r\nimport { HorizontalConnectionPos, VerticalConnectionPos } from '@angular/cdk/overlay';\r\n\r\nexport type LuPopoverScrollStrategy = 'reposition' | 'block' | 'close';\r\n\r\nexport declare interface ILuPopoverPanel {\r\n\tscrollStrategy: LuPopoverScrollStrategy;\r\n\tcloseOnClick: boolean;\r\n\tpanelId?: string;\r\n\ttriggerId?: string;\r\n\ttemplateRef?: TemplateRef<any>;\r\n\r\n\t/** will emit when the panel wants to close */\r\n\tclose: Observable<void>;\r\n\t/** will emit when the panel wants to open */\r\n\topen: Observable<void>;\r\n\t/** will emit when the panel is hovered */\r\n\thovered: Observable<boolean>;\r\n\t/** classes to apply to the panel, uses ' ' for separating values */\r\n\tpanelClasses: string;\r\n\t/** class to apply to the panel content, uses ' ' for separating values */\r\n\tcontentClasses: string;\r\n\r\n\tkeydownEvents$: Observable<KeyboardEvent>;\r\n\r\n\tsetPositionClasses: (posX: HorizontalConnectionPos, posY: VerticalConnectionPos) => void;\r\n\r\n\t/** method called by the trigger when it opens the popover */\r\n\tonOpen(): void;\r\n\t/** method called by the trigger when it closes the popover */\r\n\tonClose(): void;\r\n}\r\n/**\r\n * abstract class for basic implementation of a popover panel\r\n */\r\nexport abstract class ALuPopoverPanel implements ILuPopoverPanel {\r\n\tpanelId: string;\r\n\ttriggerId: string;\r\n\r\n\tprotected _isOpen: boolean;\r\n\tget isOpen() { return this._isOpen; }\r\n\r\n\r\n\tprotected _closeOnClick = false;\r\n\tget closeOnClick() { return this._closeOnClick; }\r\n\tset closeOnClick(coc: boolean) { this._closeOnClick = coc; }\r\n\r\n\tprotected _trapFocus = false;\r\n\tget trapFocus() { return this._trapFocus; }\r\n\tset trapFocus(tf: boolean) { this._trapFocus = tf; }\r\n\r\n\tprotected _scrollStrategy: LuPopoverScrollStrategy = 'reposition';\r\n\tget scrollStrategy() { return this._scrollStrategy; }\r\n\tset scrollStrategy(ss: LuPopoverScrollStrategy) { this._scrollStrategy = ss; }\r\n\r\n\tprotected _templateRef: TemplateRef<any>;\r\n\tget templateRef() { return this._templateRef; }\r\n\tset templateRef(tr: TemplateRef<any>) { this._templateRef = tr; }\r\n\r\n\tprotected _positionClassesMap: any = {};\r\n\tprotected _panelClasses = '';\r\n\tget panelClasses() { return this._panelClasses; }\r\n\tset panelClasses(cl: string) {\r\n\t\tthis._panelClasses = cl;\r\n\t}\r\n\tget panelClassesMap() {\r\n\t\tconst map = this._panelClasses\r\n\t\t\t.split(' ')\r\n\t\t\t.filter(c => !!c)\r\n\t\t\t.reduce((obj: any, className: string) => {\r\n\t\t\t\tobj[className] = true;\r\n\t\t\t\treturn obj;\r\n\t\t\t}, {});\r\n\t\t// also add positiopn classes\r\n\t\treturn { ...map, ...this._positionClassesMap };\r\n\t}\r\n\r\n\tprotected _contentClasses = '';\r\n\tget contentClasses() { return this._contentClasses; }\r\n\tset contentClasses(cl: string) {\r\n\t\tthis._contentClasses = cl;\r\n\t}\r\n\tget contentClassesMap() {\r\n\t\treturn this._contentClasses\r\n\t\t\t.split(' ')\r\n\t\t\t.reduce((obj: any, className: string) => {\r\n\t\t\t\tobj[className] = true;\r\n\t\t\t\treturn obj;\r\n\t\t\t}, {});\r\n\t}\r\n\r\n\r\n\t/** Classes to be passed into the popover's overlay */\r\n\tprotected _overlayPaneClass: string | string[];\r\n\tpublic get overlayPaneClass() { return this._overlayPaneClass; }\r\n\tpublic set overlayPaneClass(opc) { this._overlayPaneClass = opc; }\r\n\r\n\t// /** Config object to be passed into the popover's content ngStyle */\r\n\r\n\tprotected _keydownEventsSub: Subscription;\r\n\tset keydownEvents$(evt$: Observable<KeyboardEvent>) {\r\n\t\tif (!this._keydownEventsSub) {\r\n\t\t\tthis._keydownEventsSub = evt$.subscribe(e => this._handleKeydown(e));\r\n\t\t}\r\n\t}\r\n\r\n\tclose: Observable<void>;\r\n\topen: Observable<void>;\r\n\thovered: Observable<boolean>;\r\n\tabstract _emitCloseEvent(): void;\r\n\tabstract _emitOpenEvent(): void;\r\n\tabstract _emitHoveredEvent(hovered: boolean): void;\r\n\r\n\tsetPositionClasses(posX: HorizontalConnectionPos, posY: VerticalConnectionPos): void {\r\n\t\tthis._positionClassesMap['is-before'] = posX === 'end';\r\n\t\tthis._positionClassesMap['is-after'] = posX === 'start';\r\n\t\tthis._positionClassesMap['is-above'] = posY === 'bottom';\r\n\t\tthis._positionClassesMap['is-below'] = posY === 'top';\r\n\t}\r\n\r\n\tonClick() {\r\n\t\tif (this.closeOnClick) {\r\n\t\t\tthis._emitCloseEvent();\r\n\t\t}\r\n\t}\r\n\r\n\tonOpen() {\r\n\t\tthis._isOpen = true;\r\n\t}\r\n\tonClose() {\r\n\t\tthis._isOpen = false;\r\n\t}\r\n\t/**\r\n\t * TODO: Refactor when @angular/cdk includes feature I mentioned on github see link below.\r\n\t * https://github.com/angular/material2/pull/5493#issuecomment-313085323\r\n\t */\r\n\t/** Disables close of popover when leaving trigger element and mouse over the popover */\r\n\tonMouseOver() {\r\n\t\tthis._emitHoveredEvent(true);\r\n\t}\r\n\t/** Enables close of popover when mouse leaving popover element */\r\n\tonMouseLeave() {\r\n\t\tthis._emitHoveredEvent(false);\r\n\t}\r\n\t/** does nothing but must be overridable */\r\n\tonMouseDown($event) {}\r\n\r\n\t_handleKeydown(event: KeyboardEvent) {\r\n\t\tswitch (event.keyCode) {\r\n\t\t\tcase ESCAPE:\r\n\t\t\t\tthis._emitCloseEvent();\r\n\t\t\t\treturn;\r\n\t\t}\r\n\t}\r\n}\r\n",
            "properties": [
                {
                    "name": "_closeOnClick",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_contentClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_isOpen",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_keydownEventsSub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_overlayPaneClass",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "<p>Classes to be passed into the popover&#39;s overlay </p>\n",
                    "line": 96,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_panelClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_positionClassesMap",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_scrollStrategy",
                    "defaultValue": "'reposition'",
                    "type": "LuPopoverScrollStrategy",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_templateRef",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_trapFocus",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "close",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "hovered",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "open",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "panelId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "triggerId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "description": "<p>abstract class for basic implementation of a popover panel</p>\n",
            "rawdescription": "abstract class for basic implementation of a popover panel",
            "methods": [
                {
                    "name": "_emitCloseEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "_emitHoveredEvent",
                    "args": [
                        {
                            "name": "hovered",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "hovered",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_emitOpenEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "_handleKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132
                },
                {
                    "name": "onMouseDown",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "description": "<p>does nothing but must be overridable </p>\n",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "description": "<p>Enables close of popover when mouse leaving popover element </p>\n"
                },
                {
                    "name": "onMouseOver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "description": "<p>TODO: Refactor when @angular/cdk includes feature I mentioned on github see link below.\n<a href=\"https://github.com/angular/material2/pull/5493#issuecomment-313085323\">https://github.com/angular/material2/pull/5493#issuecomment-313085323</a></p>\n"
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129
                },
                {
                    "name": "setPositionClasses",
                    "args": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos"
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "isOpen": {
                    "name": "isOpen",
                    "getSignature": {
                        "name": "isOpen",
                        "type": "",
                        "returnType": "",
                        "line": 43
                    }
                },
                "closeOnClick": {
                    "name": "closeOnClick",
                    "setSignature": {
                        "name": "closeOnClick",
                        "type": "void",
                        "args": [
                            {
                                "name": "coc",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 48,
                        "jsdoctags": [
                            {
                                "name": "coc",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "closeOnClick",
                        "type": "",
                        "returnType": "",
                        "line": 47
                    }
                },
                "trapFocus": {
                    "name": "trapFocus",
                    "setSignature": {
                        "name": "trapFocus",
                        "type": "void",
                        "args": [
                            {
                                "name": "tf",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 52,
                        "jsdoctags": [
                            {
                                "name": "tf",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "trapFocus",
                        "type": "",
                        "returnType": "",
                        "line": 51
                    }
                },
                "scrollStrategy": {
                    "name": "scrollStrategy",
                    "setSignature": {
                        "name": "scrollStrategy",
                        "type": "void",
                        "args": [
                            {
                                "name": "ss",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 56,
                        "jsdoctags": [
                            {
                                "name": "ss",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "scrollStrategy",
                        "type": "",
                        "returnType": "",
                        "line": 55
                    }
                },
                "templateRef": {
                    "name": "templateRef",
                    "setSignature": {
                        "name": "templateRef",
                        "type": "void",
                        "args": [
                            {
                                "name": "tr",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 60,
                        "jsdoctags": [
                            {
                                "name": "tr",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "templateRef",
                        "type": "",
                        "returnType": "",
                        "line": 59
                    }
                },
                "panelClasses": {
                    "name": "panelClasses",
                    "setSignature": {
                        "name": "panelClasses",
                        "type": "void",
                        "args": [
                            {
                                "name": "cl",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 65,
                        "jsdoctags": [
                            {
                                "name": "cl",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "panelClasses",
                        "type": "",
                        "returnType": "",
                        "line": 64
                    }
                },
                "panelClassesMap": {
                    "name": "panelClassesMap",
                    "getSignature": {
                        "name": "panelClassesMap",
                        "type": "",
                        "returnType": "",
                        "line": 68
                    }
                },
                "contentClasses": {
                    "name": "contentClasses",
                    "setSignature": {
                        "name": "contentClasses",
                        "type": "void",
                        "args": [
                            {
                                "name": "cl",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 82,
                        "jsdoctags": [
                            {
                                "name": "cl",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "contentClasses",
                        "type": "",
                        "returnType": "",
                        "line": 81
                    }
                },
                "contentClassesMap": {
                    "name": "contentClassesMap",
                    "getSignature": {
                        "name": "contentClassesMap",
                        "type": "",
                        "returnType": "",
                        "line": 85
                    }
                },
                "overlayPaneClass": {
                    "name": "overlayPaneClass",
                    "setSignature": {
                        "name": "overlayPaneClass",
                        "type": "void",
                        "args": [
                            {
                                "name": "opc",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 98,
                        "jsdoctags": [
                            {
                                "name": "opc",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "overlayPaneClass",
                        "type": "",
                        "returnType": "",
                        "line": 97
                    }
                },
                "keydownEvents$": {
                    "name": "keydownEvents$",
                    "setSignature": {
                        "name": "keydownEvents$",
                        "type": "void",
                        "args": [
                            {
                                "name": "evt$",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 103,
                        "jsdoctags": [
                            {
                                "name": "evt$",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuPopoverPanel"
            ]
        },
        {
            "name": "ALuPopoverTarget",
            "id": "class-ALuPopoverTarget-2aab5bad871ef6a1264eba116f8b3e84",
            "file": "packages/ng/libraries/popover/src/lib/target/popover-target.model.ts",
            "type": "class",
            "sourceCode": "import { ElementRef } from '@angular/core';\r\nimport { throwLuPopoverInvalidAlignement, throwLuPopoverInvalidPosition } from './popover-target.error';\r\n\r\nexport type LuPopoverPosition = 'above' | 'below' | 'before' | 'after';\r\nexport type LuPopoverAlignment = 'top' | 'bottom' | 'left' | 'right' | 'center';\r\n\r\n/**\r\n * anchor for a popover panel\r\n */\r\nexport interface ILuPopoverTarget {\r\n\t/** how the panel will be align with the target, allowed values: top, bottom, left, right */\r\n\talignment: LuPopoverAlignment;\r\n\t/** the element used to position the panel */\r\n\telementRef: ElementRef;\r\n\t// /** set to true if you want the panel to appear on top of the target */\r\n\toverlap: boolean;\r\n\t/** how you want to position the panel relative to the target, allowed values: above, below, before, after */\r\n\tposition: LuPopoverPosition;\r\n\r\n\toffsetX: number;\r\n\toffsetY: number;\r\n}\r\n\r\nexport abstract class ALuPopoverTarget implements ILuPopoverTarget {\r\n\tprotected _elementRef: ElementRef;\r\n\t/** the element used to position the panel */\r\n\tget elementRef() { return this._elementRef; }\r\n\tset elementRef(ref: ElementRef) { this._elementRef = ref; }\r\n\r\n\tprotected _position: LuPopoverPosition = 'below';\r\n\t/** how you want to position the panel relative to the target, allowed values: above, below, before, after */\r\n\tget position(): LuPopoverPosition { return this._position; }\r\n\tset position(position: LuPopoverPosition) {\r\n\t\tif (\r\n\t\t\tposition !== 'above' &&\r\n\t\t\tposition !== 'below' &&\r\n\t\t\tposition !== 'after' &&\r\n\t\t\tposition !== 'before'\r\n\t\t) {\r\n\t\t\tthrowLuPopoverInvalidPosition();\r\n\t\t}\r\n\t\tthis._position = position;\r\n\t\t// this.setPositionClasses(this._position, this._alignment);\r\n\t}\r\n\r\n\tprotected _alignment: LuPopoverAlignment = 'center';\r\n\t/** how the panel will be align with the target, allowed values: top, bottom, left, right */\r\n\tget alignment(): LuPopoverAlignment { return this._alignment; }\r\n\tset alignment(alignment: LuPopoverAlignment) {\r\n\t\tif (\r\n\t\t\talignment !== 'center' &&\r\n\t\t\talignment !== 'top' &&\r\n\t\t\talignment !== 'bottom' &&\r\n\t\t\talignment !== 'right' &&\r\n\t\t\talignment !== 'left'\r\n\t\t) {\r\n\t\t\tthrowLuPopoverInvalidAlignement();\r\n\t\t}\r\n\t\tthis._alignment = alignment;\r\n\t\t// this.setPositionClasses(this._position, this._alignment);\r\n\t}\r\n\r\n\tprotected _overlap = false;\r\n\t/** set to true if you want the panel to appear on top of the target */\r\n\tget overlap() { return this._overlap; }\r\n\tset overlap(ot: boolean) { this._overlap = ot; }\r\n\r\n\tprotected _offsetX = 0;\r\n\tget offsetX() { return this._offsetX; }\r\n\tset offsetX(ox: number) { this._offsetX = ox; }\r\n\r\n\tprotected _offsetY = 0;\r\n\tget offsetY() { return this._offsetY; }\r\n\tset offsetY(oy: number) { this._offsetY = oy; }\r\n}\r\n\r\nexport class LuPopoverTarget extends ALuPopoverTarget {\r\n\tconstructor() { super(); }\r\n}\r\n",
            "properties": [
                {
                    "name": "_alignment",
                    "defaultValue": "'center'",
                    "type": "LuPopoverAlignment",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_offsetX",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_offsetY",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_overlap",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_position",
                    "defaultValue": "'below'",
                    "type": "LuPopoverPosition",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "elementRef": {
                    "name": "elementRef",
                    "setSignature": {
                        "name": "elementRef",
                        "type": "void",
                        "args": [
                            {
                                "name": "ref",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "ref",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "elementRef",
                        "type": "",
                        "returnType": "",
                        "line": 27,
                        "description": "<p>the element used to position the panel </p>\n"
                    }
                },
                "position": {
                    "name": "position",
                    "setSignature": {
                        "name": "position",
                        "type": "void",
                        "args": [
                            {
                                "name": "position",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "jsdoctags": [
                            {
                                "name": "position",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "position",
                        "type": "",
                        "returnType": "LuPopoverPosition",
                        "line": 32,
                        "description": "<p>how you want to position the panel relative to the target, allowed values: above, below, before, after </p>\n"
                    }
                },
                "alignment": {
                    "name": "alignment",
                    "setSignature": {
                        "name": "alignment",
                        "type": "void",
                        "args": [
                            {
                                "name": "alignment",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 49,
                        "jsdoctags": [
                            {
                                "name": "alignment",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "alignment",
                        "type": "",
                        "returnType": "LuPopoverAlignment",
                        "line": 48,
                        "description": "<p>how the panel will be align with the target, allowed values: top, bottom, left, right </p>\n"
                    }
                },
                "overlap": {
                    "name": "overlap",
                    "setSignature": {
                        "name": "overlap",
                        "type": "void",
                        "args": [
                            {
                                "name": "ot",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 66,
                        "jsdoctags": [
                            {
                                "name": "ot",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "overlap",
                        "type": "",
                        "returnType": "",
                        "line": 65,
                        "description": "<p>set to true if you want the panel to appear on top of the target </p>\n"
                    }
                },
                "offsetX": {
                    "name": "offsetX",
                    "setSignature": {
                        "name": "offsetX",
                        "type": "void",
                        "args": [
                            {
                                "name": "ox",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 70,
                        "jsdoctags": [
                            {
                                "name": "ox",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "offsetX",
                        "type": "",
                        "returnType": "",
                        "line": 69
                    }
                },
                "offsetY": {
                    "name": "offsetY",
                    "setSignature": {
                        "name": "offsetY",
                        "type": "void",
                        "args": [
                            {
                                "name": "oy",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 74,
                        "jsdoctags": [
                            {
                                "name": "oy",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "offsetY",
                        "type": "",
                        "returnType": "",
                        "line": 73
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuPopoverTarget"
            ]
        },
        {
            "name": "ALuPopoverTrigger",
            "id": "class-ALuPopoverTrigger-50b693595441ed0b40dac75bc66f81be",
            "file": "packages/ng/libraries/popover/src/lib/trigger/popover-trigger.model.ts",
            "type": "class",
            "sourceCode": "import {\r\n\tElementRef,\r\n\tViewContainerRef,\r\n} from '@angular/core';\r\n\r\nimport { isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\r\nimport { Direction } from '@angular/cdk/bidi';\r\nimport {\r\n\tConnectedPositionStrategy,\r\n\tOriginConnectionPosition,\r\n\tOverlay,\r\n\tOverlayConnectionPosition,\r\n\tOverlayRef,\r\n\tOverlayConfig,\r\n\tHorizontalConnectionPos,\r\n\tVerticalConnectionPos,\r\n} from '@angular/cdk/overlay';\r\nimport { TemplatePortal, ComponentPortal } from '@angular/cdk/portal';\r\n\r\nimport { Subscription, Subject, timer, Observable } from 'rxjs';\r\nimport { generateId } from '@lucca-front/ng/core';\r\n\r\nimport {\r\n\tILuPopoverPanel,\r\n} from '../panel/index';\r\nimport {\r\n\tILuPopoverTarget,\r\n} from '../target/index';\r\nimport { throwLuPopoverMissingTargetError, throwLuPopoverMissingPanelError } from './popover-trigger.error';\r\nimport { debounce, map, distinctUntilChanged } from 'rxjs/operators';\r\n\r\nexport type LuPopoverTriggerEvent = 'click' | 'hover' | 'none' | 'focus';\r\n\r\n/**\r\n * component that will decide when to show the popover and attach it to the target\r\n */\r\nexport declare interface ILuPopoverTrigger<TPanel extends ILuPopoverPanel = ILuPopoverPanel, TTarget extends ILuPopoverTarget = ILuPopoverTarget> {\r\n\t/** the popover panel to display */\r\n\tpanel: TPanel;\r\n\t/** the popover target to attach the panel */\r\n\ttarget: TTarget;\r\n\r\n\t/** when to display the popover */\r\n\ttriggerEvent: LuPopoverTriggerEvent;\r\n\t/** delay before popover apparition when trigger is 'hover' */\r\n\tenterDelay: number;\r\n\t/** delay before popover disparition when trigger is 'hover' */\r\n\tleaveDelay: number;\r\n\r\n\t/** disable popover apparition */\r\n\tdisabled: boolean;\r\n\t/** Event emitted when the associated popover is opened. */\r\n\tonOpen: Observable<void>;\r\n\t/** Event emitted when the associated popover is closed. */\r\n\tonClose: Observable<void>;\r\n\r\n\topenPopover();\r\n\tclosePopover();\r\n\ttogglePopover();\r\n\tdestroyPopover();\r\n}\r\n\r\n// tslint:disable-next-line: max-line-length\r\nexport abstract class ALuPopoverTrigger<TPanel extends ILuPopoverPanel = ILuPopoverPanel, TTarget extends ILuPopoverTarget = ILuPopoverTarget>\r\nimplements ILuPopoverTrigger<TPanel, TTarget> {\r\n\tprotected _portal: TemplatePortal<any> | ComponentPortal<any>;\r\n\tprotected _overlayRef: OverlayRef | null = null;\r\n\tprotected _popoverOpen = false;\r\n\t// protected _halt = false;\r\n\tprotected _backdropSubscription: Subscription;\r\n\tprotected _positionSubscription: Subscription;\r\n\r\n\tprotected _mouseoverTimer: any;\r\n\r\n\tprotected _hovered$ = new Subject();\r\n\tprotected _hoveredSubscription: Subscription;\r\n\tprotected _panelEventsSubscriptions: Subscription;\r\n\r\n\t// tracking input type is necessary so it's possible to only auto-focus\r\n\t// the first item of the list when the popover is opened via the keyboard\r\n\tprotected _openedByMouse = false;\r\n\r\n\tprotected _panel: TPanel;\r\n\t/** References the popover instance that the trigger is associated with. */\r\n\tget panel() { return this._panel; }\r\n\tset panel(p: TPanel) { this._panel = p; }\r\n\r\n\tprotected _target: TTarget;\r\n\t/** References the popover target instance that the trigger is associated with. */\r\n\tget target() { return this._target; }\r\n\tset target(t: TTarget) { this._target = t; }\r\n\r\n\tprotected _triggerEvent: LuPopoverTriggerEvent = 'click';\r\n\tget triggerEvent() { return this._triggerEvent; }\r\n\tset triggerEvent(te: LuPopoverTriggerEvent) {\r\n\t\tthis._triggerEvent = te;\r\n\t\tif (te = 'hover') {\r\n\t\t\tif (this._hoveredSubscription) {\r\n\t\t\t\tthis._hoveredSubscription.unsubscribe();\r\n\t\t\t}\r\n\t\t\tthis._hoveredSubscription = this._hovered$.pipe(\r\n\t\t\t\tdebounce(h => h ? timer(this.enterDelay) : timer(this.leaveDelay))\r\n\t\t\t).subscribe(h => h ? this.openPopover() : this.closePopover());\r\n\t\t}\r\n\t}\r\n\tprotected _enterDelay = 50;\r\n\tget enterDelay() { return this._enterDelay; }\r\n\tset enterDelay(d: number) { this._enterDelay = d; }\r\n\tprotected _leaveDelay = 50;\r\n\tget leaveDelay() { return this._leaveDelay; }\r\n\tset leaveDelay(d: number) { this._leaveDelay = d; }\r\n\r\n\tprotected _disabled = false;\r\n\tget disabled() { return this._disabled; }\r\n\tset disabled(d: boolean) { this._disabled = d; }\r\n\r\n\tprotected _triggerId: string;\r\n\tprotected _panelId: string;\r\n\r\n\r\n\t/** Event emitted when the associated popover is opened. */\r\n\tabstract onOpen: Observable<void>;\r\n\t/** Event emitted when the associated popover is closed. */\r\n\tabstract onClose: Observable<void>;\r\n\r\n\tprotected abstract _emitOpen(): void;\r\n\tprotected abstract _emitClose(): void;\r\n\r\n\tconstructor(\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _elementRef: ElementRef,\r\n\t\tprotected _viewContainerRef: ViewContainerRef,\r\n\t) {\r\n\t\tthis._triggerId = `popoverTrigger_${generateId()}`;\r\n\t\tthis._panelId = `popoverPanel_${generateId()}`;\r\n\t}\r\n\r\n\tonClick() {\r\n\t\tif (this.triggerEvent === 'click') {\r\n\t\t\tthis.togglePopover();\r\n\t\t}\r\n\t}\r\n\r\n\tonMouseEnter() {\r\n\t\tif (this.triggerEvent === 'hover') {\r\n\t\t\tthis._hovered$.next(true);\r\n\t\t}\r\n\t}\r\n\r\n\tonMouseLeave() {\r\n\t\tif (this.triggerEvent === 'hover') {\r\n\t\t\tthis._hovered$.next(false);\r\n\t\t}\r\n\t}\r\n\tonFocus() {\r\n\t\tif (this.triggerEvent === 'focus') {\r\n\t\t\tthis.openPopover();\r\n\t\t}\r\n\t}\r\n\tonBlur() {\r\n\t\tif (this.triggerEvent === 'focus') {\r\n\t\t\tthis.closePopover();\r\n\t\t}\r\n\t}\r\n\r\n\t/** Toggles the popover between the open and closed states. */\r\n\ttogglePopover(): void {\r\n\t\treturn this._popoverOpen ? this.closePopover() : this.openPopover();\r\n\t}\r\n\r\n\t/** Opens the popover. */\r\n\topenPopover(): void {\r\n\t\tif (!this._popoverOpen && !this._disabled) {\r\n\t\t\tthis._createOverlay();\r\n\t\t\tthis._overlayRef.attach(this._portal);\r\n\r\n\t\t\t/** Only subscribe to backdrop if trigger event is click */\r\n\t\t\tif (this.triggerEvent === 'click') {\r\n\t\t\t\tthis._subscribeToBackdrop();\r\n\t\t\t}\r\n\r\n\t\t\t/** Only subscribe to mouse enter/leave of the panel if trigger = hover */\r\n\r\n\t\t\tthis._initPopover();\r\n\t\t\tthis._emitOpen();\r\n\t\t}\r\n\t}\r\n\r\n\t/** Closes the popover. */\r\n\tclosePopover(): void {\r\n\t\tif (this._overlayRef && this._overlayRef.hasAttached()) {\r\n\t\t\tthis._overlayRef.detach();\r\n\r\n\t\t\t/** unsubscribe to backdrop click if it was defined */\r\n\t\t\tif (!!this._backdropSubscription) {\r\n\t\t\t\t// if (this.popover.triggerEvent === 'click') {\r\n\t\t\t\tthis._backdropSubscription.unsubscribe();\r\n\t\t\t}\r\n\r\n\t\t\tthis._resetPopover();\r\n\t\t\tthis._emitClose();\r\n\t\t}\r\n\t}\r\n\r\n\t/** Removes the popover from the DOM. */\r\n\tdestroyPopover(): void {\r\n\t\tif (this._overlayRef) {\r\n\t\t\tthis._overlayRef.dispose();\r\n\t\t\tthis._overlayRef = null;\r\n\t\t\tthis._cleanUpSubscriptions();\r\n\t\t}\r\n\t}\r\n\r\n\t/** Focuses the popover trigger. */\r\n\tfocus() {\r\n\t\tthis._elementRef.nativeElement.focus();\r\n\t}\r\n\r\n\t_handleMousedown(event: MouseEvent): void {\r\n\t\tif (!isFakeMousedownFromScreenReader(event)) {\r\n\t\t\tthis._openedByMouse = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/** The text direction of the containing app. */\r\n\tget dir(): Direction {\r\n\t\t// return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\r\n\t\treturn 'ltr';\r\n\t}\r\n\r\n\t/** Return if the popover main positionning is vertical */\r\n\tget isVerticallyPositionned(): boolean {\r\n\t\tconst position = this.target.position;\r\n\t\treturn (\r\n\t\t\tposition === 'below' || position === 'above'\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * This method ensures that the popover\r\n\t */\r\n\tprotected _subscribeToPanelEvents(): void {\r\n\t\tif (this._overlayRef) {\r\n\t\t\tthis._panelEventsSubscriptions = new Subscription();\r\n\t\t\tif (this.triggerEvent === 'hover') {\r\n\r\n\t\t\t\tthis._panelEventsSubscriptions.add(\r\n\t\t\t\t\tthis.panel.hovered\r\n\t\t\t\t\t.subscribe((hovered) => {\r\n\t\t\t\t\t\tthis._hovered$.next(hovered);\r\n\t\t\t\t\t}),\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tthis._panelEventsSubscriptions.add(\r\n\t\t\t\tthis.panel.close\r\n\t\t\t\t.subscribe(() => {\r\n\t\t\t\t\tthis.closePopover();\r\n\t\t\t\t}),\r\n\t\t\t);\r\n\t\t\tthis._panelEventsSubscriptions.add(\r\n\t\t\t\tthis.panel.open\r\n\t\t\t\t.subscribe(() => {\r\n\t\t\t\t\tthis.openPopover();\r\n\t\t\t\t}),\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t\t/**\r\n\t * This method ensures that the popover closes when the overlay backdrop is clicked.\r\n\t * We do not use first() here because doing so would not catch clicks from within\r\n\t * the popover, and it would fail to unsubscribe properly. Instead, we unsubscribe\r\n\t * explicitly when the popover is closed or destroyed.\r\n\t */\r\n\tprotected _subscribeToBackdrop(): void {\r\n\t\tif (this._overlayRef) {\r\n\t\t\tthis._backdropSubscription = this._overlayRef\r\n\t\t\t\t.backdropClick()\r\n\t\t\t\t.subscribe(() => {\r\n\t\t\t\t\tthis.closePopover();\r\n\t\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * This method sets the popover state to open and focuses the first item if\r\n\t * the popover was opened via the keyboard.\r\n\t */\r\n\tprotected _initPopover(): void {\r\n\t\tthis._setIsPopoverOpen(true);\r\n\t\tthis.panel.panelId = this._panelId;\r\n\t\tthis.panel.triggerId = this._triggerId;\r\n\t\tthis.panel.keydownEvents$ = this._overlayRef.keydownEvents();\r\n\t\tthis._subscribeToPanelEvents();\r\n\t}\r\n\r\n\t/**\r\n\t * This method resets the popover when it's closed, most importantly restoring\r\n\t * focus to the popover trigger if the popover was opened via the keyboard.\r\n\t */\r\n\tprotected _resetPopover(): void {\r\n\t\tthis._setIsPopoverOpen(false);\r\n\r\n\t\t// Focus only needs to be reset to the host element if the popover was opened\r\n\t\t// by the keyboard and manually shifted to the first popover item.\r\n\t\tif (!this._openedByMouse && this.triggerEvent === 'click') {\r\n\t\t\tthis.focus();\r\n\t\t}\r\n\t\tthis._openedByMouse = false;\r\n\t}\r\n\r\n\t/** set state rather than toggle to support triggers sharing a popover */\r\n\tprotected _setIsPopoverOpen(isOpen: boolean): void {\r\n\t\tthis._popoverOpen = isOpen;\r\n\t\t// tell the panel it's opening/closing\r\n\t\tisOpen ? this.panel.onOpen() : this.panel.onClose();\r\n\t}\r\n\r\n\t/**\r\n\t *  This method checks that a valid instance of MdPopover has been passed into\r\n\t *  mdPopoverTriggerFor. If not, an exception is thrown.\r\n\t */\r\n\tprotected _checkPanel() {\r\n\t\tif (!this.panel) {\r\n\t\t\tthrowLuPopoverMissingPanelError();\r\n\t\t}\r\n\t}\r\n\tprotected _checkTarget() {\r\n\t\tif (!this.target) {\r\n\t\t\tthrowLuPopoverMissingTargetError();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *  This method creates the overlay from the provided popover's template and saves its\r\n\t *  OverlayRef so that it can be attached to the DOM when openPopover is called.\r\n\t */\r\n\tprotected _createOverlay(): OverlayRef {\r\n\t\tif (!this._overlayRef) {\r\n\t\t\tthis._portal = new TemplatePortal(\r\n\t\t\t\tthis.panel.templateRef,\r\n\t\t\t\tthis._viewContainerRef,\r\n\t\t\t);\r\n\t\t\tconst config = this._getOverlayConfig();\r\n\t\t\tthis._subscribeToPositions(\r\n\t\t\t\tconfig.positionStrategy as ConnectedPositionStrategy,\r\n\t\t\t);\r\n\t\t\tthis._overlayRef = this._overlay.create(config);\r\n\t\t}\r\n\r\n\t\treturn this._overlayRef;\r\n\t}\r\n\r\n\t/**\r\n\t * This method builds the configuration object needed to create the overlay, the OverlayConfig.\r\n\t * @returns OverlayConfig\r\n\t */\r\n\tprotected _getOverlayConfig(): OverlayConfig {\r\n\t\tconst overlayState = new OverlayConfig();\r\n\t\toverlayState.positionStrategy = this._getPosition().withDirection(this.dir);\r\n\t\t/** Display overlay backdrop if trigger event is click */\r\n\t\tif (this.triggerEvent === 'click') {\r\n\t\t\toverlayState.hasBackdrop = true;\r\n\t\t\toverlayState.backdropClass = 'cdk-overlay-transparent-backdrop';\r\n\t\t}\r\n\r\n\t\toverlayState.direction = this.dir;\r\n\t\tconst scrollStrategy = this.panel.scrollStrategy;\r\n\t\tswitch (scrollStrategy) {\r\n\t\t\tcase 'block':\r\n\t\t\t\toverlayState.scrollStrategy = this._overlay.scrollStrategies.block();\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'close':\r\n\t\t\t\toverlayState.scrollStrategy = this._overlay.scrollStrategies.close();\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\toverlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn overlayState;\r\n\t}\r\n\r\n\t/**\r\n\t * Listens to changes in the position of the overlay and sets the correct classes\r\n\t * on the popover based on the new position. This ensures the animation origin is always\r\n\t * correct, even if a fallback position is used for the overlay.\r\n\t */\r\n\tprotected _subscribeToPositions(position: ConnectedPositionStrategy): void {\r\n\t\tthis._positionSubscription = position.onPositionChange.pipe(\r\n\t\t\tmap(c => c.connectionPair),\r\n\t\t\tdistinctUntilChanged(),\r\n\t\t)\r\n\t\t.subscribe(connectionPair => {\r\n\t\t\tthis.panel.setPositionClasses(connectionPair.overlayX, connectionPair.overlayY);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * This method builds the position strategy for the overlay, so the popover is properly connected\r\n\t * to the trigger.\r\n\t * @returns ConnectedPositionStrategy\r\n\t */\r\n\tprotected _getPosition(): ConnectedPositionStrategy {\r\n\t\tconst connectionPosition: OriginConnectionPosition = {\r\n\t\t\toriginX: 'start',\r\n\t\t\toriginY: 'top',\r\n\t\t};\r\n\r\n\t\t// Position\r\n\t\tconst position = this.target.position;\r\n\t\tconst overlap = this.target.overlap;\r\n\t\tif (position === 'above') {\r\n\t\t\tconnectionPosition.originY = overlap ? 'bottom' : 'top';\r\n\t\t} else if (position === 'below') {\r\n\t\t\tconnectionPosition.originY = overlap ? 'top' : 'bottom';\r\n\t\t} else if (position === 'before') {\r\n\t\t\tconnectionPosition.originX = overlap ? 'end' : 'start';\r\n\t\t} else if (position === 'after') {\r\n\t\t\tconnectionPosition.originX = overlap ? 'start' : 'end';\r\n\t\t}\r\n\r\n\t\t// Alignment\r\n\t\tconst alignment = this.target.alignment;\r\n\t\tif (this.isVerticallyPositionned) {\r\n\t\t\tif (alignment === 'left') {\r\n\t\t\t\tconnectionPosition.originX = 'start';\r\n\t\t\t} else if (alignment === 'right') {\r\n\t\t\t\tconnectionPosition.originX = 'end';\r\n\t\t\t} else {\r\n\t\t\t\tconnectionPosition.originX = 'center';\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (alignment === 'top') {\r\n\t\t\t\tconnectionPosition.originY = 'top';\r\n\t\t\t} else if (alignment === 'bottom') {\r\n\t\t\t\tconnectionPosition.originY = 'bottom';\r\n\t\t\t} else {\r\n\t\t\t\tconnectionPosition.originY = 'center';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst overlayPosition: OverlayConnectionPosition = {\r\n\t\t\toverlayX: 'start',\r\n\t\t\toverlayY: 'top',\r\n\t\t};\r\n\r\n\t\tif (overlap) {\r\n\t\t\toverlayPosition.overlayX = connectionPosition.originX;\r\n\t\t\toverlayPosition.overlayY = connectionPosition.originY;\r\n\t\t} else if (this.isVerticallyPositionned) {\r\n\t\t\toverlayPosition.overlayX = connectionPosition.originX;\r\n\t\t\toverlayPosition.overlayY =\r\n\t\t\t\tposition === 'above' ? 'bottom' : 'top';\r\n\t\t} else {\r\n\t\t\toverlayPosition.overlayX =\r\n\t\t\t\tposition === 'before' ? 'end' : 'start';\r\n\t\t\toverlayPosition.overlayY = connectionPosition.originY;\r\n\t\t}\r\n\r\n\r\n\t\tconst offsetX = this.target.offsetX;\r\n\t\tconst offsetY = this.target.offsetY;\r\n\r\n\t\t/**\r\n\t\t * For overriding position element, when LuPopoverTargetAt has a valid element reference.\r\n\t\t * Useful for sticking popover to parent element and offsetting arrow to trigger element.\r\n\t\t * If undefined defaults to the trigger element reference.\r\n\t\t */\r\n\t\tconst element = this.target.elementRef;\r\n\t\t// if (typeof this.targetElement !== 'undefined' && this.popover) {\r\n\t\t// \tthis.popover.containerPositioning = true;\r\n\t\t// \telement = this.targetElement._elementRef;\r\n\t\t// }\r\n\r\n\t\t/**\r\n\t\t * TODO: Updates when withFallbackPosition takes individual offsets\r\n\t\t */\r\n\r\n\t\treturn this._overlay\r\n\t\t\t.position()\r\n\t\t\t.connectedTo(element, connectionPosition, overlayPosition)\r\n\t\t\t.withFallbackPosition(\r\n\t\t\t\t{\r\n\t\t\t\t\toriginX: connectionPosition.originX,\r\n\t\t\t\t\toriginY: this._invertVerticalPos(connectionPosition.originY),\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\toverlayX: overlayPosition.overlayX,\r\n\t\t\t\t\toverlayY: this._invertVerticalPos(overlayPosition.overlayY),\r\n\t\t\t\t},\r\n\t\t\t)\r\n\t\t\t.withFallbackPosition(\r\n\t\t\t\t{\r\n\t\t\t\t\toriginX: this._invertHorizontalPos(connectionPosition.originX),\r\n\t\t\t\t\toriginY: connectionPosition.originY,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\toverlayX: this._invertHorizontalPos(overlayPosition.overlayX),\r\n\t\t\t\t\toverlayY: overlayPosition.overlayY,\r\n\t\t\t\t},\r\n\t\t\t)\r\n\t\t\t.withFallbackPosition(\r\n\t\t\t\t{\r\n\t\t\t\t\toriginX: this._invertHorizontalPos(connectionPosition.originX),\r\n\t\t\t\t\toriginY: this._invertVerticalPos(connectionPosition.originY),\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\toverlayX: this._invertHorizontalPos(overlayPosition.overlayX),\r\n\t\t\t\t\toverlayY: this._invertVerticalPos(overlayPosition.overlayY),\r\n\t\t\t\t},\r\n\t\t\t)\r\n\t\t\t.withOffsetX(offsetX)\r\n\t\t\t.withOffsetY(offsetY);\r\n\t}\r\n\r\n\tprotected _invertVerticalPos(y: VerticalConnectionPos) {\r\n\t\tif (y === 'top') {\r\n\t\t\ty = 'bottom';\r\n\t\t} else if (y === 'bottom') {\r\n\t\t\ty = 'top';\r\n\t\t}\r\n\t\treturn y;\r\n\t}\r\n\r\n\tprotected _invertHorizontalPos(x: HorizontalConnectionPos) {\r\n\t\tif (x === 'end') {\r\n\t\t\tx = 'start';\r\n\t\t} else if (x === 'start') {\r\n\t\t\tx = 'end';\r\n\t\t}\r\n\r\n\t\treturn x;\r\n\t}\r\n\r\n\tprotected _cleanUpSubscriptions(): void {\r\n\t\tif (this._backdropSubscription) {\r\n\t\t\tthis._backdropSubscription.unsubscribe();\r\n\t\t}\r\n\t\tif (this._positionSubscription) {\r\n\t\t\tthis._positionSubscription.unsubscribe();\r\n\t\t}\r\n\t\tif (this._hoveredSubscription) {\r\n\t\t\tthis._hoveredSubscription.unsubscribe();\r\n\t\t}\r\n\t\tif (this._panelEventsSubscriptions) {\r\n\t\t\tthis._panelEventsSubscriptions.unsubscribe();\r\n\t\t}\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef"
                    }
                ],
                "line": 127,
                "jsdoctags": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_backdropSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 113,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_enterDelay",
                    "defaultValue": "50",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 106,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_hovered$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_hoveredSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_leaveDelay",
                    "defaultValue": "50",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_mouseoverTimer",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_openedByMouse",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_overlayRef",
                    "defaultValue": "null",
                    "type": "OverlayRef | null",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_panel",
                    "type": "TPanel",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_panelEventsSubscriptions",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_panelId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 118,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_popoverOpen",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_portal",
                    "type": "TemplatePortal<any> | ComponentPortal<any>",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_positionSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_target",
                    "type": "TTarget",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_triggerEvent",
                    "defaultValue": "'click'",
                    "type": "LuPopoverTriggerEvent",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_triggerId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 117,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "onClose",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "<p>Event emitted when the associated popover is closed. </p>\n",
                    "line": 124,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "onOpen",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "<p>Event emitted when the associated popover is opened. </p>\n",
                    "line": 122,
                    "modifierKind": [
                        117
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_checkPanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 322,
                    "description": "<p>This method checks that a valid instance of MdPopover has been passed into\nmdPopoverTriggerFor. If not, an exception is thrown.</p>\n",
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_checkTarget",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 327,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_cleanUpSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 536,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_createOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "OverlayRef",
                    "typeParameters": [],
                    "line": 337,
                    "description": "<p>This method creates the overlay from the provided popover&#39;s template and saves its\nOverlayRef so that it can be attached to the DOM when openPopover is called.</p>\n",
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_emitClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "modifierKind": [
                        113,
                        117
                    ]
                },
                {
                    "name": "_emitOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "modifierKind": [
                        113,
                        117
                    ]
                },
                {
                    "name": "_getOverlayConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "OverlayConfig",
                    "typeParameters": [],
                    "line": 357,
                    "description": "<p>This method builds the configuration object needed to create the overlay, the OverlayConfig.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 10457,
                                "end": 10464,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>OverlayConfig</p>\n"
                        }
                    ]
                },
                {
                    "name": "_getPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "ConnectedPositionStrategy",
                    "typeParameters": [],
                    "line": 404,
                    "description": "<p>This method builds the position strategy for the overlay, so the popover is properly connected\nto the trigger.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 12074,
                                "end": 12081,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>ConnectedPositionStrategy</p>\n"
                        }
                    ]
                },
                {
                    "name": "_handleMousedown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 219,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_initPopover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 288,
                    "description": "<p>This method sets the popover state to open and focuses the first item if\nthe popover was opened via the keyboard.</p>\n",
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_invertHorizontalPos",
                    "args": [
                        {
                            "name": "x",
                            "type": "HorizontalConnectionPos"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 526,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "HorizontalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_invertVerticalPos",
                    "args": [
                        {
                            "name": "y",
                            "type": "VerticalConnectionPos"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 517,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "y",
                            "type": "VerticalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_resetPopover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 300,
                    "description": "<p>This method resets the popover when it&#39;s closed, most importantly restoring\nfocus to the popover trigger if the popover was opened via the keyboard.</p>\n",
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_setIsPopoverOpen",
                    "args": [
                        {
                            "name": "isOpen",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 312,
                    "description": "<p>set state rather than toggle to support triggers sharing a popover </p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "isOpen",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_subscribeToBackdrop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 274,
                    "description": "<p>This method ensures that the popover closes when the overlay backdrop is clicked.\nWe do not use first() here because doing so would not catch clicks from within\nthe popover, and it would fail to unsubscribe properly. Instead, we unsubscribe\nexplicitly when the popover is closed or destroyed.</p>\n",
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_subscribeToPanelEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 242,
                    "description": "<p>This method ensures that the popover</p>\n",
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_subscribeToPositions",
                    "args": [
                        {
                            "name": "position",
                            "type": "ConnectedPositionStrategy"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 389,
                    "description": "<p>Listens to changes in the position of the overlay and sets the correct classes\non the popover based on the new position. This ensures the animation origin is always\ncorrect, even if a fallback position is used for the overlay.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "ConnectedPositionStrategy",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closePopover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "description": "<p>Closes the popover. </p>\n"
                },
                {
                    "name": "destroyPopover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "description": "<p>Removes the popover from the DOM. </p>\n"
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "description": "<p>Focuses the popover trigger. </p>\n"
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155
                },
                {
                    "name": "onMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150
                },
                {
                    "name": "openPopover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "description": "<p>Opens the popover. </p>\n"
                },
                {
                    "name": "togglePopover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "description": "<p>Toggles the popover between the open and closed states. </p>\n"
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "panel": {
                    "name": "panel",
                    "setSignature": {
                        "name": "panel",
                        "type": "void",
                        "args": [
                            {
                                "name": "p",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 86,
                        "jsdoctags": [
                            {
                                "name": "p",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "panel",
                        "type": "",
                        "returnType": "",
                        "line": 85,
                        "description": "<p>References the popover instance that the trigger is associated with. </p>\n"
                    }
                },
                "target": {
                    "name": "target",
                    "setSignature": {
                        "name": "target",
                        "type": "void",
                        "args": [
                            {
                                "name": "t",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 91,
                        "jsdoctags": [
                            {
                                "name": "t",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "target",
                        "type": "",
                        "returnType": "",
                        "line": 90,
                        "description": "<p>References the popover target instance that the trigger is associated with. </p>\n"
                    }
                },
                "triggerEvent": {
                    "name": "triggerEvent",
                    "setSignature": {
                        "name": "triggerEvent",
                        "type": "void",
                        "args": [
                            {
                                "name": "te",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 95,
                        "jsdoctags": [
                            {
                                "name": "te",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "triggerEvent",
                        "type": "",
                        "returnType": "",
                        "line": 94
                    }
                },
                "enterDelay": {
                    "name": "enterDelay",
                    "setSignature": {
                        "name": "enterDelay",
                        "type": "void",
                        "args": [
                            {
                                "name": "d",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 108,
                        "jsdoctags": [
                            {
                                "name": "d",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "enterDelay",
                        "type": "",
                        "returnType": "",
                        "line": 107
                    }
                },
                "leaveDelay": {
                    "name": "leaveDelay",
                    "setSignature": {
                        "name": "leaveDelay",
                        "type": "void",
                        "args": [
                            {
                                "name": "d",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 111,
                        "jsdoctags": [
                            {
                                "name": "d",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "leaveDelay",
                        "type": "",
                        "returnType": "",
                        "line": 110
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "d",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 115,
                        "jsdoctags": [
                            {
                                "name": "d",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "",
                        "returnType": "",
                        "line": 114
                    }
                },
                "dir": {
                    "name": "dir",
                    "getSignature": {
                        "name": "dir",
                        "type": "",
                        "returnType": "Direction",
                        "line": 226,
                        "description": "<p>The text direction of the containing app. </p>\n"
                    }
                },
                "isVerticallyPositionned": {
                    "name": "isVerticallyPositionned",
                    "getSignature": {
                        "name": "isVerticallyPositionned",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 232,
                        "description": "<p>Return if the popover main positionning is vertical </p>\n"
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuPopoverTrigger"
            ]
        },
        {
            "name": "ALuPopupRef",
            "id": "class-ALuPopupRef-4fdd8b656048079547c33278abb886a6",
            "file": "packages/ng/libraries/popup/src/lib/popup-ref.model.ts",
            "type": "class",
            "sourceCode": "import { Observable, Subject, Subscription, merge } from 'rxjs';\r\nimport { Overlay, OverlayRef, OverlayConfig } from '@angular/cdk/overlay';\r\nimport { ComponentPortal, PortalInjector, ComponentType } from '@angular/cdk/portal';\r\nimport { first, filter } from 'rxjs/operators';\r\nimport { ComponentRef } from '@angular/core';\r\nimport { ESCAPE } from '@angular/cdk/keycodes';\r\nimport { Injector } from '@angular/core';\r\nimport { LU_POPUP_DATA } from './popup.token';\r\nimport { ILuPopupConfig } from './popup-config.model';\r\nimport { ILuPopupContent } from './popup.model';\r\n\r\nexport interface ILuPopupRef<T extends ILuPopupContent = ILuPopupContent, D = any, R = any> {\r\n\tonOpen: Observable<D>;\r\n\tonClose: Observable<R>;\r\n\tonDismiss: Observable<void>;\r\n\topen(data: D): void;\r\n\tclose(result: R): void;\r\n\tdismiss(): void;\r\n}\r\nexport interface ILuPopupRefFactory<TComponent = any, TConfig extends ILuPopupConfig = ILuPopupConfig> {\r\n\tforge<T extends TComponent, C extends TConfig>(component: ComponentType<T>, config: C): ILuPopupRef<T>;\r\n}\r\n\r\nexport abstract class ALuPopupRef<T extends ILuPopupContent = ILuPopupContent, D = any, R = any> implements ILuPopupRef<T, D, R> {\r\n\tonOpen = new Subject<D>();\r\n\tonClose = new Subject<R>();\r\n\tonDismiss = new Subject<void>();\r\n\r\n\tprotected _overlayRef: OverlayRef;\r\n\tprotected _componentRef: ComponentRef<T>;\r\n\r\n\tprotected _subs = new Subscription();\r\n\r\n\tconstructor(\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _injector: Injector,\r\n\t\tprotected _component: ComponentType<T>,\r\n\t\tprotected _config: ILuPopupConfig,\r\n\t) {}\r\n\r\n\r\n\topen(data?: D) {\r\n\t\tthis._createOverlay();\r\n\t\tthis._openPopup(data);\r\n\r\n\t\tthis._subToCloseEvents();\r\n\r\n\t\tthis.onOpen.next(data);\r\n\t\tthis.onOpen.complete();\r\n\t}\r\n\tclose(result?: R) {\r\n\t\tthis.onClose.next(result);\r\n\t\tthis._destroy();\r\n\t}\r\n\tdismiss() {\r\n\t\tthis.onDismiss.next();\r\n\t\tthis._destroy();\r\n\t}\r\n\t/**\r\n\t *  This method creates the overlay from the provided popover's template and saves its\r\n\t *  OverlayRef so that it can be attached to the DOM when openPopover is called.\r\n\t */\r\n\tprotected _createOverlay() {\r\n\t\tif (!this._overlayRef) {\r\n\t\t\tconst overlayConfig = this._getOverlayConfig();\r\n\t\t\tthis._overlayRef = this._overlay.create(overlayConfig);\r\n\t\t}\r\n\t}\r\n\t\t/**\r\n\t * This method builds the configuration object needed to create the overlay, the OverlayConfig.\r\n\t * @returns OverlayConfig\r\n\t */\r\n\tprotected _getOverlayConfig(): OverlayConfig {\r\n\t\tconst overlayConfig = new OverlayConfig();\r\n\t\tswitch (this._config.position) {\r\n\t\t\tcase 'top':\r\n\t\t\t\toverlayConfig.positionStrategy =  this._overlay.position().global().centerHorizontally().top('0');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'bottom':\r\n\t\t\t\toverlayConfig.positionStrategy =  this._overlay.position().global().centerHorizontally().bottom('0');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'left':\r\n\t\t\t\toverlayConfig.positionStrategy =  this._overlay.position().global().centerVertically().left('0');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'right':\r\n\t\t\t\toverlayConfig.positionStrategy =  this._overlay.position().global().centerVertically().right('0');\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'center':\r\n\t\t\tdefault:\r\n\t\t\t\toverlayConfig.positionStrategy =  this._overlay.position().global().centerHorizontally().centerVertically();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\toverlayConfig.hasBackdrop = !this._config.noBackdrop;\r\n\t\toverlayConfig.backdropClass = this._config.backdropClass;\r\n\t\tconst panelClasses = [];\r\n\t\tif (Array.isArray(this._config.panelClass)) {\r\n\t\t\tpanelClasses.push(...this._config.panelClass);\r\n\t\t} else {\r\n\t\t\tpanelClasses.push(this._config.panelClass);\r\n\t\t}\r\n\t\tpanelClasses.push(`size-${this._config.size}`);\r\n\t\toverlayConfig.panelClass = panelClasses;\r\n\t\toverlayConfig.scrollStrategy = this._overlay.scrollStrategies.block();\r\n\t\treturn overlayConfig;\r\n\t}\r\n\tprotected _openPopup(data?: D) {\r\n\t\tconst injectionMap = new WeakMap();\r\n\t\tinjectionMap.set(ALuPopupRef, this);\r\n\t\tinjectionMap.set(LU_POPUP_DATA, data);\r\n\t\tconst injector = new PortalInjector(this._injector, injectionMap);\r\n\t\tconst portal = new ComponentPortal(this._component, undefined, injector);\r\n\t\tthis._componentRef = this._overlayRef.attach<T>(portal);\r\n\t}\r\n\r\n\tprotected _destroy() {\r\n\t\tthis._cleanSubscription();\r\n\t\tthis._closePopup();\r\n\t\tthis._destroyOverlay();\r\n\t\tthis._completeSubjects();\r\n\r\n\t}\r\n\t_completeSubjects() {\r\n\t\tthis.onClose.complete();\r\n\t\tthis.onOpen.complete();\r\n\t\tthis.onDismiss.complete();\r\n\t}\r\n\r\n\tprotected _destroyOverlay() {\r\n\t\tthis._overlayRef.detachBackdrop();\r\n\t\tthis._overlayRef.detach();\r\n\t}\r\n\tprotected _closePopup() {\r\n\t\tthis._componentRef.destroy();\r\n\t}\r\n\tprotected _subToCloseEvents() {\r\n\t\tif (!this._config.undismissable) {\r\n\r\n\t\t\tconst bdClicked$ = this._overlayRef.backdropClick();\r\n\t\t\tconst escPressed$ = this._overlayRef.keydownEvents().pipe(\r\n\t\t\t\tfilter(evt => evt.keyCode === ESCAPE),\r\n\t\t\t);\r\n\t\t\tconst sub = merge(bdClicked$, escPressed$).pipe(first())\r\n\t\t\t.subscribe(e => this.dismiss());\r\n\t\t\tthis._subs.add(sub);\r\n\t\t}\r\n\t}\r\n\tprotected _cleanSubscription() {\r\n\t\tthis._subs.unsubscribe();\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "_injector",
                        "type": "Injector"
                    },
                    {
                        "name": "_component",
                        "type": "ComponentType<T>"
                    },
                    {
                        "name": "_config",
                        "type": "ILuPopupConfig"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_component",
                        "type": "ComponentType<T>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_config",
                        "type": "ILuPopupConfig",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_componentRef",
                    "type": "ComponentRef<T>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_overlayRef",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_subs",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "onClose",
                    "defaultValue": "new Subject<R>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "onDismiss",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "onOpen",
                    "defaultValue": "new Subject<D>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methods": [
                {
                    "name": "_cleanSubscription",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_closePopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_completeSubjects",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123
                },
                {
                    "name": "_createOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "description": "<p>This method creates the overlay from the provided popover&#39;s template and saves its\nOverlayRef so that it can be attached to the DOM when openPopover is called.</p>\n",
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_destroyOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_getOverlayConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "OverlayConfig",
                    "typeParameters": [],
                    "line": 73,
                    "description": "<p>This method builds the configuration object needed to create the overlay, the OverlayConfig.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2340,
                                "end": 2347,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>OverlayConfig</p>\n"
                        }
                    ]
                },
                {
                    "name": "_openPopup",
                    "args": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_subToCloseEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "result",
                            "type": "R",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "R",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuPopupRef"
            ]
        },
        {
            "name": "ALuSelectInput",
            "id": "class-ALuSelectInput-2c23a9be2aab0c47fcc4d37ddd9ae690",
            "file": "packages/ng/libraries/select/src/lib/input/select-input.model.ts",
            "type": "class",
            "sourceCode": "import {\r\n\tChangeDetectorRef,\r\n\tViewContainerRef,\r\n\tElementRef,\r\n\tRenderer2,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { ALuPopoverTrigger, LuPopoverTarget, ILuPopoverTarget } from '@lucca-front/ng/popover';\r\nimport { Overlay, OverlayConfig } from '@angular/cdk/overlay';\r\nimport { ILuClearer, ILuInput, ILuInputDisplayer } from '@lucca-front/ng/input';\r\nimport { ILuInputWithPicker, ILuPickerPanel } from '@lucca-front/ng/picker';\r\nimport { Subscription } from 'rxjs';\r\n\r\nexport abstract class ALuSelectInput<T = any, TPicker extends ILuPickerPanel<T> = ILuPickerPanel<T>>\r\nextends ALuPopoverTrigger<TPicker>\r\nimplements ControlValueAccessor, ILuInputWithPicker<T>, ILuInput<T> {\r\n\tprotected _subs = new Subscription();\r\n\tconstructor(\r\n\t\tprotected _changeDetectorRef: ChangeDetectorRef,\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _elementRef: ElementRef,\r\n\t\tprotected _viewContainerRef: ViewContainerRef,\r\n\t\tprotected _renderer: Renderer2,\r\n\t) {\r\n\t\tsuper(\r\n\t\t\t_overlay,\r\n\t\t\t_elementRef,\r\n\t\t\t_viewContainerRef,\r\n\t\t);\r\n\t\tthis.target = new LuPopoverTarget() as ILuPopoverTarget;\r\n\t\tthis.target.elementRef = this._elementRef;\r\n\t\tthis.target.position = 'below';\r\n\t\tthis.target.alignment = 'left';\r\n\t}\r\n\tprotected _isContentInitialized = false;\r\n\tprotected _placeholder: string;\r\n\tget placeholder() { return this._placeholder; }\r\n\tset placeholder(p: string) { this._placeholder = p; }\r\n\t/**\r\n\t * contriol value accessor interface implementation\r\n\t */\r\n\tprotected _value: T | T[];\r\n\tsetValue(value: T | T[]) {\r\n\t\tif (this.disabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.value = value;\r\n\t\tthis._cvaOnChange(value);\r\n\t\tthis._onTouched();\r\n\t}\r\n\tget value(): T | T[] {\r\n\t\treturn this._value;\r\n\t}\r\n\tset value(value: T | T[]) {\r\n\t\tthis._value = value;\r\n\t\tthis.render();\r\n\t\tthis.applyClasses();\r\n\t\tif (!!this._picker) {\r\n\t\t\tthis._picker.setValue(value);\r\n\t\t}\r\n\t\tthis._changeDetectorRef.markForCheck();\r\n\t}\r\n\t// From ControlValueAccessor interface\r\n\twriteValue(value: T | T[]) {\r\n\t\tthis.value = value;\r\n\t}\r\n\t// From ControlValueAccessor interface\r\n\tprotected _cvaOnChange = (v: T | T[]) => {};\r\n\tregisterOnChange(fn: any) {\r\n\t\tthis._cvaOnChange = fn;\r\n\t}\r\n\t// From ControlValueAccessor interface\r\n\tprotected _onTouched = () => {};\r\n\tregisterOnTouched(fn: any) {\r\n\t\tthis._onTouched = fn;\r\n\t}\r\n\tset disabled(d) { this._disabled = d; }\r\n\tget disabled() { return this._disabled; }\r\n\tsetDisabledState(disabled: boolean) {\r\n\t\tthis.disabled = disabled;\r\n\t\tthis._changeDetectorRef.markForCheck();\r\n\t}\r\n\tprotected isEmpty() {\r\n\t\tconst isEmptyArray = Array.isArray(this.value) && this.value.length === 0;\r\n\t\treturn this.value === null || this.value === undefined || isEmptyArray;\r\n\t}\r\n\tprotected applyClasses() {\r\n\t\tif (this.isEmpty()) {\r\n\t\t\tthis._renderer.removeClass(this._elementRef.nativeElement, 'is-filled');\r\n\t\t} else {\r\n\t\t\tthis._renderer.addClass(this._elementRef.nativeElement, 'is-filled');\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * popover trigger class extension\r\n\t */\r\n\tprotected set _picker(picker: TPicker) {\r\n\t\tthis.panel = picker;\r\n\t\tpicker.multiple = this._multiple;\r\n\t\tthis.subToPickerEvts();\r\n\t}\r\n\tprotected get _picker() { return this.panel; }\r\n\tprotected set _clearer(clearer: ILuClearer<T>) {\r\n\t\tif (!!clearer && !!clearer.onClear) {\r\n\t\t\tthis._subs.add(clearer.onClear.subscribe(value => this.setValue(value)));\r\n\t\t}\r\n\t}\r\n\tprotected subToPickerEvts() {\r\n\t\tif (!!this.panel) {\r\n\t\t\tthis._subs.add(this.panel.onSelectValue.subscribe(value => this.setValue(value)));\r\n\t\t}\r\n\t}\r\n\r\n\tclosePopover() {\r\n\t\tthis._onTouched();\r\n\t\tsuper.closePopover();\r\n\t}\r\n\r\n\tonDestroy() {\r\n\t\tif (this._popoverOpen) {\r\n\t\t\tthis.closePopover();\r\n\t\t}\r\n\t\tthis.destroyPopover();\r\n\t\tthis._subs.unsubscribe();\r\n\t\tthis._cleanUpSubscriptions();\r\n\r\n\t}\r\n\r\n\tprotected _getOverlayConfig(): OverlayConfig {\r\n\t\tconst config = super._getOverlayConfig();\r\n\t\tconst clientRect = this._elementRef.nativeElement.getBoundingClientRect();\r\n\t\tconfig.minWidth = `${Math.max(185, clientRect.width)}px`; // might become min/maxWidth\r\n\t\treturn config;\r\n\t}\r\n\r\n\t/* Rendering via a inpt displayer */\r\n\tprotected _displayer: ILuInputDisplayer<T>;\r\n\tprotected _displayContainer: ViewContainerRef;\r\n\tprotected set displayer(d: ILuInputDisplayer<T>) {\r\n\t\tthis._displayer = d;\r\n\t\tthis.render();\r\n\t}\r\n\tprotected set displayContainer(vcr: ViewContainerRef) {\r\n\t\tthis._displayContainer = vcr;\r\n\t}\r\n\tprotected render() {\r\n\t\tif (!this._displayer || !this._isContentInitialized) { return; }\r\n\t\tif (this.useMultipleViews()) {\r\n\t\t\tthis.renderMultipleViews();\r\n\t\t} else {\r\n\t\t\tthis.renderSingleView();\r\n\t\t}\r\n\t}\r\n\tprotected useMultipleViews() {\r\n\t\treturn this._multiple && !!this._displayer && !this._displayer.multiple;\r\n\t}\r\n\r\n\tprotected renderSingleView() {\r\n\t\tthis.clearDisplay();\r\n\t\tif (this.value !== null && this.value !== undefined) {\r\n\t\t\tconst newView = this.getView(this.value);\r\n\t\t\tthis.displayView(newView);\r\n\t\t}\r\n\t}\r\n\tprotected clearDisplay() {\r\n\t\tthis._displayContainer.clear();\r\n\t}\r\n\tprotected getView(value: T | T[]) {\r\n\t\tif (!!this._displayer) {\r\n\t\t\treturn this._displayer.getViewRef(value);\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\tprotected displayView(view) {\r\n\t\tif (!!view) {\r\n\t\t\tthis._displayContainer.insert(view);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected renderMultipleViews() {\r\n\t\tthis.clearDisplay();\r\n\t\tconst values = <T[]>this.value || [];\r\n\t\tconst views = values.map(value => this.getView(value));\r\n\t\tviews.forEach(view => this.displayView(view));\r\n\t}\r\n\t// multiple\r\n\tprotected _multiple = false;\r\n\tset multiple(m: boolean) {\r\n\t\tthis._multiple = m;\r\n\t\tif (this._picker) {\r\n\t\t\tthis._picker.multiple = m;\r\n\t\t}\r\n\t}\r\n\tget multiple() { return this._multiple; }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_cvaOnChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_displayContainer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 138,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_displayer",
                    "type": "ILuInputDisplayer<T>",
                    "optional": false,
                    "description": "",
                    "line": 137,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_isContentInitialized",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_multiple",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 187,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_subs",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_value",
                    "type": "T | T[]",
                    "optional": false,
                    "description": "<p>contriol value accessor interface implementation</p>\n",
                    "line": 42,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_backdropSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 113,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_enterDelay",
                    "defaultValue": "50",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 106,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_hovered$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_hoveredSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_leaveDelay",
                    "defaultValue": "50",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_mouseoverTimer",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_openedByMouse",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_overlayRef",
                    "defaultValue": "null",
                    "type": "OverlayRef | null",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_panel",
                    "type": "TPanel",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_panelEventsSubscriptions",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_panelId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 118,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_popoverOpen",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_portal",
                    "type": "TemplatePortal<any> | ComponentPortal<any>",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_positionSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_target",
                    "type": "TTarget",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_triggerEvent",
                    "defaultValue": "'click'",
                    "type": "LuPopoverTriggerEvent",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_triggerId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 117,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "onClose",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "<p>Event emitted when the associated popover is closed. </p>\n",
                    "line": 124,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "onOpen",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "<p>Event emitted when the associated popover is opened. </p>\n",
                    "line": 122,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                }
            ],
            "methods": [
                {
                    "name": "_getOverlayConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "OverlayConfig",
                    "typeParameters": [],
                    "line": 129,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "applyClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "clearDisplay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "closePopover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114
                },
                {
                    "name": "displayView",
                    "args": [
                        {
                            "name": "view",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "view",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getView",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 168,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isEmpty",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 83,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "onDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "renderMultipleViews",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "renderSingleView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "disabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subToPickerEvts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "useMultipleViews",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 154,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_checkPanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 322,
                    "description": "<p>This method checks that a valid instance of MdPopover has been passed into\nmdPopoverTriggerFor. If not, an exception is thrown.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_checkTarget",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 327,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_cleanUpSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 536,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_createOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "OverlayRef",
                    "typeParameters": [],
                    "line": 337,
                    "description": "<p>This method creates the overlay from the provided popover&#39;s template and saves its\nOverlayRef so that it can be attached to the DOM when openPopover is called.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_emitClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_emitOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_getOverlayConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "OverlayConfig",
                    "typeParameters": [],
                    "line": 357,
                    "description": "<p>This method builds the configuration object needed to create the overlay, the OverlayConfig.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 10457,
                                "end": 10464,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>OverlayConfig</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_getPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "ConnectedPositionStrategy",
                    "typeParameters": [],
                    "line": 404,
                    "description": "<p>This method builds the position strategy for the overlay, so the popover is properly connected\nto the trigger.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 12074,
                                "end": 12081,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>ConnectedPositionStrategy</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_handleMousedown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 219,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_initPopover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 288,
                    "description": "<p>This method sets the popover state to open and focuses the first item if\nthe popover was opened via the keyboard.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_invertHorizontalPos",
                    "args": [
                        {
                            "name": "x",
                            "type": "HorizontalConnectionPos"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 526,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "HorizontalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_invertVerticalPos",
                    "args": [
                        {
                            "name": "y",
                            "type": "VerticalConnectionPos"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 517,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "y",
                            "type": "VerticalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_resetPopover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 300,
                    "description": "<p>This method resets the popover when it&#39;s closed, most importantly restoring\nfocus to the popover trigger if the popover was opened via the keyboard.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_setIsPopoverOpen",
                    "args": [
                        {
                            "name": "isOpen",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 312,
                    "description": "<p>set state rather than toggle to support triggers sharing a popover </p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "isOpen",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_subscribeToBackdrop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 274,
                    "description": "<p>This method ensures that the popover closes when the overlay backdrop is clicked.\nWe do not use first() here because doing so would not catch clicks from within\nthe popover, and it would fail to unsubscribe properly. Instead, we unsubscribe\nexplicitly when the popover is closed or destroyed.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_subscribeToPanelEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 242,
                    "description": "<p>This method ensures that the popover</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "_subscribeToPositions",
                    "args": [
                        {
                            "name": "position",
                            "type": "ConnectedPositionStrategy"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 389,
                    "description": "<p>Listens to changes in the position of the overlay and sets the correct classes\non the popover based on the new position. This ensures the animation origin is always\ncorrect, even if a fallback position is used for the overlay.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "ConnectedPositionStrategy",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "closePopover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "description": "<p>Closes the popover. </p>\n",
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "destroyPopover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "description": "<p>Removes the popover from the DOM. </p>\n",
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "description": "<p>Focuses the popover trigger. </p>\n",
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "onMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "openPopover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "description": "<p>Opens the popover. </p>\n",
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                },
                {
                    "name": "togglePopover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "description": "<p>Toggles the popover between the open and closed states. </p>\n",
                    "inheritance": {
                        "file": "ALuPopoverTrigger"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "ALuPopoverTrigger",
            "accessors": {
                "placeholder": {
                    "name": "placeholder",
                    "setSignature": {
                        "name": "placeholder",
                        "type": "void",
                        "args": [
                            {
                                "name": "p",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "p",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 37
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 54,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "T | []",
                        "line": 51
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "d",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 77,
                        "jsdoctags": [
                            {
                                "name": "d",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "",
                        "returnType": "",
                        "line": 78
                    }
                },
                "_picker": {
                    "name": "_picker",
                    "setSignature": {
                        "name": "_picker",
                        "type": "void",
                        "args": [
                            {
                                "name": "picker",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 97,
                        "description": "<p>popover trigger class extension</p>\n",
                        "jsdoctags": [
                            {
                                "name": "picker",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "_picker",
                        "type": "",
                        "returnType": "",
                        "line": 102
                    }
                },
                "_clearer": {
                    "name": "_clearer",
                    "setSignature": {
                        "name": "_clearer",
                        "type": "void",
                        "args": [
                            {
                                "name": "clearer",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 103,
                        "jsdoctags": [
                            {
                                "name": "clearer",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "displayer": {
                    "name": "displayer",
                    "setSignature": {
                        "name": "displayer",
                        "type": "void",
                        "args": [
                            {
                                "name": "d",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 139,
                        "jsdoctags": [
                            {
                                "name": "d",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "displayContainer": {
                    "name": "displayContainer",
                    "setSignature": {
                        "name": "displayContainer",
                        "type": "void",
                        "args": [
                            {
                                "name": "vcr",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 143,
                        "jsdoctags": [
                            {
                                "name": "vcr",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "multiple": {
                    "name": "multiple",
                    "setSignature": {
                        "name": "multiple",
                        "type": "void",
                        "args": [
                            {
                                "name": "m",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 188,
                        "jsdoctags": [
                            {
                                "name": "m",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "multiple",
                        "type": "",
                        "returnType": "",
                        "line": 194
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ControlValueAccessor",
                "ILuInputWithPicker",
                "ILuInput"
            ]
        },
        {
            "name": "ALuSidepanelLabel",
            "id": "class-ALuSidepanelLabel-13487508a8a1ad8d9f99c0c75ad40548",
            "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel.translate.ts",
            "type": "class",
            "sourceCode": "import { ILuTranslation } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuSidepanelLabel {\r\n\tsubmit: string;\r\n\tcancel: string;\r\n}\r\nexport abstract class ALuSidepanelLabel {\r\n\tsubmit: string;\r\n\tcancel: string;\r\n}\r\n\r\nexport const luSidepanelTranslations = {\r\n\ten: {\r\n\t\tsubmit: 'Ok',\r\n\t\tcancel: 'Cancel',\r\n\t},\r\n\tfr: {\r\n\t\tsubmit: 'Ok',\r\n\t\tcancel: 'Annuler',\r\n\t},\r\n} as ILuTranslation<ILuSidepanelLabel>;\r\n",
            "properties": [
                {
                    "name": "cancel",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "submit",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ALuSidepanelRef",
            "id": "class-ALuSidepanelRef-e897a44b70b7aa8ac5be41cd80c6de6d",
            "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel-ref.model.ts",
            "type": "class",
            "sourceCode": "import { ILuSidepanelContent } from './sidepanel.model';\r\nimport { ILuModalRef, ALuModalRef } from '@lucca-front/ng/modal';\r\n\r\nexport interface ILuSidepanelRef<T extends ILuSidepanelContent = ILuSidepanelContent, D = any, R = any> extends ILuModalRef<T, D, R> {}\r\nexport abstract class ALuSidepanelRef<T extends ILuSidepanelContent = ILuSidepanelContent, D = any, R = any> extends ALuModalRef<T, D, R> implements ILuSidepanelRef<T, D, R> {}\r\n",
            "properties": [
                {
                    "name": "_componentRef",
                    "type": "ComponentRef<T>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_overlayRef",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_subs",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "onClose",
                    "defaultValue": "new Subject<R>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "onDismiss",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "onOpen",
                    "defaultValue": "new Subject<D>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_componentRef",
                    "type": "ComponentRef<T>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_overlayRef",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_subs",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "onClose",
                    "defaultValue": "new Subject<R>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "onDismiss",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "onOpen",
                    "defaultValue": "new Subject<D>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                }
            ],
            "methods": [
                {
                    "name": "_cleanSubscription",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_closePopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_completeSubjects",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_createOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "description": "<p>This method creates the overlay from the provided popover&#39;s template and saves its\nOverlayRef so that it can be attached to the DOM when openPopover is called.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_destroyOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_getOverlayConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "OverlayConfig",
                    "typeParameters": [],
                    "line": 73,
                    "description": "<p>This method builds the configuration object needed to create the overlay, the OverlayConfig.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2340,
                                "end": 2347,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>OverlayConfig</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_openPopup",
                    "args": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_subToCloseEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "result",
                            "type": "R",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "R",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "dismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_cleanSubscription",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_closePopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_completeSubjects",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_createOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "description": "<p>This method creates the overlay from the provided popover&#39;s template and saves its\nOverlayRef so that it can be attached to the DOM when openPopover is called.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_destroyOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_getOverlayConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "OverlayConfig",
                    "typeParameters": [],
                    "line": 73,
                    "description": "<p>This method builds the configuration object needed to create the overlay, the OverlayConfig.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2340,
                                "end": 2347,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>OverlayConfig</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_openPopup",
                    "args": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_subToCloseEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "result",
                            "type": "R",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "R",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "dismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "ALuModalRef",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuSidepanelRef"
            ]
        },
        {
            "name": "ALuTreeOptionItem",
            "id": "class-ALuTreeOptionItem-e476ad10b12d45cae3d6da8ed09fd3d2",
            "file": "packages/ng/libraries/option/src/lib/item/tree-option-item.model.ts",
            "type": "class",
            "sourceCode": "import { ILuOptionItem, ALuOptionItem } from './option-item.model';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface ILuTreeOptionItem<T = any> extends ILuOptionItem<T> {\r\n\tchildren: this[];\r\n\tallChildren: this[];\r\n\r\n\tonSelectSelf: Observable<this>;\r\n\tonSelectChildren: Observable<this>;\r\n}\r\nexport abstract class ALuTreeOptionItem<T = any>extends ALuOptionItem<T> implements ILuTreeOptionItem<T> {\r\n\tabstract children: this[];\r\n\tget allChildren(): this[] {\r\n\t\treturn this.children\r\n\t\t.map(c => [c, ...c.allChildren])\r\n\t\t.reduce((aggr, val) => [...aggr, ...val], []);\r\n\t}\r\n\tabstract onSelectSelf: Observable<this>;\r\n\tabstract onSelectChildren: Observable<this>;\r\n}\r\n",
            "properties": [
                {
                    "name": "children",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "onSelectChildren",
                    "type": "Observable<>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "onSelectSelf",
                    "type": "Observable<>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "element",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionItem"
                    }
                },
                {
                    "name": "highlighted",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionItem"
                    }
                },
                {
                    "name": "onSelect",
                    "type": "Observable<>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionItem"
                    }
                },
                {
                    "name": "selected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionItem"
                    }
                },
                {
                    "name": "value",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionItem"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "ALuOptionItem",
            "accessors": {
                "allChildren": {
                    "name": "allChildren",
                    "getSignature": {
                        "name": "allChildren",
                        "type": "[]",
                        "returnType": "[]",
                        "line": 13
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuTreeOptionItem"
            ]
        },
        {
            "name": "ALuTreeOptionItemLabel",
            "id": "class-ALuTreeOptionItemLabel-3f3aaf29fed7cf64112eb98ebdc8723e",
            "file": "packages/ng/libraries/option/src/lib/item/tree-option-item.translate.ts",
            "type": "class",
            "sourceCode": "import { ILuTranslation } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuTreeOptionItemLabel {\r\n\tparentOnly: string;\r\n\tchildrenOnly: string;\r\n}\r\nexport abstract class ALuTreeOptionItemLabel {\r\n\tparentOnly: string;\r\n\tchildrenOnly: string;\r\n}\r\n\r\nexport const luTreeOptionItemTranslations = {\r\n\ten: {\r\n\t\tparentOnly: 'Parent only',\r\n\t\tchildrenOnly: 'Children only',\r\n\t},\r\n\tfr: {\r\n\t\tparentOnly: 'Seulement le parent',\r\n\t\tchildrenOnly: 'Seulement les enfants',\r\n\t},\r\n} as ILuTranslation<ILuTreeOptionItemLabel>;\r\n",
            "properties": [
                {
                    "name": "childrenOnly",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "parentOnly",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ALuTreeOptionOperator",
            "id": "class-ALuTreeOptionOperator-19c48a2aa099b69be75b8ab46ed2b898",
            "file": "packages/ng/libraries/option/src/lib/operator/tree-option-operator.model.ts",
            "type": "class",
            "sourceCode": "import { ILuOptionOperator, ALuOptionOperator } from './option-operator.model';\r\nimport { ILuTree } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuTreeOptionOperator<T> extends ILuOptionOperator<ILuTree<T>> {}\r\n\r\nexport abstract class ALuTreeOptionOperator<T> extends ALuOptionOperator<ILuTree<T>> implements ILuTreeOptionOperator<T> {}\r\n",
            "properties": [
                {
                    "name": "inOptions$",
                    "type": "Observable<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionOperator"
                    }
                },
                {
                    "name": "outOptions$",
                    "type": "Observable<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionOperator"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "ALuOptionOperator",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuTreeOptionOperator"
            ]
        },
        {
            "name": "ALuTreeOptionPicker",
            "id": "class-ALuTreeOptionPicker-2d807d48707d5bbed50968c653c53c7e",
            "file": "packages/ng/libraries/option/src/lib/picker/tree-option-picker.model.ts",
            "type": "class",
            "sourceCode": "import { ILuOptionPickerPanel, ALuOptionPicker } from './option-picker.model';\r\nimport { ILuTreeOptionItem } from '../item/index';\r\n\r\nexport interface ILuTreeOptionPickerPanel<T = any, I extends ILuTreeOptionItem<T> = ILuTreeOptionItem<T>> extends ILuOptionPickerPanel<T, I> {}\r\n\r\nexport abstract class ALuTreeOptionPicker<T = any, I extends ILuTreeOptionItem<T> = ILuTreeOptionItem<T>> extends ALuOptionPicker<T, I> implements ILuTreeOptionPickerPanel<T, I> {\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "__options$",
                    "type": "Observable<O[]>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_subs",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_value",
                    "type": "T | T[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "onSelectValue",
                    "type": "Observable<T | []>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "optionComparer",
                    "defaultValue": "() => {...}",
                    "type": "LuOptionComparer<T>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "multiple",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "onSelectValue",
                    "type": "Observable<T | []>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_closeOnClick",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_contentClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_isOpen",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_keydownEventsSub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_overlayPaneClass",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "<p>Classes to be passed into the popover&#39;s overlay </p>\n",
                    "line": 96,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_panelClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_positionClassesMap",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_scrollStrategy",
                    "defaultValue": "'reposition'",
                    "type": "LuPopoverScrollStrategy",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_templateRef",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_trapFocus",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "close",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "hovered",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "open",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "panelId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "triggerId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_closeOnClick",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_contentClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_isOpen",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_keydownEventsSub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_overlayPaneClass",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "<p>Classes to be passed into the popover&#39;s overlay </p>\n",
                    "line": 96,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_panelClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_positionClassesMap",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_scrollStrategy",
                    "defaultValue": "'reposition'",
                    "type": "LuPopoverScrollStrategy",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_templateRef",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_trapFocus",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "close",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "hovered",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "open",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "panelId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "triggerId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "multiple",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "onSelectValue",
                    "type": "Observable<T | []>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_closeOnClick",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_contentClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_isOpen",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_keydownEventsSub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_overlayPaneClass",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "<p>Classes to be passed into the popover&#39;s overlay </p>\n",
                    "line": 96,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_panelClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_positionClassesMap",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_scrollStrategy",
                    "defaultValue": "'reposition'",
                    "type": "LuPopoverScrollStrategy",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_templateRef",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_trapFocus",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "close",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "hovered",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "open",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "panelId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "triggerId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_closeOnClick",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_contentClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_isOpen",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_keydownEventsSub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_overlayPaneClass",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "<p>Classes to be passed into the popover&#39;s overlay </p>\n",
                    "line": 96,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_panelClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_positionClassesMap",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_scrollStrategy",
                    "defaultValue": "'reposition'",
                    "type": "LuPopoverScrollStrategy",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_templateRef",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_trapFocus",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "close",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "hovered",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "open",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "panelId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "triggerId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                }
            ],
            "methods": [
                {
                    "name": "_applyHighlight",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_applySelected",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_emitSelectValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_handleKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_select",
                    "args": [
                        {
                            "name": "val",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_toggle",
                    "args": [
                        {
                            "name": "option",
                            "type": "O"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "O",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_emitCloseEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_emitHoveredEvent",
                    "args": [
                        {
                            "name": "hovered",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "hovered",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_emitOpenEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_handleKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "onMouseDown",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "description": "<p>does nothing but must be overridable </p>\n",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "description": "<p>Enables close of popover when mouse leaving popover element </p>\n",
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "onMouseOver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "description": "<p>TODO: Refactor when @angular/cdk includes feature I mentioned on github see link below.\n<a href=\"https://github.com/angular/material2/pull/5493#issuecomment-313085323\">https://github.com/angular/material2/pull/5493#issuecomment-313085323</a></p>\n",
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "setPositionClasses",
                    "args": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos"
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_emitCloseEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_emitHoveredEvent",
                    "args": [
                        {
                            "name": "hovered",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "hovered",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_emitOpenEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "_handleKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "onMouseDown",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "description": "<p>does nothing but must be overridable </p>\n",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "description": "<p>Enables close of popover when mouse leaving popover element </p>\n",
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "onMouseOver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "description": "<p>TODO: Refactor when @angular/cdk includes feature I mentioned on github see link below.\n<a href=\"https://github.com/angular/material2/pull/5493#issuecomment-313085323\">https://github.com/angular/material2/pull/5493#issuecomment-313085323</a></p>\n",
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "setPositionClasses",
                    "args": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos"
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuOptionPicker"
                    }
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_emitCloseEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_emitHoveredEvent",
                    "args": [
                        {
                            "name": "hovered",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "hovered",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_emitOpenEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_handleKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "onMouseDown",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "description": "<p>does nothing but must be overridable </p>\n",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "description": "<p>Enables close of popover when mouse leaving popover element </p>\n",
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "onMouseOver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "description": "<p>TODO: Refactor when @angular/cdk includes feature I mentioned on github see link below.\n<a href=\"https://github.com/angular/material2/pull/5493#issuecomment-313085323\">https://github.com/angular/material2/pull/5493#issuecomment-313085323</a></p>\n",
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "setPositionClasses",
                    "args": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos"
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_emitCloseEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_emitHoveredEvent",
                    "args": [
                        {
                            "name": "hovered",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "hovered",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_emitOpenEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_handleKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onMouseDown",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "description": "<p>does nothing but must be overridable </p>\n",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "description": "<p>Enables close of popover when mouse leaving popover element </p>\n",
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onMouseOver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "description": "<p>TODO: Refactor when @angular/cdk includes feature I mentioned on github see link below.\n<a href=\"https://github.com/angular/material2/pull/5493#issuecomment-313085323\">https://github.com/angular/material2/pull/5493#issuecomment-313085323</a></p>\n",
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "setPositionClasses",
                    "args": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos"
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "ALuOptionPicker",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuTreeOptionPickerPanel"
            ]
        },
        {
            "name": "ALuTreeOptionSelector",
            "id": "class-ALuTreeOptionSelector-fdc207480ffb26f11920d62d2a1d2689",
            "file": "packages/ng/libraries/option/src/lib/selector/tree-option-selector.model.ts",
            "type": "class",
            "sourceCode": "import { ILuOptionSelector, ALuOptionSelector } from './option-selector.model';\r\n\r\nexport interface ILuTreeOptionSelector<T = any> extends ILuOptionSelector {}\r\nexport abstract class ALuTreeOptionSelector<T = any> extends ALuOptionSelector implements ILuTreeOptionSelector<T> {}\r\n",
            "properties": [
                {
                    "name": "multiple",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "ALuOptionSelector"
                    }
                },
                {
                    "name": "onSelectValue",
                    "type": "Observable<T | []>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionSelector"
                    }
                }
            ],
            "methods": [
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuOptionSelector"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "ALuOptionSelector",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuTreeOptionSelector"
            ]
        },
        {
            "name": "ALuUserHomonymsService",
            "id": "class-ALuUserHomonymsService-de93a27f0f8719fcb3da3cf0fa613579",
            "file": "packages/ng/libraries/user/src/lib/select/homonyms/user-homonyms.service.ts",
            "type": "class",
            "sourceCode": "import { ILuUser } from '../../user.model';\r\nimport { Observable, of } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { LuUserDisplayPipe, LuDisplayFullname } from '../../display/index';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\n\r\ninterface IV3CollectionResponse<T = any> {\r\n\tdata: { items: T[] };\r\n}\r\n\r\nexport interface ILuUserHomonymsService<U extends ILuUser = ILuUser> {\r\n\textractHomonyms(users: U[]): U[];\r\n\tenrichHomonyms(homonyms: U[]): Observable<U[]>;\r\n}\r\n\r\nexport abstract class ALuUserHomonymsService<U extends ILuUser = ILuUser> implements ILuUserHomonymsService<U> {\r\n\tabstract extractHomonyms(users: U[]): U[];\r\n\tabstract enrichHomonyms(homonyms: U[]): Observable<U[]>;\r\n}\r\n@Injectable()\r\nexport class LuUserHomonymsService<U extends ILuUser = ILuUser> extends ALuUserHomonymsService<U> implements ILuUserHomonymsService<U> {\r\n\tprivate _format = LuDisplayFullname.lastfirst;\r\n\textractHomonyms(users: U[]): U[] {\r\n\t\tconst namesCount = {} as { [key: string]: number};\r\n\t\tusers.forEach(user => {\r\n\t\t\tconst name = this._pipe.transform(user, this._format);\r\n\t\t\tconst count = namesCount[name] || 0;\r\n\t\t\tnamesCount[name] = count + 1;\r\n\t\t});\r\n\r\n\t\tconst nonUniqNames = Object.keys(namesCount)\r\n\t\t.filter(key => namesCount[key] > 1);\r\n\r\n\t\tconst homonyms = [] as U[];\r\n\t\tnonUniqNames.forEach(name => {\r\n\t\t\thomonyms.push(...users.filter(u => name === this._pipe.transform(u, this._format)));\r\n\t\t});\r\n\t\treturn homonyms;\r\n\t}\r\n\r\n\tenrichHomonyms(homonyms: U[]): Observable<U[]> {\r\n\t\tif (!homonyms || homonyms.length === 0) { return of([]); }\r\n\t\treturn this._http.get<IV3CollectionResponse<{ id: number, department: { name: string }}>>(`/api/v3/users`, { params: {\r\n\t\t\t'id': homonyms.map(u => u.id).join(','),\r\n\t\t\t'fields': 'id,department.name',\r\n\t\t}}).pipe(\r\n\t\t\tmap(res => res.data.items as { id: number, department?: { name: string }}[]),\r\n\t\t\tmap(infos => infos.map(info => {\r\n\t\t\t\t\tconst homonym = homonyms.find(h => h.id === info.id);\r\n\t\t\t\t\treturn { ...homonym, additionalInformation: info.department ? info.department.name : '' } as U;\r\n\t\t\t\t}) as U[]\r\n\t\t\t),\r\n\t\t\tcatchError(err => of([])),\r\n\t\t);\r\n\t}\r\n\tconstructor(\r\n\t\tprivate _pipe: LuUserDisplayPipe,\r\n\t\tprivate _http: HttpClient,\r\n\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "enrichHomonyms",
                    "args": [
                        {
                            "name": "homonyms",
                            "type": "U[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<U[]>",
                    "typeParameters": [],
                    "line": 19,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "homonyms",
                            "type": "U[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "extractHomonyms",
                    "args": [
                        {
                            "name": "users",
                            "type": "U[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "U[]",
                    "typeParameters": [],
                    "line": 18,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "users",
                            "type": "U[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuUserHomonymsService"
            ]
        },
        {
            "name": "ALuUserSearcherLabel",
            "id": "class-ALuUserSearcherLabel-d83a9f04486f7606ac0992af50a4ab2e",
            "file": "packages/ng/libraries/user/src/lib/select/searcher/user-searcher.translate.ts",
            "type": "class",
            "sourceCode": "import { ILuTranslation } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuUserSearcherLabel {\r\n\tincludeFormerEmployees: string;\r\n}\r\nexport abstract class ALuUserSearcherLabel {\r\n\tincludeFormerEmployees: string;\r\n}\r\n\r\nexport const luUserSearcherTranslations = {\r\n\ten: {\r\n\t\tincludeFormerEmployees: 'Include former employees',\r\n\t},\r\n\tfr: {\r\n\t\tincludeFormerEmployees: 'Inclure les salariés partis',\r\n\t},\r\n} as ILuTranslation<ILuUserSearcherLabel>;\r\n",
            "properties": [
                {
                    "name": "includeFormerEmployees",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ALuUserSelectInputLabel",
            "id": "class-ALuUserSelectInputLabel-bd4132548ba8fbf068a6ffd3fd4033b4",
            "file": "packages/ng/libraries/user/src/lib/select/input/user-select-input.translate.ts",
            "type": "class",
            "sourceCode": "import { ILuTranslation } from '@lucca-front/ng/core';\r\n\r\nexport interface ILuUserSelectInputLabel {\r\n\tusers: string;\r\n\tme: string;\r\n}\r\nexport abstract class ALuUserSelectInputLabel {\r\n\tusers: string;\r\n\tme: string;\r\n}\r\n\r\nexport const luUserSelectInputTranslations = {\r\n\ten: {\r\n\t\tusers: 'users',\r\n\t\tme: 'Me:'\r\n\t},\r\n\tfr: {\r\n\t\tusers: 'utilisateurs',\r\n\t\tme: 'Moi :'\r\n\t},\r\n} as ILuTranslation<ILuUserSelectInputLabel>;\r\n",
            "properties": [
                {
                    "name": "me",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "users",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ALuUserService",
            "id": "class-ALuUserService-3b4866e6fb496adac7d46d827e9638de",
            "file": "packages/ng/libraries/user/src/lib/service/user-service.model.ts",
            "type": "class",
            "sourceCode": "import { ILuUser } from '../user.model';\r\nimport { ILuApiService, ALuApiService } from '@lucca-front/ng/api';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface ILuUserService<U extends ILuUser = ILuUser> extends ILuApiService<U> {\r\n\tgetMe(): Observable<U>;\r\n}\r\n\r\nexport abstract class ALuUserService<U extends ILuUser = ILuUser> extends ALuApiService<U> implements ILuUserService<U> {\r\n\tabstract getMe(): Observable<U>;\r\n}",
            "properties": [],
            "methods": [
                {
                    "name": "getMe",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<U>",
                    "typeParameters": [],
                    "line": 10,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "searchAll",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                },
                {
                    "name": "searchPaged",
                    "args": [
                        {
                            "name": "clue",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "string[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuApiService"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "ALuApiService",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuUserService"
            ]
        },
        {
            "name": "DayItem",
            "id": "class-DayItem-ab8ec4d7490bc3ee224f7aae4ca891f0",
            "file": "packages/ng/libraries/date/src/lib/calendar/calendar-item.class.ts",
            "type": "class",
            "sourceCode": "import { ICalendarItem } from './calendar-item.interface';\r\nimport { ELuDateGranularity } from '@lucca-front/ng/core';\r\n\r\nexport abstract class ACalendarItem<D> implements ICalendarItem<D> {\r\n\tget id() { return `${this.granularity}-${this.date.toString()}`; }\r\n\tdate: D;\r\n\tmods: string[] = [];\r\n\tisDisabled: boolean = false;\r\n\tlabel: string;\r\n\treadonly granularity: ELuDateGranularity;\r\n}\r\nexport class DayItem<D> extends ACalendarItem<D> implements ICalendarItem<D> {\r\n\treadonly granularity = ELuDateGranularity.day;\r\n\tconstructor(\r\n\t\tpublic date: D,\r\n\t\tpublic label: string,\r\n\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\nexport class MonthItem<D> extends ACalendarItem<D> implements ICalendarItem<D> {\r\n\treadonly granularity = ELuDateGranularity.month;\r\n\tconstructor(\r\n\t\tpublic date: D,\r\n\t\tpublic label: string,\r\n\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\nexport class YearItem<D> extends ACalendarItem<D> implements ICalendarItem<D> {\r\n\treadonly granularity = ELuDateGranularity.year;\r\n\tconstructor(\r\n\t\tpublic date: D,\r\n\t\tpublic label: string,\r\n\t\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\nexport class DecadeItem<D> extends ACalendarItem<D> implements ICalendarItem<D> {\r\n\treadonly granularity = ELuDateGranularity.decade;\r\n\tconstructor(\r\n\t\tpublic date: D,\r\n\t\tpublic label: string,\r\n\t\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "D"
                    },
                    {
                        "name": "label",
                        "type": "string"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "D",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "label",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "date",
                    "type": "D",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "granularity",
                    "defaultValue": "ELuDateGranularity.day",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "date",
                    "type": "D",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "ACalendarItem"
                    }
                },
                {
                    "name": "granularity",
                    "type": "ELuDateGranularity",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        132
                    ],
                    "inheritance": {
                        "file": "ACalendarItem"
                    }
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "ACalendarItem"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "ACalendarItem"
                    }
                },
                {
                    "name": "mods",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "ACalendarItem"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "ACalendarItem",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ICalendarItem"
            ]
        },
        {
            "name": "DecadeItem",
            "id": "class-DecadeItem-ab8ec4d7490bc3ee224f7aae4ca891f0",
            "file": "packages/ng/libraries/date/src/lib/calendar/calendar-item.class.ts",
            "type": "class",
            "sourceCode": "import { ICalendarItem } from './calendar-item.interface';\r\nimport { ELuDateGranularity } from '@lucca-front/ng/core';\r\n\r\nexport abstract class ACalendarItem<D> implements ICalendarItem<D> {\r\n\tget id() { return `${this.granularity}-${this.date.toString()}`; }\r\n\tdate: D;\r\n\tmods: string[] = [];\r\n\tisDisabled: boolean = false;\r\n\tlabel: string;\r\n\treadonly granularity: ELuDateGranularity;\r\n}\r\nexport class DayItem<D> extends ACalendarItem<D> implements ICalendarItem<D> {\r\n\treadonly granularity = ELuDateGranularity.day;\r\n\tconstructor(\r\n\t\tpublic date: D,\r\n\t\tpublic label: string,\r\n\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\nexport class MonthItem<D> extends ACalendarItem<D> implements ICalendarItem<D> {\r\n\treadonly granularity = ELuDateGranularity.month;\r\n\tconstructor(\r\n\t\tpublic date: D,\r\n\t\tpublic label: string,\r\n\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\nexport class YearItem<D> extends ACalendarItem<D> implements ICalendarItem<D> {\r\n\treadonly granularity = ELuDateGranularity.year;\r\n\tconstructor(\r\n\t\tpublic date: D,\r\n\t\tpublic label: string,\r\n\t\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\nexport class DecadeItem<D> extends ACalendarItem<D> implements ICalendarItem<D> {\r\n\treadonly granularity = ELuDateGranularity.decade;\r\n\tconstructor(\r\n\t\tpublic date: D,\r\n\t\tpublic label: string,\r\n\t\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "D"
                    },
                    {
                        "name": "label",
                        "type": "string"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "D",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "label",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "date",
                    "type": "D",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "granularity",
                    "defaultValue": "ELuDateGranularity.decade",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "date",
                    "type": "D",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "ACalendarItem"
                    }
                },
                {
                    "name": "granularity",
                    "type": "ELuDateGranularity",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        132
                    ],
                    "inheritance": {
                        "file": "ACalendarItem"
                    }
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "ACalendarItem"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "ACalendarItem"
                    }
                },
                {
                    "name": "mods",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "ACalendarItem"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "ACalendarItem",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ICalendarItem"
            ]
        },
        {
            "name": "LowerCaseUrlSerializer",
            "id": "class-LowerCaseUrlSerializer-6c0e991e0b9ef201740fbdb0415c1a85",
            "file": "packages/ng/applications/sandbox/src/app/issues/issues.router.ts",
            "type": "class",
            "sourceCode": "import { Routes, UrlSerializer, DefaultUrlSerializer, UrlTree } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { IssuesComponent, ISSUES_INDEX_TOKEN } from './issues.component';\n\n/*tslint:disable*/\nconst routes: Routes = [\n\t{ path: '', component: IssuesComponent },\n\n\t{ path: 'date-calendar', loadChildren: () => \"import('./date-calendar').then(m => m.DateCalendarModule)\" },\n\t{ path: 'date-input', loadChildren: () => \"import('./date-input').then(m => m.DateInputModule)\" },\n\t{ path: 'date-minmax', loadChildren: () => \"import('./date-minmax').then(m => m.DateMinmaxModule)\" },\n\t{ path: 'date-picker', loadChildren: () => \"import('./date-picker').then(m => m.DatePickerModule)\" },\n\t{ path: 'date-select', loadChildren: () => \"import('./date-select').then(m => m.DateSelectModule)\" },\n\t{ path: 'date-utc', loadChildren: () => \"import('./date-utc').then(m => m.DateUtcModule)\" },\n\t{ path: 'department-select', loadChildren: () => \"import('./department-select').then(m => m.DepartmentSelectModule)\" },\n\t{ path: 'fix-472', loadChildren: () => \"import('./fix-472').then(m => m.Fix472Module)\" },\n\t{ path: 'fix-705-select-enter', loadChildren: () => \"import('./fix-705-select-enter').then(m => m.Fix705SelectEnterModule)\" },\n\t{ path: 'fix-modal', loadChildren: () => \"import('./fix-modal').then(m => m.FixModalModule)\" },\n\t{ path: 'formly-framed', loadChildren: () => \"import('./formly-framed').then(m => m.FormlyFramedModule)\" },\n\t{ path: 'formly-wrappers', loadChildren: () => \"import('./formly-wrappers').then(m => m.FormlyWrappersModule)\" },\n\t{ path: 'formly', loadChildren: () => \"import('./formly').then(m => m.FormlyModule)\" },\n\t{ path: 'ivy-api-select', loadChildren: () => \"import('./ivy-api-select').then(m => m.IvyApiSelectModule)\" },\n\t{ path: 'ivy-option-picker', loadChildren: () => \"import('./ivy-option-picker').then(m => m.IvyOptionPickerModule)\" },\n\t{ path: 'ivy-tree', loadChildren: () => \"import('./ivy-tree').then(m => m.IvyTreeModule)\" },\n\t{ path: 'modal-dismiss', loadChildren: () => \"import('./modal-dismiss').then(m => m.ModalDismissModule)\" },\n\t{ path: 'modal-synched', loadChildren: () => \"import('./modal-synched').then(m => m.ModalSynchedModule)\" },\n\t{ path: 'modals-no-submit', loadChildren: () => \"import('./modals-no-submit').then(m => m.ModalsNoSubmitModule)\" },\n\t{ path: 'node-sass-end', loadChildren: () => \"import('./node-sass-end').then(m => m.NodeSassEndModule)\" },\n\t{ path: 'option-comparer', loadChildren: () => \"import('./option-comparer').then(m => m.OptionComparerModule)\" },\n\t{ path: 'option-selector', loadChildren: () => \"import('./option-selector').then(m => m.OptionSelectorModule)\" },\n\t{ path: 'picker-structure', loadChildren: () => \"import('./picker-structure').then(m => m.PickerStructureModule)\" },\n\t{ path: 'poc-modal', loadChildren: () => \"import('./poc-modal').then(m => m.PocModalModule)\" },\n\t{ path: 'poc-popup', loadChildren: () => \"import('./poc-popup').then(m => m.PocPopupModule)\" },\n\t{ path: 'poc-translate', loadChildren: () => \"import('./poc-translate').then(m => m.PocTranslateModule)\" },\n\t{ path: 'poc-tree', loadChildren: () => \"import('./poc-tree').then(m => m.PocTreeModule)\" },\n\t{ path: 'refacto-overlay-advanced', loadChildren: () => \"import('./refacto-overlay-advanced').then(m => m.RefactoOverlayAdvancedModule)\" },\n\t{ path: 'refacto-overlays-reposition', loadChildren: () => \"import('./refacto-overlays-reposition').then(m => m.RefactoOverlaysRepositionModule)\" },\n\t{ path: 'refacto-overlays-tooltip', loadChildren: () => \"import('./refacto-overlays-tooltip').then(m => m.RefactoOverlaysTooltipModule)\" },\n\t{ path: 'refacto-overlays', loadChildren: () => \"import('./refacto-overlays').then(m => m.RefactoOverlaysModule)\" },\n\t{ path: 'refacto-tooltip', loadChildren: () => \"import('./refacto-tooltip').then(m => m.RefactoTooltipModule)\" },\n\t{ path: 'refactor-api-select', loadChildren: () => \"import('./refactor-api-select').then(m => m.RefactorApiSelectModule)\" },\n\t{ path: 'refactor-select', loadChildren: () => \"import('./refactor-select').then(m => m.RefactorSelectModule)\" },\n\t{ path: 'select-overlap', loadChildren: () => \"import('./select-overlap').then(m => m.SelectOverlapModule)\" },\n\t{ path: 'sidepanel', loadChildren: () => \"import('./sidepanel').then(m => m.SidepanelModule)\" },\n\t{ path: 'split-operators-api', loadChildren: () => \"import('./split-operators-api').then(m => m.SplitOperatorsApiModule)\" },\n\t{ path: 'split-operators', loadChildren: () => \"import('./split-operators').then(m => m.SplitOperatorsModule)\" },\n\t{ path: 'split-option-picker-api-auser', loadChildren: () => \"import('./split-option-picker-api-auser').then(m => m.SplitOptionPickerApiAuserModule)\" },\n\t{ path: 'split-option-picker', loadChildren: () => \"import('./split-option-picker').then(m => m.SplitOptionPickerModule)\" },\n\t{ path: 'split-select', loadChildren: () => \"import('./split-select').then(m => m.SplitSelectModule)\" },\n\t{ path: 'tree-picker-advanced', loadChildren: () => \"import('./tree-picker-advanced').then(m => m.TreePickerAdvancedModule)\" },\n\t{ path: 'user-select-homonyms', loadChildren: () => \"import('./user-select-homonyms').then(m => m.UserSelectHomonymsModule)\" },\n\t{ path: 'user-select-translate', loadChildren: () => \"import('./user-select-translate').then(m => m.UserSelectTranslateModule)\" },\n\t{ path: 'popover-accessible', loadChildren: () => \"import('./popover-accessible').then(m => m.PopoverAccessibleModule)\" },\n\t{ path: 'modal-undismissable', loadChildren: () => \"import('./modal-undismissable').then(m => m.ModalUndismissableModule)\" },\n\t{ path: 'dropdown', loadChildren: () => \"import('./dropdown').then(m => m.DropdownModule)\" },\n\t{ path: 'date-string', loadChildren: () => \"import('./date-string').then(m => m.DateStringModule)\" },\n\t{ path: 'select-me-first', loadChildren: () => \"import('./select-me-first').then(m => m.SelectMeFirstModule)\" },\n\t{ path: 'style-select-chips', loadChildren: () => \"import('./style-select-chips').then(m => m.StyleSelectChipsModule)\" },\n\t{ path: 'option-groupby', loadChildren: () => \"import('./option-groupby').then(m => m.OptionGroupbyModule)\" },\n\t{ path: 'select-option-placeholder', loadChildren: () => \"import('./select-option-placeholder').then(m => m.SelectOptionPlaceholderModule)\" },\n\t{ path: 'date-picker-width', loadChildren: () => \"import('./date-picker-width').then(m => m.DatePickerWidthModule)\" },\n\t{ path: 'date-granularity', loadChildren: () => \"import('./date-granularity').then(m => m.DateGranularityModule)\" },\n\t{ path: 'overlays-events', loadChildren: () => \"import('./overlays-events').then(m => m.OverlaysEventsModule)\" },\n\t{ path: 'former-employees', loadChildren: () => \"import('./former-employees').then(m => m.FormerEmployeesModule)\" },\n\t{ path: 'establishment', loadChildren: () => \"import('./establishment').then(m => m.EstablishmentModule)\" },\n\t{ path: 'api-v4', loadChildren: () => \"import('./api-v4').then(m => m.ApiV4Module)\" },\n\t{ path: 'drag-drop', loadChildren: () => \"import('./drag-drop').then(m => m.DragDropModule)\" },\n\t{ path: 'modal-a11y', loadChildren: () => \"import('./modal-a11y').then(m => m.ModalA11yModule)\" },\n\t{ path: 'date-select-enh', loadChildren: () => \"import('./date-select-enh').then(m => m.DateSelectEnhModule)\" },\n\t{ path: 'comm-in-app-modal', loadChildren: () => \"import('./comm-in-app-modal').then(m => m.CommInAppModalModule)\" },\r\n];\n/*tslint:enable*/\nconst issues = [ ...routes].map(r => r.path);\nissues.shift();\n\nexport class LowerCaseUrlSerializer extends DefaultUrlSerializer {\n\tparse(url: string): UrlTree {\n\t\treturn super.parse(url.toLowerCase());\n\t}\n}\n@NgModule({\n\timports: [\n\t\tRouterModule.forChild(routes),\n\t\tCommonModule,\n\t],\n\tdeclarations: [\n\t\tIssuesComponent,\n\t],\n\texports: [\n\t\tRouterModule,\n\t],\n\tproviders: [\n\t\t{ provide: ISSUES_INDEX_TOKEN, useValue: issues },\n\t\t{ provide: UrlSerializer, useClass: LowerCaseUrlSerializer },\n\t]\n})\nexport class IssuesRouter { }\n",
            "properties": [],
            "methods": [
                {
                    "name": "parse",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "UrlTree",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "DefaultUrlSerializer",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LuForGroupContext",
            "id": "class-LuForGroupContext-e76db5c4deed2f715821f79353484afa",
            "file": "packages/ng/libraries/option/src/lib/operator/for-groups/for-groups.directive.ts",
            "type": "class",
            "sourceCode": "import { ChangeDetectorRef, Directive, forwardRef, Input, OnDestroy, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { ALuOptionOperator, ILuOptionOperator } from '../option-operator.model';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { ILuGroup } from '@lucca-front/ng/core';\r\n\r\n\r\nexport class LuForGroupContext<T> {\r\n\tpublic constructor(\r\n\t\tpublic $implicit: T,\r\n\t\tpublic index: number,\r\n\t\tpublic count: number,\r\n\t) {}\r\n\r\n\tpublic get first(): boolean { return this.index === 0; }\r\n\r\n\tpublic get last(): boolean { return this.index === this.count - 1; }\r\n\r\n\tpublic get even(): boolean { return this.index % 2 === 0; }\r\n\r\n\tpublic get odd(): boolean { return !this.even; }\r\n}\r\n\r\n@Directive({\r\n\tselector: '[luForGroups]',\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuForGroupsDirective),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuForGroupsDirective<TItem = any, TKey = any> implements ILuOptionOperator<TItem>, OnDestroy {\r\n\toutOptions$?: Observable<TItem[]>;\r\n\r\n\tprivate _groupByFn: (item: TItem) => TKey;\r\n\t@Input('luForGroupsGroupBy')\r\n\tpublic set attrGroupBy(fn: (item: TItem) => TKey) {\r\n\t\tthis._groupByFn = fn;\r\n\t}\r\n\r\n\tprotected _subs = new Subscription();\r\n\tpublic set inOptions$(options$: Observable<TItem[]>) {\r\n\t\tthis._subs.add(\r\n\t\t\toptions$.subscribe(options => this.render(options))\r\n\t\t);\r\n\t\tthis.outOptions$ = options$;\r\n\t}\r\n\r\n\tpublic constructor(\r\n\t\tprotected _vcr: ViewContainerRef,\r\n\t\tprotected _cdr: ChangeDetectorRef,\r\n\t\tprotected _templateRef: TemplateRef<LuForGroupContext<ILuGroup<TItem, TKey>>>,\r\n\t) {}\r\n\r\n\tpublic ngOnDestroy(): void {\r\n\t\tthis._subs.unsubscribe();\r\n\t}\r\n\r\n\tpublic render(options: TItem[]): void {\r\n\t\tthis._vcr.clear();\r\n\t\tconst count = options.length;\r\n\t\tconst groups = this.groupBy(options);\r\n\t\tgroups.forEach((group, index) => {\r\n\t\t\tconst view = this._vcr.createEmbeddedView(this._templateRef, new LuForGroupContext<ILuGroup<TItem, TKey>>(group, index, count));\r\n\t\t});\r\n\t\tthis._cdr.markForCheck();\r\n\t}\r\n\r\n\tprotected groupBy(items: TItem[]): ILuGroup<TItem, TKey>[] {\r\n\t\tconst groups: ILuGroup<TItem, TKey>[] = [];\r\n\t\titems.forEach((item) => {\r\n\t\t\tconst key = this._groupByFn(item);\r\n\t\t\tlet group = groups.find(g => g.key === key);\r\n\t\t\tif (!group) {\r\n\t\t\t\tgroup = { key: key, items: [] };\r\n\t\t\t\tgroups.push(group);\r\n\t\t\t}\r\n\t\t\tgroup.items.push(item);\r\n\t\t});\r\n\t\treturn groups;\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "$implicit",
                        "type": "T"
                    },
                    {
                        "name": "index",
                        "type": "number"
                    },
                    {
                        "name": "count",
                        "type": "number"
                    }
                ],
                "line": 7,
                "modifierKind": [
                    114
                ],
                "jsdoctags": [
                    {
                        "name": "$implicit",
                        "type": "T",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "index",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "count",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "$implicit",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "count",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "index",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "first": {
                    "name": "first",
                    "getSignature": {
                        "name": "first",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 14
                    }
                },
                "last": {
                    "name": "last",
                    "getSignature": {
                        "name": "last",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 16
                    }
                },
                "even": {
                    "name": "even",
                    "getSignature": {
                        "name": "even",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 18
                    }
                },
                "odd": {
                    "name": "odd",
                    "getSignature": {
                        "name": "odd",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 20
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LuInputDisplayerContext",
            "id": "class-LuInputDisplayerContext-1f25b9ac48de9062356adcb7511ba8a3",
            "file": "packages/ng/libraries/input/src/lib/displayer/input-displayer.directive.ts",
            "type": "class",
            "sourceCode": "import { Directive, TemplateRef, forwardRef, ElementRef, ViewRef, EmbeddedViewRef, Input } from '@angular/core';\r\nimport { ILuInputDisplayer, ALuInputDisplayer } from './input-displayer.model';\r\n\r\n@Directive({\r\n\tselector: '[luDisplayer]',\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuInputDisplayer,\r\n\t\t\tuseExisting: forwardRef(() => LuInputDisplayerDirective),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuInputDisplayerDirective<T = any> extends ALuInputDisplayer<T> implements ILuInputDisplayer<T> {\r\n\t@Input('luDisplayerMultiple') set argMultiple(m: boolean) {\r\n\t\tthis.multiple = !!m;\r\n\t}\r\n\t@Input('multiple') set inputMultiple(m: boolean | string) {\r\n\t\tif (m === '') {\r\n\t\t\t// allows to have multiple = true when writing\r\n\t\t\t// <ng-template luDisplayer multiple>\r\n\t\t\tthis.multiple = true;\r\n\t\t} else {\r\n\t\t\tthis.multiple = !!m;\r\n\t\t}\r\n\t}\r\n\tconstructor(protected template: TemplateRef<LuInputDisplayerContext<T>>) { super(); }\r\n\tgetViewRef(value: T | T[]): ViewRef {\r\n\t\treturn this.template.createEmbeddedView({ $implicit: value });\r\n\t}\r\n}\r\n\r\nexport class LuInputDisplayerContext<T = any> {\r\n\tconstructor(public $implicit: T | T[]) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "$implicit",
                        "type": "T | T[]"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "$implicit",
                        "type": "T | T[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "$implicit",
                    "type": "T | T[]",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LuModalRef",
            "id": "class-LuModalRef-2caad8bc36c6ae441d6c17b92d43303f",
            "file": "packages/ng/libraries/modal/src/lib/modal-ref.factory.ts",
            "type": "class",
            "sourceCode": "import { ALuPopupRef, ILuPopupRefFactory } from '@lucca-front/ng/popup';\r\nimport { Overlay, ComponentType } from '@angular/cdk/overlay';\r\nimport { Injector, Injectable, ComponentRef, ChangeDetectionStrategy } from '@angular/core';\r\nimport { ILuModalContent } from './modal.model';\r\nimport { ILuModalRef, ALuModalRef } from './modal-ref.model';\r\nimport { LuModalPanelComponent, LuModalPanelComponentDefaultCD } from './modal-panel.component';\r\nimport { PortalOutlet, PortalInjector, ComponentPortal } from '@angular/cdk/portal';\r\nimport { ILuModalConfig } from './modal-config.model';\r\nimport { LU_MODAL_DATA } from './modal.token';\r\n\r\nclass LuModalRef<T extends ILuModalContent = ILuModalContent, D = any, R = any> extends ALuPopupRef<T, D, R> implements ILuModalRef<T, D, R> {\r\n\tprotected _containerRef: ComponentRef<LuModalPanelComponent>;\r\n\tprotected _containerOutlet: PortalOutlet;\r\n\tconstructor(\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _injector: Injector,\r\n\t\tprotected _component: ComponentType<T>,\r\n\t\tprotected _config: ILuModalConfig,\r\n\t) {\r\n\t\tsuper(_overlay, _injector, _component, _config);\r\n\t}\r\n\tprotected _openPopup(data?: D) {\r\n\t\tconst injectionMap = new WeakMap();\r\n\t\tinjectionMap.set(ALuModalRef, this);\r\n\t\tinjectionMap.set(LU_MODAL_DATA, data);\r\n\t\tconst injector = new PortalInjector(this._injector, injectionMap);\r\n\t\tif (this._config.changeDetection === ChangeDetectionStrategy.OnPush) {\r\n\t\t\tconst containerPortal = new ComponentPortal(LuModalPanelComponent, undefined, injector);\r\n\t\t\tthis._containerRef = this._overlayRef.attach<LuModalPanelComponent>(containerPortal);\r\n\t\t} else {\r\n\t\t\tconst containerPortal = new ComponentPortal(LuModalPanelComponentDefaultCD, undefined, injector);\r\n\t\t\tthis._containerRef = this._overlayRef.attach<LuModalPanelComponent>(containerPortal);\r\n\t\t}\r\n\t\tthis._containerOutlet = this._containerRef.instance;\r\n\t\tconst portal = new ComponentPortal(this._component, undefined, injector);\r\n\t\tthis._componentRef = this._containerOutlet.attach(portal) as ComponentRef<T>;\r\n\t}\r\n\tprotected _closePopup() {\r\n\t\tthis._componentRef.destroy();\r\n\t\tthis._containerRef.destroy();\r\n\t}\r\n}\r\n\r\n@Injectable()\r\nexport class LuModalRefFactory implements ILuPopupRefFactory<ILuModalContent, ILuModalConfig> {\r\n\tconstructor(\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _injector: Injector,\r\n\t) {}\r\n\tforge<T extends ILuModalContent, C extends ILuModalConfig>(component: ComponentType<T>, config: C) {\r\n\t\treturn new LuModalRef(this._overlay, this._injector, component, config);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "_injector",
                        "type": "Injector"
                    },
                    {
                        "name": "_component",
                        "type": "ComponentType<T>"
                    },
                    {
                        "name": "_config",
                        "type": "ILuModalConfig"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_component",
                        "type": "ComponentType<T>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_config",
                        "type": "ILuModalConfig",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_containerOutlet",
                    "type": "PortalOutlet",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_containerRef",
                    "type": "ComponentRef<LuModalPanelComponent>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_componentRef",
                    "type": "ComponentRef<T>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_overlayRef",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_subs",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "onClose",
                    "defaultValue": "new Subject<R>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "onDismiss",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "onOpen",
                    "defaultValue": "new Subject<D>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                }
            ],
            "methods": [
                {
                    "name": "_closePopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_openPopup",
                    "args": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_cleanSubscription",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_closePopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_completeSubjects",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_createOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "description": "<p>This method creates the overlay from the provided popover&#39;s template and saves its\nOverlayRef so that it can be attached to the DOM when openPopover is called.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_destroyOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_getOverlayConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "OverlayConfig",
                    "typeParameters": [],
                    "line": 73,
                    "description": "<p>This method builds the configuration object needed to create the overlay, the OverlayConfig.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2340,
                                "end": 2347,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>OverlayConfig</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_openPopup",
                    "args": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_subToCloseEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "result",
                            "type": "R",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "R",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "dismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "ALuPopupRef",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuModalRef"
            ]
        },
        {
            "name": "LuPopoverTarget",
            "id": "class-LuPopoverTarget-2aab5bad871ef6a1264eba116f8b3e84",
            "file": "packages/ng/libraries/popover/src/lib/target/popover-target.model.ts",
            "type": "class",
            "sourceCode": "import { ElementRef } from '@angular/core';\r\nimport { throwLuPopoverInvalidAlignement, throwLuPopoverInvalidPosition } from './popover-target.error';\r\n\r\nexport type LuPopoverPosition = 'above' | 'below' | 'before' | 'after';\r\nexport type LuPopoverAlignment = 'top' | 'bottom' | 'left' | 'right' | 'center';\r\n\r\n/**\r\n * anchor for a popover panel\r\n */\r\nexport interface ILuPopoverTarget {\r\n\t/** how the panel will be align with the target, allowed values: top, bottom, left, right */\r\n\talignment: LuPopoverAlignment;\r\n\t/** the element used to position the panel */\r\n\telementRef: ElementRef;\r\n\t// /** set to true if you want the panel to appear on top of the target */\r\n\toverlap: boolean;\r\n\t/** how you want to position the panel relative to the target, allowed values: above, below, before, after */\r\n\tposition: LuPopoverPosition;\r\n\r\n\toffsetX: number;\r\n\toffsetY: number;\r\n}\r\n\r\nexport abstract class ALuPopoverTarget implements ILuPopoverTarget {\r\n\tprotected _elementRef: ElementRef;\r\n\t/** the element used to position the panel */\r\n\tget elementRef() { return this._elementRef; }\r\n\tset elementRef(ref: ElementRef) { this._elementRef = ref; }\r\n\r\n\tprotected _position: LuPopoverPosition = 'below';\r\n\t/** how you want to position the panel relative to the target, allowed values: above, below, before, after */\r\n\tget position(): LuPopoverPosition { return this._position; }\r\n\tset position(position: LuPopoverPosition) {\r\n\t\tif (\r\n\t\t\tposition !== 'above' &&\r\n\t\t\tposition !== 'below' &&\r\n\t\t\tposition !== 'after' &&\r\n\t\t\tposition !== 'before'\r\n\t\t) {\r\n\t\t\tthrowLuPopoverInvalidPosition();\r\n\t\t}\r\n\t\tthis._position = position;\r\n\t\t// this.setPositionClasses(this._position, this._alignment);\r\n\t}\r\n\r\n\tprotected _alignment: LuPopoverAlignment = 'center';\r\n\t/** how the panel will be align with the target, allowed values: top, bottom, left, right */\r\n\tget alignment(): LuPopoverAlignment { return this._alignment; }\r\n\tset alignment(alignment: LuPopoverAlignment) {\r\n\t\tif (\r\n\t\t\talignment !== 'center' &&\r\n\t\t\talignment !== 'top' &&\r\n\t\t\talignment !== 'bottom' &&\r\n\t\t\talignment !== 'right' &&\r\n\t\t\talignment !== 'left'\r\n\t\t) {\r\n\t\t\tthrowLuPopoverInvalidAlignement();\r\n\t\t}\r\n\t\tthis._alignment = alignment;\r\n\t\t// this.setPositionClasses(this._position, this._alignment);\r\n\t}\r\n\r\n\tprotected _overlap = false;\r\n\t/** set to true if you want the panel to appear on top of the target */\r\n\tget overlap() { return this._overlap; }\r\n\tset overlap(ot: boolean) { this._overlap = ot; }\r\n\r\n\tprotected _offsetX = 0;\r\n\tget offsetX() { return this._offsetX; }\r\n\tset offsetX(ox: number) { this._offsetX = ox; }\r\n\r\n\tprotected _offsetY = 0;\r\n\tget offsetY() { return this._offsetY; }\r\n\tset offsetY(oy: number) { this._offsetY = oy; }\r\n}\r\n\r\nexport class LuPopoverTarget extends ALuPopoverTarget {\r\n\tconstructor() { super(); }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 77
            },
            "properties": [
                {
                    "name": "_alignment",
                    "defaultValue": "'center'",
                    "type": "LuPopoverAlignment",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTarget"
                    }
                },
                {
                    "name": "_elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTarget"
                    }
                },
                {
                    "name": "_offsetX",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTarget"
                    }
                },
                {
                    "name": "_offsetY",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTarget"
                    }
                },
                {
                    "name": "_overlap",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTarget"
                    }
                },
                {
                    "name": "_position",
                    "defaultValue": "'below'",
                    "type": "LuPopoverPosition",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverTarget"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "ALuPopoverTarget",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LuPopupRef",
            "id": "class-LuPopupRef-eb3b39916f650c7efd4c34ed7a0e2f5a",
            "file": "packages/ng/libraries/popup/src/lib/popup-ref.factory.ts",
            "type": "class",
            "sourceCode": "import { ILuPopupContent } from './popup.model';\r\nimport { ALuPopupRef, ILuPopupRefFactory } from './popup-ref.model';\r\nimport { Overlay, ComponentType } from '@angular/cdk/overlay';\r\nimport { Injector, Injectable } from '@angular/core';\r\nimport { ILuPopupConfig } from './popup-config.model';\r\n\r\nexport class LuPopupRef<T extends ILuPopupContent = ILuPopupContent, D = any, R = any> extends ALuPopupRef<T, D, R> {\r\n\tconstructor(\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _injector: Injector,\r\n\t\tprotected _component: ComponentType<T>,\r\n\t\tprotected _config: ILuPopupConfig,\r\n\t) {\r\n\t\tsuper (_overlay, _injector, _component, _config);\r\n\t}\r\n}\r\n\r\n@Injectable()\r\nexport class LuPopupRefFactory implements ILuPopupRefFactory {\r\n\tconstructor(\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _injector: Injector,\r\n\t) {}\r\n\tforge<T>(component: ComponentType<T>, config: ILuPopupConfig) {\r\n\t\treturn new LuPopupRef(this._overlay, this._injector, component, config);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "_injector",
                        "type": "Injector"
                    },
                    {
                        "name": "_component",
                        "type": "ComponentType<T>"
                    },
                    {
                        "name": "_config",
                        "type": "ILuPopupConfig"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_component",
                        "type": "ComponentType<T>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_config",
                        "type": "ILuPopupConfig",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_componentRef",
                    "type": "ComponentRef<T>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_overlayRef",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_subs",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "onClose",
                    "defaultValue": "new Subject<R>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "onDismiss",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "onOpen",
                    "defaultValue": "new Subject<D>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                }
            ],
            "methods": [
                {
                    "name": "_cleanSubscription",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_closePopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_completeSubjects",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_createOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "description": "<p>This method creates the overlay from the provided popover&#39;s template and saves its\nOverlayRef so that it can be attached to the DOM when openPopover is called.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_destroyOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_getOverlayConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "OverlayConfig",
                    "typeParameters": [],
                    "line": 73,
                    "description": "<p>This method builds the configuration object needed to create the overlay, the OverlayConfig.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2340,
                                "end": 2347,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>OverlayConfig</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_openPopup",
                    "args": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_subToCloseEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "result",
                            "type": "R",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "R",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "dismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "ALuPopupRef",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LuSidepanelRef",
            "id": "class-LuSidepanelRef-5ebdc21acd75cfcddeb00bd3b1e987cb",
            "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel-ref.factory.ts",
            "type": "class",
            "sourceCode": "import { ILuPopupRefFactory } from '@lucca-front/ng/popup';\r\nimport { Overlay, ComponentType } from '@angular/cdk/overlay';\r\nimport { Injector, Injectable, ComponentRef, ChangeDetectionStrategy } from '@angular/core';\r\nimport { PortalOutlet, PortalInjector, ComponentPortal } from '@angular/cdk/portal';\r\nimport { ILuSidepanelContent } from './sidepanel.model';\r\nimport { ALuSidepanelRef, ILuSidepanelRef } from './sidepanel-ref.model';\r\nimport { LU_SIDEPANEL_DATA } from './sidepanel.token';\r\nimport { LuSidepanelPanelComponent, LuSidepanelPanelComponentDefaultCD } from './sidepanel-panel.component';\r\nimport { ILuSidepanelConfig } from './sidepanel-config.model';\r\n\r\nclass LuSidepanelRef<T extends ILuSidepanelContent = ILuSidepanelContent, D = any, R = any> extends ALuSidepanelRef<T, D, R> implements ILuSidepanelRef<T, D, R> {\r\n\tprotected _containerRef: ComponentRef<LuSidepanelPanelComponent>;\r\n\tprotected _containerOutlet: PortalOutlet;\r\n\tconstructor(\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _injector: Injector,\r\n\t\tprotected _component: ComponentType<T>,\r\n\t\tprotected _config: ILuSidepanelConfig,\r\n\t) {\r\n\t\tsuper(_overlay, _injector, _component, _config);\r\n\t}\r\n\tprotected _openPopup(data?: D) {\r\n\t\tconst injectionMap = new WeakMap();\r\n\t\tinjectionMap.set(ALuSidepanelRef, this);\r\n\t\tinjectionMap.set(LU_SIDEPANEL_DATA, data);\r\n\t\tconst injector = new PortalInjector(this._injector, injectionMap);\r\n\t\tif (this._config.changeDetection === ChangeDetectionStrategy.OnPush) {\r\n\t\t\tconst containerPortal = new ComponentPortal(LuSidepanelPanelComponent, undefined, injector);\r\n\t\t\tthis._containerRef = this._overlayRef.attach<LuSidepanelPanelComponent>(containerPortal);\r\n\t\t} else {\r\n\t\t\tconst containerPortal = new ComponentPortal(LuSidepanelPanelComponentDefaultCD, undefined, injector);\r\n\t\t\tthis._containerRef = this._overlayRef.attach<LuSidepanelPanelComponent>(containerPortal);\r\n\t\t}\r\n\t\tthis._containerOutlet = this._containerRef.instance;\r\n\t\tconst portal = new ComponentPortal(this._component, undefined, injector);\r\n\t\tthis._componentRef = this._containerOutlet.attach(portal) as ComponentRef<T>;\r\n\t}\r\n\tprotected _closePopup() {\r\n\t\tthis._componentRef.destroy();\r\n\t\tthis._containerRef.destroy();\r\n\t}\r\n}\r\n\r\n@Injectable()\r\nexport class LuSidepanelRefFactory implements ILuPopupRefFactory<ILuSidepanelContent, ILuSidepanelConfig> {\r\n\tconstructor(\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _injector: Injector,\r\n\t) {}\r\n\tforge<T extends ILuSidepanelContent, C extends ILuSidepanelConfig>(component: ComponentType<T>, config: C) {\r\n\t\treturn new LuSidepanelRef(this._overlay, this._injector, component, config);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "_injector",
                        "type": "Injector"
                    },
                    {
                        "name": "_component",
                        "type": "ComponentType<T>"
                    },
                    {
                        "name": "_config",
                        "type": "ILuSidepanelConfig"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_component",
                        "type": "ComponentType<T>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_config",
                        "type": "ILuSidepanelConfig",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_containerOutlet",
                    "type": "PortalOutlet",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_containerRef",
                    "type": "ComponentRef<LuSidepanelPanelComponent>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_componentRef",
                    "type": "ComponentRef<T>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_overlayRef",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_subs",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "onClose",
                    "defaultValue": "new Subject<R>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "onDismiss",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "onOpen",
                    "defaultValue": "new Subject<D>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_componentRef",
                    "type": "ComponentRef<T>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_overlayRef",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_subs",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "onClose",
                    "defaultValue": "new Subject<R>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "onDismiss",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "onOpen",
                    "defaultValue": "new Subject<D>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                }
            ],
            "methods": [
                {
                    "name": "_closePopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_openPopup",
                    "args": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_cleanSubscription",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_closePopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_completeSubjects",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_createOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "description": "<p>This method creates the overlay from the provided popover&#39;s template and saves its\nOverlayRef so that it can be attached to the DOM when openPopover is called.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_destroyOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_getOverlayConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "OverlayConfig",
                    "typeParameters": [],
                    "line": 73,
                    "description": "<p>This method builds the configuration object needed to create the overlay, the OverlayConfig.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2340,
                                "end": 2347,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>OverlayConfig</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_openPopup",
                    "args": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_subToCloseEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "result",
                            "type": "R",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "R",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "dismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuModalRef"
                    }
                },
                {
                    "name": "_cleanSubscription",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_closePopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_completeSubjects",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_createOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "description": "<p>This method creates the overlay from the provided popover&#39;s template and saves its\nOverlayRef so that it can be attached to the DOM when openPopover is called.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_destroyOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_getOverlayConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "OverlayConfig",
                    "typeParameters": [],
                    "line": 73,
                    "description": "<p>This method builds the configuration object needed to create the overlay, the OverlayConfig.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2340,
                                "end": 2347,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>OverlayConfig</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_openPopup",
                    "args": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "_subToCloseEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "result",
                            "type": "R",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "R",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "dismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "D",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopupRef"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "ALuSidepanelRef",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ILuSidepanelRef"
            ]
        },
        {
            "name": "MonthItem",
            "id": "class-MonthItem-ab8ec4d7490bc3ee224f7aae4ca891f0",
            "file": "packages/ng/libraries/date/src/lib/calendar/calendar-item.class.ts",
            "type": "class",
            "sourceCode": "import { ICalendarItem } from './calendar-item.interface';\r\nimport { ELuDateGranularity } from '@lucca-front/ng/core';\r\n\r\nexport abstract class ACalendarItem<D> implements ICalendarItem<D> {\r\n\tget id() { return `${this.granularity}-${this.date.toString()}`; }\r\n\tdate: D;\r\n\tmods: string[] = [];\r\n\tisDisabled: boolean = false;\r\n\tlabel: string;\r\n\treadonly granularity: ELuDateGranularity;\r\n}\r\nexport class DayItem<D> extends ACalendarItem<D> implements ICalendarItem<D> {\r\n\treadonly granularity = ELuDateGranularity.day;\r\n\tconstructor(\r\n\t\tpublic date: D,\r\n\t\tpublic label: string,\r\n\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\nexport class MonthItem<D> extends ACalendarItem<D> implements ICalendarItem<D> {\r\n\treadonly granularity = ELuDateGranularity.month;\r\n\tconstructor(\r\n\t\tpublic date: D,\r\n\t\tpublic label: string,\r\n\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\nexport class YearItem<D> extends ACalendarItem<D> implements ICalendarItem<D> {\r\n\treadonly granularity = ELuDateGranularity.year;\r\n\tconstructor(\r\n\t\tpublic date: D,\r\n\t\tpublic label: string,\r\n\t\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\nexport class DecadeItem<D> extends ACalendarItem<D> implements ICalendarItem<D> {\r\n\treadonly granularity = ELuDateGranularity.decade;\r\n\tconstructor(\r\n\t\tpublic date: D,\r\n\t\tpublic label: string,\r\n\t\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "D"
                    },
                    {
                        "name": "label",
                        "type": "string"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "D",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "label",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "date",
                    "type": "D",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "granularity",
                    "defaultValue": "ELuDateGranularity.month",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "date",
                    "type": "D",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "ACalendarItem"
                    }
                },
                {
                    "name": "granularity",
                    "type": "ELuDateGranularity",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        132
                    ],
                    "inheritance": {
                        "file": "ACalendarItem"
                    }
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "ACalendarItem"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "ACalendarItem"
                    }
                },
                {
                    "name": "mods",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "ACalendarItem"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "ACalendarItem",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ICalendarItem"
            ]
        },
        {
            "name": "TemplateError",
            "id": "class-TemplateError-84af02ffe33d6ca432510a2b4de39471",
            "file": "packages/ng/libraries/formly/src/lib/wrappers/error.ts",
            "type": "class",
            "sourceCode": "import { Component, Input, ViewChild, ViewContainerRef, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport {\r\n\tFormlyFieldConfig,\r\n\tFieldWrapper,\r\n\tFormlyConfig,\r\n} from '@ngx-formly/core';\r\n\r\n// wrapper\r\n@Component({\r\n\tselector: 'lu-formly-wrapper-error',\r\n\tstyleUrls: ['flex-layout.scss'],\r\n\ttemplateUrl: './error.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyWrapperError extends FieldWrapper {\r\n\t@ViewChild('fieldComponent', { read: ViewContainerRef, static: true })\r\n\tfieldComponent: ViewContainerRef;\r\n\r\n\treadonly formControl: FormControl;\r\n\r\n\tget validationId() {\r\n\t\treturn this.field.id + '-message';\r\n\t}\r\n}\r\n\r\n// component that display the right error message\r\n@Component({\r\n\tselector: 'lu-formly-error-message',\r\n\ttemplate: `<div class=\"textfield-messages-error\" *ngFor=\"let message of errorMessages\">{{ message }}</div>`,\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyErrorMessage {\r\n\t@Input() fieldForm: FormControl;\r\n\t@Input() field: FormlyFieldConfig;\r\n\r\n\tconstructor() {}\r\n\r\n\tget errorMessages(): string[] {\r\n\t\tconst messages = [];\r\n\t\tif (!!this.fieldForm.errors) {\r\n\t\t\tObject.keys(this.fieldForm.errors).forEach(key => {\r\n\t\t\t\tif (\r\n\t\t\t\t\tthis.field.validation &&\r\n\t\t\t\t\tthis.field.validation.messages &&\r\n\t\t\t\t\tthis.field.validation.messages[key]\r\n\t\t\t\t) {\r\n\t\t\t\t\tmessages.push(this.field.validation.messages[key]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn messages;\r\n\t}\r\n}\r\n\r\n// run to know when to add said wrapper\r\nexport class TemplateError {\r\n\trun(fc: FormlyConfig) {\r\n\t\tfc.templateManipulators.postWrapper.push((field: FormlyFieldConfig) => {\r\n\t\t\tif (field && field.validation) {\r\n\t\t\t\treturn 'error';\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "run",
                    "args": [
                        {
                            "name": "fc",
                            "type": "FormlyConfig"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "fc",
                            "type": "FormlyConfig",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TemplateHelper",
            "id": "class-TemplateHelper-965bf17906f729cb5917e7ae98cd8162",
            "file": "packages/ng/libraries/formly/src/lib/wrappers/helper.ts",
            "type": "class",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport {\r\n\tFieldWrapper,\r\n\tFormlyFieldConfig,\r\n\tFormlyConfig,\r\n\tFieldType,\r\n} from '@ngx-formly/core';\r\n\r\n// wrapper component\r\n@Component({\r\n\tselector: 'lu-formly-wrapper-helper',\r\n\tstyleUrls: ['flex-layout.scss'],\r\n\ttemplateUrl: './helper.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyWrapperHelper extends FieldWrapper {\r\n\t@ViewChild('fieldComponent', { read: ViewContainerRef, static: true })\r\n\tfieldComponent: ViewContainerRef;\r\n}\r\n// run to know when to add said wrapper\r\nexport class TemplateHelper {\r\n\trun(fc: FormlyConfig) {\r\n\t\tfc.templateManipulators.postWrapper.push((field: FormlyFieldConfig) => {\r\n\t\t\tif (field && field.templateOptions && field.templateOptions.helper) {\r\n\t\t\t\treturn 'helper';\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "run",
                    "args": [
                        {
                            "name": "fc",
                            "type": "FormlyConfig"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "fc",
                            "type": "FormlyConfig",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TemplateIcon",
            "id": "class-TemplateIcon-267f00eedd10c7f3b3551ef22a5a97bc",
            "file": "packages/ng/libraries/formly/src/lib/wrappers/icon.ts",
            "type": "class",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport {\r\n\tFieldWrapper,\r\n\tFormlyFieldConfig,\r\n\tFormlyConfig,\r\n\tFieldType,\r\n} from '@ngx-formly/core';\r\n\r\n// wrapper component\r\n@Component({\r\n\tselector: 'lu-formly-wrapper-suffix',\r\n\tstyleUrls: ['flex-layout.scss', 'suffixes.common.scss'],\r\n\ttemplateUrl: './icon.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyWrapperIcon extends FieldWrapper {\r\n\t@ViewChild('fieldComponent', { read: ViewContainerRef, static: true })\r\n\tfieldComponent: ViewContainerRef;\r\n}\r\n// run to know when to add said wrapper\r\nexport class TemplateIcon {\r\n\trun(fc: FormlyConfig) {\r\n\t\tfc.templateManipulators.postWrapper.push((field: FormlyFieldConfig) => {\r\n\t\t\t// if (field && field.type === 'date') {\r\n\t\t\t// \tfield.templateOptions.icon = 'calendar';\r\n\t\t\t// \treturn 'icon';\r\n\t\t\t// }\r\n\t\t\t// if (field && field.type === 'api') {\r\n\t\t\t// \tfield.templateOptions.icon = 'search';\r\n\t\t\t// \treturn 'icon';\r\n\t\t\t// }\r\n\t\t\tif (field && field.templateOptions && field.templateOptions.icon) {\r\n\t\t\t\treturn 'icon';\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "run",
                    "args": [
                        {
                            "name": "fc",
                            "type": "FormlyConfig"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "fc",
                            "type": "FormlyConfig",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TemplateSuffix",
            "id": "class-TemplateSuffix-c34e987077dfe5fa616730cbf4c28c51",
            "file": "packages/ng/libraries/formly/src/lib/wrappers/suffix.ts",
            "type": "class",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport {\r\n\tFieldWrapper,\r\n\tFormlyFieldConfig,\r\n\tFormlyConfig,\r\n\tFieldType,\r\n} from '@ngx-formly/core';\r\n\r\n// wrapper component\r\n@Component({\r\n\tselector: 'lu-formly-wrapper-suffix',\r\n\tstyleUrls: ['flex-layout.scss', 'suffixes.common.scss'],\r\n\ttemplateUrl: './suffix.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyWrapperSuffix extends FieldWrapper {\r\n\t@ViewChild('fieldComponent', { read: ViewContainerRef, static: true })\r\n\tfieldComponent: ViewContainerRef;\r\n}\r\n// run to know when to add said wrapper\r\nexport class TemplateSuffix {\r\n\trun(fc: FormlyConfig) {\r\n\t\tfc.templateManipulators.postWrapper.push((field: FormlyFieldConfig) => {\r\n\t\t\tif (\r\n\t\t\t\tfield &&\r\n\t\t\t\tfield.templateOptions &&\r\n\t\t\t\tfield.templateOptions.suffix &&\r\n\t\t\t\t!field.templateOptions.icon\r\n\t\t\t) {\r\n\t\t\t\treturn 'suffix';\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "run",
                    "args": [
                        {
                            "name": "fc",
                            "type": "FormlyConfig"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "fc",
                            "type": "FormlyConfig",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "YearItem",
            "id": "class-YearItem-ab8ec4d7490bc3ee224f7aae4ca891f0",
            "file": "packages/ng/libraries/date/src/lib/calendar/calendar-item.class.ts",
            "type": "class",
            "sourceCode": "import { ICalendarItem } from './calendar-item.interface';\r\nimport { ELuDateGranularity } from '@lucca-front/ng/core';\r\n\r\nexport abstract class ACalendarItem<D> implements ICalendarItem<D> {\r\n\tget id() { return `${this.granularity}-${this.date.toString()}`; }\r\n\tdate: D;\r\n\tmods: string[] = [];\r\n\tisDisabled: boolean = false;\r\n\tlabel: string;\r\n\treadonly granularity: ELuDateGranularity;\r\n}\r\nexport class DayItem<D> extends ACalendarItem<D> implements ICalendarItem<D> {\r\n\treadonly granularity = ELuDateGranularity.day;\r\n\tconstructor(\r\n\t\tpublic date: D,\r\n\t\tpublic label: string,\r\n\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\nexport class MonthItem<D> extends ACalendarItem<D> implements ICalendarItem<D> {\r\n\treadonly granularity = ELuDateGranularity.month;\r\n\tconstructor(\r\n\t\tpublic date: D,\r\n\t\tpublic label: string,\r\n\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\nexport class YearItem<D> extends ACalendarItem<D> implements ICalendarItem<D> {\r\n\treadonly granularity = ELuDateGranularity.year;\r\n\tconstructor(\r\n\t\tpublic date: D,\r\n\t\tpublic label: string,\r\n\t\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\nexport class DecadeItem<D> extends ACalendarItem<D> implements ICalendarItem<D> {\r\n\treadonly granularity = ELuDateGranularity.decade;\r\n\tconstructor(\r\n\t\tpublic date: D,\r\n\t\tpublic label: string,\r\n\t\t) {\r\n\t\tsuper();\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "D"
                    },
                    {
                        "name": "label",
                        "type": "string"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "D",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "label",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "date",
                    "type": "D",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "granularity",
                    "defaultValue": "ELuDateGranularity.year",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "date",
                    "type": "D",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "ACalendarItem"
                    }
                },
                {
                    "name": "granularity",
                    "type": "ELuDateGranularity",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        132
                    ],
                    "inheritance": {
                        "file": "ACalendarItem"
                    }
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "ACalendarItem"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "ACalendarItem"
                    }
                },
                {
                    "name": "mods",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "ACalendarItem"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "ACalendarItem",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ICalendarItem"
            ]
        }
    ],
    "directives": [
        {
            "name": "LuDateInputDirective",
            "id": "directive-LuDateInputDirective-c32f50314f1afdb6352535777f3ce5c8",
            "file": "packages/ng/libraries/date/src/lib/input/date-input.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, Renderer2, ChangeDetectorRef, forwardRef, HostListener, Input, Inject, OnInit } from '@angular/core';\r\nimport { ALuInput } from '@lucca-front/ng/input';\r\nimport { NG_VALUE_ACCESSOR, Validator, NG_VALIDATORS, ValidationErrors, AbstractControl } from '@angular/forms';\r\nimport { ALuDateAdapter, ELuDateGranularity } from '@lucca-front/ng/core';\r\nimport { ILuDateInputLabel } from './date-input.translate';\r\nimport { LuDateInputIntl } from './date-input.intl';\r\n\r\n@Directive({\r\n\tselector: 'input[luDateInput]',\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: NG_VALUE_ACCESSOR,\r\n\t\t\tuseExisting: forwardRef(() => LuDateInputDirective),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: NG_VALIDATORS,\r\n\t\t\tuseExisting: LuDateInputDirective,\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuDateInputDirective<D> extends ALuInput<D> implements Validator, OnInit {\r\n\tprivate _focused = false;\r\n\t@Input() min?: D;\r\n\t@Input() max?: D;\r\n\t@Input() granularity: ELuDateGranularity = ELuDateGranularity.day;\r\n\r\n\t@Input() set placeholder(p: string) {\r\n\t\tthis._elementRef.nativeElement.placeholder = p;\r\n\t}\r\n\tconstructor(\r\n\t\t_changeDetectorRef: ChangeDetectorRef,\r\n\t\t_elementRef: ElementRef<HTMLInputElement>,\r\n\t\t_renderer: Renderer2,\r\n\t\tprivate _adapter: ALuDateAdapter<D>,\r\n\t\t@Inject(LuDateInputIntl) private _intl: ILuDateInputLabel,\r\n\t) {\r\n\t\tsuper(_changeDetectorRef, _elementRef, _renderer);\r\n\t}\r\n\tngOnInit() {\r\n\t\tswitch (this.granularity) {\r\n\t\t\tcase ELuDateGranularity.year:\r\n\t\t\t\tthis.placeholder = this._intl.placeholderYear;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ELuDateGranularity.month:\r\n\t\t\t\tthis.placeholder = this._intl.placeholderMonth;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ELuDateGranularity.day:\r\n\t\t\tdefault:\r\n\t\t\t\tthis.placeholder = this._intl.placeholderDay;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tprotected render() {\r\n\t\tif (this._focused) { return; }\r\n\t\tlet format: string;;\r\n\t\tswitch (this.granularity) {\r\n\t\t\tcase ELuDateGranularity.year:\r\n\t\t\t\tformat = this._intl.formatYear;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ELuDateGranularity.month:\r\n\t\t\t\tformat = this._intl.formatMonth;\r\n\t\t\t\tbreak;\r\n\t\t\tcase ELuDateGranularity.day:\r\n\t\t\tdefault:\r\n\t\t\t\tformat = this._intl.formatDay;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tconst text = this.value && this._adapter.isValid(this.value) ? this._adapter.format(this.value, format) : '';\r\n\t\tthis._elementRef.nativeElement.value = text;\r\n\t}\r\n\t@HostListener('input', ['$event'])\r\n\tonInput(event) {\r\n\t\tconst text = event.target.value as string;\r\n\t\tconst value = this.parse(text);\r\n\t\tthis.setValue(value);\r\n\t}\r\n\tprivate parse(text): D {\r\n\t\tconst date = this._adapter.parse(text, this.granularity);\r\n\t\treturn date;\r\n\t}\r\n\t@HostListener('focus')\r\n\tonFocus() {\r\n\t\tthis._focused = true;\r\n\t}\r\n\t@HostListener('blur')\r\n\tonBlur() {\r\n\t\tthis._focused = false;\r\n\t\tthis.render();\r\n\t}\r\n\tvalidate(control: AbstractControl): ValidationErrors | null {\r\n\t\tconst d = control.value;\r\n\t\tif (!d) { return null; }\r\n\t\tif (!this._adapter.isValid(d)) { return { 'date': true }; }\r\n\t\tif (!!this.min && this._adapter.isValid(this.min) && this._adapter.compare(this.min, d, ELuDateGranularity.day) > 0) {\r\n\t\t\treturn { 'min': true };\r\n\t\t}\r\n\t\tif (!!this.max && this._adapter.isValid(this.max) && this._adapter.compare(this.max, d, ELuDateGranularity.day) < 0) {\r\n\t\t\treturn { 'max': true };\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n",
            "selector": "input[luDateInput]",
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => LuDateInputDirective), multi: true,\n}",
                    "type": "directive"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: LuDateInputDirective, multi: true,\n}",
                    "type": "directive"
                }
            ],
            "inputsClass": [
                {
                    "name": "granularity",
                    "defaultValue": "ELuDateGranularity.day",
                    "line": 27,
                    "type": "ELuDateGranularity"
                },
                {
                    "name": "max",
                    "line": 26,
                    "type": "D"
                },
                {
                    "name": "min",
                    "line": 25,
                    "type": "D"
                },
                {
                    "name": "placeholder",
                    "line": 29,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "blur",
                    "args": [],
                    "argsDecorator": [],
                    "line": 88
                },
                {
                    "name": "focus",
                    "args": [],
                    "argsDecorator": [],
                    "line": 84
                },
                {
                    "name": "input",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 74
                }
            ],
            "propertiesClass": [
                {
                    "name": "_focused",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "parse",
                    "args": [
                        {
                            "name": "text",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "D",
                    "typeParameters": [],
                    "line": 79,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "Validator",
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLInputElement>"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "_adapter",
                        "type": "ALuDateAdapter<D>"
                    },
                    {
                        "name": "_intl",
                        "type": "ILuDateInputLabel"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLInputElement>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_adapter",
                        "type": "ALuDateAdapter<D>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_intl",
                        "type": "ILuDateInputLabel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "placeholder": {
                    "name": "placeholder",
                    "setSignature": {
                        "name": "placeholder",
                        "type": "void",
                        "args": [
                            {
                                "name": "p",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 29,
                        "jsdoctags": [
                            {
                                "name": "p",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "LuDropdownItemDirective",
            "id": "directive-LuDropdownItemDirective-697a16df824b33f0d148c788eee33a09",
            "file": "packages/ng/libraries/dropdown/src/lib/item/dropdown-item.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, forwardRef, ElementRef, HostListener, EventEmitter, Output, OnDestroy } from '@angular/core';\r\nimport { ALuDropdownItem } from './dropdown-item.model';\r\n\r\n@Directive({\r\n\tselector: '[luDropdownItem]',\r\n\texportAs: 'LuDropdownItem',\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuDropdownItem,\r\n\t\t\tuseExisting: forwardRef(() => LuDropdownItemDirective),\r\n\t\t\tmulti: true,\r\n\t\t}\r\n\t]\r\n})\r\nexport class LuDropdownItemDirective extends ALuDropdownItem implements OnDestroy {\r\n\t@Output() onSelect = new EventEmitter<boolean>();\r\n\tconstructor(\r\n\t\tprivate _eltRef: ElementRef,\r\n\t) {\r\n\t\tsuper();\r\n\t}\r\n\t@HostListener('click', ['$event']) onClick($event: Event) {\r\n\t\t// $event.stopPropagation();\r\n\t\tthis.onSelect.emit(true);\r\n\t}\r\n\t@HostListener('keydown.enter', ['$event']) onEnter($event: Event) {\r\n\t\t// $event.stopPropagation();\r\n\t\tthis.onSelect.emit(true);\r\n\t}\r\n\tfocus() {\r\n\t\tthis._eltRef.nativeElement.focus();\r\n\t}\r\n\tngOnDestroy() {\r\n\t\tthis.onSelect.complete();\r\n\t}\r\n}\r\n",
            "selector": "[luDropdownItem]",
            "providers": [
                {
                    "name": "{\n    provide: ALuDropdownItem, useExisting: forwardRef(() => LuDropdownItemDirective), multi: true,\n}",
                    "type": "directive"
                }
            ],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Event"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 22
                },
                {
                    "name": "keydown.enter",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Event"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 26
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                }
            ],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_eltRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_eltRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "LuDropdownTriggerDirective",
            "id": "directive-LuDropdownTriggerDirective-3f2de326639f3955b0501f6ee9f0c424",
            "file": "packages/ng/libraries/dropdown/src/lib/trigger/dropdown-trigger.directive.ts",
            "type": "directive",
            "description": "<p>This directive is intended to be used in conjunction with an lu-dropdown tag.  It is\nresponsible for toggling the display of the provided dropdown instance.</p>\n",
            "sourceCode": "import { ILuDropdownPanel } from '../panel/index';\r\nimport { AfterViewInit, OnDestroy, Input, HostBinding, ElementRef, ViewContainerRef, HostListener, Directive, Output, EventEmitter } from '@angular/core';\r\nimport { ALuPopoverTrigger, ILuPopoverTarget, ILuPopoverTrigger, LuPopoverTarget, LuPopoverPosition, LuPopoverAlignment } from '@lucca-front/ng/popover';\r\nimport { Overlay } from '@angular/cdk/overlay';\r\n\r\n/**\r\n* This directive is intended to be used in conjunction with an lu-dropdown tag.  It is\r\n* responsible for toggling the display of the provided dropdown instance.\r\n*/\r\n@Directive({\r\n\tselector: '[luDropdown]',\r\n\texportAs: 'LuDropdownTrigger',\r\n})\r\nexport class LuDropdownTriggerDirective<TPanel extends ILuDropdownPanel = ILuDropdownPanel>\r\nextends ALuPopoverTrigger<TPanel, ILuPopoverTarget>\r\nimplements ILuPopoverTrigger<TPanel, ILuPopoverTarget>, AfterViewInit, OnDestroy {\r\n\t/** References the popover instance that the trigger is associated with. */\r\n\t@Input('luDropdown') set inputPanel(p: TPanel) { this.panel = p; }\r\n\r\n\t/** how you want to position the panel relative to the target, allowed values: above, below, before, after */\r\n\t@Input('luDropdownPosition') set inputPosition(pos: LuPopoverPosition) { this.target.position = pos; }\r\n\t/** how the panel will be align with the target, allowed values: top, bottom, left, right */\r\n\t@Input('luDropdownAlignment') set inputAlignment(al: LuPopoverAlignment) { this.target.alignment = al; }\r\n\t/** disable popover apparition */\r\n\t@Input('luDropdownDisabled') set inputDisabled(d: boolean) { this.disabled = d; }\r\n\t/** set to true if you want the panel to appear on top of the target */\r\n\t@Input('luDropdownOverlap') set inputOverlap(ov: boolean) { this.target.overlap = ov; }\r\n\r\n\t/** Event emitted when the associated popover is opened. */\r\n\t@Output('luDropdownOnOpen') onOpen = new EventEmitter<void>();\r\n\t/** Event emitted when the associated popover is closed. */\r\n\t@Output('luDropdownOnClose') onClose = new EventEmitter<void>();\r\n\r\n\t/** accessibility attribute - dont override */\r\n\t@HostBinding('attr.aria-expanded') get _attrAriaExpanded() { return this._popoverOpen; }\r\n\t/** accessibility attribute - dont override */\r\n\t@HostBinding('attr.id') get _attrId() { return this._triggerId; }\r\n\t/** accessibility attribute - dont override */\r\n\t@HostBinding('attr.aria-controls') get _attrAriaControls() { return this._panelId; }\r\n\r\n\tconstructor(\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _elementRef: ElementRef,\r\n\t\tprotected _viewContainerRef: ViewContainerRef,\r\n\t) {\r\n\t\tsuper(_overlay, _elementRef, _viewContainerRef);\r\n\t\tthis.target = new LuPopoverTarget() as ILuPopoverTarget;\r\n\t\tthis.target.elementRef = this._elementRef;\r\n\t\tthis._triggerId = this._elementRef.nativeElement.getAttribute('id') || this._triggerId;\r\n\t\tthis.triggerEvent = 'click';\r\n\t\tthis.target.position = 'below';\r\n\t\tthis.target.alignment = 'right';\r\n\r\n\t}\r\n\r\n\t@HostListener('click')\r\n\tonClick() {\r\n\t\tsuper.onClick();\r\n\t}\r\n\tngAfterViewInit() {\r\n\t\tthis._checkPanel();\r\n\t\tthis._checkTarget();\r\n\t}\r\n\tngOnDestroy() {\r\n\t\tthis._cleanUpSubscriptions();\r\n\t\tif (this._popoverOpen) {\r\n\t\t\tthis.closePopover();\r\n\t\t}\r\n\t\tthis.destroyPopover();\r\n\t}\r\n\tprotected _emitOpen(): void {\r\n\t\tthis.onOpen.emit();\r\n\t}\r\n\tprotected _emitClose(): void {\r\n\t\tthis.onClose.emit();\r\n\t}\r\n}\r\n",
            "selector": "[luDropdown]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "luDropdown",
                    "description": "<p>References the popover instance that the trigger is associated with. </p>\n",
                    "line": 18,
                    "type": ""
                },
                {
                    "name": "luDropdownAlignment",
                    "description": "<p>how the panel will be align with the target, allowed values: top, bottom, left, right </p>\n",
                    "line": 23,
                    "type": ""
                },
                {
                    "name": "luDropdownDisabled",
                    "description": "<p>disable popover apparition </p>\n",
                    "line": 25,
                    "type": "boolean"
                },
                {
                    "name": "luDropdownOverlap",
                    "description": "<p>set to true if you want the panel to appear on top of the target </p>\n",
                    "line": 27,
                    "type": "boolean"
                },
                {
                    "name": "luDropdownPosition",
                    "description": "<p>how you want to position the panel relative to the target, allowed values: above, below, before, after </p>\n",
                    "line": 21,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "luDropdownOnClose",
                    "defaultValue": "new EventEmitter<void>()",
                    "description": "<p>Event emitted when the associated popover is closed. </p>\n",
                    "line": 32,
                    "type": "EventEmitter"
                },
                {
                    "name": "luDropdownOnOpen",
                    "defaultValue": "new EventEmitter<void>()",
                    "description": "<p>Event emitted when the associated popover is opened. </p>\n",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [
                {
                    "name": "attr.aria-controls",
                    "description": "<p>accessibility attribute - dont override </p>\n",
                    "line": 39
                },
                {
                    "name": "attr.aria-expanded",
                    "description": "<p>accessibility attribute - dont override </p>\n",
                    "line": 35
                },
                {
                    "name": "attr.id",
                    "description": "<p>accessibility attribute - dont override </p>\n",
                    "line": 37
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "line": 57
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "_emitClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_emitOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64
                }
            ],
            "implements": [
                "ILuPopoverTrigger",
                "AfterViewInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "inputPanel": {
                    "name": "inputPanel",
                    "setSignature": {
                        "name": "inputPanel",
                        "type": "void",
                        "args": [
                            {
                                "name": "p",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 18,
                        "description": "<p>References the popover instance that the trigger is associated with. </p>\n",
                        "jsdoctags": [
                            {
                                "name": "p",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputPosition": {
                    "name": "inputPosition",
                    "setSignature": {
                        "name": "inputPosition",
                        "type": "void",
                        "args": [
                            {
                                "name": "pos",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 21,
                        "description": "<p>how you want to position the panel relative to the target, allowed values: above, below, before, after </p>\n",
                        "jsdoctags": [
                            {
                                "name": "pos",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputAlignment": {
                    "name": "inputAlignment",
                    "setSignature": {
                        "name": "inputAlignment",
                        "type": "void",
                        "args": [
                            {
                                "name": "al",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 23,
                        "description": "<p>how the panel will be align with the target, allowed values: top, bottom, left, right </p>\n",
                        "jsdoctags": [
                            {
                                "name": "al",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputDisabled": {
                    "name": "inputDisabled",
                    "setSignature": {
                        "name": "inputDisabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "d",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 25,
                        "description": "<p>disable popover apparition </p>\n",
                        "jsdoctags": [
                            {
                                "name": "d",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputOverlap": {
                    "name": "inputOverlap",
                    "setSignature": {
                        "name": "inputOverlap",
                        "type": "void",
                        "args": [
                            {
                                "name": "ov",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "description": "<p>set to true if you want the panel to appear on top of the target </p>\n",
                        "jsdoctags": [
                            {
                                "name": "ov",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "LuForGroupsDirective",
            "id": "directive-LuForGroupsDirective-e76db5c4deed2f715821f79353484afa",
            "file": "packages/ng/libraries/option/src/lib/operator/for-groups/for-groups.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { ChangeDetectorRef, Directive, forwardRef, Input, OnDestroy, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { ALuOptionOperator, ILuOptionOperator } from '../option-operator.model';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { ILuGroup } from '@lucca-front/ng/core';\r\n\r\n\r\nexport class LuForGroupContext<T> {\r\n\tpublic constructor(\r\n\t\tpublic $implicit: T,\r\n\t\tpublic index: number,\r\n\t\tpublic count: number,\r\n\t) {}\r\n\r\n\tpublic get first(): boolean { return this.index === 0; }\r\n\r\n\tpublic get last(): boolean { return this.index === this.count - 1; }\r\n\r\n\tpublic get even(): boolean { return this.index % 2 === 0; }\r\n\r\n\tpublic get odd(): boolean { return !this.even; }\r\n}\r\n\r\n@Directive({\r\n\tselector: '[luForGroups]',\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuForGroupsDirective),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuForGroupsDirective<TItem = any, TKey = any> implements ILuOptionOperator<TItem>, OnDestroy {\r\n\toutOptions$?: Observable<TItem[]>;\r\n\r\n\tprivate _groupByFn: (item: TItem) => TKey;\r\n\t@Input('luForGroupsGroupBy')\r\n\tpublic set attrGroupBy(fn: (item: TItem) => TKey) {\r\n\t\tthis._groupByFn = fn;\r\n\t}\r\n\r\n\tprotected _subs = new Subscription();\r\n\tpublic set inOptions$(options$: Observable<TItem[]>) {\r\n\t\tthis._subs.add(\r\n\t\t\toptions$.subscribe(options => this.render(options))\r\n\t\t);\r\n\t\tthis.outOptions$ = options$;\r\n\t}\r\n\r\n\tpublic constructor(\r\n\t\tprotected _vcr: ViewContainerRef,\r\n\t\tprotected _cdr: ChangeDetectorRef,\r\n\t\tprotected _templateRef: TemplateRef<LuForGroupContext<ILuGroup<TItem, TKey>>>,\r\n\t) {}\r\n\r\n\tpublic ngOnDestroy(): void {\r\n\t\tthis._subs.unsubscribe();\r\n\t}\r\n\r\n\tpublic render(options: TItem[]): void {\r\n\t\tthis._vcr.clear();\r\n\t\tconst count = options.length;\r\n\t\tconst groups = this.groupBy(options);\r\n\t\tgroups.forEach((group, index) => {\r\n\t\t\tconst view = this._vcr.createEmbeddedView(this._templateRef, new LuForGroupContext<ILuGroup<TItem, TKey>>(group, index, count));\r\n\t\t});\r\n\t\tthis._cdr.markForCheck();\r\n\t}\r\n\r\n\tprotected groupBy(items: TItem[]): ILuGroup<TItem, TKey>[] {\r\n\t\tconst groups: ILuGroup<TItem, TKey>[] = [];\r\n\t\titems.forEach((item) => {\r\n\t\t\tconst key = this._groupByFn(item);\r\n\t\t\tlet group = groups.find(g => g.key === key);\r\n\t\t\tif (!group) {\r\n\t\t\t\tgroup = { key: key, items: [] };\r\n\t\t\t\tgroups.push(group);\r\n\t\t\t}\r\n\t\t\tgroup.items.push(item);\r\n\t\t});\r\n\t\treturn groups;\r\n\t}\r\n}",
            "selector": "[luForGroups]",
            "providers": [
                {
                    "name": "{\n    provide: ALuOptionOperator, useExisting: forwardRef(() => LuForGroupsDirective), multi: true,\n}",
                    "type": "directive"
                }
            ],
            "inputsClass": [
                {
                    "name": "luForGroupsGroupBy",
                    "line": 38,
                    "type": "function"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_groupByFn",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_subs",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "outOptions$",
                    "type": "Observable<TItem[]>",
                    "optional": true,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "groupBy",
                    "args": [
                        {
                            "name": "items",
                            "type": "TItem[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "ILuGroup[]",
                    "typeParameters": [],
                    "line": 70,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "TItem[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "render",
                    "args": [
                        {
                            "name": "options",
                            "type": "TItem[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "TItem[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "ILuOptionOperator",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_vcr",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "_templateRef",
                        "type": "TemplateRef<LuForGroupContext<ILuGroup<TItem, TKey>>>"
                    }
                ],
                "line": 48,
                "modifierKind": [
                    114
                ],
                "jsdoctags": [
                    {
                        "name": "_vcr",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_templateRef",
                        "type": "TemplateRef<LuForGroupContext<ILuGroup<TItem, TKey>>>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "attrGroupBy": {
                    "name": "attrGroupBy",
                    "setSignature": {
                        "name": "attrGroupBy",
                        "type": "void",
                        "args": [
                            {
                                "name": "fn",
                                "type": "function"
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "fn",
                                "type": "function",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inOptions$": {
                    "name": "inOptions$",
                    "setSignature": {
                        "name": "inOptions$",
                        "type": "void",
                        "args": [
                            {
                                "name": "options$",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 43,
                        "jsdoctags": [
                            {
                                "name": "options$",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "LuForLegalUnitsDirective",
            "id": "directive-LuForLegalUnitsDirective-77f46da6e314d0b6fbc637fbb9ae40a4",
            "file": "packages/ng/libraries/establishment/src/lib/select/for-legal-units/for-legal-units.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { ChangeDetectorRef, Directive, forwardRef, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { ILuGroup } from '@lucca-front/ng/core';\r\nimport { ALuOptionOperator, LuForGroupContext, LuForGroupsDirective } from '@lucca-front/ng/option';\r\nimport { ILuEstablishment, ILuLegalUnit } from '../../establishment.model';\r\n\r\n@Directive({\r\n\tselector: '[luForLegalUnits]',\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuForLegalUnitsDirective),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t]\r\n})\r\nexport class LuForLegalUnitsDirective extends LuForGroupsDirective<ILuEstablishment, ILuLegalUnit> {\r\n\r\n\t/** @override */\r\n\tpublic set attrGroupBy(fn: (item: ILuEstablishment) => ILuLegalUnit) {\r\n\t\tthrow new Error('Unsupported');\r\n\t}\r\n\r\n\tpublic constructor(\r\n\t\tprotected _vcr: ViewContainerRef,\r\n\t\tprotected _cdr: ChangeDetectorRef,\r\n\t\tprotected _templateRef: TemplateRef<LuForGroupContext<ILuGroup<ILuEstablishment, ILuLegalUnit>>>,\r\n\t) {\r\n\t\tsuper(_vcr, _cdr, _templateRef);\r\n\t}\r\n\r\n\t/** @override */\r\n\tprotected groupBy(items: ILuEstablishment[]): ILuGroup<ILuEstablishment, ILuLegalUnit>[] {\r\n\t\tconst groups: ILuGroup<ILuEstablishment, ILuLegalUnit>[] = [];\r\n\t\titems.forEach((item) => {\r\n\t\t\tconst legalUnit = item?.legalUnit;\r\n\t\t\tlet group = groups.find(g => g.key.id === legalUnit.id);\r\n\t\t\tif (!group) {\r\n\t\t\t\tgroup = { key: legalUnit, items: [] };\r\n\t\t\t\tgroups.push(group);\r\n\t\t\t}\r\n\t\t\tgroup.items.push(item);\r\n\t\t});\r\n\t\treturn groups;\r\n\t}\r\n}",
            "selector": "[luForLegalUnits]",
            "providers": [
                {
                    "name": "{\n    provide: ALuOptionOperator, useExisting: forwardRef(() => LuForLegalUnitsDirective), multi: true,\n}",
                    "type": "directive"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "groupBy",
                    "args": [
                        {
                            "name": "items",
                            "type": "ILuEstablishment[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "ILuGroup[]",
                    "typeParameters": [],
                    "line": 32,
                    "description": "",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "ILuEstablishment[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_vcr",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "_templateRef",
                        "type": "TemplateRef<LuForGroupContext<ILuGroup<ILuEstablishment, ILuLegalUnit>>>"
                    }
                ],
                "line": 21,
                "modifierKind": [
                    114
                ],
                "jsdoctags": [
                    {
                        "name": "_vcr",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_templateRef",
                        "type": "TemplateRef<LuForGroupContext<ILuGroup<ILuEstablishment, ILuLegalUnit>>>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "attrGroupBy": {
                    "name": "attrGroupBy",
                    "setSignature": {
                        "name": "attrGroupBy",
                        "type": "void",
                        "args": [
                            {
                                "name": "fn",
                                "type": "function"
                            }
                        ],
                        "returnType": "void",
                        "line": 19,
                        "jsdoctags": [
                            {
                                "name": "fn",
                                "type": "function",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "LuForOptionsDirective",
            "id": "directive-LuForOptionsDirective-48cd9c7089c835894046c017e4040a68",
            "file": "packages/ng/libraries/option/src/lib/operator/for-options/for-options.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { NgForOf, NgForOfContext } from '@angular/common';\r\nimport {\r\n\tChangeDetectorRef,\r\n\tDirective,\r\n\tforwardRef,\r\n\tInput,\r\n\tIterableDiffers,\r\n\tOnDestroy,\r\n\tTemplateRef,\r\n\tTrackByFunction,\r\n\tViewContainerRef,\r\n} from '@angular/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { ALuOptionOperator, ILuOptionOperator } from '../option-operator.model';\r\n\r\n@Directive({\r\n\tselector: '[luForOptions]',\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuForOptionsDirective),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuForOptionsDirective<T> extends NgForOf<T>\r\n\timplements ILuOptionOperator<T>, OnDestroy {\r\n\toutOptions$;\r\n\tprotected _subs = new Subscription();\r\n\tset inOptions$(options$: Observable<T[]>) {\r\n\t\tthis._subs.add(\r\n\t\t\toptions$.subscribe(options => {\r\n\t\t\t\tthis.ngForOf = options;\r\n\t\t\t\tthis._changeDetectionRef.markForCheck();\r\n\t\t\t}),\r\n\t\t);\r\n\t\tthis.outOptions$ = options$;\r\n\t}\r\n\t@Input()\r\n\tset luForOptionsTrackBy(fn: TrackByFunction<T>) {\r\n\t\tthis.ngForTrackBy = fn;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\t_viewContainer: ViewContainerRef,\r\n\t\t_template: TemplateRef<NgForOfContext<T>>,\r\n\t\t_differs: IterableDiffers,\r\n\t\tprotected _changeDetectionRef: ChangeDetectorRef,\r\n\t) {\r\n\t\tsuper(_viewContainer, _template, _differs);\r\n\t}\r\n\r\n\tngOnDestroy() {\r\n\t\tthis._subs.unsubscribe();\r\n\t}\r\n}\r\n",
            "selector": "[luForOptions]",
            "providers": [
                {
                    "name": "{\n    provide: ALuOptionOperator, useExisting: forwardRef(() => LuForOptionsDirective), multi: true,\n}",
                    "type": "directive"
                }
            ],
            "inputsClass": [
                {
                    "name": "luForOptionsTrackBy",
                    "line": 40,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_subs",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "outOptions$",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                }
            ],
            "implements": [
                "ILuOptionOperator",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_viewContainer",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "_template",
                        "type": "TemplateRef<NgForOfContext<T>>"
                    },
                    {
                        "name": "_differs",
                        "type": "IterableDiffers"
                    },
                    {
                        "name": "_changeDetectionRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "_viewContainer",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_template",
                        "type": "TemplateRef<NgForOfContext<T>>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_differs",
                        "type": "IterableDiffers",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_changeDetectionRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "inOptions$": {
                    "name": "inOptions$",
                    "setSignature": {
                        "name": "inOptions$",
                        "type": "void",
                        "args": [
                            {
                                "name": "options$",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 30,
                        "jsdoctags": [
                            {
                                "name": "options$",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "luForOptionsTrackBy": {
                    "name": "luForOptionsTrackBy",
                    "setSignature": {
                        "name": "luForOptionsTrackBy",
                        "type": "void",
                        "args": [
                            {
                                "name": "fn",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 40,
                        "jsdoctags": [
                            {
                                "name": "fn",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "LuForTreeOptionsDirective",
            "id": "directive-LuForTreeOptionsDirective-fdc73393c39221659804accffc977c14",
            "file": "packages/ng/libraries/option/src/lib/operator/for-options/for-tree-options.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, forwardRef, OnDestroy } from '@angular/core';\r\n\r\nimport { ALuTreeOptionOperator, ILuTreeOptionOperator } from '../tree-option-operator.model';\r\nimport { ILuTree } from '@lucca-front/ng/core';\r\nimport { LuForOptionsDirective } from './for-options.directive';\r\n\r\n@Directive({\r\n\tselector: '[luForTreeOptions]',\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuTreeOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuForTreeOptionsDirective),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuForTreeOptionsDirective<T> extends LuForOptionsDirective<ILuTree<T>> implements ILuTreeOptionOperator<T>, OnDestroy {}\r\n",
            "selector": "[luForTreeOptions]",
            "providers": [
                {
                    "name": "{\n    provide: ALuTreeOptionOperator, useExisting: forwardRef(() => LuForTreeOptionsDirective), multi: true,\n}",
                    "type": "directive"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "implements": [
                "ILuTreeOptionOperator",
                "OnDestroy"
            ]
        },
        {
            "name": "LuInputDirective",
            "id": "directive-LuInputDirective-bc5afbaad0251f38d11c784972d879a6",
            "file": "packages/ng/libraries/input/src/lib/input.directive.ts",
            "type": "directive",
            "description": "<p>adds class is-filled when model is empty</p>\n",
            "sourceCode": "import { Directive, ElementRef, Renderer2, OnInit } from '@angular/core';\r\nimport { NgControl } from '@angular/forms';\r\n\r\n/**\r\n * adds class is-filled when model is empty\r\n */\r\n@Directive({\r\n\tselector: '[luInput]',\r\n})\r\nexport class LuInputDirective implements OnInit {\r\n\tconstructor(\r\n\t\tprotected _elementRef: ElementRef,\r\n\t\tprotected _renderer: Renderer2,\r\n\t\tprotected _ngControl: NgControl,\r\n\t) {}\r\n\tprotected isEmpty(value) {\r\n\t\tif (typeof value === 'string') {\r\n\t\t\treturn value === '';\r\n\t\t}\r\n\t\treturn value === null || value === undefined;\r\n\t}\r\n\tprotected applyClasses(value) {\r\n\t\tif (this.isEmpty(value)) {\r\n\t\t\tthis._renderer.removeClass(this._elementRef.nativeElement, 'is-filled');\r\n\t\t} else {\r\n\t\t\tthis._renderer.addClass(this._elementRef.nativeElement, 'is-filled');\r\n\t\t}\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis._ngControl.valueChanges.subscribe(v => this.applyClasses(v));\r\n\t\tconst val = this._ngControl.value;\r\n\t\tthis.applyClasses(val);\r\n\t}\r\n}\r\n",
            "selector": "[luInput]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "applyClasses",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isEmpty",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 16,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "_ngControl",
                        "type": "NgControl"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_ngControl",
                        "type": "NgControl",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "LuInputDisplayerDirective",
            "id": "directive-LuInputDisplayerDirective-1f25b9ac48de9062356adcb7511ba8a3",
            "file": "packages/ng/libraries/input/src/lib/displayer/input-displayer.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, TemplateRef, forwardRef, ElementRef, ViewRef, EmbeddedViewRef, Input } from '@angular/core';\r\nimport { ILuInputDisplayer, ALuInputDisplayer } from './input-displayer.model';\r\n\r\n@Directive({\r\n\tselector: '[luDisplayer]',\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuInputDisplayer,\r\n\t\t\tuseExisting: forwardRef(() => LuInputDisplayerDirective),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuInputDisplayerDirective<T = any> extends ALuInputDisplayer<T> implements ILuInputDisplayer<T> {\r\n\t@Input('luDisplayerMultiple') set argMultiple(m: boolean) {\r\n\t\tthis.multiple = !!m;\r\n\t}\r\n\t@Input('multiple') set inputMultiple(m: boolean | string) {\r\n\t\tif (m === '') {\r\n\t\t\t// allows to have multiple = true when writing\r\n\t\t\t// <ng-template luDisplayer multiple>\r\n\t\t\tthis.multiple = true;\r\n\t\t} else {\r\n\t\t\tthis.multiple = !!m;\r\n\t\t}\r\n\t}\r\n\tconstructor(protected template: TemplateRef<LuInputDisplayerContext<T>>) { super(); }\r\n\tgetViewRef(value: T | T[]): ViewRef {\r\n\t\treturn this.template.createEmbeddedView({ $implicit: value });\r\n\t}\r\n}\r\n\r\nexport class LuInputDisplayerContext<T = any> {\r\n\tconstructor(public $implicit: T | T[]) {}\r\n}\r\n",
            "selector": "[luDisplayer]",
            "providers": [
                {
                    "name": "{\n    provide: ALuInputDisplayer, useExisting: forwardRef(() => LuInputDisplayerDirective), multi: true,\n}",
                    "type": "directive"
                }
            ],
            "inputsClass": [
                {
                    "name": "luDisplayerMultiple",
                    "line": 15,
                    "type": "boolean"
                },
                {
                    "name": "multiple",
                    "line": 18,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getViewRef",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "ViewRef",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "ILuInputDisplayer"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<LuInputDisplayerContext<T>>"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<LuInputDisplayerContext<T>>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "argMultiple": {
                    "name": "argMultiple",
                    "setSignature": {
                        "name": "argMultiple",
                        "type": "void",
                        "args": [
                            {
                                "name": "m",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 15,
                        "jsdoctags": [
                            {
                                "name": "m",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputMultiple": {
                    "name": "inputMultiple",
                    "setSignature": {
                        "name": "inputMultiple",
                        "type": "void",
                        "args": [
                            {
                                "name": "m",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 18,
                        "jsdoctags": [
                            {
                                "name": "m",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "LuLegalUnitSelectorDirective",
            "id": "directive-LuLegalUnitSelectorDirective-a1070c5736a46b3b3f93f572a35d56d8",
            "file": "packages/ng/libraries/establishment/src/lib/select/legal-unit-selector/legal-unit-selector.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, forwardRef, HostListener, Inject, Input, OnDestroy, Optional, Self, SkipSelf } from '@angular/core';\r\nimport { ALuOptionSelector, ILuOptionSelector } from '@lucca-front/ng/option';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { ILuEstablishment, ILuLegalUnit } from '../../establishment.model';\r\nimport { ALuEstablishmentService, LuEstablishmentService } from '../../service/index';\r\n\r\n@Directive({\r\n\tselector: '[luLegalUnitSelector]',\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuOptionSelector,\r\n\t\t\tuseExisting: forwardRef(() => LuLegalUnitSelectorDirective),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuEstablishmentService,\r\n\t\t\tuseClass: LuEstablishmentService,\r\n\t\t},\r\n\t]\r\n})\r\nexport class LuLegalUnitSelectorDirective implements ILuOptionSelector<ILuEstablishment>, OnDestroy {\r\n\tmultiple = true;\r\n\tonSelectValue = new Subject<ILuEstablishment[]>();\r\n\tprivate _values: ILuEstablishment[];\r\n\tprivate _service: LuEstablishmentService;\r\n\tprivate _subs = new Subscription();\r\n\r\n\t@Input('luLegalUnitSelector') legalUnit: ILuLegalUnit;\r\n\t@Input('luLegalUnitSelectorFilters') set filters(filters: string[]) { this._service.filters = filters; }\r\n\t@Input('luLegalUnitSelectorAppInstanceId') set appInstanceId(appId: number) { this._service.appInstanceId = appId; }\r\n\t@Input('luLegalUnitSelectorOperations') set operations(ops: number[]) { this._service.operations = ops; }\r\n\tconstructor(\r\n\t\t@Inject(ALuEstablishmentService) @Optional() @SkipSelf() hostService: ALuEstablishmentService,\r\n\t\t@Inject(ALuEstablishmentService) @Self() selfService: LuEstablishmentService,\r\n\t) {\r\n\t\tthis._service = (hostService || selfService) as LuEstablishmentService;\r\n\t}\r\n\r\n\t@HostListener('click')\r\n\tonClick(): void {\r\n\t\tconst sub = this._service.getAll(\r\n\t\t\t[`legalUnitId=${this.legalUnit.id}`]\r\n\t\t).subscribe(establishments => {\r\n\t\t\tif (this.shouldAdd(establishments)) {\r\n\t\t\t\tconst selectedEstablishmentIds = new Set<number>((this._values ?? []).map(ets => ets.id));\r\n\t\t\t\tthis.onSelectValue.next(\r\n\t\t\t\t\tArray.from([\r\n\t\t\t\t\t\t...(this._values ?? []),\r\n\t\t\t\t\t\t...establishments.filter(ets => !selectedEstablishmentIds.has(ets.id))\r\n\t\t\t\t\t])\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tconst establishmentIds = new Set<number>(establishments.map(ets => ets.id));\r\n\t\t\t\tthis.onSelectValue.next(\r\n\t\t\t\t\t(this._values ?? []).filter(ets => !establishmentIds.has(ets.id))\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis._subs.add(sub);\r\n\t}\r\n\r\n\tsetValue(values: ILuEstablishment[]): void {\r\n\t\tthis._values = values;\r\n\t}\r\n\r\n\tngOnDestroy() {\r\n\t\tthis._subs.unsubscribe();\r\n\t}\r\n\r\n\tprivate shouldAdd(establishments: ILuEstablishment[]): boolean {\r\n\t\tconst selectedCount = (this._values ?? [])\r\n\t\t\t.filter(ets => ets.legalUnitId === this.legalUnit.id)\r\n\t\t\t.length;\r\n\t\treturn establishments.length > selectedCount;\r\n\t}\r\n}",
            "selector": "[luLegalUnitSelector]",
            "providers": [
                {
                    "name": "{\n    provide: ALuOptionSelector, useExisting: forwardRef(() => LuLegalUnitSelectorDirective), multi: true,\n}",
                    "type": "directive"
                },
                {
                    "name": "{\n    provide: ALuEstablishmentService, useClass: LuEstablishmentService,\n}"
                }
            ],
            "inputsClass": [
                {
                    "name": "luLegalUnitSelector",
                    "line": 28,
                    "type": "ILuLegalUnit"
                },
                {
                    "name": "luLegalUnitSelectorAppInstanceId",
                    "line": 30,
                    "type": "number"
                },
                {
                    "name": "luLegalUnitSelectorFilters",
                    "line": 29,
                    "type": "[]"
                },
                {
                    "name": "luLegalUnitSelectorOperations",
                    "line": 31,
                    "type": "[]"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "line": 40
                }
            ],
            "propertiesClass": [
                {
                    "name": "_service",
                    "type": "LuEstablishmentService",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_subs",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_values",
                    "type": "ILuEstablishment[]",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "multiple",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "onSelectValue",
                    "defaultValue": "new Subject<ILuEstablishment[]>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "values",
                            "type": "ILuEstablishment[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "ILuEstablishment[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldAdd",
                    "args": [
                        {
                            "name": "establishments",
                            "type": "ILuEstablishment[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 70,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "establishments",
                            "type": "ILuEstablishment[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "ILuOptionSelector",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hostService",
                        "type": "ALuEstablishmentService"
                    },
                    {
                        "name": "selfService",
                        "type": "LuEstablishmentService"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "hostService",
                        "type": "ALuEstablishmentService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selfService",
                        "type": "LuEstablishmentService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "filters": {
                    "name": "filters",
                    "setSignature": {
                        "name": "filters",
                        "type": "void",
                        "args": [
                            {
                                "name": "filters",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 29,
                        "jsdoctags": [
                            {
                                "name": "filters",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "appInstanceId": {
                    "name": "appInstanceId",
                    "setSignature": {
                        "name": "appInstanceId",
                        "type": "void",
                        "args": [
                            {
                                "name": "appId",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 30,
                        "jsdoctags": [
                            {
                                "name": "appId",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "operations": {
                    "name": "operations",
                    "setSignature": {
                        "name": "operations",
                        "type": "void",
                        "args": [
                            {
                                "name": "ops",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "jsdoctags": [
                            {
                                "name": "ops",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "LuPopoverTargetDirective",
            "id": "directive-LuPopoverTargetDirective-cf59e5cfe13b6e210360ccd59c8c2c43",
            "file": "packages/ng/libraries/popover/src/lib/target/popover-target.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, Input } from '@angular/core';\r\nimport { ALuPopoverTarget, LuPopoverPosition, LuPopoverAlignment } from './popover-target.model';\r\n\r\n@Directive({\r\n\tselector: '[luPopoverTarget]',\r\n\texportAs: 'LuPopoverTarget',\r\n})\r\nexport class LuPopoverTargetDirective extends ALuPopoverTarget {\r\n\tconstructor(ref: ElementRef) {\r\n\t\tsuper();\r\n\t\tthis.elementRef = ref;\r\n\t}\r\n\t/** how you want to position the panel relative to the target, allowed values: above, below, before, after */\r\n\t@Input('luPopoverPosition') set inputPosition(pos: LuPopoverPosition) { this.position = pos; }\r\n\t/** how the panel will be align with the target, allowed values: top, bottom, left, right */\r\n\t@Input('luPopoverAlignment') set inputAlignment(al: LuPopoverAlignment) { this.alignment = al; }\r\n\t/** set to true if you want the panel to appear on top of the target */\r\n\t@Input('luPopoverOverlap') set inputOverlap(ov: boolean) { this.overlap = ov; }\r\n\r\n\t@Input('luPopoverOffsetX') set inputOffsetX(ox: number) { this.offsetX = ox; }\r\n\t@Input('luPopoverOffsetY') set inputOffsetY(oy: number) { this.offsetY = oy; }\r\n}\r\n",
            "selector": "[luPopoverTarget]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "luPopoverAlignment",
                    "description": "<p>how the panel will be align with the target, allowed values: top, bottom, left, right </p>\n",
                    "line": 16,
                    "type": ""
                },
                {
                    "name": "luPopoverOffsetX",
                    "line": 20,
                    "type": "number"
                },
                {
                    "name": "luPopoverOffsetY",
                    "line": 21,
                    "type": "number"
                },
                {
                    "name": "luPopoverOverlap",
                    "description": "<p>set to true if you want the panel to appear on top of the target </p>\n",
                    "line": 18,
                    "type": "boolean"
                },
                {
                    "name": "luPopoverPosition",
                    "description": "<p>how you want to position the panel relative to the target, allowed values: above, below, before, after </p>\n",
                    "line": 14,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "ElementRef"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "inputPosition": {
                    "name": "inputPosition",
                    "setSignature": {
                        "name": "inputPosition",
                        "type": "void",
                        "args": [
                            {
                                "name": "pos",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 14,
                        "description": "<p>how you want to position the panel relative to the target, allowed values: above, below, before, after </p>\n",
                        "jsdoctags": [
                            {
                                "name": "pos",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputAlignment": {
                    "name": "inputAlignment",
                    "setSignature": {
                        "name": "inputAlignment",
                        "type": "void",
                        "args": [
                            {
                                "name": "al",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "description": "<p>how the panel will be align with the target, allowed values: top, bottom, left, right </p>\n",
                        "jsdoctags": [
                            {
                                "name": "al",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputOverlap": {
                    "name": "inputOverlap",
                    "setSignature": {
                        "name": "inputOverlap",
                        "type": "void",
                        "args": [
                            {
                                "name": "ov",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 18,
                        "description": "<p>set to true if you want the panel to appear on top of the target </p>\n",
                        "jsdoctags": [
                            {
                                "name": "ov",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputOffsetX": {
                    "name": "inputOffsetX",
                    "setSignature": {
                        "name": "inputOffsetX",
                        "type": "void",
                        "args": [
                            {
                                "name": "ox",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "ox",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputOffsetY": {
                    "name": "inputOffsetY",
                    "setSignature": {
                        "name": "inputOffsetY",
                        "type": "void",
                        "args": [
                            {
                                "name": "oy",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 21,
                        "jsdoctags": [
                            {
                                "name": "oy",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "LuPopoverTriggerDirective",
            "id": "directive-LuPopoverTriggerDirective-0bea2a9c3abdda4da9edf1c6798f28f7",
            "file": "packages/ng/libraries/popover/src/lib/trigger/popover-trigger.directive.ts",
            "type": "directive",
            "description": "<p>This directive is intended to be used in conjunction with an lu-popover tag.  It is\nresponsible for toggling the display of the provided popover instance.</p>\n",
            "sourceCode": "import {\r\n\tAfterViewInit,\r\n\tDirective,\r\n\tElementRef,\r\n\tEventEmitter,\r\n\tInput,\r\n\tOnDestroy,\r\n\tOutput,\r\n\tViewContainerRef,\r\n\tHostListener,\r\n\tHostBinding,\r\n} from '@angular/core';\r\n\r\nimport {\r\n\tOverlay,\r\n} from '@angular/cdk/overlay';\r\n\r\nimport {\r\n\tILuPopoverTrigger, ALuPopoverTrigger, LuPopoverTriggerEvent,\r\n} from './popover-trigger.model';\r\nimport {\r\n\tILuPopoverPanel,\r\n} from '../panel/index';\r\nimport {\r\n\tILuPopoverTarget, LuPopoverPosition, LuPopoverAlignment, LuPopoverTarget,\r\n} from '../target/index';\r\n\r\n\r\n\r\n/**\r\n* This directive is intended to be used in conjunction with an lu-popover tag.  It is\r\n* responsible for toggling the display of the provided popover instance.\r\n*/\r\n@Directive({\r\n\tselector: '[luPopover]',\r\n\texportAs: 'LuPopoverTrigger',\r\n})\r\nexport class LuPopoverTriggerDirective<TPanel extends ILuPopoverPanel = ILuPopoverPanel, TTarget extends ILuPopoverTarget = ILuPopoverTarget>\r\nextends ALuPopoverTrigger<TPanel, TTarget>\r\nimplements ILuPopoverTrigger<TPanel, TTarget>, AfterViewInit, OnDestroy {\r\n\r\n\r\n\t/** References the popover instance that the trigger is associated with. */\r\n\t@Input('luPopover') set inputPanel(p: TPanel) { this.panel = p; }\r\n\r\n\t/** References the popover target instance that the trigger is associated with. */\r\n\t@Input('luPopoverTarget') set inputTarget(t: TTarget) { this.target = t; }\r\n\r\n\t/** References the popover target instance that the trigger is associated with. */\r\n\t@Input('luPopoverTrigger') set inputTriggerEvent(te: LuPopoverTriggerEvent) { this.triggerEvent = te; }\r\n\r\n\t/** Event emitted when the associated popover is opened. */\r\n\t@Output('luPopoverOnOpen') onOpen = new EventEmitter<void>();\r\n\r\n\t/** Event emitted when the associated popover is closed. */\r\n\t@Output('luPopoverOnClose') onClose = new EventEmitter<void>();\r\n\r\n\t/** how you want to position the panel relative to the target, allowed values: above, below, before, after */\r\n\t@Input('luPopoverPosition') set inputPosition(pos: LuPopoverPosition) { this.target.position = pos; }\r\n\t/** how the panel will be align with the target, allowed values: top, bottom, left, right */\r\n\t@Input('luPopoverAlignment') set inputAlignment(al: LuPopoverAlignment) { this.target.alignment = al; }\r\n\r\n\t/** when trigger = hover, delay before the popover panel appears */\r\n\t@Input('luPopoverEnterDelay') set inputEnterDelay(d: number) { this.enterDelay = d; }\r\n\t/** when trigger = hover, delay before the popover panel disappears */\r\n\t@Input('luPopoverLeaveDelay') set inputLeaveDelay(d: number) { this.leaveDelay = d; }\r\n\r\n\t/** disable popover apparition */\r\n\t@Input('luPopoverDisabled') set inputDisabled(d: boolean) { this.disabled = d; }\r\n\r\n\t/** set to true if you want the panel to appear on top of the target */\r\n\t@Input('luPopoverOverlap') set inputOverlap(ov: boolean) { this.target.overlap = ov; }\r\n\r\n\t@Input('luPopoverOffsetX') set inputOffsetX(ox: number) { this.target.offsetX = ox; }\r\n\t@Input('luPopoverOffsetY') set inputOffsetY(oy: number) { this.target.offsetY = oy; }\r\n\r\n\t/** accessibility attribute - dont override */\r\n\t@HostBinding('attr.aria-expanded') get _attrAriaExpanded() { return this._popoverOpen; }\r\n\t/** accessibility attribute - dont override */\r\n\t@HostBinding('attr.id') get _attrId() { return this._triggerId; }\r\n\t/** accessibility attribute - dont override */\r\n\t@HostBinding('attr.aria-controls') get _attrAriaControls() { return this._panelId; }\r\n\r\n\tconstructor(\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _elementRef: ElementRef,\r\n\t\tprotected _viewContainerRef: ViewContainerRef,\r\n\t) {\r\n\t\tsuper(_overlay, _elementRef, _viewContainerRef);\r\n\t\tthis.target = new LuPopoverTarget() as ILuPopoverTarget as TTarget;\r\n\t\tthis.target.elementRef = this._elementRef;\r\n\t\tthis._triggerId = this._elementRef.nativeElement.getAttribute('id') || this._triggerId;\r\n\t}\r\n\r\n\t@HostListener('click')\r\n\tonClick() {\r\n\t\tsuper.onClick();\r\n\t}\r\n\r\n\t@HostListener('mouseenter')\r\n\tonMouseEnter() {\r\n\t\tsuper.onMouseEnter();\r\n\t}\r\n\r\n\t@HostListener('mouseleave')\r\n\tonMouseLeave() {\r\n\t\tsuper.onMouseLeave();\r\n\t}\r\n\t@HostListener('focus')\r\n\tonFocus() {\r\n\t\tsuper.onFocus();\r\n\t}\r\n\t@HostListener('blur')\r\n\tonBlur() {\r\n\t\tsuper.onBlur();\r\n\t}\r\n\r\n\tngAfterViewInit() {\r\n\t\tthis._checkPanel();\r\n\t\tthis._checkTarget();\r\n\t}\r\n\tngOnDestroy() {\r\n\t\tthis._cleanUpSubscriptions();\r\n\t\tif (this._popoverOpen) {\r\n\t\t\tthis.closePopover();\r\n\t\t}\r\n\t\tthis.destroyPopover();\r\n\t}\r\n\tprotected _emitOpen(): void {\r\n\t\tthis.onOpen.emit();\r\n\t}\r\n\tprotected _emitClose(): void {\r\n\t\tthis.onClose.emit();\r\n\t}\r\n}\r\n",
            "selector": "[luPopover]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "luPopover",
                    "description": "<p>References the popover instance that the trigger is associated with. </p>\n",
                    "line": 44,
                    "type": ""
                },
                {
                    "name": "luPopoverAlignment",
                    "description": "<p>how the panel will be align with the target, allowed values: top, bottom, left, right </p>\n",
                    "line": 61,
                    "type": ""
                },
                {
                    "name": "luPopoverDisabled",
                    "description": "<p>disable popover apparition </p>\n",
                    "line": 69,
                    "type": "boolean"
                },
                {
                    "name": "luPopoverEnterDelay",
                    "description": "<p>when trigger = hover, delay before the popover panel appears </p>\n",
                    "line": 64,
                    "type": "number"
                },
                {
                    "name": "luPopoverLeaveDelay",
                    "description": "<p>when trigger = hover, delay before the popover panel disappears </p>\n",
                    "line": 66,
                    "type": "number"
                },
                {
                    "name": "luPopoverOffsetX",
                    "line": 74,
                    "type": "number"
                },
                {
                    "name": "luPopoverOffsetY",
                    "line": 75,
                    "type": "number"
                },
                {
                    "name": "luPopoverOverlap",
                    "description": "<p>set to true if you want the panel to appear on top of the target </p>\n",
                    "line": 72,
                    "type": "boolean"
                },
                {
                    "name": "luPopoverPosition",
                    "description": "<p>how you want to position the panel relative to the target, allowed values: above, below, before, after </p>\n",
                    "line": 59,
                    "type": ""
                },
                {
                    "name": "luPopoverTarget",
                    "description": "<p>References the popover target instance that the trigger is associated with. </p>\n",
                    "line": 47,
                    "type": ""
                },
                {
                    "name": "luPopoverTrigger",
                    "description": "<p>References the popover target instance that the trigger is associated with. </p>\n",
                    "line": 50,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "luPopoverOnClose",
                    "defaultValue": "new EventEmitter<void>()",
                    "description": "<p>Event emitted when the associated popover is closed. </p>\n",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "luPopoverOnOpen",
                    "defaultValue": "new EventEmitter<void>()",
                    "description": "<p>Event emitted when the associated popover is opened. </p>\n",
                    "line": 53,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [
                {
                    "name": "attr.aria-controls",
                    "description": "<p>accessibility attribute - dont override </p>\n",
                    "line": 82
                },
                {
                    "name": "attr.aria-expanded",
                    "description": "<p>accessibility attribute - dont override </p>\n",
                    "line": 78
                },
                {
                    "name": "attr.id",
                    "description": "<p>accessibility attribute - dont override </p>\n",
                    "line": 80
                }
            ],
            "hostListeners": [
                {
                    "name": "blur",
                    "args": [],
                    "argsDecorator": [],
                    "line": 114
                },
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "line": 96
                },
                {
                    "name": "focus",
                    "args": [],
                    "argsDecorator": [],
                    "line": 110
                },
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "line": 101
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "line": 106
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "_emitClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_emitOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122
                }
            ],
            "implements": [
                "ILuPopoverTrigger",
                "AfterViewInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef"
                    }
                ],
                "line": 82,
                "jsdoctags": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "inputPanel": {
                    "name": "inputPanel",
                    "setSignature": {
                        "name": "inputPanel",
                        "type": "void",
                        "args": [
                            {
                                "name": "p",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 44,
                        "description": "<p>References the popover instance that the trigger is associated with. </p>\n",
                        "jsdoctags": [
                            {
                                "name": "p",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputTarget": {
                    "name": "inputTarget",
                    "setSignature": {
                        "name": "inputTarget",
                        "type": "void",
                        "args": [
                            {
                                "name": "t",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "description": "<p>References the popover target instance that the trigger is associated with. </p>\n",
                        "jsdoctags": [
                            {
                                "name": "t",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputTriggerEvent": {
                    "name": "inputTriggerEvent",
                    "setSignature": {
                        "name": "inputTriggerEvent",
                        "type": "void",
                        "args": [
                            {
                                "name": "te",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 50,
                        "description": "<p>References the popover target instance that the trigger is associated with. </p>\n",
                        "jsdoctags": [
                            {
                                "name": "te",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputPosition": {
                    "name": "inputPosition",
                    "setSignature": {
                        "name": "inputPosition",
                        "type": "void",
                        "args": [
                            {
                                "name": "pos",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 59,
                        "description": "<p>how you want to position the panel relative to the target, allowed values: above, below, before, after </p>\n",
                        "jsdoctags": [
                            {
                                "name": "pos",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputAlignment": {
                    "name": "inputAlignment",
                    "setSignature": {
                        "name": "inputAlignment",
                        "type": "void",
                        "args": [
                            {
                                "name": "al",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 61,
                        "description": "<p>how the panel will be align with the target, allowed values: top, bottom, left, right </p>\n",
                        "jsdoctags": [
                            {
                                "name": "al",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputEnterDelay": {
                    "name": "inputEnterDelay",
                    "setSignature": {
                        "name": "inputEnterDelay",
                        "type": "void",
                        "args": [
                            {
                                "name": "d",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 64,
                        "description": "<p>when trigger = hover, delay before the popover panel appears </p>\n",
                        "jsdoctags": [
                            {
                                "name": "d",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputLeaveDelay": {
                    "name": "inputLeaveDelay",
                    "setSignature": {
                        "name": "inputLeaveDelay",
                        "type": "void",
                        "args": [
                            {
                                "name": "d",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 66,
                        "description": "<p>when trigger = hover, delay before the popover panel disappears </p>\n",
                        "jsdoctags": [
                            {
                                "name": "d",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputDisabled": {
                    "name": "inputDisabled",
                    "setSignature": {
                        "name": "inputDisabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "d",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 69,
                        "description": "<p>disable popover apparition </p>\n",
                        "jsdoctags": [
                            {
                                "name": "d",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputOverlap": {
                    "name": "inputOverlap",
                    "setSignature": {
                        "name": "inputOverlap",
                        "type": "void",
                        "args": [
                            {
                                "name": "ov",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 72,
                        "description": "<p>set to true if you want the panel to appear on top of the target </p>\n",
                        "jsdoctags": [
                            {
                                "name": "ov",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputOffsetX": {
                    "name": "inputOffsetX",
                    "setSignature": {
                        "name": "inputOffsetX",
                        "type": "void",
                        "args": [
                            {
                                "name": "ox",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 74,
                        "jsdoctags": [
                            {
                                "name": "ox",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputOffsetY": {
                    "name": "inputOffsetY",
                    "setSignature": {
                        "name": "inputOffsetY",
                        "type": "void",
                        "args": [
                            {
                                "name": "oy",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 75,
                        "jsdoctags": [
                            {
                                "name": "oy",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "LuScrollDirective",
            "id": "directive-LuScrollDirective-12e554e48155feb5ae8be1923c774168",
            "file": "packages/ng/libraries/scroll/src/lib/scroll.directive.ts",
            "type": "directive",
            "description": "<p>emits on scroll events</p>\n",
            "sourceCode": "import { Directive, Output, HostListener, EventEmitter, ElementRef, OnInit, Input } from '@angular/core';\r\nimport { ILuScrollable } from './scroll.model';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\n/**\r\n * emits on scroll events\r\n */\r\n@Directive({\r\n\tselector: '[luScroll]',\r\n\texportAs: 'luScroll',\r\n})\r\nexport class LuScrollDirective implements ILuScrollable, OnInit {\r\n\t@Input() debounceTime = 100;\r\n\t@Output() onScroll = new EventEmitter<Event>();\r\n\t@Output() onScrollTop = new EventEmitter<Event>();\r\n\t@Output() onScrollBottom = new EventEmitter<Event>();\r\n\t@Output() onScrollLeft = new EventEmitter<Event>();\r\n\t@Output() onScrollRight = new EventEmitter<Event>();\r\n\tprivate scrollSubject = new Subject<Event>();\r\n\tprivate scroll$ = this.scrollSubject.asObservable().pipe(debounceTime(this.debounceTime));\r\n\t@HostListener('scroll', ['$event'])\r\n\t_scroll($event: Event) {\r\n\t\tthis.scrollSubject.next($event);\r\n\t}\r\n\r\n\tngOnInit(): void {\r\n\t\tthis.scroll$.subscribe(scrollEvent => this.emitScrollEvents(scrollEvent));\r\n\t}\r\n\tprivate emitScrollEvents($event: Event) {\r\n\t\tthis.onScroll.emit($event);\r\n\r\n\t\tconst target = $event.target;\r\n\t\tif (target instanceof Element) {\r\n\t\t\tconst scrollLeft = target.scrollLeft;\r\n\t\t\tconst scrollTop = target.scrollTop;\r\n\t\t\tif (scrollLeft === 0) {\r\n\t\t\t\tthis.onScrollLeft.emit($event);\r\n\t\t\t}\r\n\t\t\tif (scrollTop === 0) {\r\n\t\t\t\tthis.onScrollTop.emit($event);\r\n\t\t\t}\r\n\t\t\tconst scrollWidth = target.scrollWidth;\r\n\t\t\tconst scrollHeight = target.scrollHeight;\r\n\t\t\tconst eltHeight = this._elementRef.nativeElement.clientHeight;\r\n\t\t\tconst eltWidth = this._elementRef.nativeElement.clientWidth;\r\n\t\t\tif (scrollWidth - scrollLeft - eltWidth < 10) {\r\n\t\t\t\tthis.onScrollRight.emit($event);\r\n\t\t\t}\r\n\t\t\tif (scrollHeight - scrollTop - eltHeight < 10) {\r\n\t\t\t\tthis.onScrollBottom.emit($event);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tconstructor(protected _elementRef: ElementRef) {\r\n\t}\r\n}\r\n",
            "selector": "[luScroll]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "debounceTime",
                    "defaultValue": "100",
                    "line": 14
                }
            ],
            "outputsClass": [
                {
                    "name": "onScroll",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 15,
                    "type": "EventEmitter"
                },
                {
                    "name": "onScrollBottom",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 17,
                    "type": "EventEmitter"
                },
                {
                    "name": "onScrollLeft",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 18,
                    "type": "EventEmitter"
                },
                {
                    "name": "onScrollRight",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 19,
                    "type": "EventEmitter"
                },
                {
                    "name": "onScrollTop",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "scroll",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Event"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 23
                }
            ],
            "propertiesClass": [
                {
                    "name": "scroll$",
                    "defaultValue": "this.scrollSubject.asObservable().pipe(debounceTime(this.debounceTime))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "scrollSubject",
                    "defaultValue": "new Subject<Event>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "emitScrollEvents",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "implements": [
                "ILuScrollable",
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "LuTooltipTriggerDirective",
            "id": "directive-LuTooltipTriggerDirective-7c2cb360b1d91c82b6f093ee55dfdad0",
            "file": "packages/ng/libraries/tooltip/src/lib/trigger/tooltip-trigger.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {\r\n\tDirective,\r\n\tInput,\r\n\tElementRef,\r\n\tViewContainerRef,\r\n\tComponentFactoryResolver,\r\n\tAfterViewInit,\r\n\tHostListener,\r\n\tInjector,\r\n\tOnDestroy,\r\n\tOutput,\r\n\tEventEmitter,\r\n\tHostBinding,\r\n} from '@angular/core';\r\n\timport { Overlay } from '@angular/cdk/overlay';\r\n\timport { ALuPopoverTrigger, LuPopoverPosition, LuPopoverTarget } from '@lucca-front/ng/popover';\r\n\timport { LuTooltipPanelComponent } from '../panel/tooltip-panel.component';\r\n\r\n@Directive({\r\n\tselector: '[luTooltip]',\r\n})\r\nexport class LuTooltipTriggerDirective extends ALuPopoverTrigger<LuTooltipPanelComponent, LuPopoverTarget> implements AfterViewInit, OnDestroy {\r\n\r\n\t@Input('luTooltip') set tooltipContent(c) {\r\n\t\tthis.panel.content = c;\r\n\t}\r\n\t/** when trigger = hover, delay before the popover panel appears, default 300ms */\r\n\t@Input('luTooltipEnterDelay') set inputEnterDelay(d: number) { this.enterDelay = d; }\r\n\t/** when trigger = hover, delay before the popover panel disappears, default 100ms */\r\n\t@Input('luTooltipLeaveDelay') set inputLeaveDelay(d: number) { this.leaveDelay = d; }\r\n\t/** disable popover apparition */\r\n\t@Input('luTooltipDisabled') set inputDisabled(d: boolean) { this.disabled = d; }\r\n\r\n\t@Input('luTooltipPosition') set inputPosition(pos: LuPopoverPosition) { this.target.position = pos; }\r\n\r\n\t/** Event emitted when the associated popover is opened. */\r\n\t@Output('luTooltipOnOpen') onOpen = new EventEmitter<void>();\r\n\t/** Event emitted when the associated popover is closed. */\r\n\t@Output('luTooltipOnClose') onClose = new EventEmitter<void>();\r\n\t@HostListener('mouseenter')\r\n\tonMouseEnter() {\r\n\t\tsuper.onMouseEnter();\r\n\t}\r\n\r\n\t@HostListener('mouseleave')\r\n\tonMouseLeave() {\r\n\t\tsuper.onMouseLeave();\r\n\t}\r\n\t@HostListener('focus')\r\n\tonFocus(){\r\n\t\tsuper.onMouseEnter();\r\n\t}\r\n\t@HostListener('blur')\r\n\tonBlur() {\r\n\t\tsuper.onMouseLeave();\r\n\t}\r\n\t@HostBinding('attr.tabindex') tabindex = 0;\r\n\r\n\t/** accessibility attribute - dont override */\r\n\t@HostBinding('attr.id') get _attrId() { return this._triggerId; }\r\n\t/** accessibility attribute - dont override */\r\n\t@HostBinding('attr.aria-describedby') get _attrAriaDescribedBy() { return this._panelId; }\r\n\r\n\tconstructor(\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _elementRef: ElementRef,\r\n\t\tprotected _viewContainerRef: ViewContainerRef,\r\n\t\tcomponentFactoryResolver: ComponentFactoryResolver,\r\n\t\tinjector: Injector,\r\n\t) {\r\n\t\tsuper(_overlay, _elementRef, _viewContainerRef);\r\n\t\tthis.target = new LuPopoverTarget();\r\n\t\tthis.target.elementRef = this._elementRef;\r\n\t\tthis._triggerId = this._elementRef.nativeElement.getAttribute('id') || this._triggerId;\r\n\t\tthis.triggerEvent = 'hover';\r\n\t\tthis.target.position = 'above';\r\n\t\tthis.enterDelay = 300;\r\n\t\tthis.leaveDelay = 100;\r\n\r\n\t\tconst factory = componentFactoryResolver.resolveComponentFactory(LuTooltipPanelComponent);\r\n\t\tthis.panel = factory.create(injector).instance;\r\n\t}\r\n\r\n\tngAfterViewInit() {\r\n\t\tthis._checkTarget();\r\n\t}\r\n\tngOnDestroy() {\r\n\t\tthis._cleanUpSubscriptions();\r\n\t\tif (this._popoverOpen) {\r\n\t\t\tthis.closePopover();\r\n\t\t}\r\n\t\tthis.destroyPopover();\r\n\t}\r\n\tprotected _emitOpen(): void {\r\n\t\tthis.onOpen.emit();\r\n\t}\r\n\tprotected _emitClose(): void {\r\n\t\tthis.onClose.emit();\r\n\t}\r\n}\r\n",
            "selector": "[luTooltip]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "luTooltip",
                    "line": 24
                },
                {
                    "name": "luTooltipDisabled",
                    "description": "<p>disable popover apparition </p>\n",
                    "line": 32,
                    "type": "boolean"
                },
                {
                    "name": "luTooltipEnterDelay",
                    "description": "<p>when trigger = hover, delay before the popover panel appears, default 300ms </p>\n",
                    "line": 28,
                    "type": "number"
                },
                {
                    "name": "luTooltipLeaveDelay",
                    "description": "<p>when trigger = hover, delay before the popover panel disappears, default 100ms </p>\n",
                    "line": 30,
                    "type": "number"
                },
                {
                    "name": "luTooltipPosition",
                    "line": 34,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "luTooltipOnClose",
                    "defaultValue": "new EventEmitter<void>()",
                    "description": "<p>Event emitted when the associated popover is closed. </p>\n",
                    "line": 39,
                    "type": "EventEmitter"
                },
                {
                    "name": "luTooltipOnOpen",
                    "defaultValue": "new EventEmitter<void>()",
                    "description": "<p>Event emitted when the associated popover is opened. </p>\n",
                    "line": 37,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [
                {
                    "name": "attr.aria-describedby",
                    "description": "<p>accessibility attribute - dont override </p>\n",
                    "line": 62
                },
                {
                    "name": "attr.id",
                    "description": "<p>accessibility attribute - dont override </p>\n",
                    "line": 60
                },
                {
                    "name": "attr.tabindex",
                    "defaultValue": "0",
                    "line": 57
                }
            ],
            "hostListeners": [
                {
                    "name": "blur",
                    "args": [],
                    "argsDecorator": [],
                    "line": 54
                },
                {
                    "name": "focus",
                    "args": [],
                    "argsDecorator": [],
                    "line": 50
                },
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "line": 41
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "line": 46
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "_emitClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_emitOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87
                }
            ],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "injector",
                        "type": "Injector"
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "tooltipContent": {
                    "name": "tooltipContent",
                    "setSignature": {
                        "name": "tooltipContent",
                        "type": "void",
                        "args": [
                            {
                                "name": "c",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 24,
                        "jsdoctags": [
                            {
                                "name": "c",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputEnterDelay": {
                    "name": "inputEnterDelay",
                    "setSignature": {
                        "name": "inputEnterDelay",
                        "type": "void",
                        "args": [
                            {
                                "name": "d",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "description": "<p>when trigger = hover, delay before the popover panel appears, default 300ms </p>\n",
                        "jsdoctags": [
                            {
                                "name": "d",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputLeaveDelay": {
                    "name": "inputLeaveDelay",
                    "setSignature": {
                        "name": "inputLeaveDelay",
                        "type": "void",
                        "args": [
                            {
                                "name": "d",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 30,
                        "description": "<p>when trigger = hover, delay before the popover panel disappears, default 100ms </p>\n",
                        "jsdoctags": [
                            {
                                "name": "d",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputDisabled": {
                    "name": "inputDisabled",
                    "setSignature": {
                        "name": "inputDisabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "d",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "description": "<p>disable popover apparition </p>\n",
                        "jsdoctags": [
                            {
                                "name": "d",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputPosition": {
                    "name": "inputPosition",
                    "setSignature": {
                        "name": "inputPosition",
                        "type": "void",
                        "args": [
                            {
                                "name": "pos",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "pos",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "LuUserMeOptionDirective",
            "id": "directive-LuUserMeOptionDirective-0a087a693964136caf487c8d769892a8",
            "file": "packages/ng/libraries/user/src/lib/select/me/me-option.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, forwardRef, Inject, Optional, SkipSelf, Self, ViewContainerRef, TemplateRef } from '@angular/core';\r\nimport { ALuOptionOperator, ILuOptionOperator } from '@lucca-front/ng/option';\r\nimport { ALuOnOpenSubscriber } from '@lucca-front/ng/core';\r\nimport { ILuUser } from '../../user.model';\r\nimport { ALuUserService, LuUserV3Service } from '../../service/index';\r\n\r\n@Directive({\r\n\tselector: '[luUserMeOption]',\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuUserMeOptionDirective),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuUserService,\r\n\t\t\tuseClass: LuUserV3Service,\r\n\t\t},\r\n\t\t\r\n\t\t{\r\n\t\t\tprovide: ALuOnOpenSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuUserMeOptionDirective),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuUserMeOptionDirective implements ILuOptionOperator {\r\n\tset inOptions$ (in$) {\r\n\t\tthis.outOptions$ = in$;\r\n\t}\r\n\toutOptions$;\r\n\tprivate _service: ALuUserService;\r\n\tconstructor(\r\n\t\t@Inject(ALuUserService) @Optional() @SkipSelf() hostService: ALuUserService,\r\n\t\t@Inject(ALuUserService) @Self() selfService: ALuUserService,\r\n\t\tprivate _vcr: ViewContainerRef,\r\n\t\tprivate _templateRef: TemplateRef<{ $implicit: ILuUser }>,\r\n\t) {\r\n\t\tthis._service = hostService || selfService;\r\n\t}\r\n\r\n\tme: ILuUser = undefined;\r\n\tprivate meDisplayed = false;\r\n\tonOpen() {\r\n\t\tthis._service.getMe().subscribe(me => {\r\n\t\t\tthis.me = me;\r\n\t\t\tthis.displayMe();\r\n\t\t});\r\n\t}\r\n\tdisplayMe() {\r\n\t\tif (this.me && !this.meDisplayed) {\r\n\t\t\tthis.meDisplayed = true;\r\n\t\t\tthis._vcr.createEmbeddedView(this._templateRef, { $implicit: this.me });\r\n\t\t}\r\n\t}\r\n}",
            "selector": "[luUserMeOption]",
            "providers": [
                {
                    "name": "{\n    provide: ALuOptionOperator, useExisting: forwardRef(() => LuUserMeOptionDirective), multi: true,\n}",
                    "type": "directive"
                },
                {
                    "name": "{\n    provide: ALuUserService, useClass: LuUserV3Service,\n}"
                },
                {
                    "name": "{\n    provide: ALuOnOpenSubscriber, useExisting: forwardRef(() => LuUserMeOptionDirective), multi: true,\n}",
                    "type": "directive"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_service",
                    "type": "ALuUserService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "me",
                    "defaultValue": "undefined",
                    "type": "ILuUser",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "meDisplayed",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "outOptions$",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "displayMe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                }
            ],
            "implements": [
                "ILuOptionOperator"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hostService",
                        "type": "ALuUserService"
                    },
                    {
                        "name": "selfService",
                        "type": "ALuUserService"
                    },
                    {
                        "name": "_vcr",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "_templateRef",
                        "type": "TemplateRef<literal type>"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "hostService",
                        "type": "ALuUserService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selfService",
                        "type": "ALuUserService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_vcr",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_templateRef",
                        "type": "TemplateRef<literal type>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "inOptions$": {
                    "name": "inOptions$",
                    "setSignature": {
                        "name": "inOptions$",
                        "type": "void",
                        "args": [
                            {
                                "name": "in$",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "in$",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "ApiV4Component",
            "id": "component-ApiV4Component-b74a314d53b31a44534045e7d100ac96",
            "file": "packages/ng/applications/sandbox/src/app/issues/api-v4/api-v4.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-api-v4",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./api-v4.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "department",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "establishment",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'sand-api-v4',\r\n\ttemplateUrl: './api-v4.component.html'\r\n})\r\nexport class ApiV4Component {\r\n\tdepartment;\r\n\testablishment;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>api-v4</h1>\r\n<h2>all in one</h2>\r\n<div class=\"textfield\">\r\n\t<lu-api-select class=\"textfield-input\" [(ngModel)]=\"department\" api=\"/api/v3/departments\"></lu-api-select>\r\n\t<label class=\"textfield-label\">depratments (v3)</label>\r\n</div>\r\n<pre>{{ department | json }}</pre>\r\n<div class=\"textfield\">\r\n\t<lu-api-select class=\"textfield-input\" [(ngModel)]=\"establishment\" api=\"/organization/structure/api/establishments\" standard=\"v4\"></lu-api-select>\r\n\t<label class=\"textfield-label\">establishments (v4)</label>\r\n</div>\r\n<pre>{{ establishment | json }}</pre>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-8994c0f4267f53fe8a76e4bff92342dd",
            "file": "packages/ng/applications/sandbox/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'lu-root',\r\n\ttemplateUrl: './app.component.html',\r\n\tstyleUrls: []\r\n})\r\nexport class AppComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<main class=\"main\">\r\n\t<section class=\"main-content\">\r\n\t\t<div class=\"container\">\r\n\t\t\t<router-outlet></router-outlet>\r\n\t\t\t\r\n\t\t</div>\r\n\t</section>\r\n</main>"
        },
        {
            "name": "AsyncModalContent",
            "id": "component-AsyncModalContent-8660abe2fb43f80c733de155cef6e87d",
            "file": "packages/ng/applications/sandbox/src/app/issues/modal-synched/modal-synched.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-async-modal-content",
            "styleUrls": [],
            "styles": [],
            "template": "the submit on this modal resolves asynchronously\t",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "submitAction",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "title",
                    "defaultValue": "'title'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { LuModal } from '@lucca-front/ng/modal';\r\nimport { of } from 'rxjs';\r\nimport { delay } from 'rxjs/operators';\r\n\r\n@Component({\r\n\tselector: 'lu-modal-synched',\r\n\ttemplateUrl: './modal-synched.component.html'\r\n})\r\nexport class ModalSynchedComponent {\r\n\tconstructor(\r\n\t\tprivate _modal: LuModal,\r\n\t) {}\r\n\topenSyncModal() {\r\n\t\tthis._modal.open(SyncModalContent);\r\n\t}\r\n\topenAsyncModal() {\r\n\t\tthis._modal.open(AsyncModalContent);\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'lu-sync-modal-content',\r\n\ttemplate: `the submit on this modal resolves synchronously\r\n\t`\r\n})\r\nexport class SyncModalContent {\r\n\ttitle = 'title';\r\n\tsubmitAction = () => true;\r\n}\r\n@Component({\r\n\tselector: 'lu-async-modal-content',\r\n\ttemplate: `the submit on this modal resolves asynchronously\r\n\t`\r\n})\r\nexport class AsyncModalContent {\r\n\ttitle = 'title';\r\n\tsubmitAction = () => of(true).pipe(delay(500));\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "BasicModalContent",
            "id": "component-BasicModalContent-4db2287e6105fec2c5f5333cb4ca9a2a",
            "file": "packages/ng/applications/sandbox/src/app/issues/fix-modal/fix-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-modal-content",
            "styleUrls": [],
            "styles": [],
            "template": "content of the modal component <br>\tpopup data: {{popupData}}<br>\n\tmodal data: {{modalData}}<br>\n\tsidepanel data: {{sidepanelData}}<br>\n\t",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "modalData",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LU_MODAL_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "popupData",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LU_POPUP_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sidepanelData",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LU_SIDEPANEL_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "submitAction",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "title",
                    "defaultValue": "'title'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, Optional, ChangeDetectionStrategy } from '@angular/core';\r\nimport { LuPopup, LU_POPUP_DATA } from '@lucca-front/ng/popup';\r\nimport { LuModal, LU_MODAL_DATA } from '@lucca-front/ng/modal';\r\nimport { LuSidepanel, LU_SIDEPANEL_DATA } from '@lucca-front/ng/sidepanel';\r\n\r\nimport { of } from 'rxjs';\r\n\r\n@Component({\r\n\tselector: 'lu-fix-modal',\r\n\ttemplateUrl: './fix-modal.component.html'\r\n})\r\nexport class FixModalComponent {\r\n\tconstructor(\r\n\t\tprivate _popup: LuPopup,\r\n\t\tprivate _modal: LuModal,\r\n\t\tprivate _sidepanel: LuSidepanel,\r\n\t) {}\r\n\topenPopup(data?) {\r\n\t\tthis._popup.open(BasicModalContent, data);\r\n\t}\r\n\topenModal(data?) {\r\n\t\tthis._modal.open(BasicModalContent, data, { changeDetection: ChangeDetectionStrategy.Default});\r\n\t}\r\n\topenSidepanel(data?) {\r\n\t\tthis._sidepanel.open(BasicModalContent, data, { changeDetection: ChangeDetectionStrategy.Default});\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'lu-modal-content',\r\n\ttemplate: `content of the modal component <br>\r\n\tpopup data: {{popupData}}<br>\r\n\tmodal data: {{modalData}}<br>\r\n\tsidepanel data: {{sidepanelData}}<br>\r\n\t`\r\n})\r\nexport class BasicModalContent {\r\n\ttitle = 'title';\r\n\tsubmitAction = () => of(true);\r\n\r\n\tconstructor(\r\n\t\t@Optional()@Inject(LU_POPUP_DATA) public popupData,\r\n\t\t@Optional()@Inject(LU_MODAL_DATA) public modalData,\r\n\t\t@Optional()@Inject(LU_SIDEPANEL_DATA) public sidepanelData,\r\n\t) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "popupData",
                        "type": ""
                    },
                    {
                        "name": "modalData",
                        "type": ""
                    },
                    {
                        "name": "sidepanelData",
                        "type": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "popupData",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalData",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sidepanelData",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "BasicModalContent",
            "id": "component-BasicModalContent-31921ba4f35983a4e603f3bce48c92b1-1",
            "file": "packages/ng/applications/sandbox/src/app/issues/modal-a11y/modal-a11y.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-modal-content",
            "styleUrls": [],
            "styles": [],
            "template": "<p>content of the modal component</p>\n<button class=\"button\" (click)=\"openModal()\">more modals</button>\n<button class=\"button\" (click)=\"incr()\">incr</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "submitAction",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "submitCounter",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "title",
                    "defaultValue": "'title'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "incr",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "openModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { LuModal } from '@lucca-front/ng/modal';\r\nimport { LuSidepanel } from '@lucca-front/ng/sidepanel';\r\nconst MAGIC_POSITIONS = [\r\n\t'center',\r\n\t'top',\r\n\t'right',\r\n\t'bottom',\r\n\t'left',\r\n];\r\nconst MAGIC_SIZES = [\r\n\t'small',\r\n\t'medium',\r\n\t'large',\r\n];\r\n@Component({\r\n\tselector: 'lu-modal-content',\r\n\ttemplate: `\r\n\t<p>content of the modal component</p>\r\n\t<button class=\"button\" (click)=\"openModal()\">more modals</button>\r\n\t<button class=\"button\" (click)=\"incr()\">incr</button>\r\n\t`\r\n})\r\nexport class BasicModalContent {\r\n\ttitle = 'title';\r\n\tsubmitAction = () => true;\r\n\t// submitPalette = 'warning';\r\n\tsubmitCounter = 0;\r\n\tget submitDisabled() { return this.submitCounter % 2; } \r\n\tconstructor(\r\n\t\tprivate _modal: LuModal,\r\n\t) {}\r\n\topenModal() {\r\n\t\tconst randPosition = Math.floor(Math.random() * 5);\r\n\t\tconst randSize = Math.floor(Math.random() * 3);\r\n\t\tconst config = { position: undefined, size: undefined };\r\n\t\tconfig.position = MAGIC_POSITIONS[randPosition];\r\n\t\tconfig.size = MAGIC_SIZES[randSize];\r\n\r\n\t\tthis._modal.open(BasicModalContent, undefined, config);\r\n\t}\r\n\tincr() {\r\n\t\tthis.submitCounter++;\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'sand-modal-a11y',\r\n\ttemplateUrl: './modal-a11y.component.html'\r\n})\r\nexport class ModalA11yComponent {\r\n\tconstructor(\r\n\t\tprivate _modal: LuModal,\r\n\t\tprivate _sidepanel: LuSidepanel,\r\n\t) {}\r\n\topenModal() {\r\n\t\tthis._modal.open(BasicModalContent);\r\n\t}\r\n\topenSidepanel() {\r\n\t\tthis._sidepanel.open(BasicModalContent);\r\n\t}\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_modal",
                        "type": "LuModal"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "_modal",
                        "type": "LuModal",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "submitDisabled": {
                    "name": "submitDisabled",
                    "getSignature": {
                        "name": "submitDisabled",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "BasicModalContent-1"
        },
        {
            "name": "BasicModalContent",
            "id": "component-BasicModalContent-05ac65f36a21073f58776ddef3df3f6f-2",
            "file": "packages/ng/applications/sandbox/src/app/issues/modal-undismissable/modal-undismissable.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-modal-content",
            "styleUrls": [],
            "styles": [],
            "template": "content of the modal component\t",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "submitAction",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "title",
                    "defaultValue": "'title'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { LuPopup, ALuPopupRef, ILuPopupRef } from '@lucca-front/ng/popup';\r\nimport { LuModal } from '@lucca-front/ng/modal';\r\nimport { LuSidepanel } from '@lucca-front/ng/sidepanel';\r\n@Component({\r\n\tselector: 'sand-modal-undismissable',\r\n\ttemplateUrl: './modal-undismissable.component.html'\r\n})\r\nexport class ModalUndismissableComponent {\r\n\tundismissable = false;\r\n\tconstructor(\r\n\t\tprivate _popup: LuPopup,\r\n\t\tprivate _modal: LuModal,\r\n\t\tprivate _sidepanel: LuSidepanel,\r\n\t) {}\r\n\topenPopup(data?) {\r\n\t\tconst ref = this._popup.open(BasicPopupContent, data, { undismissable: this.undismissable});\r\n\t}\r\n\topenModal(data?) {\r\n\t\tconst ref = this._modal.open(BasicModalContent, data, { undismissable: this.undismissable});\r\n\t}\r\n\topenSidepanel(data?) {\r\n\t\tconst ref = this._sidepanel.open(BasicModalContent, data, { undismissable: this.undismissable});\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'lu-modal-content',\r\n\ttemplate: `content of the modal component\r\n\t`\r\n})\r\nexport class BasicModalContent {\r\n\ttitle = 'title';\r\n\tsubmitAction = () => true;\r\n}\r\n@Component({\r\n\tselector: 'lu-popup-content',\r\n\ttemplate: `popup <br />\r\n\t\t<button class=\"button\" (click)=\"close()\">close</button>\r\n\t\t<button class=\"button\" (click)=\"dismiss()\">dismiss</button>\r\n\t`\r\n})\r\nexport class BasicPopupContent {\r\n\tconstructor(\r\n\t\t@Inject(ALuPopupRef) private _ref: ILuPopupRef,\r\n\t) {}\r\n\tclose() {\r\n\t\tthis._ref.close(true);\r\n\t}\r\n\tdismiss() {\r\n\t\tthis._ref.dismiss();\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "BasicModalContent-2"
        },
        {
            "name": "BasicModalContent",
            "id": "component-BasicModalContent-d5acf7a5fffda703cc278061c6fa80f7-3",
            "file": "packages/ng/applications/sandbox/src/app/issues/modals-no-submit/modals-no-submit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-modal-content",
            "styleUrls": [],
            "styles": [],
            "template": "content of the modal component\t",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'title'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { LuModal } from '@lucca-front/ng/modal';\r\nimport { LuSidepanel } from '@lucca-front/ng/sidepanel';\r\n\r\n@Component({\r\n\tselector: 'lu-modals-no-submit',\r\n\ttemplateUrl: './modals-no-submit.component.html'\r\n})\r\nexport class ModalsNoSubmitComponent {\r\n\tconstructor(\r\n\t\tprivate _modal: LuModal,\r\n\t\tprivate _sidepanel: LuSidepanel,\r\n\t) {}\r\n\topenModal(data?) {\r\n\t\tthis._modal.open(BasicModalContent, data);\r\n\t}\r\n\topenSidepanel(data?) {\r\n\t\tthis._sidepanel.open(BasicModalContent, data);\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'lu-modal-content',\r\n\ttemplate: `content of the modal component\r\n\t`\r\n})\r\nexport class BasicModalContent {\r\n\ttitle = 'title';\r\n\r\n\tconstructor(\r\n\t) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 27
            },
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "BasicModalContent-3"
        },
        {
            "name": "BasicModalContent",
            "id": "component-BasicModalContent-b1a88a21d4b061a57b33dfb6b6aab707-4",
            "file": "packages/ng/applications/sandbox/src/app/issues/modal-dismiss/modal-dismiss.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-modal-content",
            "styleUrls": [],
            "styles": [],
            "template": "content of the modal component\t",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "submitAction",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "title",
                    "defaultValue": "'title'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { LuPopup, ALuPopupRef, ILuPopupRef } from '@lucca-front/ng/popup';\r\nimport { LuModal } from '@lucca-front/ng/modal';\r\nimport { LuSidepanel } from '@lucca-front/ng/sidepanel';\r\nimport { Subject, Subscription } from 'rxjs';\r\n\r\n/*tslint:disable*/\r\n@Component({\r\n\tselector: 'lu-modal-dismiss',\r\n\ttemplateUrl: './modal-dismiss.component.html'\r\n})\r\nexport class ModalDismissComponent {\r\n\tconstructor(\r\n\t\tprivate _popup: LuPopup,\r\n\t\tprivate _modal: LuModal,\r\n\t\tprivate _sidepanel: LuSidepanel,\r\n\t) {}\r\n\r\n\tevent$ = new Subject();\r\n\tsubs = new Subscription();\r\n\tget activeSubscriptions() { return this.subs['_subscriptions'] ? this.subs['_subscriptions'].length : 0; }\r\n\r\n\r\n\topenPopup(data?) {\r\n\t\tconst ref = this._popup.open(BasicPopupContent, data);\r\n\t\tthis.subs.add(ref.onDismiss.subscribe(() => this.event$.next('popup dismissed')));\r\n\t\tthis.subs.add(ref.onClose.subscribe(() => this.event$.next('popup closed')));\r\n\t}\r\n\topenModal(data?) {\r\n\t\tconst ref = this._modal.open(BasicModalContent, data);\r\n\t\tthis.subs.add(ref.onDismiss.subscribe(() => this.event$.next('modal dismissed')));\r\n\t\tthis.subs.add(ref.onClose.subscribe(() => this.event$.next('modal closed')));\r\n\t}\r\n\topenSidepanel(data?) {\r\n\t\tconst ref = this._sidepanel.open(BasicModalContent, data);\r\n\t\tthis.subs.add(ref.onDismiss.subscribe(() => this.event$.next('sidepanel dismissed')));\r\n\t\tthis.subs.add(ref.onClose.subscribe(() => this.event$.next('sidepanel closed')));\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'lu-modal-content',\r\n\ttemplate: `content of the modal component\r\n\t`\r\n})\r\nexport class BasicModalContent {\r\n\ttitle = 'title';\r\n\tsubmitAction = () => true;\r\n\r\n}\r\n@Component({\r\n\tselector: 'lu-popup-content',\r\n\ttemplate: `popup <br />\r\n\t\t<button class=\"button\" (click)=\"close()\">close</button>\r\n\t\t<button class=\"button\" (click)=\"dismiss()\">dismiss</button>\r\n\t`\r\n})\r\nexport class BasicPopupContent {\r\n\tconstructor(\r\n\t\t@Inject(ALuPopupRef) private _ref: ILuPopupRef,\r\n\t) {}\r\n\tclose() {\r\n\t\tthis._ref.close(true);\r\n\t}\r\n\tdismiss() {\r\n\t\tthis._ref.dismiss();\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 4,
            "duplicateName": "BasicModalContent-4"
        },
        {
            "name": "BasicPopupContent",
            "id": "component-BasicPopupContent-05ac65f36a21073f58776ddef3df3f6f",
            "file": "packages/ng/applications/sandbox/src/app/issues/modal-undismissable/modal-undismissable.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-popup-content",
            "styleUrls": [],
            "styles": [],
            "template": "popup <br />\t\t<button class=\"button\" (click)=\"close()\">close</button>\n\t\t<button class=\"button\" (click)=\"dismiss()\">dismiss</button>\n\t",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "dismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { LuPopup, ALuPopupRef, ILuPopupRef } from '@lucca-front/ng/popup';\r\nimport { LuModal } from '@lucca-front/ng/modal';\r\nimport { LuSidepanel } from '@lucca-front/ng/sidepanel';\r\n@Component({\r\n\tselector: 'sand-modal-undismissable',\r\n\ttemplateUrl: './modal-undismissable.component.html'\r\n})\r\nexport class ModalUndismissableComponent {\r\n\tundismissable = false;\r\n\tconstructor(\r\n\t\tprivate _popup: LuPopup,\r\n\t\tprivate _modal: LuModal,\r\n\t\tprivate _sidepanel: LuSidepanel,\r\n\t) {}\r\n\topenPopup(data?) {\r\n\t\tconst ref = this._popup.open(BasicPopupContent, data, { undismissable: this.undismissable});\r\n\t}\r\n\topenModal(data?) {\r\n\t\tconst ref = this._modal.open(BasicModalContent, data, { undismissable: this.undismissable});\r\n\t}\r\n\topenSidepanel(data?) {\r\n\t\tconst ref = this._sidepanel.open(BasicModalContent, data, { undismissable: this.undismissable});\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'lu-modal-content',\r\n\ttemplate: `content of the modal component\r\n\t`\r\n})\r\nexport class BasicModalContent {\r\n\ttitle = 'title';\r\n\tsubmitAction = () => true;\r\n}\r\n@Component({\r\n\tselector: 'lu-popup-content',\r\n\ttemplate: `popup <br />\r\n\t\t<button class=\"button\" (click)=\"close()\">close</button>\r\n\t\t<button class=\"button\" (click)=\"dismiss()\">dismiss</button>\r\n\t`\r\n})\r\nexport class BasicPopupContent {\r\n\tconstructor(\r\n\t\t@Inject(ALuPopupRef) private _ref: ILuPopupRef,\r\n\t) {}\r\n\tclose() {\r\n\t\tthis._ref.close(true);\r\n\t}\r\n\tdismiss() {\r\n\t\tthis._ref.dismiss();\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_ref",
                        "type": "ILuPopupRef"
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "_ref",
                        "type": "ILuPopupRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "BasicPopupContent",
            "id": "component-BasicPopupContent-b1a88a21d4b061a57b33dfb6b6aab707-1",
            "file": "packages/ng/applications/sandbox/src/app/issues/modal-dismiss/modal-dismiss.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-popup-content",
            "styleUrls": [],
            "styles": [],
            "template": "popup <br />\t\t<button class=\"button\" (click)=\"close()\">close</button>\n\t\t<button class=\"button\" (click)=\"dismiss()\">dismiss</button>\n\t",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "dismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { LuPopup, ALuPopupRef, ILuPopupRef } from '@lucca-front/ng/popup';\r\nimport { LuModal } from '@lucca-front/ng/modal';\r\nimport { LuSidepanel } from '@lucca-front/ng/sidepanel';\r\nimport { Subject, Subscription } from 'rxjs';\r\n\r\n/*tslint:disable*/\r\n@Component({\r\n\tselector: 'lu-modal-dismiss',\r\n\ttemplateUrl: './modal-dismiss.component.html'\r\n})\r\nexport class ModalDismissComponent {\r\n\tconstructor(\r\n\t\tprivate _popup: LuPopup,\r\n\t\tprivate _modal: LuModal,\r\n\t\tprivate _sidepanel: LuSidepanel,\r\n\t) {}\r\n\r\n\tevent$ = new Subject();\r\n\tsubs = new Subscription();\r\n\tget activeSubscriptions() { return this.subs['_subscriptions'] ? this.subs['_subscriptions'].length : 0; }\r\n\r\n\r\n\topenPopup(data?) {\r\n\t\tconst ref = this._popup.open(BasicPopupContent, data);\r\n\t\tthis.subs.add(ref.onDismiss.subscribe(() => this.event$.next('popup dismissed')));\r\n\t\tthis.subs.add(ref.onClose.subscribe(() => this.event$.next('popup closed')));\r\n\t}\r\n\topenModal(data?) {\r\n\t\tconst ref = this._modal.open(BasicModalContent, data);\r\n\t\tthis.subs.add(ref.onDismiss.subscribe(() => this.event$.next('modal dismissed')));\r\n\t\tthis.subs.add(ref.onClose.subscribe(() => this.event$.next('modal closed')));\r\n\t}\r\n\topenSidepanel(data?) {\r\n\t\tconst ref = this._sidepanel.open(BasicModalContent, data);\r\n\t\tthis.subs.add(ref.onDismiss.subscribe(() => this.event$.next('sidepanel dismissed')));\r\n\t\tthis.subs.add(ref.onClose.subscribe(() => this.event$.next('sidepanel closed')));\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'lu-modal-content',\r\n\ttemplate: `content of the modal component\r\n\t`\r\n})\r\nexport class BasicModalContent {\r\n\ttitle = 'title';\r\n\tsubmitAction = () => true;\r\n\r\n}\r\n@Component({\r\n\tselector: 'lu-popup-content',\r\n\ttemplate: `popup <br />\r\n\t\t<button class=\"button\" (click)=\"close()\">close</button>\r\n\t\t<button class=\"button\" (click)=\"dismiss()\">dismiss</button>\r\n\t`\r\n})\r\nexport class BasicPopupContent {\r\n\tconstructor(\r\n\t\t@Inject(ALuPopupRef) private _ref: ILuPopupRef,\r\n\t) {}\r\n\tclose() {\r\n\t\tthis._ref.close(true);\r\n\t}\r\n\tdismiss() {\r\n\t\tthis._ref.dismiss();\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_ref",
                        "type": "ILuPopupRef"
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "_ref",
                        "type": "ILuPopupRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "BasicPopupContent-1"
        },
        {
            "name": "ButtonStory",
            "id": "component-ButtonStory-085008015fcf364a58f1aa2cb9480154",
            "file": "stories/scss/button.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.stories.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Story, Meta, moduleMetadata } from '@storybook/angular';\r\n\r\n\r\n@Component({\r\n\ttemplateUrl: './button.stories.html',\r\n}) class ButtonStory {}\r\n\r\nexport default {\r\n  title: 'SCSS/Button',\r\n  component: ButtonStory,\r\n\tdecorators: [\r\n\t\tmoduleMetadata({\r\n\t\t\tentryComponents: [ButtonStory]\r\n\t\t})\r\n\t]\r\n} as Meta;\r\n\r\nconst template: Story<ButtonStory> = (args: ButtonStory) => ({\r\n  props: args,\r\n});\r\n\r\nexport const basic = template.bind({});",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<!-- Basics -->\r\n<section class=\"contentSection\">\r\n\t<button class=\"button\">Default</button>\r\n\t<button class=\"button mod-outline\">Outline</button>\r\n\t<button class=\"button mod-link\">Link</button>\r\n\t<div class=\"demo-invert\">\r\n\t\t<button class=\"button mod-link mod-invert\">Link inverted</button>\r\n\t</div>\r\n<code class=\"code mod-block\">&lt;button class=\"button\"&gt;...&lt;/button&gt;\r\n&lt;button class=\"button mod-outline\"&gt;...&lt;/button&gt;\r\n&lt;button class=\"button mod-link\"&gt;...&lt;/button&gt;\r\n&lt;button class=\"button mod-link mod-invert\"&gt;...&lt;/button&gt;\r\n</code>\r\n\t<em><b>Tip:</b> Can be used as <code class=\"code\">&lt;a href=\"#\"&gt;</code>, for links.</em><br>\r\n</section>\r\n\r\n<!-- Palette -->\r\n<section class=\"contentSection\">\r\n\t<h2>Palette</h2>\r\n\t<button class=\"button palette-primary\">Primary</button>\r\n\t<button class=\"button palette-secondary\">Secondary</button>\r\n\t<button class=\"button palette-success\">Success</button>\r\n\t<button class=\"button palette-warning\">Warning</button>\r\n\t<button class=\"button palette-error\">Error</button>\r\n\t<button class=\"button mod-outline palette-primary\">Primary</button>\r\n\t<button class=\"button mod-outline palette-secondary\">Secondary</button>\r\n\t<button class=\"button mod-outline palette-success\">Success</button>\r\n\t<button class=\"button mod-outline palette-warning\">Warning</button>\r\n\t<button class=\"button mod-outline palette-error\">Error</button>\r\n<code class=\"code mod-block\">&lt;button class=\"button palette-primary\"&gt;...&lt;/button&gt;\r\n&lt;button class=\"button palette-secondary\"&gt;...&lt;/button&gt;\r\n&lt;button class=\"button palette-success\"&gt;...&lt;/button&gt;\r\n&lt;button class=\"button palette-warning\"&gt;...&lt;/button&gt;\r\n&lt;button class=\"button palette-error\"&gt;...&lt;/button&gt;\r\n</code>\r\n</section>\r\n\r\n<!-- Size -->\r\n<section class=\"contentSection\">\r\n\t<h2>Size</h2>\r\n\t<button class=\"button\">Standard button</button>\r\n\t<button class=\"button mod-small\">Small button</button>\r\n\t<button class=\"button mod-smaller\">Smaller button</button>\r\n<code class=\"code mod-block\">&lt;button class=\"button mod-small\"&gt;...&lt;/button&gt;</code>\r\n</section>\r\n\r\n<!-- Counter -->\r\n<section class=\"contentSection\">\r\n\t<h2>Counter</h2>\r\n\t<button class=\"button mod-counter\">Counting button<span class=\"button-counter\">7</span></button>\r\n\t<button class=\"button mod-counter mod-small\">Counting button<span class=\"button-counter\">7</span></button>\r\n\t<button class=\"button mod-counter mod-smaller\">Counting button<span class=\"button-counter\">7</span></button>\r\n<code class=\"code mod-block\">&lt;button class=\"button mod-counter\"&gt;Counting button&lt;span class=\"button-counter\"&gt;7&lt;/span&gt;&lt;/button&gt;</code>\r\n</section>\r\n\r\n<!-- Icons -->\r\n<section class=\"contentSection\">\r\n\t<h2>Icons</h2>\r\n\t<button class=\"button mod-icon\"><span aria-hidden=\"true\" class=\"button-icon lucca-icon icon-cloudDownload\"></span>Sauvegarder</button>\r\n\t<button class=\"button mod-icon\"><span aria-hidden=\"true\" class=\"button-icon lucca-icon icon-send\"></span>Envoyer</button>\r\n\t<button class=\"button mod-icon mod-small\"><span aria-hidden=\"true\" class=\"button-icon lucca-icon icon-cloudDownload\"></span>Sauvegarder</button>\r\n\t<button class=\"button mod-icon mod-small\"><span aria-hidden=\"true\" class=\"button-icon lucca-icon icon-send\"></span>Envoyer</button>\r\n\t<button class=\"button mod-icon mod-smaller\"><span aria-hidden=\"true\" class=\"button-icon lucca-icon icon-cloudDownload\"></span>Sauvegarder</button>\r\n\t<button class=\"button mod-icon mod-smaller\"><span aria-hidden=\"true\" class=\"button-icon lucca-icon icon-send\"></span>Envoyer</button>\r\n</section>\r\n\r\n<!-- States -->\r\n<section class=\"contentSection\">\r\n\t<h2>States</h2>\r\n\t<button class=\"button is-loading\">Loading</button>\r\n\t<button class=\"button is-success\">Success</button>\r\n\t<button class=\"button is-error\">Success</button>\r\n<code class=\"code mod-block\">&lt;button class=\"button is-loading\"&gt;...&lt;/button&gt;\r\n&lt;button class=\"button is-success\"&gt;...&lt;/button&gt;\r\n&lt;button class=\"button is-error\"&gt;...&lt;/button&gt;\r\n</code>\r\n</section>\r\n\r\n<!-- Disabled  -->\r\n<section class=\"contentSection\">\r\n\t<h2>Disabled</h2>\r\n\t<button class=\"button\" disabled>Disabled button</button>\r\n\t<button class=\"button palette-primary is-disabled\">Disabled button</button>\r\n<code class=\"code mod-block\">&lt;button class=\"button\" disabled&gt;...&lt;/button&gt;</code>\r\n\t<em><b>Tip:</b> Buttons can also be disabled with a class <code class=\"code\">class=\"button is-disabled\"</code>, but you will not be able to use a tooltip on it.</em>\r\n</section>\r\n\r\n<!-- Groups -->\r\n<section class=\"contentSection\">\r\n\t<h2>Group of buttons</h2>\r\n\t<p>You can wrap buttons to have a group of buttons.</p>\r\n\t<div class=\"button-group\">\r\n\t\t<button class=\"button\">default</button>\r\n\t\t<button class=\"button\">default</button>\r\n\t\t<button class=\"button\">default</button>\r\n\t\t<button class=\"button\">default</button>\r\n\t</div>\r\n\t<div class=\"button-group palette-warning\">\r\n\t\t<button class=\"button\">default</button>\r\n\t\t<button class=\"button\">default</button>\r\n\t\t<button class=\"button\">default</button>\r\n\t\t<button class=\"button\">default</button>\r\n\t</div>\r\n<code class=\"code mod-block\">&lt;div class=\"button-group\"&gt;\r\n\t&lt;button class=\"button\"&gt;...&lt;/button&gt;\r\n\t&lt;button class=\"button\"&gt;...&lt;/button&gt;\r\n&lt;/div&gt;\r\n</code>\r\n</section>\r\n\r\n<!-- Groups -->\r\n<section class=\"contentSection\">\r\n\t<h2>More button</h2>\r\n\t<p>You can use button's group to add more action to a button.</p>\r\n\r\n\t<div class=\"button-group mod-more\">\r\n\t\t<button class=\"button palette-primary\">Main action</button>\r\n\t\t<button class=\"button palette-primary mod-more\"></button>\r\n\t</div>\r\n\r\n<code class=\"code mod-block\">&lt;div class=\"button-group mod-more\"&gt;\r\n\t&lt;button class=\"button palette-primary\"&gt;Main action&lt;/button&gt;\r\n\t&lt;button class=\"button palette-primary mod-more\"&gt;&lt;/button&gt;\r\n&lt;/div&gt;\r\n</code>\r\n</section>\r\n\r\n<section class=\"contentSection\">\r\n\t<h3>Theme</h3>\r\n\t<table class=\"table mod-small mod-zebra mod-alignTop\">\r\n\t\t<thead class=\"table-head\">\r\n\t\t\t<tr class=\"table-head-row\">\r\n\t\t\t\t<th class=\"table-head-row-cell\">Options</th>\r\n\t\t\t\t<th class=\"table-head-row-cell\">Default value</th>\r\n\t\t\t\t<th class=\"table-head-row-cell\">Notes</th>\r\n\t\t\t</tr>\r\n\t\t</thead>\r\n\t\t<tbody class=\"table-body\">\r\n\t\t\t<tr class=\"table-body-row\">\r\n\t\t\t\t<td class=\"table-body-row-cell u-nowrap\">default-palette</td>\r\n\t\t\t\t<td class=\"table-body-row-cell\">\r\n\t\t\t\t\t<b>color:</b> white<br>\r\n\t\t\t\t\t<b>text:</b> _color(\"text.default\")\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"table-body-row-cell u-textLight u-nowrap\">\r\n\t\t\t\t\tButton background color<br>\r\n\t\t\t\t\tButton text color\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr class=\"table-body-row\">\r\n\t\t\t\t<td class=\"table-body-row-cell u-nowrap\">margin</td>\r\n\t\t\t\t<td class=\"table-body-row-cell\">.2rem</td>\r\n\t\t\t\t<td class=\"table-body-row-cell u-textLight\"></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr class=\"table-body-row\">\r\n\t\t\t\t<td class=\"table-body-row-cell u-nowrap\">box-shadow</td>\r\n\t\t\t\t<td class=\"table-body-row-cell\">0 0 0 1px rgba(50, 50, 50, .2) inset</td>\r\n\t\t\t\t<td class=\"table-body-row-cell u-textLight\"></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr class=\"table-body-row\">\r\n\t\t\t\t<td class=\"table-body-row-cell u-nowrap\">hover</td>\r\n\t\t\t\t<td class=\"table-body-row-cell\"><b>box-shadow:</b> 0 0 0 1px rgba(50, 50, 50, .2) inset, 0 1px 3px rgba(0, 0, 0, .12), 0 1px 2px rgba(0, 0, 0, .24)</td>\r\n\t\t\t\t<td class=\"table-body-row-cell u-textLight\"></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr class=\"table-body-row\">\r\n\t\t\t\t<td class=\"table-body-row-cell u-nowrap\">focus</td>\r\n\t\t\t\t<td class=\"table-body-row-cell\"><b>box-shadow:</b> 0 0 0 1px rgba(50, 50, 50, .2) inset, 0 1px 3px rgba(0, 0, 0, .12), 0 1px 2px rgba(0, 0, 0, .24)</td>\r\n\t\t\t\t<td class=\"table-body-row-cell u-textLight\"></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr class=\"table-body-row\">\r\n\t\t\t\t<td class=\"table-body-row-cell u-nowrap\">active</td>\r\n\t\t\t\t<td class=\"table-body-row-cell\"><b>box-shadow:</b> 0 0 0 1px rgba(50, 50, 50, .2) inset</td>\r\n\t\t\t\t<td class=\"table-body-row-cell u-textLight\"></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr class=\"table-body-row\">\r\n\t\t\t\t<td class=\"table-body-row-cell u-nowrap\">checked</td>\r\n\t\t\t\t<td class=\"table-body-row-cell\">_theme(\"palettes.primary\")</td>\r\n\t\t\t\t<td class=\"table-body-row-cell u-textLight\">Palette color of radio/checkbox button groups</td>\r\n\t\t\t</tr>\r\n\t\t</tbody>\r\n\t</table>\r\n</section>\r\n<section class=\"contentSection\">\r\n\t<h4>Example</h4>\r\n\t<p>Edit your buttons theme in <code class=\"code\">components.override.scss</code>:<p>\r\n<code class=\"code mod-block\">$button: (\r\n\tmargin: 1rem,\r\n\thover: (\r\n\t\tbox-shadow: 0 0 2px rgba(0, 0, 0, .15)\r\n\t)\r\n);\r\n$theme: _set($theme, \"components.button\", $button);</code>\r\n</section>\r\n"
        },
        {
            "name": "CommInAppModalComponent",
            "id": "component-CommInAppModalComponent-a385b3720448b4c57b7ce5be7724ddb1",
            "file": "packages/ng/applications/sandbox/src/app/issues/comm-in-app-modal/comm-in-app-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-comm-in-app-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./comm-in-app-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "openModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ILuModalContent, LuModal } from '@lucca-front/ng/modal';\r\n\r\n@Component({\r\n\tselector: 'comm-in-app-modal',\r\n\ttemplateUrl: './comm-modal.html'\r\n})\r\nexport class CommModal implements ILuModalContent {\r\n\ttitle: string = '';\r\n}\r\n\r\n@Component({\r\n\tselector: 'sand-comm-in-app-modal',\r\n\ttemplateUrl: './comm-in-app-modal.component.html'\r\n})\r\nexport class CommInAppModalComponent {\r\n\tconstructor(\r\n\t\tprivate _modal: LuModal\r\n\t){}\r\n\r\n\tpublic openModal(): void {\r\n\t\tthis._modal.open(CommModal, {}, {\r\n\t\t\tpanelClass: ['lu-popup-panel', 'mod-commInApp']\r\n\t\t});\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_modal",
                        "type": "LuModal"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_modal",
                        "type": "LuModal",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1>comm-in-app-modal</h1>\r\n<button class=\"button\" (click)=\"openModal()\">open modal</button>"
        },
        {
            "name": "CommModal",
            "id": "component-CommModal-a385b3720448b4c57b7ce5be7724ddb1",
            "file": "packages/ng/applications/sandbox/src/app/issues/comm-in-app-modal/comm-in-app-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "comm-in-app-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./comm-modal.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ILuModalContent, LuModal } from '@lucca-front/ng/modal';\r\n\r\n@Component({\r\n\tselector: 'comm-in-app-modal',\r\n\ttemplateUrl: './comm-modal.html'\r\n})\r\nexport class CommModal implements ILuModalContent {\r\n\ttitle: string = '';\r\n}\r\n\r\n@Component({\r\n\tselector: 'sand-comm-in-app-modal',\r\n\ttemplateUrl: './comm-in-app-modal.component.html'\r\n})\r\nexport class CommInAppModalComponent {\r\n\tconstructor(\r\n\t\tprivate _modal: LuModal\r\n\t){}\r\n\r\n\tpublic openModal(): void {\r\n\t\tthis._modal.open(CommModal, {}, {\r\n\t\t\tpanelClass: ['lu-popup-panel', 'mod-commInApp']\r\n\t\t});\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "ILuModalContent"
            ],
            "templateData": "<p class=\"lu-modal-content-title\">\r\n    <strong>\r\n        The module has a new look !\r\n    </strong>\r\n</p>\r\n<p>\r\n    D’ici 2 semaines, le module changera d’apparence. \r\n    L’interface que vous utilisez sera remplacé et vous bénéficierez \r\n    d’une meilleure expérience utilisateur.\r\n</p>\r\n<button class=\"button palette-secondary\">Try now</button>\r\n<p class=\"u-marginBottomReset\">You don't want to use the new version?</p>\r\n<a target=\"_blank\">\r\n    Explain to us why\r\n    <span class=\"lucca-icon icon-outside size-small\" aria-hidden=\"true\"></span>\r\n</a>\r\n\r\n<div class=\"modal-visual\">\r\n    <svg class=\"modal-visual-illustration\" viewBox=\"0 0 480 136\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M295.885 100.674C274.513 91.6229 257.668 62.2058 194.685 46.3658C126.673 29.2687 34.1475 52.6515 -6.5839 138.514C-43.6696 216.457 -11.2353 334.754 88.8332 383.28C180.856 427.909 270.365 378.377 324.296 343.932C343.53 331.612 374.079 324.823 395.702 327.84C417.199 330.857 484.707 328.972 509.599 250.903C535.245 170.572 497.279 69.7487 397.965 72.5144C359.496 73.6458 330.079 115.006 295.885 100.674Z\" fill=\"#EEF4FC\"/>\r\n        <path d=\"M170.799 92.1257C191.919 78.6743 204.616 44.3543 268.73 16.1943C337.999 -14.2286 440.456 -6.05716 499.039 77.6685C552.216 153.726 538.891 285.223 440.959 354.869C351.073 418.857 247.108 382.526 183.748 355.623C161.119 346.069 127.428 344.309 105.051 351.474C82.6734 358.64 10.6391 368.697 -29.5895 290.377C-71.0752 209.794 -48.5723 95.8971 57.4048 80.8114C127.556 71.6346 137.108 113.623 170.799 92.1257Z\" fill=\"url(#paint0_linear)\"/>\r\n        <defs>\r\n        <linearGradient id=\"paint0_linear\" x1=\"-12.8897\" y1=\"54.7208\" x2=\"482.083\" y2=\"317.257\" gradientUnits=\"userSpaceOnUse\">\r\n        <stop stop-color=\"#CEDDF3\"/>\r\n        <stop offset=\"1\" stop-color=\"#BACDE8\"/>\r\n        </linearGradient>\r\n        </defs>\r\n    </svg> \r\n</div>"
        },
        {
            "name": "DateCalendarComponent",
            "id": "component-DateCalendarComponent-6c939e0b61e03925b4a0073e01be88e0",
            "file": "packages/ng/applications/sandbox/src/app/issues/date-calendar/date-calendar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-date-calendar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./date-calendar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "date",
                    "defaultValue": "new Date()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9
                },
                {
                    "name": "random",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'sand-date-calendar',\r\n\ttemplateUrl: './date-calendar.component.html'\r\n})\r\nexport class DateCalendarComponent implements OnInit {\r\n\tdate = new Date();\r\n\tngOnInit() {\r\n\t\t// this.date.setFullYear(2016);\r\n\t}\r\n\trandom() {\r\n\t\tthis.date = new Date(this.date);\r\n\t\tthis.date.setDate(Math.ceil(Math.random() * 30));\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>date-calendar</h1>\r\n<lu-calendar [(ngModel)]=\"date\"></lu-calendar>\r\n<button class=\"button\" (click)=\"random()\">random</button>\r\n\r\n{{ date | luDate: 'full' }}"
        },
        {
            "name": "DateGranularityComponent",
            "id": "component-DateGranularityComponent-22c65444d962d055592df5ef7058e370",
            "file": "packages/ng/applications/sandbox/src/app/issues/date-granularity/date-granularity.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-date-granularity",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./date-granularity.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "date",
                    "defaultValue": "new Date()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "gran",
                    "defaultValue": "ELuDateGranularity.month",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ELuDateGranularity } from '@lucca-front/ng/core';\r\n\r\n@Component({\r\n\tselector: 'sand-date-granularity',\r\n\ttemplateUrl: './date-granularity.component.html'\r\n})\r\nexport class DateGranularityComponent {\r\n\tdate = new Date();\r\n\tgran = ELuDateGranularity.month;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>date-granularity</h1>\r\ngranularity: <code>{{ gran }}</code>\r\n<h2>calendar-input</h2>\r\n<lu-calendar [(ngModel)]=\"date\" [granularity]=\"gran\"></lu-calendar>\r\n\r\n<h2>date-input</h2>\r\n<div class=\"textfield\">\r\n\t<input  class=\"textfield-input\" luDateInput [(ngModel)]=\"date\" [granularity]=\"gran\">\r\n\t<label class=\"textfield-label\">date input</label>\r\n</div>\r\n\r\n<h2>date-select</h2>\r\n<div class=\"textfield\">\r\n\t<lu-date-select class=\"textfield-input\" [(ngModel)]=\"date\" [granularity]=\"gran\"></lu-date-select>\r\n\t<label for=\"\" class=\"textfield-label\">date select</label>\r\n</div>\r\n\r\n<pre>{{ date | luDate: 'full' }}</pre>"
        },
        {
            "name": "DateInputComponent",
            "id": "component-DateInputComponent-93571ba617f6cbccb6aa4fc3013c97c9",
            "file": "packages/ng/applications/sandbox/src/app/issues/date-input/date-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-date-input",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./date-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "date",
                    "defaultValue": "new Date()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\r\n\t\tdate: new FormControl(),\r\n\t})",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n\tselector: 'sand-date-input',\r\n\ttemplateUrl: './date-input.component.html'\r\n})\r\nexport class DateInputComponent implements OnInit {\r\n\tdate = new Date();\r\n\tform = new FormGroup({\r\n\t\tdate: new FormControl(),\r\n\t});\r\n\tsubmit() {\r\n\t\tconsole.log(this.form.value);\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis.form.valueChanges.subscribe(v => {\r\n\t\t\tconst f = this.form;\r\n\t\t})\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>date-input</h1>\r\n<h2>no picker</h2>\r\n<div class=\"textfield\">\r\n\t<input  class=\"textfield-input\" luDateInput [(ngModel)]=\"date\">\r\n\t<label class=\"textfield-label\">date input</label>\r\n</div>\r\n<h2>in a form</h2>\r\n<form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\r\n\t<div class=\"textfield\">\r\n\t\t<input  class=\"textfield-input\" luDateInput formControlName=\"date\" required>\r\n\t\t<label class=\"textfield-label\">date input</label>\r\n\t\t<div class=\"textfield-messages\" *ngIf=\"form.controls.date.invalid\">\r\n\t\t\t\t<div class=\"textfield-messages-error\" *ngIf=\"form.controls.date.errors.date\">Invalid date</div>\r\n\t\t\t\t<div class=\"textfield-messages-error\" *ngIf=\"form.controls.date.errors.required\">required</div>\r\n\t\t\t</div>\r\n\t</div>\r\n</form>\r\n<button class=\"button\" (click)=\"submit()\" [class.is-disabled]=\"form.invalid\">submit</button>\r\n<pre>{{ date | luDate: 'shortDate' }}</pre>"
        },
        {
            "name": "DateMinmaxComponent",
            "id": "component-DateMinmaxComponent-dd85d3a120a3c8aaf97c28c15bbe914d",
            "file": "packages/ng/applications/sandbox/src/app/issues/date-minmax/date-minmax.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-date-minmax",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./date-minmax.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "date",
                    "defaultValue": "new Date()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "formCal",
                    "defaultValue": "new FormGroup({\r\n\t\tdate: new FormControl(new Date()),\r\n\t})",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "formDir",
                    "defaultValue": "new FormGroup({\r\n\t\tdate: new FormControl(new Date()),\r\n\t})",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "formPic",
                    "defaultValue": "new FormGroup({\r\n\t\tdate: new FormControl(new Date()),\r\n\t})",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "formSel",
                    "defaultValue": "new FormGroup({\r\n\t\tdate: new FormControl(new Date()),\r\n\t})",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "max",
                    "defaultValue": "new Date()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "min",
                    "defaultValue": "new Date()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n\tselector: 'lu-date-minmax',\r\n\ttemplateUrl: './date-minmax.component.html'\r\n})\r\nexport class DateMinmaxComponent {\r\n\tdate = new Date();\r\n\tmin = new Date();\r\n\tmax = new Date();\r\n\tformDir = new FormGroup({\r\n\t\tdate: new FormControl(new Date()),\r\n\t});\r\n\tformCal = new FormGroup({\r\n\t\tdate: new FormControl(new Date()),\r\n\t});\r\n\tformPic = new FormGroup({\r\n\t\tdate: new FormControl(new Date()),\r\n\t});\r\n\tformSel = new FormGroup({\r\n\t\tdate: new FormControl(new Date()),\r\n\t});\r\n\tsubmit() {\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>date-minmax</h1>\r\n<h2>date-input directive</h2>\r\n<h3>via ngmodel</h3>\r\n<div class=\"textfield\">\r\n\t<input  class=\"textfield-input\" luDateInput [(ngModel)]=\"date\" [min]=\"min\" [max]=\"max\">\r\n\t<label class=\"textfield-label\">date input</label>\r\n</div>\r\n<h3>in a form</h3>\r\n<form [formGroup]=\"formDir\" (ngSubmit)=\"submit()\">\r\n\t<div class=\"textfield\">\r\n\t\t<input  class=\"textfield-input\" luDateInput formControlName=\"date\" required [min]=\"min\" [max]=\"max\">\r\n\t\t<label class=\"textfield-label\">date input</label>\r\n\t\t<div class=\"textfield-messages\" *ngIf=\"formDir.controls.date.invalid\">\r\n\t\t\t<div class=\"textfield-messages-error\" *ngIf=\"formDir.controls.date.errors.date\">Invalid date</div>\r\n\t\t\t<div class=\"textfield-messages-error\" *ngIf=\"formDir.controls.date.errors.required\">required</div>\r\n\t\t\t<div class=\"textfield-messages-error\" *ngIf=\"formDir.controls.date.errors.min\">min</div>\r\n\t\t\t<div class=\"textfield-messages-error\" *ngIf=\"formDir.controls.date.errors.max\">max</div>\r\n\t\t</div>\r\n\t</div>\r\n</form>\r\n<!-- <button class=\"button\" (click)=\"submit()\" [class.is-disabled]=\"formDir.invalid\">submit</button> -->\r\n\r\n<h2>calendar-input component</h2>\r\n<h3>via ngmodel</h3>\r\n<lu-calendar [(ngModel)]=\"date\" [min]=\"min\" [max]=\"max\"></lu-calendar>\r\n<h3>in a form</h3>\r\n<form [formGroup]=\"formCal\" (ngSubmit)=\"submit()\">\r\n\t<div class=\"textfield\">\r\n\t\t<lu-calendar  formControlName=\"date\" required [min]=\"min\" [max]=\"max\"></lu-calendar>\r\n\t\t<label class=\"textfield-label\">date input</label>\r\n\t\t<div class=\"textfield-messages\" *ngIf=\"formCal.controls.date.invalid\">\r\n\t\t\t<div class=\"textfield-messages-error\" *ngIf=\"formCal.controls.date.errors.date\">Invalid date</div>\r\n\t\t\t<div class=\"textfield-messages-error\" *ngIf=\"formCal.controls.date.errors.required\">required</div>\r\n\t\t\t<div class=\"textfield-messages-error\" *ngIf=\"formCal.controls.date.errors.min\">min</div>\r\n\t\t\t<div class=\"textfield-messages-error\" *ngIf=\"formCal.controls.date.errors.max\">max</div>\r\n\t\t</div>\r\n\t</div>\r\n</form>\r\n\r\n<h2>date-picker</h2>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"date\" [pickerOverlap]=\"true\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{ value | luDate }}</ng-container>\r\n\t\t<lu-date-picker [min]=\"min\" [max]=\"max\"></lu-date-picker>\r\n\t\t<lu-input-clearer></lu-input-clearer>\r\n\t</lu-select>\r\n\t<label class=\"textfield-label\">in a select</label>\r\n</div>\r\n<h3>in a form</h3>\r\n<form [formGroup]=\"formPic\" (ngSubmit)=\"submit()\">\r\n\t<div class=\"textfield\">\r\n\t\t<lu-select class=\"textfield-input\" formControlName=\"date\" required [pickerOverlap]=\"true\">\r\n\t\t\t<ng-container *luDisplayer=\"let value\">{{ value | luDate }}</ng-container>\r\n\t\t\t<lu-date-picker [min]=\"min\" [max]=\"max\"></lu-date-picker>\r\n\t\t\t<lu-input-clearer></lu-input-clearer>\r\n\t\t</lu-select>\r\n\t\t<label class=\"textfield-label\">in a select</label>\r\n\t\t<div class=\"textfield-messages\" *ngIf=\"formPic.controls.date.invalid\">\r\n\t\t\t<div class=\"textfield-messages-error\" *ngIf=\"formPic.controls.date.errors.date\">Invalid date</div>\r\n\t\t\t<div class=\"textfield-messages-error\" *ngIf=\"formPic.controls.date.errors.required\">required</div>\r\n\t\t\t<div class=\"textfield-messages-error\" *ngIf=\"formPic.controls.date.errors.min\">min</div>\r\n\t\t\t<div class=\"textfield-messages-error\" *ngIf=\"formPic.controls.date.errors.max\">max</div>\r\n\t\t</div>\r\n\t</div>\r\n</form>\r\n\r\n<h2>date-select</h2>\r\n<div class=\"textfield\">\r\n\t<lu-date-select class=\"textfield-input\" [(ngModel)]=\"date\" [min]=\"min\" [max]=\"max\"></lu-date-select>\r\n\t<label class=\"textfield-label\">in a select</label>\r\n</div>\r\n<h3>in a form</h3>\r\n<form [formGroup]=\"formSel\" (ngSubmit)=\"submit()\">\r\n\t<div class=\"textfield\">\r\n\t\t<lu-date-select class=\"textfield-input\" formControlName=\"date\" required [min]=\"min\" [max]=\"max\"></lu-date-select>\r\n\t\t<label class=\"textfield-label\">in a select</label>\r\n\t\t<div class=\"textfield-messages\" *ngIf=\"formSel.controls.date.invalid\">\r\n\t\t\t<div class=\"textfield-messages-error\" *ngIf=\"formSel.controls.date.errors.date\">Invalid date</div>\r\n\t\t\t<div class=\"textfield-messages-error\" *ngIf=\"formSel.controls.date.errors.required\">required</div>\r\n\t\t\t<div class=\"textfield-messages-error\" *ngIf=\"formSel.controls.date.errors.min\">min</div>\r\n\t\t\t<div class=\"textfield-messages-error\" *ngIf=\"formSel.controls.date.errors.max\">max</div>\r\n\t\t</div>\r\n\t</div>\r\n</form>\r\n"
        },
        {
            "name": "DatePickerComponent",
            "id": "component-DatePickerComponent-3559e0e0a56c8b2edc6f71b852042ac2",
            "file": "packages/ng/applications/sandbox/src/app/issues/date-picker/date-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-date-picker",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./date-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "date",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "model",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'sand-date-picker',\r\n\ttemplateUrl: './date-picker.component.html'\r\n})\r\nexport class DatePickerComponent {\r\n\tdate;\r\n\tmodel;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>date-picker</h1>\r\n<h2>with a select</h2>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"date\" [pickerOverlap]=\"true\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{ value | luDate }}</ng-container>\r\n\t\t<lu-date-picker></lu-date-picker>\r\n\t\t<lu-input-clearer></lu-input-clearer>\r\n\t</lu-select>\r\n\t<label class=\"textfield-label\">in a select</label>\r\n</div>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"model\">\r\n\t\t<span *luDisplayer=\"let value\">{{value}}</span>\r\n\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t<lu-option-picker>\r\n\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t<lu-option value=\"2\">2</lu-option>\r\n\t\t</lu-option-picker>\r\n\t</lu-select>\r\n\t<label class=\"textfield-label\">Textfield label</label>\r\n</div>\r\n"
        },
        {
            "name": "DatePickerWidthComponent",
            "id": "component-DatePickerWidthComponent-a2ca517b23c0f3411db3ca140381826d",
            "file": "packages/ng/applications/sandbox/src/app/issues/date-picker-width/date-picker-width.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-date-picker-width",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./date-picker-width.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "date",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "true",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'sand-date-picker-width',\r\n\ttemplateUrl: './date-picker-width.component.html'\r\n})\r\nexport class DatePickerWidthComponent {\r\n\ttrue = true;\r\n\tdate;\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>date-picker-width</h1>\r\n\r\n<h2>Basic</h2>\r\n<div class=\"textfield u-marginBottomBig\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"date\" [pickerOverlap]=\"true\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{ value | luDate }}</ng-container>\r\n\t\t<lu-date-picker></lu-date-picker>\r\n\t\t<lu-input-clearer></lu-input-clearer>\r\n\t</lu-select>\r\n\t<label class=\"textfield-label\">in a select</label>\r\n</div>\r\n\r\n<h2>mod-shorter</h2>\r\n<div class=\"textfield mod-shorter u-marginBottomBig\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"date\" [pickerOverlap]=\"true\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{ value | luDate }}</ng-container>\r\n\t\t<lu-date-picker></lu-date-picker>\r\n\t\t<lu-input-clearer></lu-input-clearer>\r\n\t</lu-select>\r\n\t<label class=\"textfield-label\">in a select</label>\r\n</div>\r\n\r\n<h2>mod-longest</h2>\r\n<div class=\"textfield mod-longest u-marginBottomBig\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"date\" [pickerOverlap]=\"true\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{ value | luDate }}</ng-container>\r\n\t\t<lu-date-picker></lu-date-picker>\r\n\t\t<lu-input-clearer></lu-input-clearer>\r\n\t</lu-select>\r\n\t<label class=\"textfield-label\">in a select</label>\r\n</div>\r\n\r\n<h2>mod-block</h2>\r\n<div class=\"textfield mod-block\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"date\" [pickerOverlap]=\"true\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{ value | luDate }}</ng-container>\r\n\t\t<lu-date-picker></lu-date-picker>\r\n\t\t<lu-input-clearer></lu-input-clearer>\r\n\t</lu-select>\r\n\t<label class=\"textfield-label\">in a select</label>\r\n</div>"
        },
        {
            "name": "DateSelectComponent",
            "id": "component-DateSelectComponent-05cb7f3cb01e19a2f6e95e3afd4c9e13",
            "file": "packages/ng/applications/sandbox/src/app/issues/date-select/date-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-date-select",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./date-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "date",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "hideClearer",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'sand-date-select',\r\n\ttemplateUrl: './date-select.component.html'\r\n})\r\nexport class DateSelectComponent {\r\n\tdate;\r\n\thideClearer = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>date-select</h1>\r\n<h2>Single</h2>\r\n<div class=\"textfield\">\r\n\t<lu-date-select class=\"textfield-input\" [(ngModel)]=\"date\" [hideClearer]=\"hideClearer\"></lu-date-select>\r\n\t<label for=\"\" class=\"textfield-label\">date select</label>\r\n</div>\r\n<label class=\"checkbox\">\r\n\t<input type=\"checkbox\" class=\"checkbox-input\" [(ngModel)]=\"hideClearer\">\r\n\t<span class=\"checkbox-label\">hide clearer</span>\r\n</label>\r\n<code>{{date | luDate }}</code>"
        },
        {
            "name": "DateSelectEnhComponent",
            "id": "component-DateSelectEnhComponent-d15dea3144fd54710a4a9c8f820a3b35",
            "file": "packages/ng/applications/sandbox/src/app/issues/date-select-enh/date-select-enh.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-date-select-enh",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./date-select-enh.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "date",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "min",
                    "defaultValue": "new Date()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "startOn",
                    "defaultValue": "new Date(2020, 3, 2)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'sand-date-select-enh',\r\n\ttemplateUrl: './date-select-enh.component.html'\r\n})\r\nexport class DateSelectEnhComponent {\r\n\tdate;\r\n\tmin = new Date();\r\n\tstartOn = new Date(2020, 3, 2);\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>date-select-enh</h1>\r\n<h2>Single</h2>\r\n<label class=\"textfield\">\r\n\t<lu-date-select class=\"textfield-input\" [(ngModel)]=\"date\" [min]=\"min\"></lu-date-select>\r\n\t<span class=\"textfield-label\">enabled</span>\r\n</label>\r\n<label class=\"textfield\">\r\n\t<lu-date-select class=\"textfield-input is-disabled\" [(ngModel)]=\"date\" [min]=\"min\"></lu-date-select>\r\n\t<span class=\"textfield-label\">class is-disabled</span>\r\n</label>\r\n<label class=\"textfield\">\r\n\t<lu-date-select class=\"textfield-input\" [(ngModel)]=\"date\" disabled [min]=\"min\"></lu-date-select>\r\n\t<span class=\"textfield-label\">attr disabled</span>\r\n</label>\r\n<code>{{ date | luDate }}</code>\r\n\r\n<h2>open on april 2020</h2>\r\n<lu-calendar [(ngModel)]=\"date\" [startOn]=\"startOn\"></lu-calendar>\r\n<label class=\"textfield\">\r\n\t<lu-date-select class=\"textfield-input\" [(ngModel)]=\"date\" [startOn]=\"startOn\"></lu-date-select>\r\n\t<span class=\"textfield-label\">enabled</span>\r\n</label>"
        },
        {
            "name": "DateStringComponent",
            "id": "component-DateStringComponent-92b2d89766a590ee8b142ed2ef3e7a8a",
            "file": "packages/ng/applications/sandbox/src/app/issues/date-string/date-string.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-date-string",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./date-string.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "today",
                    "defaultValue": "this._adapter.forgeToday()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "valentines",
                    "defaultValue": "this._adapter.forge(2020, 2, 14)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ALuDateAdapter } from '@lucca-front/ng/core';\r\n\r\n@Component({\r\n\tselector: 'sand-date-string',\r\n\ttemplateUrl: './date-string.component.html'\r\n})\r\nexport class DateStringComponent {\r\n\tconstructor(private _adapter: ALuDateAdapter<string>) {}\r\n\ttoday = this._adapter.forgeToday();\r\n\tvalentines = this._adapter.forge(2020, 2, 14);\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_adapter",
                        "type": "ALuDateAdapter<string>"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "_adapter",
                        "type": "ALuDateAdapter<string>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1>date-string</h1>\r\n<pre>today: {{today}}</pre>\r\n<pre>valentines: {{valentines}}</pre>"
        },
        {
            "name": "DateUtcComponent",
            "id": "component-DateUtcComponent-1cad747d986dbb3d5b8608f54fa40ba0",
            "file": "packages/ng/applications/sandbox/src/app/issues/date-utc/date-utc.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-date-utc",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./date-utc.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "today",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "utcValentine",
                    "defaultValue": "new Date(Date.UTC(2020, 1, 14))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "valentine",
                    "defaultValue": "new Date(2020, 1, 14)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ALuDateAdapter } from '@lucca-front/ng/core';\r\n\r\n@Component({\r\n\tselector: 'sand-date-utc',\r\n\ttemplateUrl: './date-utc.component.html'\r\n})\r\nexport class DateUtcComponent {\r\n\tutcValentine = new Date(Date.UTC(2020, 1, 14));\r\n\tvalentine = new Date(2020, 1, 14);\r\n\ttoday;\r\n\r\n\tconstructor(\r\n\t\tprivate _adapter: ALuDateAdapter<Date>,\r\n\t) {\r\n\t\tthis.today = _adapter.forgeToday();\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_adapter",
                        "type": "ALuDateAdapter<Date>"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "_adapter",
                        "type": "ALuDateAdapter<Date>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1>date-utc</h1>\r\n<h2>to string</h2>\r\n<pre>\r\n\tutc valentine's day: {{ utcValentine }}\r\n\tlocal valentine's day: {{ valentine }}\r\n</pre>\r\n<h2>to isostring</h2>\r\n<pre>\r\n\tutc valentine's day: {{ utcValentine.toISOString() }}\r\n\tlocal valentine's day: {{ valentine.toISOString() }}\r\n</pre>\r\n<h2>luDate pipe 'long'</h2>\r\n<pre>\r\n\tutc valentine's day: {{ utcValentine | luDate: 'long' }}\r\n\tlocal valentine's day: {{ valentine | luDate: 'long' }}\r\n</pre>\r\n<h2>date adapter</h2>\r\n<pre>\r\n\ttoday string: {{ today }}\r\n\ttoday iso string: {{ today.toISOString() }}\r\n</pre>\r\n<h2>lu-date-calendar</h2>\r\n<p>\r\n\tutc valentine's\r\n\t<lu-calendar [(ngModel)]=\"utcValentine\"></lu-calendar>\r\n</p>\r\n<p>\r\n\tlocal valentine's\r\n\t<lu-calendar [(ngModel)]=\"valentine\"></lu-calendar>\r\n</p>\r\n<h2>lu-date-select</h2>\r\n<div class=\"textfield\">\r\n\t<lu-date-select class=\"textfield-input\" name=\"utcValentine\" [(ngModel)]=\"utcValentine\"></lu-date-select>\r\n\t<label for=\"utcValentine\" class=\"textfield-label\">utc valentine's</label>\r\n</div>\r\n<div class=\"textfield\">\r\n\t<lu-date-select class=\"textfield-input\" name=\"valentine\" [(ngModel)]=\"valentine\"></lu-date-select>\r\n\t<label for=\"valentine\" class=\"textfield-label\">local valentine's</label>\r\n</div>"
        },
        {
            "name": "DepartmentSelectComponent",
            "id": "component-DepartmentSelectComponent-a713898f9342db676bf262af7eca9522",
            "file": "packages/ng/applications/sandbox/src/app/issues/department-select/department-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-department-select-issue",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./department-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collection",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "item",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "searchFn",
                    "args": [
                        {
                            "name": "o",
                            "type": ""
                        },
                        {
                            "name": "c",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "name": "o",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "c",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'lu-department-select-issue',\r\n\ttemplateUrl: './department-select.component.html'\r\n})\r\nexport class DepartmentSelectComponent {\r\n\tcollection = [];\r\n\titem;\r\n\tsearchFn(o, c) {\r\n\t\treturn o.name.toLowerCase().startsWith(c.toLowerCase());\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>department-select</h1>\r\n<h2>via tree picker advanced and department feeder</h2>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"collection\" multiple>\r\n\t\t<ng-container *luDisplayer=\"let values; multiple: true\">{{ values.length }} departments selected</ng-container>\r\n\t\t<lu-tree-option-picker-advanced>\r\n\t\t\t<lu-department-feeder></lu-department-feeder>\r\n\t\t\t<lu-tree-option-searcher [searchFn]=\"searchFn\"></lu-tree-option-searcher>\r\n\t\t\t<lu-tree-option-pager></lu-tree-option-pager>\r\n\t\t\t<lu-tree-option *luForTreeOptions=\"let option\" [tree]=\"option\">\r\n\t\t\t\t<ng-container *luDisplayer=\"let value\">{{ value.name }}</ng-container>\r\n\t\t\t</lu-tree-option>\r\n\t\t</lu-tree-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">departments feeder</label>\r\n</div>\r\n<h2>all in one directive</h2>\r\n<div class=\"textfield\">\r\n\t<lu-department-select class=\"textfield-input\" [(ngModel)]=\"item\"></lu-department-select>\r\n\t<label for=\"\" class=\"textfield-label\">departments select</label>\r\n</div>\r\n<code>{{item | json }}</code>\r\n<div class=\"textfield\">\r\n\t<lu-department-select class=\"textfield-input\" [(ngModel)]=\"collection\" multiple></lu-department-select>\r\n\t<label for=\"\" class=\"textfield-label\">departments select multiple</label>\r\n</div>\r\n<code>{{collection | json }}</code>\r\n\r\n"
        },
        {
            "name": "DragDropComponent",
            "id": "component-DragDropComponent-a5253c1f05a7b159991cf3f190860511",
            "file": "packages/ng/applications/sandbox/src/app/issues/drag-drop/drag-drop.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-drag-drop",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./drag-drop.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "movies",
                    "defaultValue": "[\r\n\t\t'Episode I - The Phantom Menace',\r\n\t\t'Episode II - Attack of the Clones',\r\n\t\t'Episode III - Revenge of the Sith',\r\n\t\t'Episode IV - A New Hope',\r\n\t\t'Episode V - The Empire Strikes Back',\r\n\t\t'Episode VI - Return of the Jedi',\r\n\t\t'Episode VII - The Force Awakens',\r\n\t\t'Episode VIII - The Last Jedi',\r\n\t\t'Episode IX – The Rise of Skywalker'\r\n\t]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n\tselector: 'sand-drag-drop',\r\n\ttemplateUrl: './drag-drop.component.html'\r\n})\r\nexport class DragDropComponent {\r\n\tmovies = [\r\n\t\t'Episode I - The Phantom Menace',\r\n\t\t'Episode II - Attack of the Clones',\r\n\t\t'Episode III - Revenge of the Sith',\r\n\t\t'Episode IV - A New Hope',\r\n\t\t'Episode V - The Empire Strikes Back',\r\n\t\t'Episode VI - Return of the Jedi',\r\n\t\t'Episode VII - The Force Awakens',\r\n\t\t'Episode VIII - The Last Jedi',\r\n\t\t'Episode IX – The Rise of Skywalker'\r\n\t];\r\n\tdrop(event: CdkDragDrop<string[]>) {\r\n\t\tmoveItemInArray(this.movies, event.previousIndex, event.currentIndex);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>drag-drop</h1>\r\n<h2>drag around</h2>\r\n<div class=\"dragDrop-card card\" cdkDrag [style.width]=\"'200px'\">\r\n\t<div class=\"card-content\">\r\n\t\t<h2>hello</h2>\r\n\t\t<p>drag me around</p>\r\n\t</div>\r\n</div>\r\n<h2>sorting - list</h2>\r\n<ul class=\"dragDrop-list list\" cdkDropList (cdkDropListDropped)=\"drop($event)\">\r\n\t<li class=\"dragDrop-item list-item\"*ngFor=\"let movie of movies\" cdkDrag>\r\n\t\t<div class=\"dragDrop-item-content list-item-content grid\">\r\n\t\t\t<div class=\"grid-md1\">\r\n\t\t\t\t<i class=\"column-drag lucca-icon\">drag</i>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"grid-md\">\r\n\t\t\t\t<span class=\"column-description\">{{movie}}</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</li>\r\n</ul>\r\n"
        },
        {
            "name": "DropdownComponent",
            "id": "component-DropdownComponent-b8db117aa2b1b6ecb257948a4c8190c2",
            "file": "packages/ng/applications/sandbox/src/app/issues/dropdown/dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-dropdown",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dropdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "debug",
                    "args": [
                        {
                            "name": "num",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "num",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'sand-dropdown',\r\n\ttemplateUrl: './dropdown.component.html'\r\n})\r\nexport class DropdownComponent {\r\n\tdebug(num) {\r\n\t\tconsole.log(`button ${num} activated`)\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"button-group\">\r\n\t<button class=\"button\">Main action</button>\r\n\t<button class=\"button mod-more\" [luDropdown]=\"dropdown\">\r\n\t\t<span class=\"cdk-visually-hidden\">\r\n\t\t\tMore actions\r\n\t\t</span>\r\n\t</button>\r\n</div>\r\n<button class=\"button\">other buttons</button>\r\n<div class=\"textfield\">\r\n\t<input type=\"text\" class=\"textfield-input\">\r\n\t<label for=\"\" class=\"textfield-label\">and inputs</label>\r\n</div>\r\n<button class=\"button\">to check if the focus</button>\r\n<div class=\"textfield\">\r\n\t<input type=\"text\" class=\"textfield-input\">\r\n\t<label for=\"\" class=\"textfield-label\">handles properly</label>\r\n</div>\r\n<lu-dropdown #dropdown>\r\n\t<li class=\"lu-dropdown-options-item\" >\r\n\t\t<a routerLink=\".\" fragment=\"link1\" class=\"lu-dropdown-options-item-action\" luDropdownItem>Link 1</a>\r\n\t</li>\r\n\t<li class=\"lu-dropdown-options-item\">\r\n\t\t<a routerLink=\".\" fragment=\"link2\" class=\"lu-dropdown-options-item-action\" luDropdownItem>Link 2</a>\r\n\t</li>\r\n\t<!-- <li class=\"lu-dropdown-options-item mod-withChildren\" [attr.aria-hidden]=\"isToggleOpen\">\t\r\n\t\t<button (click)=\"toggle()\" class=\"lu-dropdown-options-item-toggle\">\r\n\t\t\tToggle\r\n\t\t\t<span aria-hidden=\"true\" class=\"lucca-icon expand\">expand</span>\r\n\t\t\t<span aria-hidden=\"true\" class=\"lucca-icon collapse\">collapse</span>\r\n\t\t</button>\r\n\t\t<ul class=\"lu-dropdown-options-item-children\">\r\n\t\t\t<li class=\"lu-dropdown-options-item-children-item\">\r\n\t\t\t\t<a href=\"#\" class=\"lu-dropdown-options-item-children-item-action\">Toggle link 1</a>\r\n\t\t\t</li>\r\n\t\t\t<li class=\"lu-dropdown-options-item-children-item\">\r\n\t\t\t\t<button class=\"lu-dropdown-options-item-children-item-action\">Toggle button 2</button>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t</li> -->\r\n\t<li class=\"lu-dropdown-options-item\" >\r\n\t\t<a routerLink=\".\" fragment=\"link3\"  class=\"lu-dropdown-options-item-action\" luDropdownItem>Link 3</a>\r\n\t</li>\r\n\t<li class=\"lu-dropdown-options-item\" >\r\n\t\t<button class=\"lu-dropdown-options-item-action\" luDropdownItem (click)=\"debug(4)\">Button 4</button>\r\n\t</li>\r\n\t<li class=\"lu-dropdown-options-item\" >\r\n\t\t<div role=\"button\" tabindex=\"0\" class=\"lu-dropdown-options-item-action\" (click)=\"debug(5)\" luDropdownItem>Div 5</div> <!-- this doesnt work with divs-->\r\n\t</li>\r\n</lu-dropdown>"
        },
        {
            "name": "EstablishmentComponent",
            "id": "component-EstablishmentComponent-56fac675212407d68ee4218709f8497b",
            "file": "packages/ng/applications/sandbox/src/app/issues/establishment/establishment.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-establishment-issue",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./establishment.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collection",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "countriesByLegalUnitId$",
                    "type": "Observable<Map<number, ICountry>>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "item",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "item2",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "display",
                    "args": [
                        {
                            "name": "collection",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackBy",
                    "args": [
                        {
                            "name": "idx",
                            "type": ""
                        },
                        {
                            "name": "item",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\ninterface ICountry {\r\n\tid: number;\r\n\tname: string;\r\n}\r\n\r\n@Component({\r\n\tselector: 'lu-establishment-issue',\r\n\ttemplateUrl: './establishment.component.html'\r\n})\r\nexport class EstablishmentComponent {\r\n\tcollection = [];\r\n\titem;\r\n\titem2;\r\n\r\n\tcountriesByLegalUnitId$: Observable<Map<number, ICountry>>;\r\n\r\n\ttrackBy(idx, item): string {\r\n\t\treturn item.code;\r\n\t}\r\n\r\n\tdisplay(collection) {\r\n\t\treturn (collection ?? []).map(item => ({ id: item.id, name: item.name }));\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>establishment select</h1>\r\n<h2>establishment pager operator</h2>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{value.name}}</ng-container>\r\n\t\t<lu-option-picker-advanced>\r\n\t\t\t<lu-establishment-searcher></lu-establishment-searcher>\r\n\t\t\t<lu-option *luForOptions=\"let establishment; trackBy: trackBy\" [value]=\"establishment\">\r\n\t\t\t\t{{establishment.name}}</lu-option>\r\n\t\t</lu-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">establishment</label>\r\n</div>\r\n\r\n<h2>all in one directive</h2>\r\n\r\n<div class=\"textfield\">\r\n\t<lu-establishment-select class=\"textfield-input\" [(ngModel)]=\"item\"></lu-establishment-select>\r\n\t<label for=\"\" class=\"textfield-label\">establishment select</label>\r\n</div>\r\n<code><pre>{{item | json }}</pre></code>\r\n\r\n<div class=\"textfield\">\r\n\t<lu-establishment-select class=\"textfield-input\" [(ngModel)]=\"collection\" multiple></lu-establishment-select>\r\n\t<label for=\"\" class=\"textfield-label\">establishment select multiple</label>\r\n</div>\r\n<code><pre>{{display(collection) | json }}</pre></code>\r\n\r\n"
        },
        {
            "name": "Fix472Component",
            "id": "component-Fix472Component-9ad456b277123dece509f5cf6624716e",
            "file": "packages/ng/applications/sandbox/src/app/issues/fix-472/fix-472.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-fix-472",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./fix-472.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "options",
                    "defaultValue": "[\r\n\t\t{ value: 0, name: 'zero' },\r\n\t\t{ value: 1, name: 'one' },\r\n\t\t{ value: 2, name: 'two' },\r\n\t\t{ value: 3, name: 'three' },\r\n\t]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'lu-fix-472',\r\n\ttemplateUrl: './fix-472.component.html'\r\n})\r\nexport class Fix472Component {\r\n\titems = [];\r\n\toptions = [\r\n\t\t{ value: 0, name: 'zero' },\r\n\t\t{ value: 1, name: 'one' },\r\n\t\t{ value: 2, name: 'two' },\r\n\t\t{ value: 3, name: 'three' },\r\n\t];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" multiple [(ngModel)]=\"items\">\r\n\t\t<span class=\"chip mod-unkillable\" *luDisplayer=\"let value\">{{value}}</span>\r\n\t\t<lu-option-picker>\r\n\t\t\t<lu-option *ngFor=\"let o of options\" [value]=\"o.value\">{{o.name}}</lu-option>\r\n\t\t</lu-option-picker>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">label</label>\r\n</div>\r\n\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" multiple [(ngModel)]=\"items\">\r\n\t\t<ng-container *luDisplayer=\"let values; multiple: true\">\r\n\t\t\t<span class=\"chip mod-unkillable\">{{values?.length || 0}}</span> colors selected\r\n\t\t</ng-container>\r\n\t\t<lu-option-picker>\r\n\t\t\t<lu-option *ngFor=\"let o of options\" [value]=\"o.value\">{{o.name}}</lu-option>\r\n\t\t</lu-option-picker>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">label</label>\r\n</div>\r\n\r\n<div class=\"textfield mod-invert\">\r\n\t<label for=\"\" class=\"textfield-label\">label</label>\r\n\t<textarea class=\"textfield-input\" cdkTextareaAutosize cdkautosizemaxrows=\"8\" cdkautosizeminrows=\"1\"></textarea>\r\n</div>"
        },
        {
            "name": "Fix705SelectEnterComponent",
            "id": "component-Fix705SelectEnterComponent-72615052c2d24023d50d6eb4a6a5c9a9",
            "file": "packages/ng/applications/sandbox/src/app/issues/fix-705-select-enter/fix-705-select-enter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-fix-705-select-enter",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./fix-705-select-enter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "model",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'lu-fix-705-select-enter',\r\n\ttemplateUrl: './fix-705-select-enter.component.html'\r\n})\r\nexport class Fix705SelectEnterComponent {\r\n\tmodel = 1;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>fix-705-select-enter</h1>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"model\">\r\n\t\t<span *luDisplayer=\"let value\">{{value}}</span>\r\n\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t<lu-option-picker>\r\n\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t<lu-option value=\"2\">2</lu-option>\r\n\t\t</lu-option-picker>\r\n\t</lu-select>\r\n</div>\r\n<div class=\"textfield\">\r\n\t<lu-api-select class=\"textfield-input\" [(ngModel)]=\"model\" api=\"/api/v3/departments\"></lu-api-select>\r\n</div>"
        },
        {
            "name": "FixModalComponent",
            "id": "component-FixModalComponent-4db2287e6105fec2c5f5333cb4ca9a2a",
            "file": "packages/ng/applications/sandbox/src/app/issues/fix-modal/fix-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-fix-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./fix-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "openModal",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openPopup",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSidepanel",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, Optional, ChangeDetectionStrategy } from '@angular/core';\r\nimport { LuPopup, LU_POPUP_DATA } from '@lucca-front/ng/popup';\r\nimport { LuModal, LU_MODAL_DATA } from '@lucca-front/ng/modal';\r\nimport { LuSidepanel, LU_SIDEPANEL_DATA } from '@lucca-front/ng/sidepanel';\r\n\r\nimport { of } from 'rxjs';\r\n\r\n@Component({\r\n\tselector: 'lu-fix-modal',\r\n\ttemplateUrl: './fix-modal.component.html'\r\n})\r\nexport class FixModalComponent {\r\n\tconstructor(\r\n\t\tprivate _popup: LuPopup,\r\n\t\tprivate _modal: LuModal,\r\n\t\tprivate _sidepanel: LuSidepanel,\r\n\t) {}\r\n\topenPopup(data?) {\r\n\t\tthis._popup.open(BasicModalContent, data);\r\n\t}\r\n\topenModal(data?) {\r\n\t\tthis._modal.open(BasicModalContent, data, { changeDetection: ChangeDetectionStrategy.Default});\r\n\t}\r\n\topenSidepanel(data?) {\r\n\t\tthis._sidepanel.open(BasicModalContent, data, { changeDetection: ChangeDetectionStrategy.Default});\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'lu-modal-content',\r\n\ttemplate: `content of the modal component <br>\r\n\tpopup data: {{popupData}}<br>\r\n\tmodal data: {{modalData}}<br>\r\n\tsidepanel data: {{sidepanelData}}<br>\r\n\t`\r\n})\r\nexport class BasicModalContent {\r\n\ttitle = 'title';\r\n\tsubmitAction = () => of(true);\r\n\r\n\tconstructor(\r\n\t\t@Optional()@Inject(LU_POPUP_DATA) public popupData,\r\n\t\t@Optional()@Inject(LU_MODAL_DATA) public modalData,\r\n\t\t@Optional()@Inject(LU_SIDEPANEL_DATA) public sidepanelData,\r\n\t) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_popup",
                        "type": "LuPopup"
                    },
                    {
                        "name": "_modal",
                        "type": "LuModal"
                    },
                    {
                        "name": "_sidepanel",
                        "type": "LuSidepanel"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_popup",
                        "type": "LuPopup",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_modal",
                        "type": "LuModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_sidepanel",
                        "type": "LuSidepanel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1>fix-modal</h1>\r\n<button class=\"button\" (click)=\"openPopup()\">open popup</button>\r\n<button class=\"button\" (click)=\"openModal()\">open modal</button>\r\n<button class=\"button\" (click)=\"openSidepanel()\">open sidepanel</button>\r\n<br />\r\n<button class=\"button\" (click)=\"openPopup('popup')\">open popup with data</button>\r\n<button class=\"button\" (click)=\"openModal('modal')\">open modal with data</button>\r\n<button class=\"button\" (click)=\"openSidepanel('sidepanel')\">open modal with data</button>\r\n"
        },
        {
            "name": "FormerEmployeesComponent",
            "id": "component-FormerEmployeesComponent-168e286233bc9e0aee8b186276064ec0",
            "file": "packages/ng/applications/sandbox/src/app/issues/former-employees/former-employees.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-former-employees",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./former-employees.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "flag",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "user",
                    "defaultValue": "{ id: 1, firstName: 'john', lastName: 'doe' }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'sand-former-employees',\r\n\ttemplateUrl: './former-employees.component.html'\r\n})\r\nexport class FormerEmployeesComponent {\r\n\tuser = { id: 1, firstName: 'john', lastName: 'doe' };\r\n\tflag = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>former-employees</h1>\r\n<div class=\"textfield\">\r\n\t<lu-user-select class=\"textfield-input\" [(ngModel)]=\"user\" [enableFormerEmployees]=\"flag\"></lu-user-select>\r\n\t<label for=\"\" class=\"textfield-label\">user select</label>\r\n</div>\r\n<label class=\"checkbox\">\r\n\t<input class=\"checkbox-input\" type=\"checkbox\" [(ngModel)]=\"flag\"/>\r\n\t<span class=\"checkbox-label\">enable former employees</span>\r\n</label>\r\n<code>{{user | json }}</code>"
        },
        {
            "name": "FormlyComponent",
            "id": "component-FormlyComponent-782120537cecc156a02c9dec784e6313",
            "file": "packages/ng/applications/sandbox/src/app/issues/formly/formly.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-formly",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./formly.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({})",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "user",
                    "defaultValue": "{\r\n\t\torientation: { id: 0, name: 'female' },\r\n\t\tmanager: { id: 421, firstName: 'Lulu', lastName: 'B.' },\r\n\t}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 126
                },
                {
                    "name": "userFields",
                    "defaultValue": "[\r\n\t\t{\r\n\t\t\tkey: 'name',\r\n\t\t\ttype: 'input',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\ttype: 'text',\r\n\t\t\t\tlabel: 'name - text',\r\n\t\t\t\tname: 'inputTest1',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'email',\r\n\t\t\ttype: 'input',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\ttype: 'email',\r\n\t\t\t\tlabel: 'email - email',\r\n\t\t\t\tname: 'inputTest2',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'password',\r\n\t\t\ttype: 'input',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\ttype: 'password',\r\n\t\t\t\tlabel: 'password - password',\r\n\t\t\t\tname: 'inputTest3',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'age',\r\n\t\t\ttype: 'input',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\ttype: 'number',\r\n\t\t\t\tlabel: 'age - number',\r\n\t\t\t\tname: 'inputTest4',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'birthDate',\r\n\t\t\ttype: 'date',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'birthDate - date',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'description',\r\n\t\t\ttype: 'textarea',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'description - textarea',\r\n\t\t\t\tname: 'textareaTest',\r\n\t\t\t\tplaceholder: 'enter your life journey',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'orientation',\r\n\t\t\ttype: 'select',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'sexual orientation - select',\r\n\t\t\t\tplaceholder: 'choose well',\r\n\t\t\t\toptions: [\r\n\t\t\t\t\t{ id: 0, name: 'female' },\r\n\t\t\t\t\t{ id: 1, name: 'male' },\r\n\t\t\t\t\t{ id: 2, name: 'other' },\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tfocus: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'manager',\r\n\t\t\ttype: 'user',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'manager - user',\r\n\t\t\t\tplaceholder: 'pings /api/v3/users/search',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'department',\r\n\t\t\ttype: 'api',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'department - api',\r\n\t\t\t\tplaceholder: 'pings /api/v3/departments',\r\n\t\t\t\tapi: '/api/v3/departments',\r\n\t\t\t\tfilters: ['isActive=true'],\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'establishment',\r\n\t\t\ttype: 'establishment',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'establishment'\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'Radio',\r\n\t\t\ttype: 'radio',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'Radio input',\r\n\t\t\t\tname: 'radioTest',\r\n\t\t\t\toptions: [\r\n\t\t\t\t\t{ value: 1, label: 'Option 1' },\r\n\t\t\t\t\t{ value: 2, label: 'Option 2' },\r\n\t\t\t\t\t{ value: 3, label: 'Option 3' },\r\n\t\t\t\t\t{ value: 4, label: 'Option 4' },\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'checkbox',\r\n\t\t\ttype: 'checkbox',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'Checkboxes',\r\n\t\t\t\tname: 'checkboxTest',\r\n\t\t\t}\r\n\t\t},\r\n\t]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "submit",
                    "args": [
                        {
                            "name": "user",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n\tselector: 'lu-formly',\r\n\ttemplateUrl: './formly.component.html'\r\n})\r\nexport class FormlyComponent {\r\n\tform: FormGroup = new FormGroup({});\r\n\tuserFields = [\r\n\t\t{\r\n\t\t\tkey: 'name',\r\n\t\t\ttype: 'input',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\ttype: 'text',\r\n\t\t\t\tlabel: 'name - text',\r\n\t\t\t\tname: 'inputTest1',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'email',\r\n\t\t\ttype: 'input',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\ttype: 'email',\r\n\t\t\t\tlabel: 'email - email',\r\n\t\t\t\tname: 'inputTest2',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'password',\r\n\t\t\ttype: 'input',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\ttype: 'password',\r\n\t\t\t\tlabel: 'password - password',\r\n\t\t\t\tname: 'inputTest3',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'age',\r\n\t\t\ttype: 'input',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\ttype: 'number',\r\n\t\t\t\tlabel: 'age - number',\r\n\t\t\t\tname: 'inputTest4',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'birthDate',\r\n\t\t\ttype: 'date',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'birthDate - date',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'description',\r\n\t\t\ttype: 'textarea',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'description - textarea',\r\n\t\t\t\tname: 'textareaTest',\r\n\t\t\t\tplaceholder: 'enter your life journey',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'orientation',\r\n\t\t\ttype: 'select',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'sexual orientation - select',\r\n\t\t\t\tplaceholder: 'choose well',\r\n\t\t\t\toptions: [\r\n\t\t\t\t\t{ id: 0, name: 'female' },\r\n\t\t\t\t\t{ id: 1, name: 'male' },\r\n\t\t\t\t\t{ id: 2, name: 'other' },\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tfocus: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'manager',\r\n\t\t\ttype: 'user',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'manager - user',\r\n\t\t\t\tplaceholder: 'pings /api/v3/users/search',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'department',\r\n\t\t\ttype: 'api',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'department - api',\r\n\t\t\t\tplaceholder: 'pings /api/v3/departments',\r\n\t\t\t\tapi: '/api/v3/departments',\r\n\t\t\t\tfilters: ['isActive=true'],\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'establishment',\r\n\t\t\ttype: 'establishment',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'establishment'\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'Radio',\r\n\t\t\ttype: 'radio',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'Radio input',\r\n\t\t\t\tname: 'radioTest',\r\n\t\t\t\toptions: [\r\n\t\t\t\t\t{ value: 1, label: 'Option 1' },\r\n\t\t\t\t\t{ value: 2, label: 'Option 2' },\r\n\t\t\t\t\t{ value: 3, label: 'Option 3' },\r\n\t\t\t\t\t{ value: 4, label: 'Option 4' },\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'checkbox',\r\n\t\t\ttype: 'checkbox',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'Checkboxes',\r\n\t\t\t\tname: 'checkboxTest',\r\n\t\t\t}\r\n\t\t},\r\n\t];\r\n\r\n\tuser = {\r\n\t\torientation: { id: 0, name: 'female' },\r\n\t\tmanager: { id: 421, firstName: 'Lulu', lastName: 'B.' },\r\n\t};\r\n\r\n\tsubmit(user) {\r\n\t\tconsole.log(user);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>formly</h1>\r\n<form class=\"form\" role=\"form\" novalidate [formGroup]=\"form\" (ngSubmit)=\"submit(user)\">\r\n\t<formly-form [model]=\"user\" [fields]=\"userFields\">\r\n\t\t<button type=\"submit\" class=\"button\">submit</button>\r\n\t</formly-form>\r\n</form>\r\n<p>\r\n\t{{ user | json }}\r\n</p>\r\n"
        },
        {
            "name": "FormlyFramedComponent",
            "id": "component-FormlyFramedComponent-c05cd7452250b262ef2b062dc4e94449",
            "file": "packages/ng/applications/sandbox/src/app/issues/formly-framed/formly-framed.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-formly-framed",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./formly-framed.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({})",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "user",
                    "defaultValue": "{\r\n\t\torientation: { id: 0, name: 'female' },\r\n\t\tmanager: { id: 421, firstName: 'Lulu', lastName: 'B.' },\r\n\t}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "userFields",
                    "defaultValue": "[\r\n\t\t{\r\n\t\t\tkey: 'name',\r\n\t\t\ttype: 'input',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\ttype: 'text',\r\n\t\t\t\tlabel: 'name - text',\r\n\t\t\t\tname: 'inputTest1',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'email',\r\n\t\t\ttype: 'input',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\ttype: 'email',\r\n\t\t\t\tlabel: 'email - email',\r\n\t\t\t\tname: 'inputTest2',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'password',\r\n\t\t\ttype: 'input',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\ttype: 'password',\r\n\t\t\t\tlabel: 'password - password',\r\n\t\t\t\tname: 'inputTest3',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'age',\r\n\t\t\ttype: 'input',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\ttype: 'number',\r\n\t\t\t\tlabel: 'age - number',\r\n\t\t\t\tname: 'inputTest4',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'birthDate',\r\n\t\t\ttype: 'date',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'birthDate - date',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'description',\r\n\t\t\ttype: 'textarea',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'description - textarea',\r\n\t\t\t\tname: 'textareaTest',\r\n\t\t\t\tplaceholder: 'enter your life journey',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'orientation',\r\n\t\t\ttype: 'select',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'sexual orientation - select',\r\n\t\t\t\tplaceholder: 'choose well',\r\n\t\t\t\toptions: [\r\n\t\t\t\t\t{ id: 0, name: 'female' },\r\n\t\t\t\t\t{ id: 1, name: 'male' },\r\n\t\t\t\t\t{ id: 2, name: 'other' },\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tfocus: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'manager',\r\n\t\t\ttype: 'user',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'manager - user',\r\n\t\t\t\tplaceholder: 'pings /api/v3/users/search',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'department',\r\n\t\t\ttype: 'api',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'department - api',\r\n\t\t\t\tplaceholder: 'pings /api/v3/departments',\r\n\t\t\t\tapi: '/api/v3/departments',\r\n\t\t\t\tfilters: ['isActive=true'],\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'Radio',\r\n\t\t\ttype: 'radio',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'Radio input',\r\n\t\t\t\tname: 'radioTest',\r\n\t\t\t\toptions: [\r\n\t\t\t\t\t{ value: 1, label: 'Option 1'},\r\n\t\t\t\t\t{ value: 2, label: 'Option 2'},\r\n\t\t\t\t\t{ value: 3, label: 'Option 3'},\r\n\t\t\t\t\t{ value: 4, label: 'Option 4'},\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'checkbox',\r\n\t\t\ttype: 'checkbox',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'Checkboxes',\r\n\t\t\t\tname: 'checkboxTest',\r\n\t\t\t}\r\n\t\t},\r\n\t]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "submit",
                    "args": [
                        {
                            "name": "user",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n\tselector: 'lu-formly-framed',\r\n\ttemplateUrl: './formly-framed.component.html'\r\n})\r\nexport class FormlyFramedComponent {\r\n\tform: FormGroup = new FormGroup({});\r\n\tuserFields = [\r\n\t\t{\r\n\t\t\tkey: 'name',\r\n\t\t\ttype: 'input',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\ttype: 'text',\r\n\t\t\t\tlabel: 'name - text',\r\n\t\t\t\tname: 'inputTest1',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'email',\r\n\t\t\ttype: 'input',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\ttype: 'email',\r\n\t\t\t\tlabel: 'email - email',\r\n\t\t\t\tname: 'inputTest2',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'password',\r\n\t\t\ttype: 'input',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\ttype: 'password',\r\n\t\t\t\tlabel: 'password - password',\r\n\t\t\t\tname: 'inputTest3',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'age',\r\n\t\t\ttype: 'input',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\ttype: 'number',\r\n\t\t\t\tlabel: 'age - number',\r\n\t\t\t\tname: 'inputTest4',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'birthDate',\r\n\t\t\ttype: 'date',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'birthDate - date',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'description',\r\n\t\t\ttype: 'textarea',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'description - textarea',\r\n\t\t\t\tname: 'textareaTest',\r\n\t\t\t\tplaceholder: 'enter your life journey',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'orientation',\r\n\t\t\ttype: 'select',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'sexual orientation - select',\r\n\t\t\t\tplaceholder: 'choose well',\r\n\t\t\t\toptions: [\r\n\t\t\t\t\t{ id: 0, name: 'female' },\r\n\t\t\t\t\t{ id: 1, name: 'male' },\r\n\t\t\t\t\t{ id: 2, name: 'other' },\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tfocus: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'manager',\r\n\t\t\ttype: 'user',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'manager - user',\r\n\t\t\t\tplaceholder: 'pings /api/v3/users/search',\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'department',\r\n\t\t\ttype: 'api',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'department - api',\r\n\t\t\t\tplaceholder: 'pings /api/v3/departments',\r\n\t\t\t\tapi: '/api/v3/departments',\r\n\t\t\t\tfilters: ['isActive=true'],\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'Radio',\r\n\t\t\ttype: 'radio',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'Radio input',\r\n\t\t\t\tname: 'radioTest',\r\n\t\t\t\toptions: [\r\n\t\t\t\t\t{ value: 1, label: 'Option 1'},\r\n\t\t\t\t\t{ value: 2, label: 'Option 2'},\r\n\t\t\t\t\t{ value: 3, label: 'Option 3'},\r\n\t\t\t\t\t{ value: 4, label: 'Option 4'},\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'checkbox',\r\n\t\t\ttype: 'checkbox',\r\n\t\t\ttemplateOptions: {\r\n\t\t\t\tlabel: 'Checkboxes',\r\n\t\t\t\tname: 'checkboxTest',\r\n\t\t\t}\r\n\t\t},\r\n\t];\r\n\r\n\tuser = {\r\n\t\torientation: { id: 0, name: 'female' },\r\n\t\tmanager: { id: 421, firstName: 'Lulu', lastName: 'B.' },\r\n\t};\r\n\r\n\tsubmit(user) {\r\n\t\tconsole.log(user);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>formly-framed</h1>\r\n<form class=\"form mod-framed\" role=\"form\" novalidate [formGroup]=\"form\" (ngSubmit)=\"submit(user)\">\r\n\t<formly-form [model]=\"user\" [fields]=\"userFields\">\r\n\t\t<button type=\"submit\" class=\"button\">submit</button>\r\n\t</formly-form>\r\n</form>\r\n<p>\r\n\t{{ user | json }}\r\n</p>\r\n"
        },
        {
            "name": "FormlyWrappersComponent",
            "id": "component-FormlyWrappersComponent-e43a1f8904882d7df50a4bb4b70c3a48",
            "file": "packages/ng/applications/sandbox/src/app/issues/formly-wrappers/formly-wrappers.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-formly-wrappers",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./formly-wrappers.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fields",
                    "defaultValue": "[{\r\n\t\tkey: 'helper',\r\n\t\ttype: 'input',\r\n\t\ttemplateOptions: {\r\n\t\t\ttype: 'text',\r\n\t\t\tlabel: 'this one has a helper',\r\n\t\t\thelper: 'this is the helper message',\r\n\t\t},\r\n\t}, {\r\n\t\tkey: 'icon',\r\n\t\ttype: 'input',\r\n\t\ttemplateOptions: {\r\n\t\t\ttype: 'text',\r\n\t\t\tlabel: 'this one has an icon',\r\n\t\t\ticon: 'heart',\r\n\t\t},\r\n\t}, {\r\n\t\tkey: 'suffix',\r\n\t\ttype: 'input',\r\n\t\ttemplateOptions: {\r\n\t\t\ttype: 'text',\r\n\t\t\tlabel: 'this one has a suffix',\r\n\t\t\tsuffix: 'LOL',\r\n\t\t},\r\n\t}, {\r\n\t\tkey: 'error',\r\n\t\ttype: 'input',\r\n\t\ttemplateOptions: {\r\n\t\t\ttype: 'text',\r\n\t\t\tlabel: 'this one has an error',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\tvalidation: {\r\n\t\t\tmessages: {\r\n\t\t\t\trequired: 'this field is required',\r\n\t\t\t},\r\n\t\t},\r\n\t}]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({})",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "model",
                    "defaultValue": "{}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n\tselector: 'lu-formly-wrappers',\r\n\ttemplateUrl: './formly-wrappers.component.html'\r\n})\r\nexport class FormlyWrappersComponent {\r\n\tform: FormGroup = new FormGroup({});\r\n\tmodel = {};\r\n\tfields = [{\r\n\t\tkey: 'helper',\r\n\t\ttype: 'input',\r\n\t\ttemplateOptions: {\r\n\t\t\ttype: 'text',\r\n\t\t\tlabel: 'this one has a helper',\r\n\t\t\thelper: 'this is the helper message',\r\n\t\t},\r\n\t}, {\r\n\t\tkey: 'icon',\r\n\t\ttype: 'input',\r\n\t\ttemplateOptions: {\r\n\t\t\ttype: 'text',\r\n\t\t\tlabel: 'this one has an icon',\r\n\t\t\ticon: 'heart',\r\n\t\t},\r\n\t}, {\r\n\t\tkey: 'suffix',\r\n\t\ttype: 'input',\r\n\t\ttemplateOptions: {\r\n\t\t\ttype: 'text',\r\n\t\t\tlabel: 'this one has a suffix',\r\n\t\t\tsuffix: 'LOL',\r\n\t\t},\r\n\t}, {\r\n\t\tkey: 'error',\r\n\t\ttype: 'input',\r\n\t\ttemplateOptions: {\r\n\t\t\ttype: 'text',\r\n\t\t\tlabel: 'this one has an error',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\tvalidation: {\r\n\t\t\tmessages: {\r\n\t\t\t\trequired: 'this field is required',\r\n\t\t\t},\r\n\t\t},\r\n\t}];\r\n\r\n\tsubmit() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>formly-wrappers</h1>\r\n<form class=\"form\" role=\"form\" novalidate [formGroup]=\"form\" (ngSubmit)=\"submit()\">\r\n\t<formly-form [model]=\"model\" [fields]=\"fields\">\r\n\t\t<button type=\"submit\" class=\"button\">submit</button>\r\n\t</formly-form>\r\n</form>\r\n<p>\r\n\t{{ model | json }}\r\n</p>\r\n"
        },
        {
            "name": "IssuesComponent",
            "id": "component-IssuesComponent-649aa0de2e008a72b8aefe20accb749f",
            "file": "packages/ng/applications/sandbox/src/app/issues/issues.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-issues",
            "styleUrls": [],
            "styles": [],
            "template": "<ul>\t\t<li *ngFor=\"let issue of issues\"><a [routerLink]=\"[issue]\">{{issue}}</a></li>\n\t</ul>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "issues",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "ISSUES_INDEX_TOKEN"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, InjectionToken, Inject } from '@angular/core';\r\n\r\nexport const ISSUES_INDEX_TOKEN = new InjectionToken('issues index');\r\n\r\n@Component({\r\n\tselector: 'lu-issues',\r\n\ttemplate: `<ul>\r\n\t\t<li *ngFor=\"let issue of issues\"><a [routerLink]=\"[issue]\">{{issue}}</a></li>\r\n\t</ul>`\r\n})\r\nexport class IssuesComponent {\r\n\tconstructor(@Inject(ISSUES_INDEX_TOKEN) public issues) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "issues",
                        "type": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "issues",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "IvyApiSelectComponent",
            "id": "component-IvyApiSelectComponent-6dc818d2f6b5ead23ec6645179a2b2ea",
            "file": "packages/ng/applications/sandbox/src/app/issues/ivy-api-select/ivy-api-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-ivy-api-select",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./ivy-api-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collection",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "item",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "searchFn",
                    "args": [
                        {
                            "name": "o",
                            "type": ""
                        },
                        {
                            "name": "c",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "o",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "c",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackBy",
                    "args": [
                        {
                            "name": "idx",
                            "type": ""
                        },
                        {
                            "name": "item",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'sand-ivy-api-select',\r\n\ttemplateUrl: './ivy-api-select.component.html'\r\n})\r\nexport class IvyApiSelectComponent {\r\n\titem = null;\r\n\tuser = null;\r\n\tcollection = [];\r\n\tsearchFn(o, c) {\r\n\t\treturn o.name.startsWith(c);\r\n\t}\r\n\ttrackBy(idx, item): string {\r\n\t\treturn item.code;\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>ivy-api-select</h1>\r\n<h2>api pager (on open, on scrollBottom)</h2>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{value.name}}</ng-container>\r\n\t\t<lu-option-picker-advanced>\r\n\t\t\t<lu-api-pager api=\"/api/v3/axissections\"></lu-api-pager>\r\n\t\t\t<lu-option *luForOptions=\"let section; trackBy: trackBy\" [value]=\"section\">{{section.name}}</lu-option>\r\n\t\t</lu-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">section</label>\r\n</div>\r\n\r\n<h2>api searcher (on open)</h2>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{value.name}}</ng-container>\r\n\t\t<lu-option-picker-advanced>\r\n\t\t\t<lu-api-searcher api=\"/api/v3/axissections\"></lu-api-searcher>\r\n\t\t\t<lu-option *luForOptions=\"let section; trackBy: trackBy\" [value]=\"section\">{{section.name}}</lu-option>\r\n\t\t</lu-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">section</label>\r\n</div>\r\n\r\n<h2>api paged searcher (on open, on scrollbottom)</h2>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{value.name}}</ng-container>\r\n\t\t<lu-option-picker-advanced>\r\n\t\t\t<lu-api-paged-searcher api=\"/api/v3/axissections\"></lu-api-paged-searcher>\r\n\t\t\t<lu-option *luForOptions=\"let section; trackBy: trackBy\" [value]=\"section\">{{section.name}}</lu-option>\r\n\t\t</lu-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">section</label>\r\n</div>\r\n<h2>api select</h2>\r\n<div class=\"textfield\">\r\n\t<lu-api-select class=\"textfield-input\" [(ngModel)]=\"item\" api=\"/api/v3/axissections\"></lu-api-select>\r\n\t<label for=\"\" class=\"textfield-label\">section</label>\r\n</div>\r\n<div class=\"textfield\">\r\n\t<lu-api-select class=\"textfield-input\" [(ngModel)]=\"collection\" api=\"/api/v3/axissections\" multiple></lu-api-select>\r\n\t<label for=\"\" class=\"textfield-label\">multiple</label>\r\n</div>"
        },
        {
            "name": "IvyOptionPickerComponent",
            "id": "component-IvyOptionPickerComponent-f8cb6a6ebddff89b58d3c34166ac39b3",
            "file": "packages/ng/applications/sandbox/src/app/issues/ivy-option-picker/ivy-option-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-ivy-option-picker",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./ivy-option-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collection",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "color",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "colors",
                    "defaultValue": "[\r\n\t\t{ name: 'aliceblue', code: '#f0f8ff' },\r\n\t\t{ name: 'antiquewhite', code: '#faebd7' },\r\n\t\t{ name: 'aqua', code: '#00ffff' },\r\n\t\t{ name: 'aquamarine', code: '#7fffd4' },\r\n\t\t{ name: 'azure', code: '#f0ffff' },\r\n\t\t{ name: 'beige', code: '#f5f5dc' },\r\n\t\t{ name: 'bisque', code: '#ffe4c4' },\r\n\t\t{ name: 'black', code: '#000000' },\r\n\t\t{ name: 'blanchedalmond', code: '#ffebcd' },\r\n\t\t{ name: 'blue', code: '#0000ff' },\r\n\t\t{ name: 'blueviolet', code: '#8a2be2' },\r\n\t\t{ name: 'brown', code: '#a52a2a' },\r\n\t\t{ name: 'burlywood', code: '#deb887' },\r\n\t\t{ name: 'cadetblue', code: '#5f9ea0' },\r\n\t\t{ name: 'chartreuse', code: '#7fff00' },\r\n\t\t{ name: 'chocolate', code: '#d2691e' },\r\n\t\t{ name: 'coral', code: '#ff7f50' },\r\n\t\t{ name: 'cornflowerblue', code: '#6495ed' },\r\n\t\t{ name: 'cornsilk', code: '#fff8dc' },\r\n\t\t{ name: 'crimson', code: '#dc143c' },\r\n\t\t{ name: 'cyan', code: '#00ffff' },\r\n\t\t{ name: 'darkblue', code: '#00008b' },\r\n\t\t{ name: 'darkcyan', code: '#008b8b' },\r\n\t\t{ name: 'darkgoldenrod', code: '#b8860b' },\r\n\t\t{ name: 'darkgray', code: '#a9a9a9' },\r\n\t\t{ name: 'darkgreen', code: '#006400' },\r\n\t\t{ name: 'darkgrey', code: '#a9a9a9' },\r\n\t\t{ name: 'darkkhaki', code: '#bdb76b' },\r\n\t\t{ name: 'darkmagenta', code: '#8b008b' },\r\n\t\t{ name: 'darkolivegreen', code: '#556b2f' },\r\n\t\t{ name: 'darkorange', code: '#ff8c00' },\r\n\t\t{ name: 'darkorchid', code: '#9932cc' },\r\n\t\t{ name: 'darkred', code: '#8b0000' },\r\n\t\t{ name: 'darksalmon', code: '#e9967a' },\r\n\t\t{ name: 'darkseagreen', code: '#8fbc8f' },\r\n\t\t{ name: 'darkslateblue', code: '#483d8b' },\r\n\t\t{ name: 'darkslategray', code: '#2f4f4f' },\r\n\t\t{ name: 'darkslategrey', code: '#2f4f4f' },\r\n\t\t{ name: 'darkturquoise', code: '#00ced1' },\r\n\t\t{ name: 'darkviolet', code: '#9400d3' },\r\n\t\t{ name: 'deeppink', code: '#ff1493' },\r\n\t\t{ name: 'deepskyblue', code: '#00bfff' },\r\n\t\t{ name: 'dimgray', code: '#696969' },\r\n\t\t{ name: 'dimgrey', code: '#696969' },\r\n\t\t{ name: 'dodgerblue', code: '#1e90ff' },\r\n\t\t{ name: 'firebrick', code: '#b22222' },\r\n\t\t{ name: 'floralwhite', code: '#fffaf0' },\r\n\t\t{ name: 'forestgreen', code: '#228b22' },\r\n\t\t{ name: 'fuchsia', code: '#ff00ff' },\r\n\t\t{ name: 'gainsboro', code: '#dcdcdc' },\r\n\t\t{ name: 'ghostwhite', code: '#f8f8ff' },\r\n\t\t{ name: 'gold', code: '#ffd700' },\r\n\t\t{ name: 'goldenrod', code: '#daa520' },\r\n\t\t{ name: 'gray', code: '#808080' },\r\n\t\t{ name: 'green', code: '#008000' },\r\n\t\t{ name: 'greenyellow', code: '#adff2f' },\r\n\t\t{ name: 'grey', code: '#808080' },\r\n\t\t{ name: 'honeydew', code: '#f0fff0' },\r\n\t\t{ name: 'hotpink', code: '#ff69b4' },\r\n\t\t{ name: 'indianred', code: '#cd5c5c' },\r\n\t\t{ name: 'indigo', code: '#4b0082' },\r\n\t\t{ name: 'ivory', code: '#fffff0' },\r\n\t\t{ name: 'khaki', code: '#f0e68c' },\r\n\t\t{ name: 'lavender', code: '#e6e6fa' },\r\n\t\t{ name: 'lavenderblush', code: '#fff0f5' },\r\n\t\t{ name: 'lawngreen', code: '#7cfc00' },\r\n\t\t{ name: 'lemonchiffon', code: '#fffacd' },\r\n\t\t{ name: 'lightblue', code: '#add8e6' },\r\n\t\t{ name: 'lightcoral', code: '#f08080' },\r\n\t\t{ name: 'lightcyan', code: '#e0ffff' },\r\n\t\t{ name: 'lightgoldenrodyellow', code: '#fafad2' },\r\n\t\t{ name: 'lightgray', code: '#d3d3d3' },\r\n\t\t{ name: 'lightgreen', code: '#90ee90' },\r\n\t\t{ name: 'lightgrey', code: '#d3d3d3' },\r\n\t\t{ name: 'lightpink', code: '#ffb6c1' },\r\n\t\t{ name: 'lightsalmon', code: '#ffa07a' },\r\n\t\t{ name: 'lightseagreen', code: '#20b2aa' },\r\n\t\t{ name: 'lightskyblue', code: '#87cefa' },\r\n\t\t{ name: 'lightslategray', code: '#778899' },\r\n\t\t{ name: 'lightslategrey', code: '#778899' },\r\n\t\t{ name: 'lightsteelblue', code: '#b0c4de' },\r\n\t\t{ name: 'lightyellow', code: '#ffffe0' },\r\n\t\t{ name: 'lime', code: '#00ff00' },\r\n\t\t{ name: 'limegreen', code: '#32cd32' },\r\n\t\t{ name: 'linen', code: '#faf0e6' },\r\n\t\t{ name: 'magenta', code: '#ff00ff' },\r\n\t\t{ name: 'maroon', code: '#800000' },\r\n\t\t{ name: 'mediumaquamarine', code: '#66cdaa' },\r\n\t\t{ name: 'mediumblue', code: '#0000cd' },\r\n\t\t{ name: 'mediumorchid', code: '#ba55d3' },\r\n\t\t{ name: 'mediumpurple', code: '#9370db' },\r\n\t\t{ name: 'mediumseagreen', code: '#3cb371' },\r\n\t\t{ name: 'mediumslateblue', code: '#7b68ee' },\r\n\t\t{ name: 'mediumspringgreen', code: '#00fa9a' },\r\n\t\t{ name: 'mediumturquoise', code: '#48d1cc' },\r\n\t\t{ name: 'mediumvioletred', code: '#c71585' },\r\n\t\t{ name: 'midnightblue', code: '#191970' },\r\n\t\t{ name: 'mintcream', code: '#f5fffa' },\r\n\t\t{ name: 'mistyrose', code: '#ffe4e1' },\r\n\t\t{ name: 'moccasin', code: '#ffe4b5' },\r\n\t\t{ name: 'navajowhite', code: '#ffdead' },\r\n\t\t{ name: 'navy', code: '#000080' },\r\n\t\t{ name: 'oldlace', code: '#fdf5e6' },\r\n\t\t{ name: 'olive', code: '#808000' },\r\n\t\t{ name: 'olivedrab', code: '#6b8e23' },\r\n\t\t{ name: 'orange', code: '#ffa500' },\r\n\t\t{ name: 'orangered', code: '#ff4500' },\r\n\t\t{ name: 'orchid', code: '#da70d6' },\r\n\t\t{ name: 'palegoldenrod', code: '#eee8aa' },\r\n\t\t{ name: 'palegreen', code: '#98fb98' },\r\n\t\t{ name: 'paleturquoise', code: '#afeeee' },\r\n\t\t{ name: 'palevioletred', code: '#db7093' },\r\n\t\t{ name: 'papayawhip', code: '#ffefd5' },\r\n\t\t{ name: 'peachpuff', code: '#ffdab9' },\r\n\t\t{ name: 'peru', code: '#cd853f' },\r\n\t\t{ name: 'pink', code: '#ffc0cb' },\r\n\t\t{ name: 'plum', code: '#dda0dd' },\r\n\t\t{ name: 'powderblue', code: '#b0e0e6' },\r\n\t\t{ name: 'purple', code: '#800080' },\r\n\t\t{ name: 'rebeccapurple', code: '#663399' },\r\n\t\t{ name: 'red', code: '#ff0000' },\r\n\t\t{ name: 'rosybrown', code: '#bc8f8f' },\r\n\t\t{ name: 'royalblue', code: '#4169e1' },\r\n\t\t{ name: 'saddlebrown', code: '#8b4513' },\r\n\t\t{ name: 'salmon', code: '#fa8072' },\r\n\t\t{ name: 'sandybrown', code: '#f4a460' },\r\n\t\t{ name: 'seagreen', code: '#2e8b57' },\r\n\t\t{ name: 'seashell', code: '#fff5ee' },\r\n\t\t{ name: 'sienna', code: '#a0522d' },\r\n\t\t{ name: 'silver', code: '#c0c0c0' },\r\n\t\t{ name: 'skyblue', code: '#87ceeb' },\r\n\t\t{ name: 'slateblue', code: '#6a5acd' },\r\n\t\t{ name: 'slategray', code: '#708090' },\r\n\t\t{ name: 'slategrey', code: '#708090' },\r\n\t\t{ name: 'snow', code: '#fffafa' },\r\n\t\t{ name: 'springgreen', code: '#00ff7f' },\r\n\t\t{ name: 'steelblue', code: '#4682b4' },\r\n\t\t{ name: 'tan', code: '#d2b48c' },\r\n\t\t{ name: 'teal', code: '#008080' },\r\n\t\t{ name: 'thistle', code: '#d8bfd8' },\r\n\t\t{ name: 'tomato', code: '#ff6347' },\r\n\t\t{ name: 'turquoise', code: '#40e0d0' },\r\n\t\t{ name: 'violet', code: '#ee82ee' },\r\n\t\t{ name: 'wheat', code: '#f5deb3' },\r\n\t\t{ name: 'white', code: '#ffffff' },\r\n\t\t{ name: 'whitesmoke', code: '#f5f5f5' },\r\n\t\t{ name: 'yellow', code: '#ffff00' },\r\n\t\t{ name: 'yellowgreen', code: '#9acd32' },\r\n\t]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "item",
                    "defaultValue": "'1'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methodsClass": [
                {
                    "name": "searchFn",
                    "args": [
                        {
                            "name": "o",
                            "type": ""
                        },
                        {
                            "name": "c",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "o",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "c",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackBy",
                    "args": [
                        {
                            "name": "idx",
                            "type": ""
                        },
                        {
                            "name": "color",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'sand-ivy-option-picker',\r\n\ttemplateUrl: './ivy-option-picker.component.html'\r\n})\r\nexport class IvyOptionPickerComponent {\r\n\titem = '1';\r\n\tcollection = [];\r\n\r\n\tsearchFn(o, c) {\r\n\t\treturn o.name.startsWith(c);\r\n\t}\r\n\ttrackBy(idx, color): string {\r\n\t\treturn color.code;\r\n\t}\r\n\tcolor = null;\r\n\tcolors = [\r\n\t\t{ name: 'aliceblue', code: '#f0f8ff' },\r\n\t\t{ name: 'antiquewhite', code: '#faebd7' },\r\n\t\t{ name: 'aqua', code: '#00ffff' },\r\n\t\t{ name: 'aquamarine', code: '#7fffd4' },\r\n\t\t{ name: 'azure', code: '#f0ffff' },\r\n\t\t{ name: 'beige', code: '#f5f5dc' },\r\n\t\t{ name: 'bisque', code: '#ffe4c4' },\r\n\t\t{ name: 'black', code: '#000000' },\r\n\t\t{ name: 'blanchedalmond', code: '#ffebcd' },\r\n\t\t{ name: 'blue', code: '#0000ff' },\r\n\t\t{ name: 'blueviolet', code: '#8a2be2' },\r\n\t\t{ name: 'brown', code: '#a52a2a' },\r\n\t\t{ name: 'burlywood', code: '#deb887' },\r\n\t\t{ name: 'cadetblue', code: '#5f9ea0' },\r\n\t\t{ name: 'chartreuse', code: '#7fff00' },\r\n\t\t{ name: 'chocolate', code: '#d2691e' },\r\n\t\t{ name: 'coral', code: '#ff7f50' },\r\n\t\t{ name: 'cornflowerblue', code: '#6495ed' },\r\n\t\t{ name: 'cornsilk', code: '#fff8dc' },\r\n\t\t{ name: 'crimson', code: '#dc143c' },\r\n\t\t{ name: 'cyan', code: '#00ffff' },\r\n\t\t{ name: 'darkblue', code: '#00008b' },\r\n\t\t{ name: 'darkcyan', code: '#008b8b' },\r\n\t\t{ name: 'darkgoldenrod', code: '#b8860b' },\r\n\t\t{ name: 'darkgray', code: '#a9a9a9' },\r\n\t\t{ name: 'darkgreen', code: '#006400' },\r\n\t\t{ name: 'darkgrey', code: '#a9a9a9' },\r\n\t\t{ name: 'darkkhaki', code: '#bdb76b' },\r\n\t\t{ name: 'darkmagenta', code: '#8b008b' },\r\n\t\t{ name: 'darkolivegreen', code: '#556b2f' },\r\n\t\t{ name: 'darkorange', code: '#ff8c00' },\r\n\t\t{ name: 'darkorchid', code: '#9932cc' },\r\n\t\t{ name: 'darkred', code: '#8b0000' },\r\n\t\t{ name: 'darksalmon', code: '#e9967a' },\r\n\t\t{ name: 'darkseagreen', code: '#8fbc8f' },\r\n\t\t{ name: 'darkslateblue', code: '#483d8b' },\r\n\t\t{ name: 'darkslategray', code: '#2f4f4f' },\r\n\t\t{ name: 'darkslategrey', code: '#2f4f4f' },\r\n\t\t{ name: 'darkturquoise', code: '#00ced1' },\r\n\t\t{ name: 'darkviolet', code: '#9400d3' },\r\n\t\t{ name: 'deeppink', code: '#ff1493' },\r\n\t\t{ name: 'deepskyblue', code: '#00bfff' },\r\n\t\t{ name: 'dimgray', code: '#696969' },\r\n\t\t{ name: 'dimgrey', code: '#696969' },\r\n\t\t{ name: 'dodgerblue', code: '#1e90ff' },\r\n\t\t{ name: 'firebrick', code: '#b22222' },\r\n\t\t{ name: 'floralwhite', code: '#fffaf0' },\r\n\t\t{ name: 'forestgreen', code: '#228b22' },\r\n\t\t{ name: 'fuchsia', code: '#ff00ff' },\r\n\t\t{ name: 'gainsboro', code: '#dcdcdc' },\r\n\t\t{ name: 'ghostwhite', code: '#f8f8ff' },\r\n\t\t{ name: 'gold', code: '#ffd700' },\r\n\t\t{ name: 'goldenrod', code: '#daa520' },\r\n\t\t{ name: 'gray', code: '#808080' },\r\n\t\t{ name: 'green', code: '#008000' },\r\n\t\t{ name: 'greenyellow', code: '#adff2f' },\r\n\t\t{ name: 'grey', code: '#808080' },\r\n\t\t{ name: 'honeydew', code: '#f0fff0' },\r\n\t\t{ name: 'hotpink', code: '#ff69b4' },\r\n\t\t{ name: 'indianred', code: '#cd5c5c' },\r\n\t\t{ name: 'indigo', code: '#4b0082' },\r\n\t\t{ name: 'ivory', code: '#fffff0' },\r\n\t\t{ name: 'khaki', code: '#f0e68c' },\r\n\t\t{ name: 'lavender', code: '#e6e6fa' },\r\n\t\t{ name: 'lavenderblush', code: '#fff0f5' },\r\n\t\t{ name: 'lawngreen', code: '#7cfc00' },\r\n\t\t{ name: 'lemonchiffon', code: '#fffacd' },\r\n\t\t{ name: 'lightblue', code: '#add8e6' },\r\n\t\t{ name: 'lightcoral', code: '#f08080' },\r\n\t\t{ name: 'lightcyan', code: '#e0ffff' },\r\n\t\t{ name: 'lightgoldenrodyellow', code: '#fafad2' },\r\n\t\t{ name: 'lightgray', code: '#d3d3d3' },\r\n\t\t{ name: 'lightgreen', code: '#90ee90' },\r\n\t\t{ name: 'lightgrey', code: '#d3d3d3' },\r\n\t\t{ name: 'lightpink', code: '#ffb6c1' },\r\n\t\t{ name: 'lightsalmon', code: '#ffa07a' },\r\n\t\t{ name: 'lightseagreen', code: '#20b2aa' },\r\n\t\t{ name: 'lightskyblue', code: '#87cefa' },\r\n\t\t{ name: 'lightslategray', code: '#778899' },\r\n\t\t{ name: 'lightslategrey', code: '#778899' },\r\n\t\t{ name: 'lightsteelblue', code: '#b0c4de' },\r\n\t\t{ name: 'lightyellow', code: '#ffffe0' },\r\n\t\t{ name: 'lime', code: '#00ff00' },\r\n\t\t{ name: 'limegreen', code: '#32cd32' },\r\n\t\t{ name: 'linen', code: '#faf0e6' },\r\n\t\t{ name: 'magenta', code: '#ff00ff' },\r\n\t\t{ name: 'maroon', code: '#800000' },\r\n\t\t{ name: 'mediumaquamarine', code: '#66cdaa' },\r\n\t\t{ name: 'mediumblue', code: '#0000cd' },\r\n\t\t{ name: 'mediumorchid', code: '#ba55d3' },\r\n\t\t{ name: 'mediumpurple', code: '#9370db' },\r\n\t\t{ name: 'mediumseagreen', code: '#3cb371' },\r\n\t\t{ name: 'mediumslateblue', code: '#7b68ee' },\r\n\t\t{ name: 'mediumspringgreen', code: '#00fa9a' },\r\n\t\t{ name: 'mediumturquoise', code: '#48d1cc' },\r\n\t\t{ name: 'mediumvioletred', code: '#c71585' },\r\n\t\t{ name: 'midnightblue', code: '#191970' },\r\n\t\t{ name: 'mintcream', code: '#f5fffa' },\r\n\t\t{ name: 'mistyrose', code: '#ffe4e1' },\r\n\t\t{ name: 'moccasin', code: '#ffe4b5' },\r\n\t\t{ name: 'navajowhite', code: '#ffdead' },\r\n\t\t{ name: 'navy', code: '#000080' },\r\n\t\t{ name: 'oldlace', code: '#fdf5e6' },\r\n\t\t{ name: 'olive', code: '#808000' },\r\n\t\t{ name: 'olivedrab', code: '#6b8e23' },\r\n\t\t{ name: 'orange', code: '#ffa500' },\r\n\t\t{ name: 'orangered', code: '#ff4500' },\r\n\t\t{ name: 'orchid', code: '#da70d6' },\r\n\t\t{ name: 'palegoldenrod', code: '#eee8aa' },\r\n\t\t{ name: 'palegreen', code: '#98fb98' },\r\n\t\t{ name: 'paleturquoise', code: '#afeeee' },\r\n\t\t{ name: 'palevioletred', code: '#db7093' },\r\n\t\t{ name: 'papayawhip', code: '#ffefd5' },\r\n\t\t{ name: 'peachpuff', code: '#ffdab9' },\r\n\t\t{ name: 'peru', code: '#cd853f' },\r\n\t\t{ name: 'pink', code: '#ffc0cb' },\r\n\t\t{ name: 'plum', code: '#dda0dd' },\r\n\t\t{ name: 'powderblue', code: '#b0e0e6' },\r\n\t\t{ name: 'purple', code: '#800080' },\r\n\t\t{ name: 'rebeccapurple', code: '#663399' },\r\n\t\t{ name: 'red', code: '#ff0000' },\r\n\t\t{ name: 'rosybrown', code: '#bc8f8f' },\r\n\t\t{ name: 'royalblue', code: '#4169e1' },\r\n\t\t{ name: 'saddlebrown', code: '#8b4513' },\r\n\t\t{ name: 'salmon', code: '#fa8072' },\r\n\t\t{ name: 'sandybrown', code: '#f4a460' },\r\n\t\t{ name: 'seagreen', code: '#2e8b57' },\r\n\t\t{ name: 'seashell', code: '#fff5ee' },\r\n\t\t{ name: 'sienna', code: '#a0522d' },\r\n\t\t{ name: 'silver', code: '#c0c0c0' },\r\n\t\t{ name: 'skyblue', code: '#87ceeb' },\r\n\t\t{ name: 'slateblue', code: '#6a5acd' },\r\n\t\t{ name: 'slategray', code: '#708090' },\r\n\t\t{ name: 'slategrey', code: '#708090' },\r\n\t\t{ name: 'snow', code: '#fffafa' },\r\n\t\t{ name: 'springgreen', code: '#00ff7f' },\r\n\t\t{ name: 'steelblue', code: '#4682b4' },\r\n\t\t{ name: 'tan', code: '#d2b48c' },\r\n\t\t{ name: 'teal', code: '#008080' },\r\n\t\t{ name: 'thistle', code: '#d8bfd8' },\r\n\t\t{ name: 'tomato', code: '#ff6347' },\r\n\t\t{ name: 'turquoise', code: '#40e0d0' },\r\n\t\t{ name: 'violet', code: '#ee82ee' },\r\n\t\t{ name: 'wheat', code: '#f5deb3' },\r\n\t\t{ name: 'white', code: '#ffffff' },\r\n\t\t{ name: 'whitesmoke', code: '#f5f5f5' },\r\n\t\t{ name: 'yellow', code: '#ffff00' },\r\n\t\t{ name: 'yellowgreen', code: '#9acd32' },\r\n\t];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>ivy-option-picker</h1>\r\n<h2>simple selects</h2>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<span *luDisplayer=\"let value\">{{value}}</span>\r\n\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t<lu-option-picker>\r\n\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t<lu-option value=\"2\">2</lu-option>\r\n\t\t</lu-option-picker>\r\n\t</lu-select>\r\n\t<label class=\"textfield-label\">single</label>\r\n</div>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"collection\" multiple=\"true\">\r\n\t\t<span *luDisplayer=\"let values; multiple: true\">{{values.length}} items</span>\r\n\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t<lu-option-picker>\r\n\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t<lu-option value=\"2\">2</lu-option>\r\n\t\t</lu-option-picker>\r\n\t</lu-select>\r\n\t<label class=\"textfield-label\">multiple</label>\r\n</div>\r\n<h2>option picker advanced - no operators</h2>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<span *luDisplayer=\"let value\">{{value}}</span>\r\n\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t<lu-option-picker-advanced>\r\n\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t<lu-option value=\"2\">2</lu-option>\r\n\t\t</lu-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label class=\"textfield-label\">single</label>\r\n</div>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"collection\" multiple=\"true\">\r\n\t\t<span *luDisplayer=\"let values; multiple: true\">{{values.length}} items</span>\r\n\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t<lu-option-picker-advanced>\r\n\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t<lu-option value=\"2\">2</lu-option>\r\n\t\t</lu-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label class=\"textfield-label\">multiple</label>\r\n</div>\r\n<h2>option picker advanced - with operators</h2>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"color\">\r\n\t\t<span *luDisplayer=\"let value\">{{value.name}}</span>\r\n\t\t<lu-input-clearer></lu-input-clearer>\r\n\t\t<lu-option-picker-advanced>\r\n\t\t\t<!-- transforms the colors array to be passed between operators -->\r\n\t\t\t<lu-option-feeder [options]=\"colors\"></lu-option-feeder>\r\n\t\t\t<!-- allows you to filter said colors -->\r\n\t\t\t<lu-option-searcher [searchFn]=\"searchFn\"></lu-option-searcher>\r\n\t\t\t<!-- adds paging to the results to not break your DOM -->\r\n\t\t\t<lu-option-pager></lu-option-pager>\r\n\t\t\t<!-- specify the template to display each color -->\r\n\t\t\t<lu-option *luForOptions=\"let color; trackBy: trackBy\" [value]=\"color\">{{color.name}}</lu-option>\r\n\t\t</lu-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label class=\"textfield-label\">single</label>\r\n</div>\r\n<!-- <div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"collection\" multiple=\"true\">\r\n\t\t<span *luDisplayer=\"let values; multiple: true\">{{values.length}} items</span>\r\n\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t<lu-option-picker-advanced>\r\n\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t<lu-option value=\"2\">2</lu-option>\r\n\t\t</lu-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label class=\"textfield-label\">multiple</label>\r\n</div> -->\r\n"
        },
        {
            "name": "IvyTreeComponent",
            "id": "component-IvyTreeComponent-2fb4272d58e1f2966af94bf731dc1370",
            "file": "packages/ng/applications/sandbox/src/app/issues/ivy-tree/ivy-tree.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-ivy-tree",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./ivy-tree.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collection",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "item",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "options",
                    "defaultValue": "[{\r\n\t\tvalue: node1,\r\n\t\tchildren: [\r\n\t\t\t{ value: node11, children: [ { value: node111, children: [] } ] },\r\n\t\t\t{ value: node12, children: [] },\r\n\t\t]\r\n\t}, {\r\n\t\tvalue: node2,\r\n\t\tchildren: [ { value: node21, children: [] }]\r\n\t}]",
                    "type": "ILuTree<literal type>[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "tree",
                    "defaultValue": "{\r\n\t\tvalue: node1,\r\n\t\tchildren: [\r\n\t\t\t{ value: node11, children: [ { value: node111, children: [] } ] },\r\n\t\t\t{ value: node12, children: [] },\r\n\t\t]\r\n\t}",
                    "type": "ILuTree<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "searchFn",
                    "args": [
                        {
                            "name": "o",
                            "type": ""
                        },
                        {
                            "name": "c",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "o",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "c",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ILuTree } from '@lucca-front/ng/core';\r\n\r\nconst node1 = { id: 1, name: 'root 1' };\r\nconst node11 = { id: 11, name: 'node 1.1' };\r\nconst node111 = { id: 111, name: 'leaf 1.1.1' };\r\nconst node12 = { id: 11, name: 'node 1.2' };\r\nconst node2 = { id: 2, name: 'root 2' };\r\nconst node21 = { id: 21, name: 'node 2.1' };\r\n\r\n@Component({\r\n\tselector: 'sand-ivy-tree',\r\n\ttemplateUrl: './ivy-tree.component.html'\r\n})\r\nexport class IvyTreeComponent {\r\n\ttree: ILuTree<{ id: number, name: string }> = {\r\n\t\tvalue: node1,\r\n\t\tchildren: [\r\n\t\t\t{ value: node11, children: [ { value: node111, children: [] } ] },\r\n\t\t\t{ value: node12, children: [] },\r\n\t\t]\r\n\t};\r\n\toptions: ILuTree<{ id: number, name: string }>[] = [{\r\n\t\tvalue: node1,\r\n\t\tchildren: [\r\n\t\t\t{ value: node11, children: [ { value: node111, children: [] } ] },\r\n\t\t\t{ value: node12, children: [] },\r\n\t\t]\r\n\t}, {\r\n\t\tvalue: node2,\r\n\t\tchildren: [ { value: node21, children: [] }]\r\n\t}];\r\n\titem;\r\n\tcollection = [];\r\n\r\n\tsearchFn(o, c) {\r\n\t\treturn o.name.startsWith(c);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>ivy-tree</h1>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{ value.name }}</ng-container>\r\n\t\t<lu-tree-option-picker>\r\n\t\t\t<lu-tree-option [tree]=\"tree\">\r\n\t\t\t\t<ng-container *luDisplayer=\"let value\">{{ value.name }}</ng-container>\r\n\t\t\t</lu-tree-option>\r\n\t\t</lu-tree-option-picker>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">select single</label>\r\n</div>\r\n\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{ value.name }}</ng-container>\r\n\t\t<lu-tree-option-picker-advanced>\r\n\t\t\t<lu-tree-option-feeder [options]=\"options\"></lu-tree-option-feeder>\r\n\t\t\t<lu-tree-option-searcher [searchFn]=\"searchFn\"></lu-tree-option-searcher>\r\n\t\t\t<lu-tree-option *luForTreeOptions=\"let option\" [tree]=\"option\">\r\n\t\t\t\t<ng-container *luDisplayer=\"let value\">{{ value.name }}</ng-container>\r\n\t\t\t</lu-tree-option>\r\n\t\t</lu-tree-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">single with operators</label>\r\n</div>\r\n\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"collection\" multiple>\r\n\t\t<ng-container *luDisplayer=\"let values; multiple: true\">{{ values.length }} items selected</ng-container>\r\n\t\t<lu-tree-option-picker-advanced>\r\n\t\t\t<lu-tree-option-feeder [options]=\"options\"></lu-tree-option-feeder>\r\n\t\t\t<lu-tree-option-searcher [searchFn]=\"searchFn\"></lu-tree-option-searcher>\r\n\t\t\t<lu-tree-option *luForTreeOptions=\"let option\" [tree]=\"option\">\r\n\t\t\t\t<ng-container *luDisplayer=\"let value\">{{ value.name }}</ng-container>\r\n\t\t\t</lu-tree-option>\r\n\t\t</lu-tree-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">multiple with operators</label>\r\n</div>\r\n\r\n"
        },
        {
            "name": "LolComponent",
            "id": "component-LolComponent-bc1cea36b392d6a0a8bec428d505bb2e",
            "file": "packages/ng/applications/sandbox/src/app/issues/poc-translate/lol.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-lol",
            "styleUrls": [],
            "styles": [],
            "template": "lol: {{intl.lol}}",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "intl",
                    "type": "LolIntl",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { LolIntl } from './lol.intl';\r\n\r\n@Component({\r\n\tselector: 'lu-lol',\r\n\ttemplate: `lol: {{intl.lol}}`,\r\n})\r\nexport class LolComponent {\r\n\tconstructor(public intl: LolIntl) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "intl",
                        "type": "LolIntl"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "intl",
                        "type": "LolIntl",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "LuApiFeederComponent",
            "id": "component-LuApiFeederComponent-c7d7a8c18afe6df18fbaec3a8a0dae1a",
            "file": "packages/ng/libraries/api/src/lib/select/feeder/api-feeder.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuOptionOperator, useExisting: forwardRef(() => LuApiFeederComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuOnOpenSubscriber, useExisting: forwardRef(() => LuApiFeederComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuApiService, useClass: LuApiHybridService,\n}"
                }
            ],
            "selector": "lu-api-feeder",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "api",
                    "line": 42,
                    "type": "string"
                },
                {
                    "name": "fields",
                    "line": 43,
                    "type": "string"
                },
                {
                    "name": "filters",
                    "line": 44,
                    "type": "[]"
                },
                {
                    "name": "orderBy",
                    "line": 45,
                    "type": "string"
                },
                {
                    "name": "standard",
                    "line": 41,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "outOptions$",
                    "defaultValue": "new BehaviorSubject<T[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "_service",
                    "type": "S",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionFeeder"
                    }
                },
                {
                    "name": "outOptions$",
                    "defaultValue": "new BehaviorSubject<T[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "ALuApiOptionFeeder"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "inheritance": {
                        "file": "ALuApiOptionFeeder"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, forwardRef, Input, Optional, SkipSelf, Inject, Self } from '@angular/core';\r\nimport { ALuOnOpenSubscriber, ILuOnOpenSubscriber } from '@lucca-front/ng/core';\r\nimport { ILuOptionOperator, ALuOptionOperator } from '@lucca-front/ng/option';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { ILuApiItem } from '../../api.model';\r\nimport { ALuApiOptionFeeder } from './api-feeder.model';\r\nimport { ALuApiService, LuApiHybridService } from '../../service/index';\r\n@Component({\r\n\tselector: 'lu-api-feeder',\r\n\ttemplate: '',\r\n\tstyleUrls: [],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuApiFeederComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOnOpenSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuApiFeederComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuApiService,\r\n\t\t\tuseClass: LuApiHybridService,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuApiFeederComponent<T extends ILuApiItem = ILuApiItem>\r\nextends ALuApiOptionFeeder<T, LuApiHybridService<T>>\r\nimplements ILuOptionOperator<T>, ILuOnOpenSubscriber {\r\n\toutOptions$ = new BehaviorSubject<T[]>([]);\r\n\tconstructor(\r\n\t\t@Inject(ALuApiService) @Optional() @SkipSelf() hostService: ALuApiService<T>,\r\n\t\t@Inject(ALuApiService) @Self() selfService: LuApiHybridService<T>,\r\n\t) {\r\n\t\tsuper((hostService || selfService) as LuApiHybridService<T>);\r\n\t}\r\n\r\n\t@Input() set standard(standard: string) { this._service.standard = standard; }\r\n\t@Input() set api(api: string) { this._service.api = api; }\r\n\t@Input() set fields(fields: string) { this._service.fields = fields; }\r\n\t@Input() set filters(filters: string[]) { this._service.filters = filters; }\r\n\t@Input() set orderBy(orderBy: string) { this._service.orderBy = orderBy; }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hostService",
                        "type": "ALuApiService<T>"
                    },
                    {
                        "name": "selfService",
                        "type": "LuApiHybridService<T>"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "hostService",
                        "type": "ALuApiService<T>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selfService",
                        "type": "LuApiHybridService<T>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuApiOptionFeeder",
            "implements": [
                "ILuOptionOperator",
                "ILuOnOpenSubscriber"
            ],
            "accessors": {
                "standard": {
                    "name": "standard",
                    "setSignature": {
                        "name": "standard",
                        "type": "void",
                        "args": [
                            {
                                "name": "standard",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 41,
                        "jsdoctags": [
                            {
                                "name": "standard",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "api": {
                    "name": "api",
                    "setSignature": {
                        "name": "api",
                        "type": "void",
                        "args": [
                            {
                                "name": "api",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 42,
                        "jsdoctags": [
                            {
                                "name": "api",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "fields": {
                    "name": "fields",
                    "setSignature": {
                        "name": "fields",
                        "type": "void",
                        "args": [
                            {
                                "name": "fields",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 43,
                        "jsdoctags": [
                            {
                                "name": "fields",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "filters": {
                    "name": "filters",
                    "setSignature": {
                        "name": "filters",
                        "type": "void",
                        "args": [
                            {
                                "name": "filters",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 44,
                        "jsdoctags": [
                            {
                                "name": "filters",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "orderBy": {
                    "name": "orderBy",
                    "setSignature": {
                        "name": "orderBy",
                        "type": "void",
                        "args": [
                            {
                                "name": "orderBy",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 45,
                        "jsdoctags": [
                            {
                                "name": "orderBy",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "LuApiPagedSearcherComponent",
            "id": "component-LuApiPagedSearcherComponent-f4305293000a56fcabc27d9690cf22ff",
            "file": "packages/ng/libraries/api/src/lib/select/searcher/api-searcher.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuOptionOperator, useExisting: forwardRef(() => LuApiPagedSearcherComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuOnOpenSubscriber, useExisting: forwardRef(() => LuApiPagedSearcherComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuOnScrollBottomSubscriber, useExisting: forwardRef(() => LuApiPagedSearcherComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuOnCloseSubscriber, useExisting: forwardRef(() => LuApiPagedSearcherComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuApiService, useClass: LuApiHybridService,\n}"
                }
            ],
            "selector": "lu-api-paged-searcher",
            "styleUrls": [
                "api-searcher.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "api-searcher.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "api",
                    "line": 115,
                    "type": "string"
                },
                {
                    "name": "fields",
                    "line": 116,
                    "type": "string"
                },
                {
                    "name": "filters",
                    "line": 117,
                    "type": "[]"
                },
                {
                    "name": "orderBy",
                    "line": 118,
                    "type": "string"
                },
                {
                    "name": "standard",
                    "line": 114,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clueControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "searchInput",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 113,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchInput', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "_loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionPagedSearcher"
                    }
                },
                {
                    "name": "_options",
                    "defaultValue": "[]",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionPagedSearcher"
                    }
                },
                {
                    "name": "_page",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionPagedSearcher"
                    }
                },
                {
                    "name": "_page$",
                    "defaultValue": "new Subject<number>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionPagedSearcher"
                    }
                },
                {
                    "name": "loading$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "inheritance": {
                        "file": "ALuApiOptionPagedSearcher"
                    }
                },
                {
                    "name": "outOptions$",
                    "defaultValue": "new Subject<T[]>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "inheritance": {
                        "file": "ALuApiOptionPagedSearcher"
                    }
                },
                {
                    "name": "_clue$",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "empty$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "loading$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "outOptions$",
                    "defaultValue": "new Subject<T[]>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137
                },
                {
                    "name": "resetClue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141
                },
                {
                    "name": "initObservables",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionPagedSearcher"
                    }
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "inheritance": {
                        "file": "ALuApiOptionPagedSearcher"
                    }
                },
                {
                    "name": "onScrollBottom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "inheritance": {
                        "file": "ALuApiOptionPagedSearcher"
                    }
                },
                {
                    "name": "resetClue",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 132,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionPagedSearcher"
                    }
                },
                {
                    "name": "resetPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "inheritance": {
                        "file": "ALuApiOptionPagedSearcher"
                    }
                },
                {
                    "name": "clearOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "initObservables",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "resetClue",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n\tChangeDetectionStrategy,\r\n\tComponent,\r\n\tforwardRef,\r\n\tInput,\r\n\tViewChild,\r\n\tElementRef,\r\n\tSkipSelf,\r\n\tSelf,\r\n\tOptional,\r\n\tInject,\r\n\tOnInit,\r\n} from '@angular/core';\r\nimport { ALuOnOpenSubscriber, ALuOnScrollBottomSubscriber, ALuOnCloseSubscriber } from '@lucca-front/ng/core';\r\nimport { ALuOptionOperator } from '@lucca-front/ng/option';\r\nimport { ALuApiOptionSearcher, ALuApiOptionPagedSearcher } from './api-searcher.model';\r\nimport { ILuApiItem } from '../../api.model';\r\nimport { FormControl } from '@angular/forms';\r\nimport { debounceTime, tap } from 'rxjs/operators';\r\nimport { ALuApiService, LuApiHybridService } from '../../service/index';\r\n\r\n@Component({\r\n\tselector: 'lu-api-searcher',\r\n\ttemplateUrl: 'api-searcher.component.html',\r\n\tstyleUrls: ['api-searcher.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuApiSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOnOpenSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuApiSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuApiService,\r\n\t\t\tuseClass: LuApiHybridService,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuApiSearcherComponent<T extends ILuApiItem = ILuApiItem>\r\n\textends ALuApiOptionSearcher<T, LuApiHybridService<T>> implements OnInit {\r\n\t@ViewChild('searchInput', { read: ElementRef, static: true }) searchInput: ElementRef;\r\n\r\n\t@Input() set standard(standard: string) { this._service.standard = standard; }\r\n\t@Input() set api(api: string) { this._service.api = api; }\r\n\t@Input() set fields(fields: string) { this._service.fields = fields; }\r\n\t@Input() set filters(filters: string[]) { this._service.filters = filters; }\r\n\t@Input() set orderBy(orderBy: string) { this._service.orderBy = orderBy; }\r\n\t@Input() set sort(sort: string) { this._service.sort = sort }\r\n\r\n\tclueControl: FormControl;\r\n\tconstructor(\r\n\t\t@Inject(ALuApiService) @Optional() @SkipSelf() hostService: ALuApiService<T>,\r\n\t\t@Inject(ALuApiService) @Self() selfService: LuApiHybridService<T>,\r\n\t) {\r\n\t\tsuper((hostService || selfService) as LuApiHybridService<T>);\r\n\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis.clueControl = new FormControl(undefined);\r\n\t\tthis.clue$ = this.clueControl.valueChanges\r\n\t\t\t.pipe(debounceTime(250));\r\n\t\tsuper.init();\r\n\t}\r\n\r\n\tonOpen() {\r\n\t\tthis.searchInput.nativeElement.focus();\r\n\t\tsuper.onOpen();\r\n\t}\r\n\tresetClue() {\r\n\t\tthis.clueControl.setValue('');\r\n\t}\r\n}\r\n\r\n@Component({\r\n\tselector: 'lu-api-paged-searcher',\r\n\ttemplateUrl: 'api-searcher.component.html',\r\n\tstyleUrls: ['api-searcher.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuApiPagedSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOnOpenSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuApiPagedSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOnScrollBottomSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuApiPagedSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOnCloseSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuApiPagedSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuApiService,\r\n\t\t\tuseClass: LuApiHybridService,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuApiPagedSearcherComponent<T extends ILuApiItem = ILuApiItem>\r\n\textends ALuApiOptionPagedSearcher<T, LuApiHybridService<T>> implements OnInit {\r\n\t@ViewChild('searchInput', { read: ElementRef, static: true }) searchInput: ElementRef;\r\n\t@Input() set standard(standard: string) { this._service.standard = standard; }\r\n\t@Input() set api(api: string) { this._service.api = api; }\r\n\t@Input() set fields(fields: string) { this._service.fields = fields; }\r\n\t@Input() set filters(filters: string[]) { this._service.filters = filters; }\r\n\t@Input() set orderBy(orderBy: string) { this._service.orderBy = orderBy; }\r\n\r\n\tclueControl: FormControl;\r\n\tconstructor(\r\n\t\t@Inject(ALuApiService) @Optional() @SkipSelf() hostService: ALuApiService,\r\n\t\t@Inject(ALuApiService) @Self() selfService: LuApiHybridService<T>,\r\n\t) {\r\n\t\tsuper((hostService || selfService) as LuApiHybridService<T>);\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis.clueControl = new FormControl(undefined);\r\n\t\tthis.clue$ = this.clueControl.valueChanges\r\n\t\t\t.pipe(\r\n\t\t\t\ttap(c => this.resetPage()),\r\n\t\t\t\t// debounceTime(250),\r\n\t\t\t);\r\n\t\tsuper.init();\r\n\t}\r\n\r\n\tonOpen() {\r\n\t\tthis.searchInput.nativeElement.focus();\r\n\t\tsuper.onOpen();\r\n\t}\r\n\tresetClue() {\r\n\t\tthis.clueControl.reset('');\r\n\t}\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '_definitions';\r\n@include optionSearcherStyle;\r\n",
                    "styleUrl": "api-searcher.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hostService",
                        "type": "ALuApiService"
                    },
                    {
                        "name": "selfService",
                        "type": "LuApiHybridService<T>"
                    }
                ],
                "line": 120,
                "jsdoctags": [
                    {
                        "name": "hostService",
                        "type": "ALuApiService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selfService",
                        "type": "LuApiHybridService<T>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuApiOptionPagedSearcher",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "standard": {
                    "name": "standard",
                    "setSignature": {
                        "name": "standard",
                        "type": "void",
                        "args": [
                            {
                                "name": "standard",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 114,
                        "jsdoctags": [
                            {
                                "name": "standard",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "api": {
                    "name": "api",
                    "setSignature": {
                        "name": "api",
                        "type": "void",
                        "args": [
                            {
                                "name": "api",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 115,
                        "jsdoctags": [
                            {
                                "name": "api",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "fields": {
                    "name": "fields",
                    "setSignature": {
                        "name": "fields",
                        "type": "void",
                        "args": [
                            {
                                "name": "fields",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 116,
                        "jsdoctags": [
                            {
                                "name": "fields",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "filters": {
                    "name": "filters",
                    "setSignature": {
                        "name": "filters",
                        "type": "void",
                        "args": [
                            {
                                "name": "filters",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 117,
                        "jsdoctags": [
                            {
                                "name": "filters",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "orderBy": {
                    "name": "orderBy",
                    "setSignature": {
                        "name": "orderBy",
                        "type": "void",
                        "args": [
                            {
                                "name": "orderBy",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 118,
                        "jsdoctags": [
                            {
                                "name": "orderBy",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"textfield mod-search\" [class.is-loading]=\"loading$ | async\">\r\n\t<input #searchInput class=\"textfield-input\" [formControl]=\"clueControl\">\r\n</div>\r\n<lu-option-placeholder *ngIf=\"(empty$ | async) && !(loading$ | async)\" (onClear)=\"resetClue()\"></lu-option-placeholder>"
        },
        {
            "name": "LuApiPagerComponent",
            "id": "component-LuApiPagerComponent-1555f829d00f8a59b2768d0df49b21ac",
            "file": "packages/ng/libraries/api/src/lib/select/pager/api-pager.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuOptionOperator, useExisting: forwardRef(() => LuApiPagerComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuApiService, useClass: LuApiHybridService,\n}"
                },
                {
                    "name": "{\n    provide: ALuOnScrollBottomSubscriber, useExisting: forwardRef(() => LuApiPagerComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuOnOpenSubscriber, useExisting: forwardRef(() => LuApiPagerComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-api-pager",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "api",
                    "line": 46,
                    "type": "string"
                },
                {
                    "name": "fields",
                    "line": 47,
                    "type": "string"
                },
                {
                    "name": "filters",
                    "line": 48,
                    "type": "[]"
                },
                {
                    "name": "orderBy",
                    "line": 49,
                    "type": "string"
                },
                {
                    "name": "standard",
                    "line": 45,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_initialized",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionPager"
                    }
                },
                {
                    "name": "_loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionPager"
                    }
                },
                {
                    "name": "_options",
                    "defaultValue": "[]",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionPager"
                    }
                },
                {
                    "name": "_page",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionPager"
                    }
                },
                {
                    "name": "_page$",
                    "defaultValue": "new Subject<number>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionPager"
                    }
                },
                {
                    "name": "_results$",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionPager"
                    }
                },
                {
                    "name": "loading$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "ALuApiOptionPager"
                    }
                },
                {
                    "name": "outOptions$",
                    "defaultValue": "new Subject<T[]>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "inheritance": {
                        "file": "ALuApiOptionPager"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionPager"
                    }
                },
                {
                    "name": "initObservables",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionPager"
                    }
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "ALuApiOptionPager"
                    }
                },
                {
                    "name": "onScrollBottom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "inheritance": {
                        "file": "ALuApiOptionPager"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, forwardRef, Input, Inject, Optional, SkipSelf, Self, OnInit } from '@angular/core';\r\nimport { ILuOnScrollBottomSubscriber, ALuOnScrollBottomSubscriber, ILuOnOpenSubscriber, ALuOnOpenSubscriber } from '@lucca-front/ng/core';\r\nimport { ILuOptionOperator, ALuOptionOperator } from '@lucca-front/ng/option';\r\nimport { ILuApiItem } from '../../api.model';\r\nimport { ALuApiOptionPager } from './api-pager.model';\r\nimport { ALuApiService, LuApiHybridService } from '../../service/index';\r\n\r\n@Component({\r\n\tselector: 'lu-api-pager',\r\n\ttemplate: '',\r\n\tstyleUrls: [],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuApiPagerComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuApiService,\r\n\t\t\tuseClass: LuApiHybridService,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOnScrollBottomSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuApiPagerComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOnOpenSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuApiPagerComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuApiPagerComponent<T extends ILuApiItem = ILuApiItem>\r\nextends ALuApiOptionPager<T, LuApiHybridService<T>>\r\nimplements ILuOptionOperator<T>, OnInit, ILuOnScrollBottomSubscriber, ILuOnOpenSubscriber {\r\n\tconstructor(\r\n\t\t@Inject(ALuApiService) @Optional() @SkipSelf() hostService: LuApiHybridService<T>,\r\n\t\t@Inject(ALuApiService) @Self() selfService: LuApiHybridService<T>,\r\n\t) {\r\n\t\tsuper((hostService || selfService) as LuApiHybridService<T>);\r\n\t}\r\n\r\n\t@Input() set standard(standard: string) { this._service.standard = standard; }\r\n\t@Input() set api(api: string) { this._service.api = api; }\r\n\t@Input() set fields(fields: string) { this._service.fields = fields; }\r\n\t@Input() set filters(filters: string[]) { this._service.filters = filters; }\r\n\t@Input() set orderBy(orderBy: string) { this._service.orderBy = orderBy; }\r\n\r\n\tngOnInit() {\r\n\t\tsuper.init();\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hostService",
                        "type": "LuApiHybridService<T>"
                    },
                    {
                        "name": "selfService",
                        "type": "LuApiHybridService<T>"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "hostService",
                        "type": "LuApiHybridService<T>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selfService",
                        "type": "LuApiHybridService<T>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuApiOptionPager",
            "implements": [
                "ILuOptionOperator",
                "OnInit",
                "ILuOnScrollBottomSubscriber",
                "ILuOnOpenSubscriber"
            ],
            "accessors": {
                "standard": {
                    "name": "standard",
                    "setSignature": {
                        "name": "standard",
                        "type": "void",
                        "args": [
                            {
                                "name": "standard",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 45,
                        "jsdoctags": [
                            {
                                "name": "standard",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "api": {
                    "name": "api",
                    "setSignature": {
                        "name": "api",
                        "type": "void",
                        "args": [
                            {
                                "name": "api",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 46,
                        "jsdoctags": [
                            {
                                "name": "api",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "fields": {
                    "name": "fields",
                    "setSignature": {
                        "name": "fields",
                        "type": "void",
                        "args": [
                            {
                                "name": "fields",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "fields",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "filters": {
                    "name": "filters",
                    "setSignature": {
                        "name": "filters",
                        "type": "void",
                        "args": [
                            {
                                "name": "filters",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 48,
                        "jsdoctags": [
                            {
                                "name": "filters",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "orderBy": {
                    "name": "orderBy",
                    "setSignature": {
                        "name": "orderBy",
                        "type": "void",
                        "args": [
                            {
                                "name": "orderBy",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 49,
                        "jsdoctags": [
                            {
                                "name": "orderBy",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "LuApiSearcherComponent",
            "id": "component-LuApiSearcherComponent-f4305293000a56fcabc27d9690cf22ff",
            "file": "packages/ng/libraries/api/src/lib/select/searcher/api-searcher.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuOptionOperator, useExisting: forwardRef(() => LuApiSearcherComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuOnOpenSubscriber, useExisting: forwardRef(() => LuApiSearcherComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuApiService, useClass: LuApiHybridService,\n}"
                }
            ],
            "selector": "lu-api-searcher",
            "styleUrls": [
                "api-searcher.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "api-searcher.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "api",
                    "line": 49,
                    "type": "string"
                },
                {
                    "name": "fields",
                    "line": 50,
                    "type": "string"
                },
                {
                    "name": "filters",
                    "line": 51,
                    "type": "[]"
                },
                {
                    "name": "orderBy",
                    "line": 52,
                    "type": "string"
                },
                {
                    "name": "sort",
                    "line": 53,
                    "type": "string"
                },
                {
                    "name": "standard",
                    "line": 48,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clueControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "searchInput",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchInput', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "_clue$",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "empty$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "loading$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "outOptions$",
                    "defaultValue": "new Subject<T[]>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70
                },
                {
                    "name": "resetClue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74
                },
                {
                    "name": "clearOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "initObservables",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                },
                {
                    "name": "resetClue",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuApiOptionSearcher"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n\tChangeDetectionStrategy,\r\n\tComponent,\r\n\tforwardRef,\r\n\tInput,\r\n\tViewChild,\r\n\tElementRef,\r\n\tSkipSelf,\r\n\tSelf,\r\n\tOptional,\r\n\tInject,\r\n\tOnInit,\r\n} from '@angular/core';\r\nimport { ALuOnOpenSubscriber, ALuOnScrollBottomSubscriber, ALuOnCloseSubscriber } from '@lucca-front/ng/core';\r\nimport { ALuOptionOperator } from '@lucca-front/ng/option';\r\nimport { ALuApiOptionSearcher, ALuApiOptionPagedSearcher } from './api-searcher.model';\r\nimport { ILuApiItem } from '../../api.model';\r\nimport { FormControl } from '@angular/forms';\r\nimport { debounceTime, tap } from 'rxjs/operators';\r\nimport { ALuApiService, LuApiHybridService } from '../../service/index';\r\n\r\n@Component({\r\n\tselector: 'lu-api-searcher',\r\n\ttemplateUrl: 'api-searcher.component.html',\r\n\tstyleUrls: ['api-searcher.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuApiSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOnOpenSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuApiSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuApiService,\r\n\t\t\tuseClass: LuApiHybridService,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuApiSearcherComponent<T extends ILuApiItem = ILuApiItem>\r\n\textends ALuApiOptionSearcher<T, LuApiHybridService<T>> implements OnInit {\r\n\t@ViewChild('searchInput', { read: ElementRef, static: true }) searchInput: ElementRef;\r\n\r\n\t@Input() set standard(standard: string) { this._service.standard = standard; }\r\n\t@Input() set api(api: string) { this._service.api = api; }\r\n\t@Input() set fields(fields: string) { this._service.fields = fields; }\r\n\t@Input() set filters(filters: string[]) { this._service.filters = filters; }\r\n\t@Input() set orderBy(orderBy: string) { this._service.orderBy = orderBy; }\r\n\t@Input() set sort(sort: string) { this._service.sort = sort }\r\n\r\n\tclueControl: FormControl;\r\n\tconstructor(\r\n\t\t@Inject(ALuApiService) @Optional() @SkipSelf() hostService: ALuApiService<T>,\r\n\t\t@Inject(ALuApiService) @Self() selfService: LuApiHybridService<T>,\r\n\t) {\r\n\t\tsuper((hostService || selfService) as LuApiHybridService<T>);\r\n\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis.clueControl = new FormControl(undefined);\r\n\t\tthis.clue$ = this.clueControl.valueChanges\r\n\t\t\t.pipe(debounceTime(250));\r\n\t\tsuper.init();\r\n\t}\r\n\r\n\tonOpen() {\r\n\t\tthis.searchInput.nativeElement.focus();\r\n\t\tsuper.onOpen();\r\n\t}\r\n\tresetClue() {\r\n\t\tthis.clueControl.setValue('');\r\n\t}\r\n}\r\n\r\n@Component({\r\n\tselector: 'lu-api-paged-searcher',\r\n\ttemplateUrl: 'api-searcher.component.html',\r\n\tstyleUrls: ['api-searcher.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuApiPagedSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOnOpenSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuApiPagedSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOnScrollBottomSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuApiPagedSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOnCloseSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuApiPagedSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuApiService,\r\n\t\t\tuseClass: LuApiHybridService,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuApiPagedSearcherComponent<T extends ILuApiItem = ILuApiItem>\r\n\textends ALuApiOptionPagedSearcher<T, LuApiHybridService<T>> implements OnInit {\r\n\t@ViewChild('searchInput', { read: ElementRef, static: true }) searchInput: ElementRef;\r\n\t@Input() set standard(standard: string) { this._service.standard = standard; }\r\n\t@Input() set api(api: string) { this._service.api = api; }\r\n\t@Input() set fields(fields: string) { this._service.fields = fields; }\r\n\t@Input() set filters(filters: string[]) { this._service.filters = filters; }\r\n\t@Input() set orderBy(orderBy: string) { this._service.orderBy = orderBy; }\r\n\r\n\tclueControl: FormControl;\r\n\tconstructor(\r\n\t\t@Inject(ALuApiService) @Optional() @SkipSelf() hostService: ALuApiService,\r\n\t\t@Inject(ALuApiService) @Self() selfService: LuApiHybridService<T>,\r\n\t) {\r\n\t\tsuper((hostService || selfService) as LuApiHybridService<T>);\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis.clueControl = new FormControl(undefined);\r\n\t\tthis.clue$ = this.clueControl.valueChanges\r\n\t\t\t.pipe(\r\n\t\t\t\ttap(c => this.resetPage()),\r\n\t\t\t\t// debounceTime(250),\r\n\t\t\t);\r\n\t\tsuper.init();\r\n\t}\r\n\r\n\tonOpen() {\r\n\t\tthis.searchInput.nativeElement.focus();\r\n\t\tsuper.onOpen();\r\n\t}\r\n\tresetClue() {\r\n\t\tthis.clueControl.reset('');\r\n\t}\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '_definitions';\r\n@include optionSearcherStyle;\r\n",
                    "styleUrl": "api-searcher.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hostService",
                        "type": "ALuApiService<T>"
                    },
                    {
                        "name": "selfService",
                        "type": "LuApiHybridService<T>"
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "hostService",
                        "type": "ALuApiService<T>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selfService",
                        "type": "LuApiHybridService<T>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuApiOptionSearcher",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "standard": {
                    "name": "standard",
                    "setSignature": {
                        "name": "standard",
                        "type": "void",
                        "args": [
                            {
                                "name": "standard",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 48,
                        "jsdoctags": [
                            {
                                "name": "standard",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "api": {
                    "name": "api",
                    "setSignature": {
                        "name": "api",
                        "type": "void",
                        "args": [
                            {
                                "name": "api",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 49,
                        "jsdoctags": [
                            {
                                "name": "api",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "fields": {
                    "name": "fields",
                    "setSignature": {
                        "name": "fields",
                        "type": "void",
                        "args": [
                            {
                                "name": "fields",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 50,
                        "jsdoctags": [
                            {
                                "name": "fields",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "filters": {
                    "name": "filters",
                    "setSignature": {
                        "name": "filters",
                        "type": "void",
                        "args": [
                            {
                                "name": "filters",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 51,
                        "jsdoctags": [
                            {
                                "name": "filters",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "orderBy": {
                    "name": "orderBy",
                    "setSignature": {
                        "name": "orderBy",
                        "type": "void",
                        "args": [
                            {
                                "name": "orderBy",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 52,
                        "jsdoctags": [
                            {
                                "name": "orderBy",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "sort": {
                    "name": "sort",
                    "setSignature": {
                        "name": "sort",
                        "type": "void",
                        "args": [
                            {
                                "name": "sort",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 53,
                        "jsdoctags": [
                            {
                                "name": "sort",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"textfield mod-search\" [class.is-loading]=\"loading$ | async\">\r\n\t<input #searchInput class=\"textfield-input\" [formControl]=\"clueControl\">\r\n</div>\r\n<lu-option-placeholder *ngIf=\"(empty$ | async) && !(loading$ | async)\" (onClear)=\"resetClue()\"></lu-option-placeholder>"
        },
        {
            "name": "LuApiSelectInputComponent",
            "id": "component-LuApiSelectInputComponent-4c2684c9a51e73925cf5be584eaa4cd9",
            "file": "packages/ng/libraries/api/src/lib/select/input/api-select-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => LuApiSelectInputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-api-select",
            "styleUrls": [
                "./api-select-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./api-select-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "api",
                    "line": 42,
                    "type": "string"
                },
                {
                    "name": "fields",
                    "line": 43,
                    "type": "string"
                },
                {
                    "name": "filters",
                    "line": 44,
                    "type": "string[]"
                },
                {
                    "name": "orderBy",
                    "line": 45,
                    "type": "string"
                },
                {
                    "name": "standard",
                    "line": 41,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "byId",
                    "defaultValue": "() => {...}",
                    "type": "LuOptionComparer<T>",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n\tChangeDetectionStrategy,\r\n\tComponent,\r\n\tChangeDetectorRef,\r\n\tforwardRef,\r\n\tViewContainerRef,\r\n\tElementRef,\r\n\tInput,\r\n\tRenderer2,\r\n\tAfterViewInit,\r\n\tInject,\r\n\tOptional,\r\n\tSkipSelf,\r\n\tSelf\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\nimport { Overlay } from '@angular/cdk/overlay';\r\nimport { ILuInputWithPicker } from '@lucca-front/ng/picker';\r\nimport { ALuSelectInputComponent } from '@lucca-front/ng/select';\r\nimport { ILuApiItem } from '../../api.model';\r\nimport { LuOptionComparer } from '@lucca-front/ng/option';\r\nimport { ALuApiService, LuApiHybridService } from '../../service/index';\r\n\r\n@Component({\r\n\tselector: 'lu-api-select',\r\n\ttemplateUrl: './api-select-input.component.html',\r\n\tstyleUrls: ['./api-select-input.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: NG_VALUE_ACCESSOR,\r\n\t\t\tuseExisting: forwardRef(() => LuApiSelectInputComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuApiSelectInputComponent<T extends ILuApiItem = ILuApiItem>\r\nextends ALuSelectInputComponent<T>\r\nimplements ControlValueAccessor, ILuInputWithPicker<T>, AfterViewInit {\r\n\r\n\t@Input() standard: string;\r\n\t@Input() api: string;\r\n\t@Input() fields: string;\r\n\t@Input() filters: string[];\r\n\t@Input() orderBy: string;\r\n\r\n\tbyId: LuOptionComparer<T> = (option1: T, option2: T) => option1 && option2 && option1.id === option2.id;\r\n\tconstructor(\r\n\t\tprotected _changeDetectorRef: ChangeDetectorRef,\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _elementRef: ElementRef,\r\n\t\tprotected _viewContainerRef: ViewContainerRef,\r\n\t\tprotected _renderer: Renderer2,\r\n\t) {\r\n\t\tsuper(\r\n\t\t\t_changeDetectorRef,\r\n\t\t\t_overlay,\r\n\t\t\t_elementRef,\r\n\t\t\t_viewContainerRef,\r\n\t\t\t_renderer,\r\n\t\t);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '_definitions';\r\n@include selectInputStyle;\r\n\r\n.lu-select-value {\r\n\tpadding-right: 2.5rem;\r\n}\r\n",
                    "styleUrl": "./api-select-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuSelectInputComponent",
            "implements": [
                "ControlValueAccessor",
                "ILuInputWithPicker",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"lu-select-placeholder\">{{placeholder}}</div>\r\n<div class=\"lu-select-value\">\r\n\t<div class=\"lu-select-display-wrapper\">\r\n\t\t<ng-container #display></ng-container>\r\n\t</div>\r\n</div>\r\n<div class=\"lu-select-suffix\">\r\n\t<lu-input-clearer></lu-input-clearer>\r\n</div>\r\n<span [class.chip]=\"multiple\" *luDisplayer=\"let option\">{{option.name}}</span>\r\n<lu-option-picker-advanced [option-comparer]=\"byId\">\r\n\t<header class=\"lu-picker-header\">\r\n\t\t<lu-api-paged-searcher\r\n\t\t\t[standard]=\"standard\"\r\n\t\t\t[api]=\"api\"\r\n\t\t\t[fields]=\"fields\"\r\n\t\t\t[filters]=\"filters\"\r\n\t\t\t[orderBy]=\"orderBy\"\r\n\t\t></lu-api-paged-searcher>\r\n\t</header>\r\n\t<lu-option *luForOptions=\"let option\" [value]=\"option\">{{option.name}}</lu-option>\r\n</lu-option-picker-advanced>\r\n"
        },
        {
            "name": "LuCalendarInputComponent",
            "id": "component-LuCalendarInputComponent-36dd8042a44727f025c07b8502ea50e0",
            "file": "packages/ng/libraries/date/src/lib/calendar/calendar-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => LuCalendarInputComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: LuCalendarInputComponent, multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-calendar",
            "styleUrls": [
                "./calendar-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./calendar-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "granularity",
                    "defaultValue": "ELuDateGranularity.day",
                    "line": 30,
                    "type": "ELuDateGranularity"
                },
                {
                    "name": "max",
                    "line": 29,
                    "type": "D"
                },
                {
                    "name": "min",
                    "line": 28,
                    "type": "D"
                },
                {
                    "name": "startOn",
                    "defaultValue": "this._adapter.forgeToday()",
                    "line": 31,
                    "type": "D"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "header",
                    "type": "ICalendarItem<D>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "type": "ICalendarItem<D>[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "labels",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "viewGranularity",
                    "type": "ELuDateGranularity",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "_cvaOnChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuInput"
                    }
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuInput"
                    }
                },
                {
                    "name": "_placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuInput"
                    }
                },
                {
                    "name": "_value",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuInput"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "applyDailyMods",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "applyMonthlyMods",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "applyYearlyMods",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "increaseGranularity",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 270
                },
                {
                    "name": "initDayLabels",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68
                },
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 252
                },
                {
                    "name": "nextDecade",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 284,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "nextMonth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 276,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "nextYear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 280,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59
                },
                {
                    "name": "previous",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 237
                },
                {
                    "name": "previousDecade",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 296,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "previousMonth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 288,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "previousYear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 292,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "renderDailyView",
                    "args": [
                        {
                            "name": "month",
                            "type": "D",
                            "defaultValue": "this.header.date"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "D",
                            "defaultValue": "this.header.date",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renderMonthlyView",
                    "args": [
                        {
                            "name": "year",
                            "type": "D",
                            "defaultValue": "this.header.date"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "year",
                            "type": "D",
                            "defaultValue": "this.header.date",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renderYearlyView",
                    "args": [
                        {
                            "name": "decade",
                            "type": "D",
                            "defaultValue": "this.header.date"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "decade",
                            "type": "D",
                            "defaultValue": "this.header.date",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "item",
                            "type": "ICalendarItem<D>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ICalendarItem<D>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectDay",
                    "args": [
                        {
                            "name": "item",
                            "type": "ICalendarItem<D>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 211,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ICalendarItem<D>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectMonth",
                    "args": [
                        {
                            "name": "item",
                            "type": "ICalendarItem<D>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ICalendarItem<D>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectYear",
                    "args": [
                        {
                            "name": "item",
                            "type": "ICalendarItem<D>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ICalendarItem<D>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackBy",
                    "args": [
                        {
                            "name": "idx",
                            "type": ""
                        },
                        {
                            "name": "item",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 267,
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 301,
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "D",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "D",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "applyClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuInput"
                    }
                },
                {
                    "name": "isEmpty",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuInput"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuInput"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuInput"
                    }
                },
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "ALuInput"
                    }
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuInput"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuInput"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, forwardRef, ChangeDetectorRef, ElementRef, Renderer2, Inject, LOCALE_ID, OnInit, Input } from '@angular/core';\r\nimport { ALuInput } from '@lucca-front/ng/input';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\r\nimport { getLocaleFirstDayOfWeek, getLocaleDayNames, FormStyle, TranslationWidth } from '@angular/common';\r\nimport { LuCalendarItemFactory } from './calendar-item.factory';\r\nimport { ICalendarItem } from './calendar-item.interface';\r\nimport { ALuDateAdapter, ELuDateGranularity } from '@lucca-front/ng/core';\r\n\r\n@Component({\r\n\tselector: 'lu-calendar',\r\n\ttemplateUrl: './calendar-input.component.html',\r\n\tstyleUrls: ['./calendar-input.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: NG_VALUE_ACCESSOR,\r\n\t\t\tuseExisting: forwardRef(() => LuCalendarInputComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: NG_VALIDATORS,\r\n\t\t\tuseExisting: LuCalendarInputComponent,\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuCalendarInputComponent<D> extends ALuInput<D> implements ControlValueAccessor, OnInit, Validator {\r\n\t@Input() min?: D;\r\n\t@Input() max?: D;\r\n\t@Input() granularity: ELuDateGranularity = ELuDateGranularity.day;\r\n\t@Input() startOn: D = this._adapter.forgeToday();\r\n\r\n\tviewGranularity: ELuDateGranularity;\r\n\theader: ICalendarItem<D>;\r\n\titems: ICalendarItem<D>[] = [];\r\n\tget mod() {\r\n\t\tswitch (this.viewGranularity) {\r\n\t\t\tcase ELuDateGranularity.year:\r\n\t\t\t\treturn 'mod-yearlyView';\r\n\t\t\tcase ELuDateGranularity.month:\r\n\t\t\t\treturn 'mod-monthlyView';\r\n\t\t\tcase ELuDateGranularity.day:\r\n\t\t\t\treturn 'mod-dailyView';\r\n\t\t}\r\n\t}\r\n\r\n\t// daily view\r\n\tlabels: string[] = [];\r\n\tconstructor(\r\n\t\t_changeDetectorRef: ChangeDetectorRef,\r\n\t\t_elementRef: ElementRef,\r\n\t\t_renderer: Renderer2,\r\n\t\t@Inject(LOCALE_ID) private _locale: string,\r\n\t\tprivate _factory: LuCalendarItemFactory<D>,\r\n\t\tprivate _adapter: ALuDateAdapter<D>,\r\n\t) {\r\n\t\tsuper(_changeDetectorRef, _elementRef, _renderer);\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis.viewGranularity = this.granularity;\r\n\t\tthis.initDayLabels();\r\n\t}\r\n\twriteValue(value?: D) {\r\n\t\tconst date = value && this._adapter.isValid(value) ? this._adapter.clone(value) : this.startOn;\r\n\t\tthis.header = this._factory.forgeMonth(date);\r\n\t\tsuper.writeValue(value);\r\n\t}\r\n\tinitDayLabels() {\r\n\t\tthis.labels = [...getLocaleDayNames(this._locale, FormStyle.Standalone, TranslationWidth.Narrow)];\r\n\t\tif (getLocaleFirstDayOfWeek(this._locale) === 1) {\r\n\t\t\tthis.labels.push(this.labels.shift());\r\n\t\t}\r\n\t}\r\n\tprotected render() {\r\n\t\tswitch (this.viewGranularity) {\r\n\t\t\tcase ELuDateGranularity.year:\r\n\t\t\t\tthis.renderYearlyView();\r\n\t\t\t\tbreak;\r\n\t\t\tcase ELuDateGranularity.month:\r\n\t\t\t\tthis.renderMonthlyView();\r\n\t\t\t\tbreak;\r\n\t\t\tcase ELuDateGranularity.day:\r\n\t\t\tdefault:\r\n\t\t\t\tthis.renderDailyView();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected renderDailyView(month: D = this.header.date) {\r\n\t\tthis.items = [];\r\n\t\tconst start = this._adapter.forge(this._adapter.getYear(month), this._adapter.getMonth(month), 1);\r\n\t\tlet index = 0;\r\n\t\tconst isFirstDayOfWeek = this._adapter.getDay(start) === getLocaleFirstDayOfWeek(this._locale);\r\n\t\tthis.header = this._factory.forgeMonth(month, 'MMMM y');\r\n\t\tif (!isFirstDayOfWeek) {\r\n\t\t\tconst offset = (this._adapter.getDay(start) - getLocaleFirstDayOfWeek(this._locale) + 7) % 7;\r\n\t\t\tindex = -1 * offset;\r\n\t\t}\r\n\t\twhile (true) {\r\n\t\t\tconst d = this._adapter.add(start, index++, ELuDateGranularity.day);\r\n\t\t\tconst day = this._factory.forgeDay(d);\r\n\t\t\tconst isNextMonth = this._adapter.compare(d, month, ELuDateGranularity.month) > 0;\r\n\t\t\tconst isFDOW = this._adapter.getDay(d) === getLocaleFirstDayOfWeek(this._locale);\r\n\t\t\tif (isFDOW && isNextMonth) {\r\n\t\t\t\tbreak;\r\n\t\t\t} else {\r\n\t\t\t\tthis.items.push(day);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.applyDailyMods();\r\n\t}\r\n\tprotected renderMonthlyView(year: D = this.header.date) {\r\n\t\tthis.header = this._factory.forgeYear(year);\r\n\t\tthis.items = [...Array(12).keys()].map(i => {\r\n\t\t\tconst d = this._adapter.forge(this._adapter.getYear(year), i + 1, 1);\r\n\t\t\treturn this._factory.forgeMonth(d);\r\n\t\t});\r\n\t\tthis.applyMonthlyMods();\r\n\t}\r\n\tprotected renderYearlyView(decade: D = this.header.date) {\r\n\t\tconst year = Math.floor(this._adapter.getYear(decade) / 10) * 10;\r\n\t\tconst d = this._adapter.forge(year, 1, 1);\r\n\t\tthis.header = this._factory.forgeDecade(d);\r\n\t\tthis.items = [...Array(10).keys()].map(i => {\r\n\t\t\tconst y = this._adapter.forge(year + i, 1, 1);\r\n\t\t\treturn this._factory.forgeYear(y);\r\n\t\t});\r\n\t\tthis.applyYearlyMods();\r\n\t}\r\n\tprotected applyDailyMods() {\r\n\t\tconst month = this.header.date;\r\n\t\tconst today = this._adapter.forgeToday();\r\n\t\tconst min = this.min && this._adapter.isValid(this.min) ? this.min : undefined;\r\n\t\tconst max = this.max && this._adapter.isValid(this.max) ? this.max : undefined;\r\n\t\tthis.items.forEach(item => {\r\n\t\t\tconst day = item.date;\r\n\t\t\tif (this._adapter.compare(day, month, ELuDateGranularity.month) < 0) {\r\n\t\t\t\titem.mods.push('is-previousMonth');\r\n\t\t\t}\r\n\t\t\tif (this._adapter.compare(day, month, ELuDateGranularity.month) > 0) {\r\n\t\t\t\titem.mods.push('is-nextMonth');\r\n\t\t\t}\r\n\t\t\tif (this._adapter.compare(day, today, ELuDateGranularity.day) === 0) {\r\n\t\t\t\titem.mods.push('is-today');\r\n\t\t\t}\r\n\t\t\tif (this.value && this._adapter.isValid(this.value) && this._adapter.compare(day, this.value, ELuDateGranularity.day) === 0) {\r\n\t\t\t\titem.mods.push('is-active');\r\n\t\t\t}\r\n\t\t\tif (min && this._adapter.compare(day, min, ELuDateGranularity.day) < 0) {\r\n\t\t\t\titem.isDisabled = true;\r\n\t\t\t}\r\n\t\t\tif (max && this._adapter.compare(day, max, ELuDateGranularity.day) > 0) {\r\n\t\t\t\titem.isDisabled = true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tprotected applyMonthlyMods() {\r\n\t\tconst today = this._adapter.forgeToday();\r\n\t\tconst min = this.min && this._adapter.isValid(this.min) ? this.min : undefined;\r\n\t\tconst max = this.max && this._adapter.isValid(this.max) ? this.max : undefined;\r\n\t\tthis.items.forEach(item => {\r\n\t\t\tconst month = item.date;\r\n\t\t\tif (this._adapter.compare(month, today, ELuDateGranularity.month) === 0) {\r\n\t\t\t\titem.mods.push('is-today');\r\n\t\t\t}\r\n\t\t\tif (this.value && this._adapter.isValid(this.value) && this._adapter.compare(month, this.value, ELuDateGranularity.month) === 0) {\r\n\t\t\t\titem.mods.push('is-active');\r\n\t\t\t}\r\n\t\t\tif (min && this._adapter.compare(month, min, ELuDateGranularity.month) < 0) {\r\n\t\t\t\titem.isDisabled = true;\r\n\t\t\t}\r\n\t\t\tif (max && this._adapter.compare(month, max, ELuDateGranularity.month) > 0) {\r\n\t\t\t\titem.isDisabled = true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tprotected applyYearlyMods() {\r\n\t\tconst today = this._adapter.forgeToday();\r\n\t\tconst min = this.min && this._adapter.isValid(this.min) ? this.min : undefined;\r\n\t\tconst max = this.max && this._adapter.isValid(this.max) ? this.max : undefined;\r\n\t\tthis.items.forEach(item => {\r\n\t\t\tconst year = item.date;\r\n\t\t\tif (this._adapter.compare(year, today, ELuDateGranularity.year) === 0) {\r\n\t\t\t\titem.mods.push('is-today');\r\n\t\t\t}\r\n\t\t\tif (this.value && this._adapter.isValid(this.value) && this._adapter.compare(year, this.value, ELuDateGranularity.year) === 0) {\r\n\t\t\t\titem.mods.push('is-active');\r\n\t\t\t}\r\n\t\t\tif (min && this._adapter.compare(year, min, ELuDateGranularity.year) < 0) {\r\n\t\t\t\titem.isDisabled = true;\r\n\t\t\t}\r\n\t\t\tif (max && this._adapter.compare(year, max, ELuDateGranularity.year) > 0) {\r\n\t\t\t\titem.isDisabled = true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tselect(item: ICalendarItem<D>) {\r\n\t\tswitch (this.viewGranularity) {\r\n\t\t\tcase ELuDateGranularity.year:\r\n\t\t\t\tthis.selectYear(item);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ELuDateGranularity.month:\r\n\t\t\t\tthis.selectMonth(item);\r\n\t\t\t\tbreak;\r\n\t\t\tcase ELuDateGranularity.day:\r\n\t\t\tdefault:\r\n\t\t\t\tthis.selectDay(item);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tprotected selectDay(item: ICalendarItem<D>) {\r\n\t\tconst year = this._adapter.getYear(item.date);\r\n\t\tconst month = this._adapter.getMonth(item.date);\r\n\t\tconst d = this._adapter.forge(year, month, 1);\r\n\t\tthis.header = this._factory.forgeMonth(d);\r\n\t\tthis.setValue(item.date);\r\n\t}\r\n\tprotected selectMonth(item: ICalendarItem<D>) {\r\n\t\tif (this.granularity === ELuDateGranularity.month) {\r\n\t\t\tthis.setValue(item.date);\r\n\t\t} else {\r\n\t\t\tthis.header = item;\r\n\t\t\tthis.viewGranularity = ELuDateGranularity.day;\r\n\t\t\tthis.render();\r\n\t\t}\r\n\t}\r\n\tprotected selectYear(item: ICalendarItem<D>) {\r\n\t\tif (this.granularity === ELuDateGranularity.year) {\r\n\t\t\tthis.setValue(item.date);\r\n\t\t} else {\r\n\t\t\tthis.header = item;\r\n\t\t\tthis.viewGranularity = ELuDateGranularity.month;\r\n\t\t\tthis.render();\r\n\t\t}\r\n\t}\r\n\r\n\tprevious() {\r\n\t\tswitch (this.viewGranularity) {\r\n\t\t\tcase ELuDateGranularity.year:\r\n\t\t\t\tthis.previousDecade();\r\n\t\t\t\tbreak;\r\n\t\t\tcase ELuDateGranularity.month:\r\n\t\t\t\tthis.previousYear();\r\n\t\t\t\tbreak;\r\n\t\t\tcase ELuDateGranularity.day:\r\n\t\t\tdefault:\r\n\t\t\t\tthis.previousMonth();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tthis.render();\r\n\t}\r\n\tnext() {\r\n\t\tswitch (this.viewGranularity) {\r\n\t\t\tcase ELuDateGranularity.year:\r\n\t\t\t\tthis.nextDecade();\r\n\t\t\t\tbreak;\r\n\t\t\tcase ELuDateGranularity.month:\r\n\t\t\t\tthis.nextYear();\r\n\t\t\t\tbreak;\r\n\t\t\tcase ELuDateGranularity.day:\r\n\t\t\tdefault:\r\n\t\t\t\tthis.nextMonth();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tthis.render();\r\n\t}\r\n\ttrackBy(idx, item) {\r\n\t\treturn item.id;\r\n\t}\r\n\tincreaseGranularity() {\r\n\t\tif (this.header.granularity !== ELuDateGranularity.decade) {\r\n\t\t\tthis.viewGranularity = this.header.granularity;\r\n\t\t\tthis.render();\r\n\t\t}\r\n\t}\r\n\tprotected nextMonth() {\r\n\t\tconst d = this._adapter.add(this.header.date, 1, ELuDateGranularity.month);\r\n\t\tthis.header = this._factory.forgeMonth(d);\r\n\t}\r\n\tprotected nextYear() {\r\n\t\tconst d = this._adapter.add(this.header.date, 1, ELuDateGranularity.year);\r\n\t\tthis.header = this._factory.forgeYear(d);\r\n\t}\r\n\tprotected nextDecade() {\r\n\t\tconst d = this._adapter.add(this.header.date, 1, ELuDateGranularity.decade);\r\n\t\tthis.header = this._factory.forgeDecade(d);\r\n\t}\r\n\tprotected previousMonth() {\r\n\t\tconst d = this._adapter.add(this.header.date, -1, ELuDateGranularity.month);\r\n\t\tthis.header = this._factory.forgeMonth(d);\r\n\t}\r\n\tprotected previousYear() {\r\n\t\tconst d = this._adapter.add(this.header.date, -1, ELuDateGranularity.year);\r\n\t\tthis.header = this._factory.forgeYear(d);\r\n\t}\r\n\tprotected previousDecade() {\r\n\t\tconst d = this._adapter.add(this.header.date, -1, ELuDateGranularity.decade);\r\n\t\tthis.header = this._factory.forgeDecade(d);\r\n\t}\r\n\r\n\tvalidate(control: AbstractControl): ValidationErrors | null {\r\n\t\tconst d = control.value;\r\n\t\tif (!d) { return null; }\r\n\t\tif (!this._adapter.isValid(d)) { return { 'date': true }; }\r\n\t\tif (!!this.min && this._adapter.isValid(this.min) && this._adapter.compare(this.min, d, ELuDateGranularity.day) > 0) {\r\n\t\t\treturn { 'min': true };\r\n\t\t}\r\n\t\tif (!!this.max && this._adapter.isValid(this.max) && this._adapter.compare(this.max, d, ELuDateGranularity.day) < 0) {\r\n\t\t\treturn { 'max': true };\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '_definitions';\r\n\r\n.calendar {\r\n\tbackground: white;\r\n\twidth: _component(\"calendar.width\", true);\r\n\twidth: _component(\"calendar.width\");\r\n\tpadding: _theme(\"spacings.smaller\", true);\r\n\tpadding: _theme(\"spacings.smaller\");\r\n}\r\n:host-context(.mod-block) {\r\n\t.calendar {\r\n\t\twidth: auto;\r\n\t\tmax-width: _component(\"calendar.width\", true);\r\n\t\tmax-width: _component(\"calendar.width\");\r\n\t}\r\n}\r\n\r\n.calendar-header {\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: space-between;\r\n\tmargin-bottom: 1.5rem;\r\n}\r\n\r\n.calendar-header-nav {\r\n\tbackground: transparent;\r\n\tborder: none;\r\n\tcursor: pointer;\r\n\r\n\t.lucca-icon {\r\n\t\tfont-size: .9rem;\r\n\t\tcolor: _color(\"text.dark\", \"color\", true);\r\n\t\tcolor: _color(\"text.dark\");\r\n\t}\r\n}\r\n\r\n.calendar-header-date {\r\n\tfont-weight: 600;\r\n\tcolor: _color(\"text.dark\", \"color\", true);\r\n\tcolor: _color(\"text.dark\");\r\n\tfont-size: _theme(\"sizes.big.font-size\", true);\r\n\tfont-size: _theme(\"sizes.big.font-size\");\r\n\tpadding: 0;\r\n\tbackground: transparent;\r\n\tborder: none;\r\n\tcursor: pointer;\r\n}\r\n\r\n.calendar-labels {\r\n\tdisplay: none;\r\n\r\n\t&.mod-dailyView {\r\n\t\tdisplay: flex;\r\n\t\talign-items: stretch;\r\n\t\tflex-wrap: wrap;\r\n\t\t.calendar-labels-item {\r\n\t\t\twidth: calc(99% / 7);\r\n\t\t}\r\n\t\ttext-align: center;\r\n\t\tfont-size: _theme(\"sizes.small.font-size\", true);\r\n\t\tfont-size: _theme(\"sizes.small.font-size\");\r\n\t\tcolor: _color(\"primary\", 700, true);\r\n\t\tcolor: _color(\"primary\");\r\n\t\tmargin-bottom: _theme(\"spacings.smaller\", true);\r\n\t\tmargin-bottom: _theme(\"spacings.smaller\");\r\n\t}\r\n}\r\n\r\n.calendar-grid {\r\n\tdisplay: flex;\r\n\ttext-align: center;\r\n\talign-self: stretch;\r\n\tflex-wrap: wrap;\r\n\r\n\t&.mod-dailyView {\r\n\t\t.calendar-grid-item {\r\n\t\t\twidth: calc(99% / 7);\r\n\t\t}\r\n\t}\r\n\r\n\t&.mod-monthlyView,\r\n\t&.mod-yearlyView {\r\n\t\t.calendar-grid-item {\r\n\t\t\twidth: calc(99% / 3);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.calendar-grid-item {\r\n\theight: 2.4rem;\r\n\tborder: none;\r\n\tcursor: pointer;\r\n\tbackground: transparent;\r\n\tposition: relative;\r\n\tpadding: 0;\r\n\toutline: none;\r\n\r\n\t&.is-previousMonth, &.is-nextMonth, &.is-disabled {\r\n\t\tcolor: _color(\"text.placeholder\", \"color\", true);\r\n\t\tcolor: _color(\"text.placeholder\");\r\n\t}\r\n\r\n\t&.is-today {\r\n\t\tcolor: _color(\"grey\", 800, true);\r\n\t\tcolor: _color(\"grey\", 800);\r\n\r\n\t\t&:before {\r\n\t\t\tcontent: \"\";\r\n\t\t\tz-index: 2;\r\n\t\t\tbox-shadow: inset 0 0 0 2px _color(\"primary\", 300, true);\r\n\t\t\tbox-shadow: inset 0 0 0 2px _color(\"primary\", 300);\r\n\t\t\tposition: absolute;\r\n\t\t\ttop: 0;\r\n\t\t\tbottom: 0;\r\n\t\t\tleft: 0;\r\n\t\t\tright: 0;\r\n\t\t\tborder-radius: 2rem;\r\n\t\t}\r\n\t}\r\n\r\n\t&:hover {\r\n\t\t.calendar-grid-item-content {\r\n\t\t\tbackground: _color(\"grey\", 100, true);\r\n\t\t\tbackground: _color(\"grey\", 100);\r\n\t\t}\r\n\t}\r\n\r\n\t&.is-active {\r\n\t\t.calendar-grid-item-content {\r\n\t\t\tbackground: _color(\"primary\", 700, true);\r\n\t\t\tbackground: _color(\"primary\");\r\n\t\t\tcolor: _color(\"primary\", \"text\", true);\r\n\t\t\tcolor: _color(\"primary\", \"text\");\r\n\t\t}\r\n\r\n\t\t&.is-today {\r\n\t\t\t.calendar-grid-item-content {\r\n\t\t\t\t&:after {\r\n\t\t\t\t\tcontent: \"\";\r\n\t\t\t\t\tz-index: 1;\r\n\t\t\t\t\tcolor: _color(\"primary\", 700, true);\r\n\t\t\t\t\tcolor: _color(\"primary\");\r\n\t\t\t\t\tbox-shadow: inset 0 0 0 4px white;\r\n\t\t\t\t\tposition: absolute;\r\n\t\t\t\t\ttop: 0;\r\n\t\t\t\t\tbottom: 0;\r\n\t\t\t\t\tleft: 0;\r\n\t\t\t\t\tright: 0;\r\n\t\t\t\t\tborder-radius: 2rem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t&.is-disabled {\r\n\t\t&:hover .calendar-grid-item-content {\r\n\t\t\tpointer-events: none;\r\n\t\t\tbackground-color: white;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.calendar-grid-item-content {\r\n\tposition: relative;\r\n\theight: 2.4rem;\r\n\twidth: 100%;\r\n\tline-height: 2.4rem;\r\n\tborder-radius: 2rem;\r\n}\r\n",
                    "styleUrl": "./calendar-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "_locale",
                        "type": "string"
                    },
                    {
                        "name": "_factory",
                        "type": "LuCalendarItemFactory<D>"
                    },
                    {
                        "name": "_adapter",
                        "type": "ALuDateAdapter<D>"
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_locale",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_factory",
                        "type": "LuCalendarItemFactory<D>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_adapter",
                        "type": "ALuDateAdapter<D>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuInput",
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "Validator"
            ],
            "accessors": {
                "mod": {
                    "name": "mod",
                    "getSignature": {
                        "name": "mod",
                        "type": "",
                        "returnType": "",
                        "line": 36
                    }
                }
            },
            "templateData": "<section class=\"calendar\">\r\n\t<header class=\"calendar-header\">\r\n\t\t<button class=\"calendar-header-nav\" (click)=\"previous()\">\r\n\t\t\t<span aria-hidden=\"true\" class=\"lucca-icon\">arrow_west</span>\r\n\t\t\t<span class=\"u-mask\">Previous</span>\r\n\t\t</button>\r\n\t\t<button class=\"calendar-header-date\" (click)=\"increaseGranularity()\">\r\n\t\t\t{{ header.label }}\r\n\t\t</button>\r\n\t\t<button class=\"calendar-header-nav\" (click)=\"next()\">\r\n\t\t\t<span aria-hidden=\"true\" class=\"lucca-icon\">arrow_east</span>\r\n\t\t\t<span class=\"u-mask\">Next</span>\r\n\t\t</button>\r\n\t</header>\r\n\t<section class=\"calendar-labels\" [ngClass]=\"mod\">\r\n\t\t<div class=\"calendar-labels-item\" *ngFor=\"let label of labels\">{{ label }}</div>\r\n\t</section>\r\n\t<section class=\"calendar-grid\" [ngClass]=\"mod\">\r\n\t\t<button\r\n\t\t\t*ngFor=\"let item of items; trackBy: trackBy\"\r\n\t\t\tclass=\"calendar-grid-item\"\r\n\t\t\t[ngClass]=\"item.mods\"\r\n\t\t\t[disabled]=\"item.isDisabled\"\r\n\t\t\t(click)=\"select(item)\"\r\n\t\t>\r\n\t\t\t<div class=\"calendar-grid-item-content\">{{ item.label }}</div>\r\n\t\t</button>\r\n\t</section>\r\n</section>\r\n"
        },
        {
            "name": "LuDatePickerComponent",
            "id": "component-LuDatePickerComponent-0ed161c301d66231d30a8b7b281dad24",
            "file": "packages/ng/libraries/date/src/lib/picker/date-picker.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "LuDatePicker",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuPickerPanel, useExisting: forwardRef(() => LuDatePickerComponent),\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-date-picker",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./date-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "granularity",
                    "defaultValue": "ELuDateGranularity.day",
                    "line": 26,
                    "type": "ELuDateGranularity"
                },
                {
                    "name": "max",
                    "line": 25,
                    "type": "D"
                },
                {
                    "name": "min",
                    "line": 24,
                    "type": "D"
                },
                {
                    "name": "startOn",
                    "defaultValue": "this._adapter.forgeToday()",
                    "line": 27,
                    "type": "D"
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 29,
                    "type": "EventEmitter"
                },
                {
                    "name": "hovered",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 31,
                    "type": "EventEmitter"
                },
                {
                    "name": "onSelectValue",
                    "defaultValue": "new EventEmitter<D>()",
                    "line": 32,
                    "type": "EventEmitter"
                },
                {
                    "name": "open",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "type": "D",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "multiple",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "onSelectValue",
                    "type": "Observable<T | []>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_closeOnClick",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_contentClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_isOpen",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_keydownEventsSub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_overlayPaneClass",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "<p>Classes to be passed into the popover&#39;s overlay </p>\n",
                    "line": 96,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_panelClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_positionClassesMap",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_scrollStrategy",
                    "defaultValue": "'reposition'",
                    "type": "LuPopoverScrollStrategy",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_templateRef",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_trapFocus",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "close",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "hovered",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "open",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "panelId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "triggerId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "_emitCloseEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "_emitHoveredEvent",
                    "args": [
                        {
                            "name": "h",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "h",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_emitOpenEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "_emitSelectValue",
                    "args": [
                        {
                            "name": "val",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_handleKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_onCalendar",
                    "args": [
                        {
                            "name": "val",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_onEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70
                },
                {
                    "name": "_onInput",
                    "args": [
                        {
                            "name": "val",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPickerPanel"
                    }
                },
                {
                    "name": "_emitCloseEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_emitHoveredEvent",
                    "args": [
                        {
                            "name": "hovered",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "hovered",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_emitOpenEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_handleKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onMouseDown",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "description": "<p>does nothing but must be overridable </p>\n",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "description": "<p>Enables close of popover when mouse leaving popover element </p>\n",
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onMouseOver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "description": "<p>TODO: Refactor when @angular/cdk includes feature I mentioned on github see link below.\n<a href=\"https://github.com/angular/material2/pull/5493#issuecomment-313085323\">https://github.com/angular/material2/pull/5493#issuecomment-313085323</a></p>\n",
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "setPositionClasses",
                    "args": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos"
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ALuPickerPanel } from '@lucca-front/ng/picker';\r\nimport { Component, ChangeDetectionStrategy, forwardRef, Output, EventEmitter, TemplateRef, ViewChild, Input } from '@angular/core';\r\nimport { luTransformPopover } from '@lucca-front/ng/popover';\r\nimport { ESCAPE, TAB } from '@angular/cdk/keycodes';\r\nimport { ALuDateAdapter, ELuDateGranularity } from '@lucca-front/ng/core';\r\n\r\n@Component({\r\n\tselector: 'lu-date-picker',\r\n\ttemplateUrl: './date-picker.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\texportAs: 'LuDatePicker',\r\n\tanimations: [luTransformPopover],\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuPickerPanel,\r\n\t\t\tuseExisting: forwardRef(() => LuDatePickerComponent),\r\n\t\t},\r\n\t]\r\n})\r\n\r\nexport class LuDatePickerComponent<D = Date> extends ALuPickerPanel<D> {\r\n\t_value: D;\r\n\r\n\t@Input() min?: D;\r\n\t@Input() max?: D;\r\n\t@Input() granularity: ELuDateGranularity = ELuDateGranularity.day;\r\n\t@Input() startOn: D = this._adapter.forgeToday();\r\n\r\n\t@Output() close = new EventEmitter<void>();\r\n\t@Output() open = new EventEmitter<void>();\r\n\t@Output() hovered = new EventEmitter<boolean>();\r\n\t@Output() onSelectValue = new EventEmitter<D>();\r\n\r\n\t@ViewChild(TemplateRef, { static: true })\r\n\tset vcTemplateRef(tr: TemplateRef<any>) {\r\n\t\tthis.templateRef = tr;\r\n\t}\r\n\t\r\n\tconstructor(\r\n\t\tprivate _adapter: ALuDateAdapter<D>,\r\n\t) {\r\n\t\tsuper();\r\n\t}\r\n\t_emitOpenEvent(): void {\r\n\t\tthis.open.emit();\r\n\t}\r\n\t_emitCloseEvent(): void {\r\n\t\tthis.close.emit();\r\n\t}\r\n\t_emitHoveredEvent(h): void {\r\n\t\tthis.hovered.emit(h);\r\n\t}\r\n\t_emitSelectValue(val: D) {\r\n\t\tthis.onSelectValue.emit(val);\r\n\t}\r\n\tsetValue(value: D) {\r\n\t\tthis._value = value;\r\n\t}\r\n\t_onCalendar(val: D) {\r\n\t\tthis._value = val;\r\n\t\tthis._emitSelectValue(val);\r\n\t\t// if (!this.multiple) {\r\n\t\t\tthis._emitCloseEvent();\r\n\t\t// }\r\n\t}\r\n\t_onInput(val: D) {\r\n\t\tthis._value = val;\r\n\t\tthis._emitSelectValue(val);\r\n\t}\r\n\t_onEnter() {\r\n\t\tthis._emitCloseEvent();\r\n\t}\r\n\t_handleKeydown(event: KeyboardEvent) {\r\n\t\tswitch (event.keyCode) {\r\n\t\t\tcase ESCAPE:\r\n\t\t\t\tthis._emitCloseEvent();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tbreak;\r\n\t\t\tcase TAB:\r\n\t\t\t\tthis._emitCloseEvent();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\t// ngAfterViewInit() {\r\n\t// \tthis._dateInput.nativeElement.focus();\r\n\t// }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_adapter",
                        "type": "ALuDateAdapter<D>"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "_adapter",
                        "type": "ALuDateAdapter<D>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuPickerPanel",
            "accessors": {
                "vcTemplateRef": {
                    "name": "vcTemplateRef",
                    "setSignature": {
                        "name": "vcTemplateRef",
                        "type": "void",
                        "args": [
                            {
                                "name": "tr",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 35,
                        "jsdoctags": [
                            {
                                "name": "tr",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-template>\r\n\t<div class=\"lu-picker-panel lu-date-picker-panel\" role=\"dialog\" [ngClass]=\"panelClassesMap\"\r\n\t(click)=\"onClick()\" (mouseover)=\"onMouseOver()\" (mouseleave)=\"onMouseLeave()\" (mousedown)=\"onMouseDown($event)\">\r\n\t\t<div class=\"lu-picker-content\" [ngClass]=\"contentClassesMap\" cdkTrapFocus=\"false\" cdkTrapFocusAutoCapture=\"true\">\r\n\t\t\t<label class=\"textfield lu-picker-textfield\">\r\n\t\t\t\t<input luDateInput class=\"textfield-input\"\r\n\t\t\t\t\t[ngModel]=\"_value\"\r\n\t\t\t\t\t(ngModelChange)=\"_onInput($event)\"\r\n\t\t\t\t\t(keydown.enter)=\"_onEnter()\"\r\n\t\t\t\t\t[min]=\"min\"\r\n\t\t\t\t\t[max]=\"max\"\r\n\t\t\t\t\t[granularity]=\"granularity\"\r\n\t\t\t\t>\r\n\t\t\t</label>\r\n\t\t\t<lu-calendar\r\n\t\t\t\t[ngModel]=\"_value\"\r\n\t\t\t\t(ngModelChange)=\"_onCalendar($event)\"\r\n\t\t\t\t[min]=\"min\"\r\n\t\t\t\t[max]=\"max\"\r\n\t\t\t\t[granularity]=\"granularity\"\r\n\t\t\t\t[startOn]=\"startOn\"\r\n\t\t\t></lu-calendar>\r\n\t\t</div>\r\n\t</div>\r\n</ng-template>\r\n"
        },
        {
            "name": "LuDateSelectInputComponent",
            "id": "component-LuDateSelectInputComponent-dad5c95c881cd7172f0677bf481daab5",
            "file": "packages/ng/libraries/date/src/lib/select/date-select-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => LuDateSelectInputComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: LuDateSelectInputComponent, multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-date-select",
            "styleUrls": [
                "./date-select-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date-select-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "granularity",
                    "defaultValue": "ELuDateGranularity.day",
                    "line": 46,
                    "type": "ELuDateGranularity"
                },
                {
                    "name": "hideClearer",
                    "defaultValue": "false",
                    "line": 48,
                    "type": "boolean"
                },
                {
                    "name": "max",
                    "line": 45,
                    "type": "D"
                },
                {
                    "name": "min",
                    "line": 44,
                    "type": "D"
                },
                {
                    "name": "placeholder",
                    "line": 47,
                    "type": "string"
                },
                {
                    "name": "startOn",
                    "defaultValue": "this._adapter.forgeToday()",
                    "line": 49,
                    "type": "D"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 93,
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n\tChangeDetectionStrategy,\r\n\tComponent,\r\n\tChangeDetectorRef,\r\n\tforwardRef,\r\n\tViewContainerRef,\r\n\tElementRef,\r\n\tViewChild,\r\n\tInput,\r\n\tRenderer2,\r\n\tAfterViewInit,\r\n\tInject,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, NG_VALIDATORS, Validator, AbstractControl, ValidationErrors } from '@angular/forms';\r\nimport { Overlay } from '@angular/cdk/overlay';\r\nimport { ILuInputWithPicker, ALuPickerPanel, ILuPickerPanel } from '@lucca-front/ng/picker';\r\nimport { ALuClearer, ILuClearer, ILuInputDisplayer, ALuInputDisplayer } from '@lucca-front/ng/input';\r\nimport { ALuSelectInputComponent } from '@lucca-front/ng/select';\r\nimport { ALuDateAdapter, ELuDateGranularity } from '@lucca-front/ng/core';\r\nimport { ILuDateSelectInputLabel } from './date-select-input.translate';\r\nimport { LuDateSelectInputIntl } from './date-select-input.intl';\r\n\r\n@Component({\r\n\tselector: 'lu-date-select',\r\n\ttemplateUrl: './date-select-input.component.html',\r\n\tstyleUrls: ['./date-select-input.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: NG_VALUE_ACCESSOR,\r\n\t\t\tuseExisting: forwardRef(() => LuDateSelectInputComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: NG_VALIDATORS,\r\n\t\t\tuseExisting: LuDateSelectInputComponent,\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuDateSelectInputComponent<D>\r\nextends ALuSelectInputComponent<D>\r\nimplements ControlValueAccessor, ILuInputWithPicker<D>, AfterViewInit, Validator {\r\n\t@Input() min?: D;\r\n\t@Input() max?: D;\r\n\t@Input() granularity: ELuDateGranularity = ELuDateGranularity.day;\r\n\t@Input('placeholder') set inputPlaceholder(p: string) { this._placeholder = p; }\r\n\t@Input() hideClearer: boolean = false;\r\n\t@Input() startOn: D = this._adapter.forgeToday();\r\n\r\n\tget format(): string {\r\n\t\tswitch (this.granularity) {\r\n\t\t\tcase ELuDateGranularity.year:\r\n\t\t\t\treturn this._intl.formatYear;\r\n\t\t\tcase ELuDateGranularity.month:\r\n\t\t\t\treturn this._intl.formatMonth;\r\n\t\t\tcase ELuDateGranularity.day:\r\n\t\t\tdefault:\r\n\t\t\t\treturn this._intl.formatDay;\r\n\t\t}\r\n\t}\r\n\tconstructor(\r\n\t\tprotected _changeDetectorRef: ChangeDetectorRef,\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _elementRef: ElementRef,\r\n\t\tprotected _viewContainerRef: ViewContainerRef,\r\n\t\tprotected _renderer: Renderer2,\r\n\t\tprivate _adapter: ALuDateAdapter<D>,\r\n\t\t@Inject(LuDateSelectInputIntl) private _intl: ILuDateSelectInputLabel,\r\n\t) {\r\n\t\tsuper(\r\n\t\t\t_changeDetectorRef,\r\n\t\t\t_overlay,\r\n\t\t\t_elementRef,\r\n\t\t\t_viewContainerRef,\r\n\t\t\t_renderer,\r\n\t\t);\r\n\t\tthis.overlapInput = true\r\n\t}\r\n\r\n\t@ViewChild(ALuPickerPanel, { static: true }) set _vcPicker(picker: ILuPickerPanel<D>) {\r\n\t\tif (!picker) { return; }\r\n\t\tthis._picker = picker;\r\n\t}\r\n\t@ViewChild(ALuClearer, { static: true }) set _vcClearer(clearer: ILuClearer) {\r\n\t\tif (!clearer) { return; }\r\n\t\tthis._clearer = clearer;\r\n\t}\r\n\t@ViewChild(ALuInputDisplayer, { static: true }) set _vcDisplayer(displayer: ILuInputDisplayer<D>) {\r\n\t\tif (!displayer) { return; }\r\n\t\tthis.displayer = displayer;\r\n\t}\r\n\tvalidate(control: AbstractControl): ValidationErrors | null {\r\n\t\tconst d = control.value;\r\n\t\tif (!d) { return null; }\r\n\t\tif (!this._adapter.isValid(d)) { return { 'date': true }; }\r\n\t\tif (!!this.min && this._adapter.isValid(this.min) && this._adapter.compare(this.min, d, ELuDateGranularity.day) > 0) {\r\n\t\t\treturn { 'min': true };\r\n\t\t}\r\n\t\tif (!!this.max && this._adapter.isValid(this.max) && this._adapter.compare(this.max, d, ELuDateGranularity.day) < 0) {\r\n\t\t\treturn { 'max': true };\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '_definitions';\r\n@include selectInputStyle;\r\n\r\n:host {\r\n\t&::after {\r\n\t\t@include makeIcon('calendar');\r\n\t}\r\n}\r\n",
                    "styleUrl": "./date-select-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "_adapter",
                        "type": "ALuDateAdapter<D>"
                    },
                    {
                        "name": "_intl",
                        "type": "ILuDateSelectInputLabel"
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_adapter",
                        "type": "ALuDateAdapter<D>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_intl",
                        "type": "ILuDateSelectInputLabel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuSelectInputComponent",
            "implements": [
                "ControlValueAccessor",
                "ILuInputWithPicker",
                "AfterViewInit",
                "Validator"
            ],
            "accessors": {
                "inputPlaceholder": {
                    "name": "inputPlaceholder",
                    "setSignature": {
                        "name": "inputPlaceholder",
                        "type": "void",
                        "args": [
                            {
                                "name": "p",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "p",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "format": {
                    "name": "format",
                    "getSignature": {
                        "name": "format",
                        "type": "string",
                        "returnType": "string",
                        "line": 51
                    }
                },
                "_vcPicker": {
                    "name": "_vcPicker",
                    "setSignature": {
                        "name": "_vcPicker",
                        "type": "void",
                        "args": [
                            {
                                "name": "picker",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 81,
                        "jsdoctags": [
                            {
                                "name": "picker",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "_vcClearer": {
                    "name": "_vcClearer",
                    "setSignature": {
                        "name": "_vcClearer",
                        "type": "void",
                        "args": [
                            {
                                "name": "clearer",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 85,
                        "jsdoctags": [
                            {
                                "name": "clearer",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "_vcDisplayer": {
                    "name": "_vcDisplayer",
                    "setSignature": {
                        "name": "_vcDisplayer",
                        "type": "void",
                        "args": [
                            {
                                "name": "displayer",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 89,
                        "jsdoctags": [
                            {
                                "name": "displayer",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"lu-select-placeholder\">{{ placeholder }}</div>\r\n<div class=\"lu-select-value\">\r\n\t<div class=\"lu-select-display-wrapper\">\r\n\t\t<ng-container #display></ng-container>\r\n\t</div>\r\n</div>\r\n<div class=\"lu-select-suffix\">\r\n\t<lu-input-clearer [class.u-displayNone]=\"hideClearer\" [attr.aria-hidden]=\"hideClearer\"></lu-input-clearer>\r\n</div>\r\n<ng-template luDisplayer let-value>\r\n\t{{ value | luDate: format }}\r\n</ng-template>\r\n<lu-date-picker [min]=\"min\" [max]=\"max\" [granularity]=\"granularity\" [startOn]=\"startOn\"></lu-date-picker>\r\n"
        },
        {
            "name": "LuDepartmentFeederComponent",
            "id": "component-LuDepartmentFeederComponent-b02916da2a1ec884065910e6ff8fa5c3",
            "file": "packages/ng/libraries/department/src/lib/select/feeder/department-feeder.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuTreeOptionOperator, useExisting: forwardRef(() => LuDepartmentFeederComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuDepartmentService, useClass: LuDepartmentService,\n}"
                },
                {
                    "name": "{\n    provide: ALuOnOpenSubscriber, useExisting: forwardRef(() => LuDepartmentFeederComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-department-feeder",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_out$",
                    "defaultValue": "new Subject<ILuTree<ILuDepartment>[]>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_service",
                    "type": "ILuDepartmentService",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "inOptions$",
                    "type": "Observable<ILuTree[]>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "outOptions$",
                    "type": "Observable<ILuTree[]>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "inOptions$",
                    "type": "Observable<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionOperator"
                    }
                },
                {
                    "name": "outOptions$",
                    "type": "Observable<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionOperator"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, forwardRef, Input, Optional, SkipSelf, Inject, Self } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { ILuTree } from '@lucca-front/ng/core';\r\nimport { ILuDepartment } from '../../department.model';\r\nimport { ALuOnOpenSubscriber, ILuOnOpenSubscriber } from '@lucca-front/ng/core';\r\nimport { ALuTreeOptionOperator, ILuTreeOptionOperator } from '@lucca-front/ng/option';\r\nimport { ALuDepartmentService, LuDepartmentService, ILuDepartmentService } from '../../service/index';\r\n\r\n@Component({\r\n\tselector: 'lu-department-feeder',\r\n\ttemplate: '',\r\n\tstyleUrls: [],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuTreeOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuDepartmentFeederComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuDepartmentService,\r\n\t\t\tuseClass: LuDepartmentService,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOnOpenSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuDepartmentFeederComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuDepartmentFeederComponent extends ALuTreeOptionOperator<ILuDepartment>\r\nimplements ILuTreeOptionOperator<ILuDepartment>, ILuOnOpenSubscriber {\r\n\tinOptions$: Observable<ILuTree<ILuDepartment>[]>;\r\n\toutOptions$: Observable<ILuTree<ILuDepartment>[]>;\r\n\tprotected _out$ = new Subject<ILuTree<ILuDepartment>[]>();\r\n\tprotected _service: ILuDepartmentService;\r\n\tconstructor(\r\n\t\t@Inject(ALuDepartmentService) @Optional() @SkipSelf() hostService: ILuDepartmentService,\r\n\t\t@Inject(ALuDepartmentService) @Self() selfService: ILuDepartmentService,\r\n\t) {\r\n\t\tsuper();\r\n\t\tthis._service = hostService || selfService;\r\n\t\tthis.outOptions$ = this._out$.asObservable();\r\n\t}\r\n\tonOpen() {\r\n\t\tthis._service.getTrees().subscribe(trees => this._out$.next(trees));\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hostService",
                        "type": "ILuDepartmentService"
                    },
                    {
                        "name": "selfService",
                        "type": "ILuDepartmentService"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "hostService",
                        "type": "ILuDepartmentService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selfService",
                        "type": "ILuDepartmentService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuTreeOptionOperator",
            "implements": [
                "ILuTreeOptionOperator",
                "ILuOnOpenSubscriber"
            ]
        },
        {
            "name": "LuDepartmentSelectInputComponent",
            "id": "component-LuDepartmentSelectInputComponent-92d209a8b2e93a93c9a65ae43527c0e8",
            "file": "packages/ng/libraries/department/src/lib/select/input/department-select-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => LuDepartmentSelectInputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-department-select",
            "styleUrls": [
                "./department-select-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./department-select-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "byId",
                    "defaultValue": "() => {...}",
                    "type": "LuOptionComparer<D>",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "intl",
                    "type": "ILuDepartmentSelectInputLabel",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LuDepartmentSelectInputIntl"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "searchFn",
                    "args": [
                        {
                            "name": "o",
                            "type": ""
                        },
                        {
                            "name": "c",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "o",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "c",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n\tChangeDetectionStrategy,\r\n\tComponent,\r\n\tChangeDetectorRef,\r\n\tforwardRef,\r\n\tViewContainerRef,\r\n\tElementRef,\r\n\tViewChild,\r\n\tRenderer2,\r\n\tAfterContentInit,\r\n\tInject,\r\n\tAfterViewInit\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\nimport { Overlay } from '@angular/cdk/overlay';\r\nimport { ALuClearer, ILuClearer, ALuInputDisplayer, ILuInputDisplayer } from '@lucca-front/ng/input';\r\nimport { ALuSelectInputComponent } from '@lucca-front/ng/select';\r\nimport { ILuInputWithPicker, ALuPickerPanel } from '@lucca-front/ng/picker';\r\nimport { ILuOptionPickerPanel } from '@lucca-front/ng/option';\r\nimport { ILuDepartment } from '../../department.model';\r\nimport { LuDepartmentSelectInputIntl } from './department-select-input.intl';\r\nimport { ILuDepartmentSelectInputLabel } from './department-select-input.translate';\r\nimport { LuOptionComparer } from '@lucca-front/ng/option';\r\n\r\n@Component({\r\n\tselector: 'lu-department-select',\r\n\ttemplateUrl: './department-select-input.component.html',\r\n\tstyleUrls: ['./department-select-input.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: NG_VALUE_ACCESSOR,\r\n\t\t\tuseExisting: forwardRef(() => LuDepartmentSelectInputComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuDepartmentSelectInputComponent<D extends ILuDepartment = ILuDepartment, P extends ILuOptionPickerPanel<D> = ILuOptionPickerPanel<D>>\r\nextends ALuSelectInputComponent<D, P>\r\nimplements ControlValueAccessor, ILuInputWithPicker<D>, AfterViewInit {\r\n\tbyId: LuOptionComparer<D> = (option1: D, option2: D) => option1 && option2 && option1.id === option2.id;\r\n\r\n\tconstructor(\r\n\t\tprotected _changeDetectorRef: ChangeDetectorRef,\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _elementRef: ElementRef,\r\n\t\tprotected _viewContainerRef: ViewContainerRef,\r\n\t\tprotected _renderer: Renderer2,\r\n\t\t@Inject(LuDepartmentSelectInputIntl) public intl: ILuDepartmentSelectInputLabel,\r\n\t) {\r\n\t\tsuper(\r\n\t\t\t_changeDetectorRef,\r\n\t\t\t_overlay,\r\n\t\t\t_elementRef,\r\n\t\t\t_viewContainerRef,\r\n\t\t\t_renderer,\r\n\t\t);\r\n\t}\r\n\r\n\t// @ViewChild(ALuPickerPanel, { static: true }) set _vcPicker(picker: P) {\r\n\t// \tif (!picker) { return; }\r\n\t// \tthis._picker = picker;\r\n\t// }\r\n\t// @ViewChild(ALuClearer, { static: true }) set _vcClearer(clearer: ILuClearer) {\r\n\t// \tif (!clearer) { return; }\r\n\t// \tthis._clearer = clearer;\r\n\t// }\r\n\t// @ViewChild(ALuInputDisplayer, { static: true }) set _vcDisplayer(displayer: ILuInputDisplayer<D>) {\r\n\t// \tif (!displayer) { return; }\r\n\t// \tthis.displayer = displayer;\r\n\t// }\r\n\r\n\tsearchFn(o, c) {\r\n\t\treturn o.name.toLowerCase().startsWith(c.toLowerCase());\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '_definitions';\r\n@include selectInputStyle;\r\n\r\n.lu-select-value {\r\n\tpadding-right: 2.5rem;\r\n}\r\n\r\n.lu-picker-header {\r\n\t.option-selector {\r\n\t\tdisplay: none;\r\n\t}\r\n\t&.mod-multiple {\r\n\t\t.option-selector {\r\n\t\t\tdisplay: inherit;\r\n\t\t\tpadding: _theme(\"spacings.smaller\");\r\n\t\t}\r\n\t}\r\n}",
                    "styleUrl": "./department-select-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "intl",
                        "type": "ILuDepartmentSelectInputLabel"
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "intl",
                        "type": "ILuDepartmentSelectInputLabel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuSelectInputComponent",
            "implements": [
                "ControlValueAccessor",
                "ILuInputWithPicker",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"lu-select-placeholder\">{{placeholder}}</div>\r\n<div class=\"lu-select-value\">\r\n\t<div class=\"lu-select-display-wrapper\">\r\n\t\t<ng-container #display></ng-container>\r\n\t</div>\r\n</div>\r\n<div class=\"lu-select-suffix\">\r\n\t<lu-input-clearer></lu-input-clearer>\r\n</div>\r\n\r\n<ng-template luDisplayer [luDisplayerMultiple]=\"true\" let-values>\r\n\t<span *ngIf=\"multiple && values?.length > 1; else: singleView\"><span class=\"chip mod-unkillable\">{{values.length}}</span> {{intl.departments}}</span>\r\n\t<ng-template #singleView>{{(values[0] || values).name}}</ng-template>\r\n</ng-template>\r\n\r\n<lu-tree-option-picker-advanced [option-comparer]=\"byId\">\r\n\t<header class=\"lu-picker-header\" [class.mod-multiple]=\"multiple\">\r\n\t\t<lu-department-feeder></lu-department-feeder>\r\n\t\t<lu-tree-option-searcher [searchFn]=\"searchFn\"></lu-tree-option-searcher>\r\n\t\t<lu-tree-option-select-all class=\"option-selector\"></lu-tree-option-select-all>\r\n\t</header>\r\n\t<!-- <lu-tree-option-pager></lu-tree-option-pager> -->\r\n\t<lu-tree-option *luForTreeOptions=\"let option\" [tree]=\"option\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{ value.name }}</ng-container>\r\n\t</lu-tree-option>\r\n\r\n</lu-tree-option-picker-advanced>\r\n"
        },
        {
            "name": "LuDropdownPanelComponent",
            "id": "component-LuDropdownPanelComponent-5f4f4186f52ba83c635fd7e18bd0723d",
            "file": "packages/ng/libraries/dropdown/src/lib/panel/dropdown-panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "LuDropdownPanel",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-dropdown",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dropdown-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content-classes",
                    "description": "<p>This method takes classes set on the host lu-popover element and applies them on the\npopover template that displays in the overlay container. Otherwise, it&#39;s difficult\nto style the containing popover from outside the component.</p>\n",
                    "line": 52,
                    "type": "string"
                },
                {
                    "name": "panel-classes",
                    "description": "<p>This method takes classes set on the host lu-popover element and applies them on the\npopover template that displays in the overlay container.  Otherwise, it&#39;s difficult\nto style the containing popover from outside the component.</p>\n",
                    "line": 42,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<void>()",
                    "description": "<p>Event emitted when the popover is closed. </p>\n",
                    "line": 57,
                    "type": "EventEmitter"
                },
                {
                    "name": "hovered",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 59,
                    "type": "EventEmitter"
                },
                {
                    "name": "open",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 58,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_items",
                    "defaultValue": "[]",
                    "type": "ILuDropdownItem[]",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_itemsQL",
                    "type": "QueryList<ILuDropdownItem>",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_subs",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_closeOnClick",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_contentClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_isOpen",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_keydownEventsSub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_overlayPaneClass",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "<p>Classes to be passed into the popover&#39;s overlay </p>\n",
                    "line": 96,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_panelClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_positionClassesMap",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_scrollStrategy",
                    "defaultValue": "'reposition'",
                    "type": "LuPopoverScrollStrategy",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_templateRef",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_trapFocus",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "close",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "hovered",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "open",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "panelId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "triggerId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "_emitCloseEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112
                },
                {
                    "name": "_emitHoveredEvent",
                    "args": [
                        {
                            "name": "hovered",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "jsdoctags": [
                        {
                            "name": "hovered",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_emitOpenEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116
                },
                {
                    "name": "focusFirstItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "initItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123
                },
                {
                    "name": "_emitCloseEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_emitHoveredEvent",
                    "args": [
                        {
                            "name": "hovered",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "hovered",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_emitOpenEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_handleKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onMouseDown",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "description": "<p>does nothing but must be overridable </p>\n",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "description": "<p>Enables close of popover when mouse leaving popover element </p>\n",
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onMouseOver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "description": "<p>TODO: Refactor when @angular/cdk includes feature I mentioned on github see link below.\n<a href=\"https://github.com/angular/material2/pull/5493#issuecomment-313085323\">https://github.com/angular/material2/pull/5493#issuecomment-313085323</a></p>\n",
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "setPositionClasses",
                    "args": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos"
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n\tComponent,\r\n\tEventEmitter,\r\n\tInput,\r\n\tOnDestroy,\r\n\tOutput,\r\n\tTemplateRef,\r\n\tViewChild,\r\n\tChangeDetectionStrategy,\r\n\tQueryList,\r\n\tContentChildren,\r\n\tHostListener,\r\n} from '@angular/core';\r\n\r\nimport {\r\n\tILuPopoverPanel,\r\n\tALuPopoverPanel,\r\n\tluTransformPopover,\r\n} from '@lucca-front/ng/popover';\r\nimport { ALuDropdownItem, ILuDropdownItem } from '../item/index';\r\n// import { UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\r\nimport { merge, of, Subscription, Observable } from 'rxjs';\r\nimport { map, startWith, delay, share, switchMap, debounceTime } from 'rxjs/operators';\r\n\r\n@Component({\r\n\tselector: 'lu-dropdown',\r\n\ttemplateUrl: './dropdown-panel.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tanimations: [luTransformPopover],\r\n\texportAs: 'LuDropdownPanel',\r\n})\r\nexport class LuDropdownPanelComponent extends ALuPopoverPanel implements ILuPopoverPanel, OnDestroy {\r\n\r\n\r\n\t/**\r\n\t * This method takes classes set on the host lu-popover element and applies them on the\r\n\t * popover template that displays in the overlay container.  Otherwise, it's difficult\r\n\t * to style the containing popover from outside the component.\r\n\t * @param classes list of class names\r\n\t */\r\n\t@Input('panel-classes')\r\n\tset inputPanelClasses(classes: string) {\r\n\t\tthis.panelClasses = classes;\r\n\t}\r\n\t/**\r\n\t * This method takes classes set on the host lu-popover element and applies them on the\r\n\t * popover template that displays in the overlay container. Otherwise, it's difficult\r\n\t * to style the containing popover from outside the component.\r\n\t * @param classes list of class names\r\n\t */\r\n\t@Input('content-classes')\r\n\tset inputContentClasses(classes: string) {\r\n\t\tthis.contentClasses = classes;\r\n\t}\r\n\r\n\t/** Event emitted when the popover is closed. */\r\n\t@Output() close = new EventEmitter<void>();\r\n\t@Output() open = new EventEmitter<void>();\r\n\t@Output() hovered = new EventEmitter<boolean>();\r\n\r\n\t@ViewChild(TemplateRef, { static: true })\r\n\tset vcTemplateRef(tr: TemplateRef<any>) {\r\n\t\tthis.templateRef = tr;\r\n\t}\r\n\r\n\t// protected _highlightIndex = -1;\r\n\t// get highlightIndex() { return this._highlightIndex; }\r\n\t// set highlightIndex(i: number) {\r\n\t// \tthis._highlightIndex = i;\r\n\t// \tthis._applyHighlight();\r\n\t// }\r\n\tprotected _items: ILuDropdownItem[] = [];\r\n\tprotected _itemsQL: QueryList<ILuDropdownItem>;\r\n\t@ContentChildren(ALuDropdownItem, { descendants: true }) set optionsQL(ql: QueryList<ILuDropdownItem>) {\r\n\t\tthis._itemsQL = ql;\r\n\t}\r\n\r\n\tprivate _subs = new Subscription();\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\tprotected initItems() {\r\n\r\n\t\tconst items$ = this._itemsQL.changes\r\n\t\t\t.pipe(\r\n\t\t\t\tstartWith(this._itemsQL),\r\n\t\t\t\tmap<QueryList<ILuDropdownItem>, ILuDropdownItem[]>(ql => ql.toArray()),\r\n\t\t\t\tdelay(0),\r\n\t\t\t\tshare(),\r\n\t\t\t);\r\n\t\titems$.subscribe(i => this._items = i || []);\r\n\t\t// this.highlightIndex = -1;\r\n\r\n\t\tconst singleFlow$: Observable<boolean> = items$.pipe(\r\n\t\t\tswitchMap(items => merge(...items.map(i => i.onSelect))),\r\n\t\t\tdebounceTime(1),\r\n\t\t);\r\n\r\n\t\tconst itemSelectSub = singleFlow$.subscribe(shouldClose => this.close.emit());\r\n\t\tthis._subs.add(itemSelectSub);\r\n\t}\r\n\tngAfterViewInit() {\r\n\t\tthis.initItems();\r\n\t}\r\n\r\n\tngOnDestroy() {\r\n\t\tthis.onClose();\r\n\t\tthis.close.complete();\r\n\t\tthis._subs.unsubscribe();\r\n\t}\r\n\t_emitCloseEvent(): void {\r\n\t\tthis.close.emit();\r\n\t}\r\n\r\n\t_emitOpenEvent(): void {\r\n\t\tthis.open.emit();\r\n\t}\r\n\t_emitHoveredEvent(hovered: boolean): void {\r\n\t\tthis.hovered.emit(hovered);\r\n\t}\r\n\r\n\tonOpen() {\r\n\t\tthis.focusFirstItem();\r\n\t}\r\n\tprivate focusFirstItem() {\r\n\t\tconst firstItem = this._items[0];\r\n\t\tif (firstItem) {\r\n\t\t\tfirstItem.focus()\r\n\t\t}\r\n\t}\r\n\r\n\t// keydown\r\n\t// _handleKeydown(event: KeyboardEvent) {\r\n\t// \tsuper._handleKeydown(event);\r\n\t\t// switch (event.keyCode) {\r\n\t\t// \tcase UP_ARROW:\r\n\t\t// \t\tthis._decrHighlight();\r\n\t\t// \t\tif (!this._highlightOutOfBounds()) {\r\n\t\t// \t\t\tevent.preventDefault();\r\n\t\t// \t\t\tevent.stopPropagation();\r\n\t\t// \t\t}\r\n\t\t// \t\tbreak;\r\n\t\t// \tcase DOWN_ARROW:\r\n\t\t// \t\tthis._incrHighlight();\r\n\t\t// \t\tif (!this._highlightOutOfBounds()) {\r\n\t\t// \t\t\tevent.preventDefault();\r\n\t\t// \t\t\tevent.stopPropagation();\r\n\t\t// \t\t}\r\n\t\t// \t\tbreak;\r\n\t\t// \tcase TAB:\r\n\t\t// \t\tif (event.shiftKey) {\r\n\t\t// \t\t\tthis._decrHighlight();\r\n\t\t// \t\t} else {\r\n\t\t// \t\t\tthis._incrHighlight();\r\n\t\t// \t\t}\r\n\t\t// \t\tif (!this._highlightOutOfBounds()) {\r\n\t\t// \t\t\tevent.preventDefault();\r\n\t\t// \t\t\tevent.stopPropagation();\r\n\t\t// \t\t}\r\n\t\t// \t\tbreak;\r\n\t\t// }\r\n\t// }\r\n\t// protected _incrHighlight() {\r\n\t// \tthis.highlightIndex++;\r\n\t// }\r\n\t// protected _decrHighlight() {\r\n\t// \tthis.highlightIndex--;\r\n\t// }\r\n\t// protected _highlightOutOfBounds(): boolean {\r\n\t// \tconst itemsCount = this._items.length;\r\n\t// \treturn this.highlightIndex < 0 || this.highlightIndex >= itemsCount;\r\n\t// }\r\n\t// protected _applyHighlight() {\r\n\r\n\t// \tconst highlightedItem = this._items[this.highlightIndex];\r\n\t// \tif (highlightedItem) {\r\n\t// \t\thighlightedItem.focus();\r\n\t// \t}\r\n\t// }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 78
            },
            "extends": "ALuPopoverPanel",
            "implements": [
                "ILuPopoverPanel",
                "OnDestroy"
            ],
            "accessors": {
                "inputPanelClasses": {
                    "name": "inputPanelClasses",
                    "setSignature": {
                        "name": "inputPanelClasses",
                        "type": "void",
                        "args": [
                            {
                                "name": "classes",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 42,
                        "description": "<p>This method takes classes set on the host lu-popover element and applies them on the\npopover template that displays in the overlay container.  Otherwise, it&#39;s difficult\nto style the containing popover from outside the component.</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 1177,
                                    "end": 1184,
                                    "flags": 0,
                                    "escapedText": "classes"
                                },
                                "type": "string",
                                "tagName": {
                                    "pos": 1171,
                                    "end": 1176,
                                    "flags": 0,
                                    "escapedText": "param"
                                },
                                "comment": "<p>list of class names</p>\n"
                            }
                        ]
                    }
                },
                "inputContentClasses": {
                    "name": "inputContentClasses",
                    "setSignature": {
                        "name": "inputContentClasses",
                        "type": "void",
                        "args": [
                            {
                                "name": "classes",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 52,
                        "description": "<p>This method takes classes set on the host lu-popover element and applies them on the\npopover template that displays in the overlay container. Otherwise, it&#39;s difficult\nto style the containing popover from outside the component.</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 1577,
                                    "end": 1584,
                                    "flags": 0,
                                    "escapedText": "classes"
                                },
                                "type": "string",
                                "tagName": {
                                    "pos": 1571,
                                    "end": 1576,
                                    "flags": 0,
                                    "escapedText": "param"
                                },
                                "comment": "<p>list of class names</p>\n"
                            }
                        ]
                    }
                },
                "vcTemplateRef": {
                    "name": "vcTemplateRef",
                    "setSignature": {
                        "name": "vcTemplateRef",
                        "type": "void",
                        "args": [
                            {
                                "name": "tr",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 62,
                        "jsdoctags": [
                            {
                                "name": "tr",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "optionsQL": {
                    "name": "optionsQL",
                    "setSignature": {
                        "name": "optionsQL",
                        "type": "void",
                        "args": [
                            {
                                "name": "ql",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 74,
                        "jsdoctags": [
                            {
                                "name": "ql",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-template>\r\n\t<div class=\"lu-dropdown-panel lu-popover-panel\"\r\n\t\t[ngClass]=\"panelClassesMap\"\r\n\t\t(keydown)=\"_handleKeydown($event)\"\r\n\t\t(click)=\"onClick()\"\r\n\t\t(mouseover)=\"onMouseOver()\"\r\n\t\t(mouseleave)=\"onMouseLeave()\"\r\n\t\t(mousedown)=\"onMouseDown($event)\"\r\n\t\t[attr.id]=\"panelId\"\r\n\t\t[attr.aria-labelledby]=\"triggerId\"\r\n\t\t[@transformPopover]=\"'enter'\"\r\n\t>\r\n\t\t<div class=\"lu-popover-content lu-dropdown-content\" [ngClass]=\"contentClassesMap\">\r\n\t\t\t<ul class=\"lu-dropdown-options\">\r\n\t\t\t\t<ng-content></ng-content>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t</div>\r\n</ng-template>\r\n"
        },
        {
            "name": "LuEstablishmentSearcherComponent",
            "id": "component-LuEstablishmentSearcherComponent-8fbbbd46ceb43a25c522f8ca9c63579d",
            "file": "packages/ng/libraries/establishment/src/lib/select/searcher/establishment-searcher.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuOptionOperator, useExisting: forwardRef(() => LuEstablishmentSearcherComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuOnOpenSubscriber, useExisting: forwardRef(() => LuEstablishmentSearcherComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuOnCloseSubscriber, useExisting: forwardRef(() => LuEstablishmentSearcherComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuOnScrollBottomSubscriber, useExisting: forwardRef(() => LuEstablishmentSearcherComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuEstablishmentService, useClass: LuEstablishmentService,\n}"
                }
            ],
            "selector": "lu-establishment-searcher",
            "styleUrls": [
                "establishment-searcher.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "establishment-searcher.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appInstanceId",
                    "line": 69,
                    "type": "number"
                },
                {
                    "name": "filters",
                    "line": 68,
                    "type": "[]"
                },
                {
                    "name": "operations",
                    "line": 70,
                    "type": "[]"
                },
                {
                    "name": "sort",
                    "line": 71,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "isSearching",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 80,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_isSearching",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_options",
                    "defaultValue": "[]",
                    "type": "ILuEstablishment[]",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_page",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_page$",
                    "defaultValue": "new Subject<number>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_service",
                    "type": "LuEstablishmentService",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_subs",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "empty$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "loading$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "outOptions$",
                    "defaultValue": "new Subject<ILuEstablishment[]>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "searchInput",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchInput', {read: ElementRef, static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162
                },
                {
                    "name": "onScrollBottom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177
                }
            ],
            "hostBindings": [
                {
                    "name": "class.position-fixed",
                    "defaultValue": "true",
                    "line": 76
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n\tChangeDetectionStrategy,\r\n\tComponent,\r\n\tforwardRef,\r\n\tViewChild,\r\n\tElementRef,\r\n\tSkipSelf,\r\n\tSelf,\r\n\tOptional,\r\n\tInject,\r\n\tHostBinding,\r\n\tOnInit,\r\n\tOnDestroy,\r\n\tInput,\r\n\tOutput,\r\n\tEventEmitter,\r\n} from '@angular/core';\r\nimport {\r\n\tALuOnOpenSubscriber,\r\n\tALuOnScrollBottomSubscriber,\r\n\tALuOnCloseSubscriber,\r\n\tILuOnOpenSubscriber,\r\n\tILuOnScrollBottomSubscriber,\r\n\tILuOnCloseSubscriber,\r\n} from '@lucca-front/ng/core';\r\nimport { ALuOptionOperator, ILuOptionOperator } from '@lucca-front/ng/option';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { distinctUntilChanged, debounceTime, switchMap, catchError, share, startWith, withLatestFrom, mapTo, map, tap } from 'rxjs/operators';\r\nimport { ALuEstablishmentService, LuEstablishmentService } from '../../service/index';\r\nimport { Subject, Observable, Subscription, combineLatest, of, merge } from 'rxjs';\r\nimport { ILuEstablishment } from '../../establishment.model';\r\n\r\n@Component({\r\n\tselector: 'lu-establishment-searcher',\r\n\ttemplateUrl: 'establishment-searcher.component.html',\r\n\tstyleUrls: ['establishment-searcher.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuEstablishmentSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOnOpenSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuEstablishmentSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOnCloseSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuEstablishmentSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOnScrollBottomSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuEstablishmentSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuEstablishmentService,\r\n\t\t\tuseClass: LuEstablishmentService,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuEstablishmentSearcherComponent\r\n\timplements OnInit, OnDestroy, ILuOnOpenSubscriber, ILuOnScrollBottomSubscriber, ILuOnCloseSubscriber, ILuOptionOperator<ILuEstablishment>\r\n{\r\n\t@Input() set filters(filters: string[]) { this._service.filters = filters; }\r\n\t@Input() set appInstanceId(appId: number) { this._service.appInstanceId = appId; }\r\n\t@Input() set operations(ops: number[]) { this._service.operations = ops; }\r\n\t@Input() set sort(sort: string) { this._service.sort = sort; }\r\n\r\n\tprivate _service: LuEstablishmentService;\r\n\tprivate _subs = new Subscription();\r\n\r\n\t@HostBinding('class.position-fixed') fixed = true;\r\n\t@ViewChild('searchInput', { read: ElementRef, static: true }) searchInput: ElementRef;\r\n\r\n\t@Output()\r\n\tisSearching = new EventEmitter<boolean>();\r\n\tprivate _isSearching = false;\r\n\r\n\tform: FormGroup;\r\n\toutOptions$ = new Subject<ILuEstablishment[]>();\r\n\tloading$: Observable<boolean>;\r\n\tempty$: Observable<boolean>;\r\n\tprivate _loading = false;\r\n\tprivate _page$ = new Subject<number>();\r\n\tprivate _page: number;\r\n\tprivate _options: ILuEstablishment[] = [];\r\n\r\n\tconstructor(\r\n\t\t@Inject(ALuEstablishmentService) @Optional() @SkipSelf() hostService: ALuEstablishmentService,\r\n\t\t@Inject(ALuEstablishmentService) @Self() selfService: LuEstablishmentService,\r\n\t) {\r\n\t\tthis._service = (hostService || selfService) as LuEstablishmentService;\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.form = new FormGroup({\r\n\t\t\tclue: new FormControl(''),\r\n\t\t});\r\n\t\tconst formValue$ = this.form.valueChanges.pipe(\r\n\t\t\tstartWith(this.form.value),\r\n\t\t);\r\n\t\tthis._page$ = new Subject<number>();\r\n\t\tconst distinctPage$ = this._page$.pipe(\r\n\t\t\tdistinctUntilChanged(),\r\n\t\t);\r\n\r\n\t\tconst pageSub = this._page$.subscribe(p => this._page = p);\r\n\t\tthis._subs.add(pageSub);\r\n\r\n\t\tconst results$ = combineLatest(\r\n\t\t\tdistinctPage$,\r\n\t\t\tformValue$\r\n\t\t).pipe(\r\n\t\t\tdebounceTime(100),\r\n\t\t\ttap(([_, val]) => {\r\n\t\t\t\tconst isSearching = val?.clue != null && val?.clue !== '';\r\n\t\t\t\tif (this._isSearching !== isSearching) {\r\n\t\t\t\t\tthis._isSearching = isSearching\r\n\t\t\t\t\tthis.isSearching.emit(this._isSearching);\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tswitchMap(([page, val]) => {\r\n\t\t\t\tconst filters = [];\r\n\t\t\t\treturn this._service.searchPaged(val.clue, page, filters);\r\n\t\t\t}),\r\n\t\t\tcatchError(err => of([])),\r\n\t\t\tshare(),\r\n\t\t);\r\n\r\n\t\tconst resultsSub = results$\r\n\t\t\t.pipe(withLatestFrom(distinctPage$))\r\n\t\t\t.subscribe(([items, page]) => {\r\n\t\t\t\tif (page === 0) {\r\n\t\t\t\t\tthis._options = [...items];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._options.push(...items);\r\n\t\t\t\t}\r\n\t\t\t\tthis.outOptions$.next([...this._options]);\r\n\t\t\t});\r\n\t\tthis._subs.add(resultsSub);\r\n\r\n\t\tthis.loading$ = merge(\r\n\t\t\tformValue$.pipe(mapTo(true)),\r\n\t\t\tresults$.pipe(mapTo(false)),\r\n\t\t);\r\n\t\tconst loadingSub = this.loading$.subscribe(l => this._loading = l);\r\n\t\tthis._subs.add(loadingSub);\r\n\r\n\t\tthis.empty$ = this.outOptions$.pipe(\r\n\t\t\tmap(o => o.length === 0),\r\n\t\t);\r\n\t}\r\n\r\n\tngOnDestroy() {\r\n\t\tthis._subs.unsubscribe();\r\n\t}\r\n\r\n\tonOpen() {\r\n\t\tthis.searchInput.nativeElement.focus();\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tonScrollBottom() {\r\n\t\tif (!this._loading) {\r\n\t\t\tthis._page$.next(this._page + 1);\r\n\t\t}\r\n\t}\r\n\r\n\tonClose() {\r\n\t\tthis.outOptions$.next([]);\r\n\t}\r\n\r\n\treset() {\r\n\t\tthis.form.reset();\r\n\t\tthis._page$.next(0);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '_definitions';\r\n@include optionSearcherStyle;\r\n",
                    "styleUrl": "establishment-searcher.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hostService",
                        "type": "ALuEstablishmentService"
                    },
                    {
                        "name": "selfService",
                        "type": "LuEstablishmentService"
                    }
                ],
                "line": 90,
                "jsdoctags": [
                    {
                        "name": "hostService",
                        "type": "ALuEstablishmentService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selfService",
                        "type": "LuEstablishmentService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "ILuOnOpenSubscriber",
                "ILuOnScrollBottomSubscriber",
                "ILuOnCloseSubscriber",
                "ILuOptionOperator"
            ],
            "accessors": {
                "filters": {
                    "name": "filters",
                    "setSignature": {
                        "name": "filters",
                        "type": "void",
                        "args": [
                            {
                                "name": "filters",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 68,
                        "jsdoctags": [
                            {
                                "name": "filters",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "appInstanceId": {
                    "name": "appInstanceId",
                    "setSignature": {
                        "name": "appInstanceId",
                        "type": "void",
                        "args": [
                            {
                                "name": "appId",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 69,
                        "jsdoctags": [
                            {
                                "name": "appId",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "operations": {
                    "name": "operations",
                    "setSignature": {
                        "name": "operations",
                        "type": "void",
                        "args": [
                            {
                                "name": "ops",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 70,
                        "jsdoctags": [
                            {
                                "name": "ops",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "sort": {
                    "name": "sort",
                    "setSignature": {
                        "name": "sort",
                        "type": "void",
                        "args": [
                            {
                                "name": "sort",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 71,
                        "jsdoctags": [
                            {
                                "name": "sort",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<form [formGroup]=\"form\">\r\n\t<div class=\"textfield mod-search\" [class.is-loading]=\"loading$ | async\">\r\n\t\t<input #searchInput class=\"textfield-input\" formControlName=\"clue\">\r\n\t</div>\r\n</form>\r\n\r\n<lu-option-placeholder *ngIf=\"(empty$ | async) && !(loading$ | async)\" (onClear)=\"reset()\"></lu-option-placeholder>"
        },
        {
            "name": "LuEstablishmentSelectAllComponent",
            "id": "component-LuEstablishmentSelectAllComponent-a4f430fd476aaebd5dc52ea84ca3be76",
            "file": "packages/ng/libraries/establishment/src/lib/select/select-all/establishment-select-all.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuOptionOperator, useExisting: forwardRef(() => LuEstablishmentSelectAllComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuOptionSelector, useExisting: forwardRef(() => LuEstablishmentSelectAllComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuEstablishmentService, useClass: LuEstablishmentService,\n}"
                }
            ],
            "selector": "lu-establishment-select-all",
            "styleUrls": [
                "establishment-select-all.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./establishment-select-all.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appInstanceId",
                    "line": 34,
                    "type": "number"
                },
                {
                    "name": "filters",
                    "line": 33,
                    "type": "[]"
                },
                {
                    "name": "operations",
                    "line": 35,
                    "type": "[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_service",
                    "type": "LuEstablishmentService",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_subs",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "intl",
                    "type": "ILuOptionSelectAllLabel",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LuOptionSelectAllIntl"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "_values",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LuOptionSelectAllComponent"
                    }
                },
                {
                    "name": "intl",
                    "type": "ILuOptionSelectAllLabel",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LuOptionSelectAllIntl"
                        }
                    ],
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LuOptionSelectAllComponent"
                    }
                },
                {
                    "name": "multiple",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "LuOptionSelectAllComponent"
                    }
                },
                {
                    "name": "onSelectValue",
                    "defaultValue": "new Subject<T | T[]>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "LuOptionSelectAllComponent"
                    }
                },
                {
                    "name": "options",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "LuOptionSelectAllComponent"
                    }
                },
                {
                    "name": "outOptions$",
                    "type": "Observable<T[]>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "LuOptionSelectAllComponent"
                    }
                },
                {
                    "name": "inOptions$",
                    "type": "Observable<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionOperator"
                    }
                },
                {
                    "name": "outOptions$",
                    "type": "Observable<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionOperator"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "selectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "description": "",
                    "jsdoctags": []
                },
                {
                    "name": "deselectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "inheritance": {
                        "file": "LuOptionSelectAllComponent"
                    }
                },
                {
                    "name": "selectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "LuOptionSelectAllComponent"
                    }
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "values",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LuOptionSelectAllComponent"
                    }
                }
            ],
            "hostBindings": [
                {
                    "name": "class.position-fixed",
                    "defaultValue": "true",
                    "line": 32,
                    "inheritance": {
                        "file": "LuOptionSelectAllComponent"
                    }
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, forwardRef, Inject, Input, OnDestroy, Optional, Self, SkipSelf } from '@angular/core';\r\nimport { ALuOptionOperator, ALuOptionSelector, ILuOptionSelectAllLabel, LuOptionSelectAllComponent, LuOptionSelectAllIntl } from '@lucca-front/ng/option';\r\nimport { Subscription } from 'rxjs';\r\nimport { ILuEstablishment } from '../../establishment.model';\r\nimport { ALuEstablishmentService, LuEstablishmentService } from '../../service/index';\r\n\r\n@Component({\r\n\tselector: 'lu-establishment-select-all',\r\n\ttemplateUrl: './establishment-select-all.component.html',\r\n\tstyleUrls: ['establishment-select-all.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuEstablishmentSelectAllComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOptionSelector,\r\n\t\t\tuseExisting: forwardRef(() => LuEstablishmentSelectAllComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuEstablishmentService,\r\n\t\t\tuseClass: LuEstablishmentService,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuEstablishmentSelectAllComponent\r\n\textends LuOptionSelectAllComponent<ILuEstablishment>\r\n\timplements OnDestroy {\r\n\r\n\t@Input() set filters(filters: string[]) { this._service.filters = filters; }\r\n\t@Input() set appInstanceId(appInstanceId: number) { this._service.appInstanceId = appInstanceId; }\r\n\t@Input() set operations(operations: number[]) { this._service.operations = operations; }\r\n\r\n\tloading = false;\r\n\tprivate _service: LuEstablishmentService;\r\n\tprivate _subs = new Subscription();\r\n\r\n\tconstructor(\r\n\t\tprivate readonly _changeDetectorRef: ChangeDetectorRef,\r\n\t\t@Inject(LuOptionSelectAllIntl) public intl: ILuOptionSelectAllLabel,\r\n\t\t@Inject(ALuEstablishmentService) @Optional() @SkipSelf() hostService: ALuEstablishmentService,\r\n\t\t@Inject(ALuEstablishmentService) @Self() selfService: LuEstablishmentService,\r\n\t) {\r\n\t\tsuper(intl);\r\n\t\tthis._service = (hostService || selfService) as LuEstablishmentService;\r\n\t}\r\n\r\n\t/** @override */\r\n\tselectAll() {\r\n\t\tthis.loading = true;\r\n\t\tconst sub = this._service.getAll().subscribe(\r\n\t\t\testablishments => {\r\n\t\t\t\tthis.onSelectValue.next([...establishments]);\r\n\t\t\t},\r\n\t\t\t() => { },\r\n\t\t\t() => {\r\n\t\t\t\tthis.loading = false;\r\n\t\t\t\tthis._changeDetectorRef.detectChanges();\r\n\t\t\t});\r\n\t\tthis._subs.add(sub);\r\n\t}\r\n\r\n\tngOnDestroy(): void {\r\n\t\tthis._subs.unsubscribe();\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_definitions\";\r\n:host {\r\n\t@include optionSelectorStyle;\r\n}\r\nbutton[disabled]:hover {\r\n\t// TODO: remove hover animation when disabled\r\n}\r\n",
                    "styleUrl": "establishment-select-all.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "intl",
                        "type": "ILuOptionSelectAllLabel"
                    },
                    {
                        "name": "hostService",
                        "type": "ALuEstablishmentService"
                    },
                    {
                        "name": "selfService",
                        "type": "LuEstablishmentService"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "intl",
                        "type": "ILuOptionSelectAllLabel",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hostService",
                        "type": "ALuEstablishmentService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selfService",
                        "type": "LuEstablishmentService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LuOptionSelectAllComponent",
            "implements": [
                "OnDestroy"
            ],
            "accessors": {
                "filters": {
                    "name": "filters",
                    "setSignature": {
                        "name": "filters",
                        "type": "void",
                        "args": [
                            {
                                "name": "filters",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "jsdoctags": [
                            {
                                "name": "filters",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "appInstanceId": {
                    "name": "appInstanceId",
                    "setSignature": {
                        "name": "appInstanceId",
                        "type": "void",
                        "args": [
                            {
                                "name": "appInstanceId",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "appInstanceId",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "operations": {
                    "name": "operations",
                    "setSignature": {
                        "name": "operations",
                        "type": "void",
                        "args": [
                            {
                                "name": "operations",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 35,
                        "jsdoctags": [
                            {
                                "name": "operations",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<button (click)=\"selectAll()\" [disabled]=\"loading\" class=\"link selectAll-button\">{{intl.select}}</button>\r\n<button (click)=\"deselectAll()\" [disabled]=\"loading\"\r\n\tclass=\"link selectAll-button u-marginLeftSmaller\">{{intl.deselect}}</button>"
        },
        {
            "name": "LuEstablishmentSelectInputComponent",
            "id": "component-LuEstablishmentSelectInputComponent-0b819c5463d3a566cd7ccd48ccb0fdcb",
            "file": "packages/ng/libraries/establishment/src/lib/select/input/establishment-select-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => LuEstablishmentSelectInputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-establishment-select",
            "styleUrls": [
                "./establishment-select-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./establishment-select-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appInstanceId",
                    "line": 43,
                    "type": "number"
                },
                {
                    "name": "filters",
                    "line": 42,
                    "type": "string[]"
                },
                {
                    "name": "operations",
                    "line": 44,
                    "type": "number[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "byId",
                    "defaultValue": "() => {...}",
                    "type": "LuOptionComparer<D>",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "intl",
                    "type": "ILuEstablishmentSelectInputLabel",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LuEstablishmentSelectInputIntl"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isSearching",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "onIsSearchingChanged",
                    "args": [
                        {
                            "name": "isSearching",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "isSearching",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackById",
                    "args": [
                        {
                            "name": "idx",
                            "type": "number"
                        },
                        {
                            "name": "item",
                            "type": "ILuEstablishment"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "ILuEstablishment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n\tChangeDetectionStrategy,\r\n\tComponent,\r\n\tChangeDetectorRef,\r\n\tforwardRef,\r\n\tViewContainerRef,\r\n\tElementRef,\r\n\tRenderer2,\r\n\tInject,\r\n\tAfterViewInit, Input\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\nimport { Overlay } from '@angular/cdk/overlay';\r\n\r\nimport { ILuInputWithPicker } from '@lucca-front/ng/picker';\r\nimport { ILuOptionPickerPanel, LuOptionComparer } from '@lucca-front/ng/option';\r\nimport { ALuSelectInputComponent } from '@lucca-front/ng/select';\r\n\r\nimport { ILuEstablishment } from '../../establishment.model';\r\nimport { LuEstablishmentSelectInputIntl } from './establishment-select-input.intl';\r\nimport { ILuEstablishmentSelectInputLabel } from './establishment-select-input.translate';\r\n\r\n@Component({\r\n\tselector: 'lu-establishment-select',\r\n\ttemplateUrl: './establishment-select-input.component.html',\r\n\tstyleUrls: ['./establishment-select-input.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: NG_VALUE_ACCESSOR,\r\n\t\t\tuseExisting: forwardRef(() => LuEstablishmentSelectInputComponent),\r\n\t\t\tmulti: true,\r\n\t\t}\r\n\t],\r\n})\r\nexport class LuEstablishmentSelectInputComponent<D extends ILuEstablishment = ILuEstablishment, P extends ILuOptionPickerPanel<D> = ILuOptionPickerPanel<D>>\r\n\textends ALuSelectInputComponent<D, P>\r\n\timplements ControlValueAccessor, ILuInputWithPicker<D>, AfterViewInit {\r\n\r\n\tbyId: LuOptionComparer<D> = (option1: D, option2: D) => option1 && option2 && option1.id === option2.id;\r\n\r\n\t@Input() filters: string[];\r\n\t@Input() appInstanceId: number;\r\n\t@Input() operations: number[];\r\n\r\n\tisSearching = false;\r\n\tget sort(): string {\r\n\t\treturn this.isSearching ? 'name' : 'legalunit.name,name';\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tprotected _changeDetectorRef: ChangeDetectorRef,\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _elementRef: ElementRef,\r\n\t\tprotected _viewContainerRef: ViewContainerRef,\r\n\t\tprotected _renderer: Renderer2,\r\n\t\t@Inject(LuEstablishmentSelectInputIntl) public intl: ILuEstablishmentSelectInputLabel,\r\n\t) {\r\n\t\tsuper(\r\n\t\t\t_changeDetectorRef,\r\n\t\t\t_overlay,\r\n\t\t\t_elementRef,\r\n\t\t\t_viewContainerRef,\r\n\t\t\t_renderer,\r\n\t\t);\r\n\t}\r\n\r\n\tonIsSearchingChanged(isSearching: boolean) {\r\n\t\tthis.isSearching = isSearching;\r\n\t\tthis._changeDetectorRef.detectChanges();\r\n\t}\r\n\r\n\ttrackById(idx: number, item: ILuEstablishment): number {\r\n\t\treturn item.id;\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_definitions\";\r\n@include selectInputStyle;\r\n\r\n.lu-select-value {\r\n\tpadding-right: 2.5rem;\r\n}\r\n\r\n.lu-picker-header {\r\n\t.option-selector {\r\n\t\tdisplay: none;\r\n\t}\r\n\t&.mod-multiple {\r\n\t\t.option-selector {\r\n\t\t\tdisplay: inherit;\r\n\t\t\tpadding: _theme(\"spacings.smaller\", true);\r\n\t\t\tpadding: _theme(\"spacings.smaller\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.optionGroupName {\r\n\tpadding: #{_component(\"options.item.padding-vertical\", true)} #{_component(\"options.item.padding-horizontal\", true)};\r\n\tpadding: #{_component(\"options.item.padding-vertical\")} #{_component(\"options.item.padding-horizontal\")};\r\n\tborder-top: 1px solid _theme(\"commons.divider.color\", true);\r\n\tborder-top: 1px solid _theme(\"commons.divider.color\");\r\n\tfont-size: _theme(\"sizes.small.font-size\", true);\r\n\tfont-size: _theme(\"sizes.small.font-size\");\r\n\twidth: 100%;\r\n\ttext-align: left;\r\n\t\r\n\t&.mod-readonly {\r\n\t\tcolor: _color(\"grey\", 600, true);\r\n\t\tcolor: _color(\"grey\", 600);\r\n\t\tfont-weight: 400;\r\n\t}\r\n\r\n\t&.button {\r\n\t\ttext-decoration: underline;\r\n\t\tmargin: 0;\r\n\t\t\r\n\t\t&:active, &:focus, &:hover {\r\n\t\t\tbox-shadow: none;\r\n\t\t\tbackground-color: transparent;\r\n\t\t\t\r\n\t\t\t~ lu-option {\r\n\t\t\t\tbackground-color: _theme('commons.highlight',true);\r\n\t\t\t\tbackground-color: _theme('commons.highlight');\r\n\t\t\t} \r\n\t\t}\r\n\t}\r\n}",
                    "styleUrl": "./establishment-select-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "intl",
                        "type": "ILuEstablishmentSelectInputLabel"
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "intl",
                        "type": "ILuEstablishmentSelectInputLabel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuSelectInputComponent",
            "implements": [
                "ControlValueAccessor",
                "ILuInputWithPicker",
                "AfterViewInit"
            ],
            "accessors": {
                "sort": {
                    "name": "sort",
                    "getSignature": {
                        "name": "sort",
                        "type": "string",
                        "returnType": "string",
                        "line": 47
                    }
                }
            },
            "templateData": "<div class=\"lu-select-placeholder\">{{placeholder}}</div>\r\n<div class=\"lu-select-value\">\r\n\t<div class=\"lu-select-display-wrapper\">\r\n\t\t<ng-container #display></ng-container>\r\n\t</div>\r\n</div>\r\n<div class=\"lu-select-suffix\">\r\n\t<lu-input-clearer></lu-input-clearer>\r\n</div>\r\n\r\n<ng-template luDisplayer [luDisplayerMultiple]=\"true\" let-values>\r\n\t<span *ngIf=\"multiple && values?.length > 1; else: singleView\"><span\r\n\t\t\tclass=\"chip mod-unkillable\">{{values.length}}</span> {{intl.establishments}}</span>\r\n\t<ng-template #singleView>{{(values[0] || values).name}}</ng-template>\r\n</ng-template>\r\n\r\n<lu-option-picker-advanced [option-comparer]=\"byId\">\r\n\t<header class=\"lu-picker-header\">\r\n\t\t<lu-establishment-searcher\r\n\t\t\t[filters]=\"filters\"\r\n\t\t\t[appInstanceId]=\"appInstanceId\"\r\n\t\t\t[operations]=\"operations\"\r\n\t\t\t[sort]=\"sort\" \r\n\t\t\t(isSearching)=\"onIsSearchingChanged($event)\"\r\n\t\t></lu-establishment-searcher>\r\n\t\t<lu-establishment-select-all\r\n\t\t\t*ngIf=\"multiple\"\r\n\t\t\tclass=\"u-displayBlock u-marginSmaller\"\r\n\t\t\t[class.u-displayNone]=\"isSearching\"\r\n\t\t\t[filters]=\"filters\"\r\n\t\t\t[appInstanceId]=\"appInstanceId\"\r\n\t\t\t[operations]=\"operations\"\r\n\t\t>\r\n\t\t</lu-establishment-select-all>\r\n\t</header>\r\n\r\n\t<ng-template luForLegalUnits let-group>\r\n\t\t<div class=\"optionGroup\">\r\n\t\t\t<ng-container *ngIf=\"!isSearching\">\r\n\t\t\t\t<button\r\n\t\t\t\t\t*ngIf=\"multiple; else singleViewGroup\"\r\n\t\t\t\t\tclass=\"optionGroupName button mod-link mod-block\"\r\n\t\t\t\t\t[luLegalUnitSelector]=\"group.key\"\r\n\t\t\t\t\t[luLegalUnitSelectorFilters]=\"filters\"\r\n\t\t\t\t\t[luLegalUnitSelectorAppInstanceId]=\"appInstanceId\"\r\n\t\t\t\t\t[luLegalUnitSelectorOperations]=\"operations\"\r\n\t\t\t\t>\r\n\t\t\t\t\t{{group.key.name}}\r\n\t\t\t\t</button>\r\n\t\t\t\t<ng-template #singleViewGroup>\r\n\t\t\t\t\t<h5 class=\"optionGroupName mod-readonly u-marginReset\">\r\n\t\t\t\t\t\t{{group.key.name}}\r\n\t\t\t\t\t</h5>\r\n\t\t\t\t</ng-template>\r\n\t\t\t</ng-container>\r\n\r\n\t\t\t<lu-option *ngFor=\"let establishment of group.items; trackBy: trackById\" [value]=\"establishment\"\r\n\t\t\t\tclass=\"establishmentOption\">\r\n\t\t\t\t<ng-container *ngIf=\"isSearching; else emptySearch\">\r\n\t\t\t\t\t<span class=\"u-displayBlock\">{{establishment.name}}</span>\r\n\t\t\t\t\t<span class=\"u-displayBlock u-textLight u-textSmall\">{{ group.key.name }}</span>\r\n\t\t\t\t</ng-container>\r\n\t\t\t\t<ng-template #emptySearch>\r\n\t\t\t\t\t<span>{{establishment.name}}</span>\r\n\t\t\t\t</ng-template>\r\n\t\t\t</lu-option>\r\n\t\t</div>\r\n\t</ng-template>\r\n</lu-option-picker-advanced>"
        },
        {
            "name": "LuFormlyErrorMessage",
            "id": "component-LuFormlyErrorMessage-84af02ffe33d6ca432510a2b4de39471",
            "file": "packages/ng/libraries/formly/src/lib/wrappers/error.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-formly-error-message",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"textfield-messages-error\" *ngFor=\"let message of errorMessages\">{{ message }}</div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "field",
                    "line": 35,
                    "type": "FormlyFieldConfig"
                },
                {
                    "name": "fieldForm",
                    "line": 34,
                    "type": "FormControl"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild, ViewContainerRef, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport {\r\n\tFormlyFieldConfig,\r\n\tFieldWrapper,\r\n\tFormlyConfig,\r\n} from '@ngx-formly/core';\r\n\r\n// wrapper\r\n@Component({\r\n\tselector: 'lu-formly-wrapper-error',\r\n\tstyleUrls: ['flex-layout.scss'],\r\n\ttemplateUrl: './error.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyWrapperError extends FieldWrapper {\r\n\t@ViewChild('fieldComponent', { read: ViewContainerRef, static: true })\r\n\tfieldComponent: ViewContainerRef;\r\n\r\n\treadonly formControl: FormControl;\r\n\r\n\tget validationId() {\r\n\t\treturn this.field.id + '-message';\r\n\t}\r\n}\r\n\r\n// component that display the right error message\r\n@Component({\r\n\tselector: 'lu-formly-error-message',\r\n\ttemplate: `<div class=\"textfield-messages-error\" *ngFor=\"let message of errorMessages\">{{ message }}</div>`,\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyErrorMessage {\r\n\t@Input() fieldForm: FormControl;\r\n\t@Input() field: FormlyFieldConfig;\r\n\r\n\tconstructor() {}\r\n\r\n\tget errorMessages(): string[] {\r\n\t\tconst messages = [];\r\n\t\tif (!!this.fieldForm.errors) {\r\n\t\t\tObject.keys(this.fieldForm.errors).forEach(key => {\r\n\t\t\t\tif (\r\n\t\t\t\t\tthis.field.validation &&\r\n\t\t\t\t\tthis.field.validation.messages &&\r\n\t\t\t\t\tthis.field.validation.messages[key]\r\n\t\t\t\t) {\r\n\t\t\t\t\tmessages.push(this.field.validation.messages[key]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn messages;\r\n\t}\r\n}\r\n\r\n// run to know when to add said wrapper\r\nexport class TemplateError {\r\n\trun(fc: FormlyConfig) {\r\n\t\tfc.templateManipulators.postWrapper.push((field: FormlyFieldConfig) => {\r\n\t\t\tif (field && field.validation) {\r\n\t\t\t\treturn 'error';\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 35
            },
            "accessors": {
                "errorMessages": {
                    "name": "errorMessages",
                    "getSignature": {
                        "name": "errorMessages",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 39
                    }
                }
            }
        },
        {
            "name": "LuFormlyFieldApi",
            "id": "component-LuFormlyFieldApi-c6d5a43bd72f79d32299c817ef087b00",
            "file": "packages/ng/libraries/formly/src/lib/types/api.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-formly-field-api",
            "styleUrls": [
                "formly-field.common.scss",
                "select.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./api.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "blur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { FieldType } from '@ngx-formly/core';\r\n\r\n@Component({\r\n\tselector: 'lu-formly-field-api',\r\n\tstyleUrls: ['formly-field.common.scss', 'select.scss'],\r\n\ttemplateUrl: './api.html',\r\n\t// changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyFieldApi extends FieldType {\r\n\tget _api() {\r\n\t\treturn this.to.api;\r\n\t}\r\n\tget _filters() {\r\n\t\treturn this.to.filters || [];\r\n\t}\r\n\tget _orderBy() {\r\n\t\treturn this.to.orderBy;\r\n\t}\r\n\tget _standard() {\r\n\t\treturn this.to.standard || 'v3';\r\n\t}\r\n\treadonly formControl: FormControl;\r\n\tfocus() {\r\n\t\tthis.to._isFocused = true;\r\n\t}\r\n\tblur() {\r\n\t\tthis.to._isFocused = false;\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n\twidth: 100%;\r\n\tdisplay: inherit;\r\n\talign-items: inherit;\r\n\tflex-direction: inherit;\r\n}\r\n",
                    "styleUrl": "formly-field.common.scss"
                },
                {
                    "data": ":host-context(.mod-framed) {\r\n\tlu-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-api-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-user-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-date-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-department-select {\r\n\t\tdisplay: block;\r\n\t}\r\n}\r\n",
                    "styleUrl": "select.scss"
                }
            ],
            "stylesData": "",
            "extends": "FieldType",
            "accessors": {
                "_api": {
                    "name": "_api",
                    "getSignature": {
                        "name": "_api",
                        "type": "",
                        "returnType": "",
                        "line": 12
                    }
                },
                "_filters": {
                    "name": "_filters",
                    "getSignature": {
                        "name": "_filters",
                        "type": "",
                        "returnType": "",
                        "line": 15
                    }
                },
                "_orderBy": {
                    "name": "_orderBy",
                    "getSignature": {
                        "name": "_orderBy",
                        "type": "",
                        "returnType": "",
                        "line": 18
                    }
                },
                "_standard": {
                    "name": "_standard",
                    "getSignature": {
                        "name": "_standard",
                        "type": "",
                        "returnType": "",
                        "line": 21
                    }
                }
            },
            "templateData": "<lu-api-select class=\"textfield-input\" [formControl]=\"formControl\" [formlyAttributes]=\"field\" [multiple]=\"to.multiple\"\r\n (focus)=\"focus()\" (blur)=\"blur()\" [placeholder]=\"to.placeholder\" [api]=\"_api\" [filters]=\"_filters\" [orderBy]=\"_orderBy\" [standard]=\"_standard\">\r\n</lu-api-select>\r\n<span [attr.for]=\"id\" class=\"textfield-label\">{{ to.label }}</span>\r\n"
        },
        {
            "name": "LuFormlyFieldCheckbox",
            "id": "component-LuFormlyFieldCheckbox-fcca09cf1222695b924e547d00eccbe0",
            "file": "packages/ng/libraries/formly/src/lib/types/checkbox.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-formly-field-checkbox",
            "styleUrls": [
                "formly-field.common.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "blur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { FieldType } from '@ngx-formly/core';\r\n\r\n@Component({\r\n\tselector: 'lu-formly-field-checkbox',\r\n\tstyleUrls: ['formly-field.common.scss'],\r\n\ttemplateUrl: './checkbox.html',\r\n\t// changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyFieldCheckbox extends FieldType {\r\n\treadonly formControl: FormControl;\r\n\tfocus() {\r\n\t\tthis.to._isFocused = true;\r\n\t}\r\n\tblur() {\r\n\t\tthis.to._isFocused = false;\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n\twidth: 100%;\r\n\tdisplay: inherit;\r\n\talign-items: inherit;\r\n\tflex-direction: inherit;\r\n}\r\n",
                    "styleUrl": "formly-field.common.scss"
                }
            ],
            "stylesData": "",
            "extends": "FieldType",
            "templateData": "<label class=\"checkbox\" [ngClass]=\"to.mod\">\r\n\t<input class=\"checkbox-input\" type=\"checkbox\" [name]=\"to.name\" [id]=\"id\" [formControl]=\"formControl\" [formlyAttributes]=\"field\">\r\n\t<span class=\"checkbox-label\">{{to.label}}</span>\r\n</label>\r\n"
        },
        {
            "name": "LuFormlyFieldDate",
            "id": "component-LuFormlyFieldDate-5cc0bacb9e0822e9c8031009cae2bd9e",
            "file": "packages/ng/libraries/formly/src/lib/types/date.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-formly-field-date",
            "styleUrls": [
                "formly-field.common.scss",
                "select.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "blur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { FieldType } from '@ngx-formly/core';\r\n\r\n@Component({\r\n\tselector: 'lu-formly-field-date',\r\n\tstyleUrls: ['formly-field.common.scss', 'select.scss'],\r\n\ttemplateUrl: './date.html',\r\n\t// changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyFieldDate extends FieldType {\r\n\treadonly formControl: FormControl;\r\n\tfocus() {\r\n\t\tthis.to._isFocused = true;\r\n\t}\r\n\tblur() {\r\n\t\tthis.to._isFocused = false;\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n\twidth: 100%;\r\n\tdisplay: inherit;\r\n\talign-items: inherit;\r\n\tflex-direction: inherit;\r\n}\r\n",
                    "styleUrl": "formly-field.common.scss"
                },
                {
                    "data": ":host-context(.mod-framed) {\r\n\tlu-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-api-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-user-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-date-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-department-select {\r\n\t\tdisplay: block;\r\n\t}\r\n}\r\n",
                    "styleUrl": "select.scss"
                }
            ],
            "stylesData": "",
            "extends": "FieldType",
            "templateData": "<lu-date-select class=\"textfield-input\" [formControl]=\"formControl\" [formlyAttributes]=\"field\" \r\n\t(focus)=\"focus()\" (blur)=\"blur()\" [placeholder]=\"to.placeholder\"  [min]=\"to.min\" [max]=\"to.max\"></lu-date-select>\r\n<span class=\"textfield-label\">{{ to.label }}</span>\r\n"
        },
        {
            "name": "LuFormlyFieldDepartment",
            "id": "component-LuFormlyFieldDepartment-1606be29cb2149e9ae6ed248a445c34b",
            "file": "packages/ng/libraries/formly/src/lib/types/department.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-formly-field-department",
            "styleUrls": [
                "formly-field.common.scss",
                "select.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./department.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "blur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { FieldType } from '@ngx-formly/core';\r\n\r\n@Component({\r\n\tselector: 'lu-formly-field-department',\r\n\tstyleUrls: ['formly-field.common.scss', 'select.scss'],\r\n\ttemplateUrl: './department.html',\r\n\t// changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyFieldDepartment extends FieldType {\r\n\treadonly formControl: FormControl;\r\n\tfocus() {\r\n\t\tthis.to._isFocused = true;\r\n\t}\r\n\tblur() {\r\n\t\tthis.to._isFocused = false;\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n\twidth: 100%;\r\n\tdisplay: inherit;\r\n\talign-items: inherit;\r\n\tflex-direction: inherit;\r\n}\r\n",
                    "styleUrl": "formly-field.common.scss"
                },
                {
                    "data": ":host-context(.mod-framed) {\r\n\tlu-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-api-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-user-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-date-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-department-select {\r\n\t\tdisplay: block;\r\n\t}\r\n}\r\n",
                    "styleUrl": "select.scss"
                }
            ],
            "stylesData": "",
            "extends": "FieldType",
            "templateData": "<lu-department-select class=\"textfield-input\" [formControl]=\"formControl\" [formlyAttributes]=\"field\" [multiple]=\"to.multiple\"\r\n (focus)=\"focus()\" (blur)=\"blur()\" [placeholder]=\"to.placeholder\">\r\n</lu-department-select>\r\n<span class=\"textfield-label\">{{ to.label }}</span>\r\n"
        },
        {
            "name": "LuFormlyFieldEstablishment",
            "id": "component-LuFormlyFieldEstablishment-964d22d7a57c6e1bd37c890a3601b8f0",
            "file": "packages/ng/libraries/formly/src/lib/types/establishment.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-formly-field-establishment",
            "styleUrls": [
                "formly-field.common.scss",
                "select.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./establishment.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "blur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { FieldType } from '@ngx-formly/core';\r\n\r\n@Component({\r\n\tselector: 'lu-formly-field-establishment',\r\n\tstyleUrls: ['formly-field.common.scss', 'select.scss'],\r\n\ttemplateUrl: './establishment.html'\r\n})\r\nexport class LuFormlyFieldEstablishment extends FieldType {\r\n\treadonly formControl: FormControl;\r\n\tfocus() {\r\n\t\tthis.to._isFocused = true;\r\n\t}\r\n\tblur() {\r\n\t\tthis.to._isFocused = false;\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n\twidth: 100%;\r\n\tdisplay: inherit;\r\n\talign-items: inherit;\r\n\tflex-direction: inherit;\r\n}\r\n",
                    "styleUrl": "formly-field.common.scss"
                },
                {
                    "data": ":host-context(.mod-framed) {\r\n\tlu-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-api-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-user-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-date-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-department-select {\r\n\t\tdisplay: block;\r\n\t}\r\n}\r\n",
                    "styleUrl": "select.scss"
                }
            ],
            "stylesData": "",
            "extends": "FieldType",
            "templateData": "<lu-establishment-select\r\n\tclass=\"textfield-input\"\r\n\t[formControl]=\"formControl\"\r\n\t[formlyAttributes]=\"field\"\r\n\t[multiple]=\"to.multiple\"\r\n\t(focus)=\"focus()\"\r\n\t(blur)=\"blur()\"\r\n\t[placeholder]=\"to.placeholder\"\r\n\t[filters]=\"to.filters\"\r\n\t[appInstanceId]=\"to.appInstanceId\"\r\n\t[operations]=\"to.operations\"\r\n>\r\n</lu-establishment-select>\r\n<span class=\"textfield-label\">{{ to.label }}</span>\r\n\r\n"
        },
        {
            "name": "LuFormlyFieldInput",
            "id": "component-LuFormlyFieldInput-95ac7271910b7061a8df8ce96dfd3814",
            "file": "packages/ng/libraries/formly/src/lib/types/input.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-formly-field-input",
            "styleUrls": [
                "formly-field.common.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "blur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { FieldType } from '@ngx-formly/core';\r\n@Component({\r\n\tselector: 'lu-formly-field-input',\r\n\tstyleUrls: ['formly-field.common.scss'],\r\n\ttemplateUrl: './input.html',\r\n\t// changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyFieldInput extends FieldType {\r\n\tget type() {\r\n\t\treturn this.to.type || 'text';\r\n\t}\r\n\treadonly formControl: FormControl;\r\n\tfocus() {\r\n\t\tthis.to._isFocused = true;\r\n\t}\r\n\tblur() {\r\n\t\tthis.to._isFocused = false;\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n\twidth: 100%;\r\n\tdisplay: inherit;\r\n\talign-items: inherit;\r\n\tflex-direction: inherit;\r\n}\r\n",
                    "styleUrl": "formly-field.common.scss"
                }
            ],
            "stylesData": "",
            "extends": "FieldType",
            "accessors": {
                "type": {
                    "name": "type",
                    "getSignature": {
                        "name": "type",
                        "type": "",
                        "returnType": "",
                        "line": 11
                    }
                }
            },
            "templateData": "<ng-template [ngIf]=\"type !== 'number'\" [ngIfElse]=\"numberInput\">\r\n    <input [type]=\"type\" class=\"textfield-input\" [name]=\"to.name\" [formControl]=\"formControl\" [formlyAttributes]=\"field\" luInput (focus)=\"focus()\" (blur)=\"blur()\" [placeholder]=\"to.placeholder\">\r\n</ng-template>\r\n<!-- type=\"number\" has to be static in order to have NumberValueAccessor instead of DefaultValueAccessor -->\r\n<ng-template #numberInput>\r\n    <input type=\"number\" class=\"textfield-input\" [name]=\"to.name\" [formControl]=\"formControl\" [formlyAttributes]=\"field\" luInput (focus)=\"focus()\" (blur)=\"blur()\" [placeholder]=\"to.placeholder\">\r\n</ng-template>\r\n<span class=\"textfield-label\">{{ to.label }}</span>\r\n"
        },
        {
            "name": "LuFormlyFieldRadios",
            "id": "component-LuFormlyFieldRadios-6b1ec4dd0e824274a6cde7de7684a6cb",
            "file": "packages/ng/libraries/formly/src/lib/types/radios.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-formly-field-radios",
            "styleUrls": [
                "formly-field.common.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radios.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "blur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { FieldType } from '@ngx-formly/core';\r\n\r\n@Component({\r\n\tselector: 'lu-formly-field-radios',\r\n\tstyleUrls: ['formly-field.common.scss'],\r\n\ttemplateUrl: './radios.html',\r\n\t// changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyFieldRadios extends FieldType {\r\n\tget _options() {\r\n\t\treturn <any[]>this.to.options || [];\r\n\t}\r\n\treadonly formControl: FormControl;\r\n\tfocus() {\r\n\t\tthis.to._isFocused = true;\r\n\t}\r\n\tblur() {\r\n\t\tthis.to._isFocused = false;\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n\twidth: 100%;\r\n\tdisplay: inherit;\r\n\talign-items: inherit;\r\n\tflex-direction: inherit;\r\n}\r\n",
                    "styleUrl": "formly-field.common.scss"
                }
            ],
            "stylesData": "",
            "extends": "FieldType",
            "accessors": {
                "_options": {
                    "name": "_options",
                    "getSignature": {
                        "name": "_options",
                        "type": "",
                        "returnType": "",
                        "line": 12
                    }
                }
            },
            "templateData": "<legend class=\"radiosfield-label\">{{to.label}}</legend>\r\n<div class=\"radiosfield-input\">\r\n\t<label *ngFor=\"let option of _options, let i = index\" class=\"radio\">\r\n\t\t<input class=\"radio-input\" type=\"radio\" [name]=\"to.name\" [value]=\"option.value\" [id]=\"id + '_'+ i\" [formControl]=\"formControl\" [formlyAttributes]=\"field\">\r\n\t\t<span class=\"radio-label\">{{option.label}}</span>\r\n\t</label>\r\n</div>\r\n"
        },
        {
            "name": "LuFormlyFieldSelect",
            "id": "component-LuFormlyFieldSelect-462a71539fb3444cba11080ceaee313e",
            "file": "packages/ng/libraries/formly/src/lib/types/select.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-formly-field-select",
            "styleUrls": [
                "formly-field.common.scss",
                "select.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "blur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { FieldType } from '@ngx-formly/core';\r\n\r\n@Component({\r\n\tselector: 'lu-formly-field-select',\r\n\tstyleUrls: ['formly-field.common.scss', 'select.scss'],\r\n\ttemplateUrl: './select.html',\r\n\t// changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyFieldSelect extends FieldType {\r\n\tget _options() {\r\n\t\treturn <any[]>this.to.options || [];\r\n\t}\r\n\treadonly formControl: FormControl;\r\n\tfocus() {\r\n\t\tthis.to._isFocused = true;\r\n\t}\r\n\tblur() {\r\n\t\tthis.to._isFocused = false;\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n\twidth: 100%;\r\n\tdisplay: inherit;\r\n\talign-items: inherit;\r\n\tflex-direction: inherit;\r\n}\r\n",
                    "styleUrl": "formly-field.common.scss"
                },
                {
                    "data": ":host-context(.mod-framed) {\r\n\tlu-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-api-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-user-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-date-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-department-select {\r\n\t\tdisplay: block;\r\n\t}\r\n}\r\n",
                    "styleUrl": "select.scss"
                }
            ],
            "stylesData": "",
            "extends": "FieldType",
            "accessors": {
                "_options": {
                    "name": "_options",
                    "getSignature": {
                        "name": "_options",
                        "type": "",
                        "returnType": "",
                        "line": 12
                    }
                }
            },
            "templateData": "<lu-select class=\"textfield-input\" [formControl]=\"formControl\" [formlyAttributes]=\"field\" (focus)=\"focus()\" (blur)=\"blur()\" [multiple]=\"to.multiple\" [placeholder]=\"to.placeholder\">\r\n\t<ng-container *luDisplayer=\"let option\">\r\n\t\t<span [class.chip]=\"to.multiple\" [class.mod-unkillable]=\"to.multiple\">{{ option.name }}</span>\r\n\t</ng-container>\r\n\t<lu-option-picker>\r\n\t\t<lu-option *ngFor=\"let option of _options\" [value]=\"option\">\r\n\t\t\t{{ option.name }}\r\n\t\t</lu-option>\r\n\t</lu-option-picker>\r\n\t<lu-input-clearer *ngIf=\"!to.required && !to.multiple\"></lu-input-clearer>\r\n</lu-select>\r\n<span class=\"textfield-label\">{{ to.label }}</span>\r\n"
        },
        {
            "name": "LuFormlyFieldTextarea",
            "id": "component-LuFormlyFieldTextarea-37bbe59f8d53d8634b2998e40ae7742e",
            "file": "packages/ng/libraries/formly/src/lib/types/textarea.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-formly-field-input",
            "styleUrls": [
                "formly-field.common.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./textarea.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "blur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { FieldType } from '@ngx-formly/core';\r\n\r\n@Component({\r\n\tselector: 'lu-formly-field-input',\r\n\tstyleUrls: ['formly-field.common.scss'],\r\n\ttemplateUrl: './textarea.html',\r\n\t// changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyFieldTextarea extends FieldType {\r\n\treadonly formControl: FormControl;\r\n\tfocus() {\r\n\t\tthis.to._isFocused = true;\r\n\t}\r\n\tblur() {\r\n\t\tthis.to._isFocused = false;\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n\twidth: 100%;\r\n\tdisplay: inherit;\r\n\talign-items: inherit;\r\n\tflex-direction: inherit;\r\n}\r\n",
                    "styleUrl": "formly-field.common.scss"
                }
            ],
            "stylesData": "",
            "extends": "FieldType",
            "templateData": "<textarea class=\"textfield-input\" [name]=\"to.name\" [formControl]=\"formControl\" [formlyAttributes]=\"field\" luInput (focus)=\"focus()\" (blur)=\"blur()\" [placeholder]=\"to.placeholder\"></textarea>\r\n<span class=\"textfield-label\">{{ to.label }}</span>\r\n"
        },
        {
            "name": "LuFormlyFieldUser",
            "id": "component-LuFormlyFieldUser-8cd8e34c6901d382bed30d325dce7a65",
            "file": "packages/ng/libraries/formly/src/lib/types/user.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-formly-field-user",
            "styleUrls": [
                "formly-field.common.scss",
                "select.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "blur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { FieldType } from '@ngx-formly/core';\r\n\r\n@Component({\r\n\tselector: 'lu-formly-field-user',\r\n\tstyleUrls: ['formly-field.common.scss', 'select.scss'],\r\n\ttemplateUrl: './user.html',\r\n\t// changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyFieldUser extends FieldType {\r\n\treadonly formControl: FormControl;\r\n\r\n\tfocus() {\r\n\t\tthis.to._isFocused = true;\r\n\t}\r\n\tblur() {\r\n\t\tthis.to._isFocused = false;\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n\twidth: 100%;\r\n\tdisplay: inherit;\r\n\talign-items: inherit;\r\n\tflex-direction: inherit;\r\n}\r\n",
                    "styleUrl": "formly-field.common.scss"
                },
                {
                    "data": ":host-context(.mod-framed) {\r\n\tlu-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-api-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-user-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-date-select {\r\n\t\tdisplay: block;\r\n\t}\r\n\tlu-department-select {\r\n\t\tdisplay: block;\r\n\t}\r\n}\r\n",
                    "styleUrl": "select.scss"
                }
            ],
            "stylesData": "",
            "extends": "FieldType",
            "templateData": "<lu-user-select class=\"textfield-input\" [formControl]=\"formControl\" [formlyAttributes]=\"field\" [multiple]=\"to.multiple\" (focus)=\"focus()\" (blur)=\"blur()\" [placeholder]=\"to.placeholder\">\r\n</lu-user-select>\r\n<span class=\"textfield-label\">{{ to.label }}</span>\r\n"
        },
        {
            "name": "LuFormlyWrapperCheckboxLayout",
            "id": "component-LuFormlyWrapperCheckboxLayout-db2bb844aad55dff40fa4180709c8d06",
            "file": "packages/ng/libraries/formly/src/lib/wrappers/checkbox-layout.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-formly-wrapper-checkbox-layout",
            "styleUrls": [
                "flex-layout.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox-layout.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fieldComponent",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fieldComponent', {read: ViewContainerRef, static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport {\r\n\tFieldWrapper\r\n} from '@ngx-formly/core';\r\n\r\n// wrapper component\r\n@Component({\r\n\tselector: 'lu-formly-wrapper-checkbox-layout',\r\n\tstyleUrls: ['flex-layout.scss'],\r\n\ttemplateUrl: './checkbox-layout.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyWrapperCheckboxLayout extends FieldWrapper {\r\n\t@ViewChild('fieldComponent', { read: ViewContainerRef, static: true })\r\n\tfieldComponent: ViewContainerRef;\r\n\r\n\tget mod() {\r\n\t\treturn this.to.mod || '';\r\n\t}\r\n\r\n\tget isRequired() {\r\n\t\treturn !!this.to && !!this.to.required ? 'is-required' : '';\r\n\t}\r\n\r\n\tget isFocused() {\r\n\t\treturn !!this.to && this.to._isFocused ? 'is-focused' : '';\r\n\t}\r\n\r\n\tget isError() {\r\n\t\treturn this.formControl.invalid && this.formControl.touched\r\n\t\t\t? 'is-error'\r\n\t\t\t: '';\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n\tdisplay: inherit;\r\n\tflex-direction: inherit;\r\n\tflex: 1 1 auto;\r\n\twidth: 100%;\r\n}\r\n",
                    "styleUrl": "flex-layout.scss"
                }
            ],
            "stylesData": "",
            "extends": "FieldWrapper",
            "accessors": {
                "mod": {
                    "name": "mod",
                    "getSignature": {
                        "name": "mod",
                        "type": "",
                        "returnType": "",
                        "line": 17
                    }
                },
                "isRequired": {
                    "name": "isRequired",
                    "getSignature": {
                        "name": "isRequired",
                        "type": "",
                        "returnType": "",
                        "line": 21
                    }
                },
                "isFocused": {
                    "name": "isFocused",
                    "getSignature": {
                        "name": "isFocused",
                        "type": "",
                        "returnType": "",
                        "line": 25
                    }
                },
                "isError": {
                    "name": "isError",
                    "getSignature": {
                        "name": "isError",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                }
            },
            "templateData": "<div class=\"fieldsetWrapper\">\r\n\t<fieldset class=\"checkboxesfield\" [ngClass]=\"[mod, isRequired, isFocused, isError]\">\r\n\t\t<ng-container #fieldComponent></ng-container>\r\n\t</fieldset>\r\n</div>\r\n"
        },
        {
            "name": "LuFormlyWrapperError",
            "id": "component-LuFormlyWrapperError-84af02ffe33d6ca432510a2b4de39471",
            "file": "packages/ng/libraries/formly/src/lib/wrappers/error.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-formly-wrapper-error",
            "styleUrls": [
                "flex-layout.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./error.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fieldComponent",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fieldComponent', {read: ViewContainerRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "formControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild, ViewContainerRef, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport {\r\n\tFormlyFieldConfig,\r\n\tFieldWrapper,\r\n\tFormlyConfig,\r\n} from '@ngx-formly/core';\r\n\r\n// wrapper\r\n@Component({\r\n\tselector: 'lu-formly-wrapper-error',\r\n\tstyleUrls: ['flex-layout.scss'],\r\n\ttemplateUrl: './error.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyWrapperError extends FieldWrapper {\r\n\t@ViewChild('fieldComponent', { read: ViewContainerRef, static: true })\r\n\tfieldComponent: ViewContainerRef;\r\n\r\n\treadonly formControl: FormControl;\r\n\r\n\tget validationId() {\r\n\t\treturn this.field.id + '-message';\r\n\t}\r\n}\r\n\r\n// component that display the right error message\r\n@Component({\r\n\tselector: 'lu-formly-error-message',\r\n\ttemplate: `<div class=\"textfield-messages-error\" *ngFor=\"let message of errorMessages\">{{ message }}</div>`,\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyErrorMessage {\r\n\t@Input() fieldForm: FormControl;\r\n\t@Input() field: FormlyFieldConfig;\r\n\r\n\tconstructor() {}\r\n\r\n\tget errorMessages(): string[] {\r\n\t\tconst messages = [];\r\n\t\tif (!!this.fieldForm.errors) {\r\n\t\t\tObject.keys(this.fieldForm.errors).forEach(key => {\r\n\t\t\t\tif (\r\n\t\t\t\t\tthis.field.validation &&\r\n\t\t\t\t\tthis.field.validation.messages &&\r\n\t\t\t\t\tthis.field.validation.messages[key]\r\n\t\t\t\t) {\r\n\t\t\t\t\tmessages.push(this.field.validation.messages[key]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn messages;\r\n\t}\r\n}\r\n\r\n// run to know when to add said wrapper\r\nexport class TemplateError {\r\n\trun(fc: FormlyConfig) {\r\n\t\tfc.templateManipulators.postWrapper.push((field: FormlyFieldConfig) => {\r\n\t\t\tif (field && field.validation) {\r\n\t\t\t\treturn 'error';\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n\tdisplay: inherit;\r\n\tflex-direction: inherit;\r\n\tflex: 1 1 auto;\r\n\twidth: 100%;\r\n}\r\n",
                    "styleUrl": "flex-layout.scss"
                }
            ],
            "stylesData": "",
            "extends": "FieldWrapper",
            "accessors": {
                "validationId": {
                    "name": "validationId",
                    "getSignature": {
                        "name": "validationId",
                        "type": "",
                        "returnType": "",
                        "line": 22
                    }
                }
            },
            "templateData": "<ng-container #fieldComponent></ng-container>\r\n<div class=\"textfield-messages\" *ngIf=\"formControl.touched && formControl.invalid\" [id]=\"validationId\">\r\n\t<lu-formly-error-message [fieldForm]=\"formControl\" [field]=\"field\"></lu-formly-error-message>\r\n</div>\r\n"
        },
        {
            "name": "LuFormlyWrapperHelper",
            "id": "component-LuFormlyWrapperHelper-965bf17906f729cb5917e7ae98cd8162",
            "file": "packages/ng/libraries/formly/src/lib/wrappers/helper.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-formly-wrapper-helper",
            "styleUrls": [
                "flex-layout.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./helper.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fieldComponent",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fieldComponent', {read: ViewContainerRef, static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport {\r\n\tFieldWrapper,\r\n\tFormlyFieldConfig,\r\n\tFormlyConfig,\r\n\tFieldType,\r\n} from '@ngx-formly/core';\r\n\r\n// wrapper component\r\n@Component({\r\n\tselector: 'lu-formly-wrapper-helper',\r\n\tstyleUrls: ['flex-layout.scss'],\r\n\ttemplateUrl: './helper.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyWrapperHelper extends FieldWrapper {\r\n\t@ViewChild('fieldComponent', { read: ViewContainerRef, static: true })\r\n\tfieldComponent: ViewContainerRef;\r\n}\r\n// run to know when to add said wrapper\r\nexport class TemplateHelper {\r\n\trun(fc: FormlyConfig) {\r\n\t\tfc.templateManipulators.postWrapper.push((field: FormlyFieldConfig) => {\r\n\t\t\tif (field && field.templateOptions && field.templateOptions.helper) {\r\n\t\t\t\treturn 'helper';\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n\tdisplay: inherit;\r\n\tflex-direction: inherit;\r\n\tflex: 1 1 auto;\r\n\twidth: 100%;\r\n}\r\n",
                    "styleUrl": "flex-layout.scss"
                }
            ],
            "stylesData": "",
            "extends": "FieldWrapper",
            "templateData": "<ng-container #fieldComponent></ng-container>\r\n<div class=\"textfield-messages mod-helper\">\r\n\t<div class=\"textfield-messages-helper\">{{ to.helper }}</div>\r\n</div>\r\n"
        },
        {
            "name": "LuFormlyWrapperIcon",
            "id": "component-LuFormlyWrapperIcon-267f00eedd10c7f3b3551ef22a5a97bc",
            "file": "packages/ng/libraries/formly/src/lib/wrappers/icon.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-formly-wrapper-suffix",
            "styleUrls": [
                "flex-layout.scss",
                "suffixes.common.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fieldComponent",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fieldComponent', {read: ViewContainerRef, static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport {\r\n\tFieldWrapper,\r\n\tFormlyFieldConfig,\r\n\tFormlyConfig,\r\n\tFieldType,\r\n} from '@ngx-formly/core';\r\n\r\n// wrapper component\r\n@Component({\r\n\tselector: 'lu-formly-wrapper-suffix',\r\n\tstyleUrls: ['flex-layout.scss', 'suffixes.common.scss'],\r\n\ttemplateUrl: './icon.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyWrapperIcon extends FieldWrapper {\r\n\t@ViewChild('fieldComponent', { read: ViewContainerRef, static: true })\r\n\tfieldComponent: ViewContainerRef;\r\n}\r\n// run to know when to add said wrapper\r\nexport class TemplateIcon {\r\n\trun(fc: FormlyConfig) {\r\n\t\tfc.templateManipulators.postWrapper.push((field: FormlyFieldConfig) => {\r\n\t\t\t// if (field && field.type === 'date') {\r\n\t\t\t// \tfield.templateOptions.icon = 'calendar';\r\n\t\t\t// \treturn 'icon';\r\n\t\t\t// }\r\n\t\t\t// if (field && field.type === 'api') {\r\n\t\t\t// \tfield.templateOptions.icon = 'search';\r\n\t\t\t// \treturn 'icon';\r\n\t\t\t// }\r\n\t\t\tif (field && field.templateOptions && field.templateOptions.icon) {\r\n\t\t\t\treturn 'icon';\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n\tdisplay: inherit;\r\n\tflex-direction: inherit;\r\n\tflex: 1 1 auto;\r\n\twidth: 100%;\r\n}\r\n",
                    "styleUrl": "flex-layout.scss"
                },
                {
                    "data": ":host {\r\n\t.textfield-suffix {\r\n\t\tpointer-events: none;\r\n\t}\r\n}\r\n",
                    "styleUrl": "suffixes.common.scss"
                }
            ],
            "stylesData": "",
            "extends": "FieldWrapper",
            "templateData": "<ng-container #fieldComponent></ng-container>\r\n<span aria-hidden=\"true\" class=\"textfield-suffix mod-icon lucca-icon\">{{ to.icon }}</span>\r\n"
        },
        {
            "name": "LuFormlyWrapperRadiosfieldLayout",
            "id": "component-LuFormlyWrapperRadiosfieldLayout-4127ae2f976ea3c4d042d8d08dc8e110",
            "file": "packages/ng/libraries/formly/src/lib/wrappers/radiosfield-layout.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-formly-wrapper-radiosfield-layout",
            "styleUrls": [
                "flex-layout.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radiosfield-layout.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fieldComponent",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fieldComponent', {read: ViewContainerRef, static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport {\r\n\tFieldWrapper\r\n} from '@ngx-formly/core';\r\n\r\n// wrapper component\r\n@Component({\r\n\tselector: 'lu-formly-wrapper-radiosfield-layout',\r\n\tstyleUrls: ['flex-layout.scss'],\r\n\ttemplateUrl: './radiosfield-layout.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyWrapperRadiosfieldLayout extends FieldWrapper {\r\n\t@ViewChild('fieldComponent', { read: ViewContainerRef, static: true })\r\n\tfieldComponent: ViewContainerRef;\r\n\r\n\tget mod() {\r\n\t\treturn this.to.mod || '';\r\n\t}\r\n\r\n\tget isRequired() {\r\n\t\treturn !!this.to && !!this.to.required ? 'is-required' : '';\r\n\t}\r\n\r\n\tget isFocused() {\r\n\t\treturn !!this.to && this.to._isFocused ? 'is-focused' : '';\r\n\t}\r\n\r\n\tget isError() {\r\n\t\treturn this.formControl.invalid && this.formControl.touched\r\n\t\t\t? 'is-error'\r\n\t\t\t: '';\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n\tdisplay: inherit;\r\n\tflex-direction: inherit;\r\n\tflex: 1 1 auto;\r\n\twidth: 100%;\r\n}\r\n",
                    "styleUrl": "flex-layout.scss"
                }
            ],
            "stylesData": "",
            "extends": "FieldWrapper",
            "accessors": {
                "mod": {
                    "name": "mod",
                    "getSignature": {
                        "name": "mod",
                        "type": "",
                        "returnType": "",
                        "line": 17
                    }
                },
                "isRequired": {
                    "name": "isRequired",
                    "getSignature": {
                        "name": "isRequired",
                        "type": "",
                        "returnType": "",
                        "line": 21
                    }
                },
                "isFocused": {
                    "name": "isFocused",
                    "getSignature": {
                        "name": "isFocused",
                        "type": "",
                        "returnType": "",
                        "line": 25
                    }
                },
                "isError": {
                    "name": "isError",
                    "getSignature": {
                        "name": "isError",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                }
            },
            "templateData": "<div class=\"fieldsetWrapper\">\r\n\t<fieldset class=\"radiosfield\" [ngClass]=\"[mod, isRequired, isFocused, isError]\">\r\n\t\t<ng-container #fieldComponent></ng-container>\r\n\t</fieldset>\r\n</div>\r\n"
        },
        {
            "name": "LuFormlyWrapperSuffix",
            "id": "component-LuFormlyWrapperSuffix-c34e987077dfe5fa616730cbf4c28c51",
            "file": "packages/ng/libraries/formly/src/lib/wrappers/suffix.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-formly-wrapper-suffix",
            "styleUrls": [
                "flex-layout.scss",
                "suffixes.common.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./suffix.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fieldComponent",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fieldComponent', {read: ViewContainerRef, static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport {\r\n\tFieldWrapper,\r\n\tFormlyFieldConfig,\r\n\tFormlyConfig,\r\n\tFieldType,\r\n} from '@ngx-formly/core';\r\n\r\n// wrapper component\r\n@Component({\r\n\tselector: 'lu-formly-wrapper-suffix',\r\n\tstyleUrls: ['flex-layout.scss', 'suffixes.common.scss'],\r\n\ttemplateUrl: './suffix.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyWrapperSuffix extends FieldWrapper {\r\n\t@ViewChild('fieldComponent', { read: ViewContainerRef, static: true })\r\n\tfieldComponent: ViewContainerRef;\r\n}\r\n// run to know when to add said wrapper\r\nexport class TemplateSuffix {\r\n\trun(fc: FormlyConfig) {\r\n\t\tfc.templateManipulators.postWrapper.push((field: FormlyFieldConfig) => {\r\n\t\t\tif (\r\n\t\t\t\tfield &&\r\n\t\t\t\tfield.templateOptions &&\r\n\t\t\t\tfield.templateOptions.suffix &&\r\n\t\t\t\t!field.templateOptions.icon\r\n\t\t\t) {\r\n\t\t\t\treturn 'suffix';\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n\tdisplay: inherit;\r\n\tflex-direction: inherit;\r\n\tflex: 1 1 auto;\r\n\twidth: 100%;\r\n}\r\n",
                    "styleUrl": "flex-layout.scss"
                },
                {
                    "data": ":host {\r\n\t.textfield-suffix {\r\n\t\tpointer-events: none;\r\n\t}\r\n}\r\n",
                    "styleUrl": "suffixes.common.scss"
                }
            ],
            "stylesData": "",
            "extends": "FieldWrapper",
            "templateData": "<ng-container #fieldComponent></ng-container>\r\n<span class=\"textfield-suffix\">{{ to.suffix }}</span>\r\n"
        },
        {
            "name": "LuFormlyWrapperTextfieldLayout",
            "id": "component-LuFormlyWrapperTextfieldLayout-27674b76e8b5c84d5d5df791a78f7a3a",
            "file": "packages/ng/libraries/formly/src/lib/wrappers/textfield-layout.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-formly-wrapper-layout",
            "styleUrls": [
                "flex-layout.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./textfield-layout.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fieldComponent",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fieldComponent', {read: ViewContainerRef, static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport {\r\n\tFieldWrapper,\r\n\tFormlyFieldConfig,\r\n\tFormlyConfig,\r\n\tFieldType,\r\n} from '@ngx-formly/core';\r\n\r\n// wrapper component\r\n@Component({\r\n\tselector: 'lu-formly-wrapper-layout',\r\n\tstyleUrls: ['flex-layout.scss'],\r\n\ttemplateUrl: './textfield-layout.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuFormlyWrapperTextfieldLayout extends FieldWrapper {\r\n\t@ViewChild('fieldComponent', { read: ViewContainerRef, static: true })\r\n\tfieldComponent: ViewContainerRef;\r\n\r\n\tget mod() {\r\n\t\treturn this.to.mod || '';\r\n\t}\r\n\r\n\tget modMultiline() {\r\n\t\treturn !!this.field && this.field.type === 'textarea'\r\n\t\t\t? 'mod-multiline'\r\n\t\t\t: '';\r\n\t}\r\n\r\n\tget modWithSuffix() {\r\n\t\treturn !!this.to && !!this.to.suffix ? 'mod-withSuffix' : '';\r\n\t}\r\n\r\n\tget isRequired() {\r\n\t\treturn !!this.to && !!this.to.required ? 'is-required' : '';\r\n\t}\r\n\r\n\tget isDisabled() {\r\n\t\treturn !!this.to && !!this.to.disabled ? 'is-disabled' : '';\r\n\t}\r\n\r\n\tget isFocused() {\r\n\t\treturn !!this.to && this.to._isFocused ? 'is-focused' : '';\r\n\t}\r\n\r\n\tget isError() {\r\n\t\treturn this.formControl.invalid && this.formControl.touched\r\n\t\t\t? 'is-error'\r\n\t\t\t: '';\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n\tdisplay: inherit;\r\n\tflex-direction: inherit;\r\n\tflex: 1 1 auto;\r\n\twidth: 100%;\r\n}\r\n",
                    "styleUrl": "flex-layout.scss"
                }
            ],
            "stylesData": "",
            "extends": "FieldWrapper",
            "accessors": {
                "mod": {
                    "name": "mod",
                    "getSignature": {
                        "name": "mod",
                        "type": "",
                        "returnType": "",
                        "line": 20
                    }
                },
                "modMultiline": {
                    "name": "modMultiline",
                    "getSignature": {
                        "name": "modMultiline",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                },
                "modWithSuffix": {
                    "name": "modWithSuffix",
                    "getSignature": {
                        "name": "modWithSuffix",
                        "type": "",
                        "returnType": "",
                        "line": 30
                    }
                },
                "isRequired": {
                    "name": "isRequired",
                    "getSignature": {
                        "name": "isRequired",
                        "type": "",
                        "returnType": "",
                        "line": 34
                    }
                },
                "isDisabled": {
                    "name": "isDisabled",
                    "getSignature": {
                        "name": "isDisabled",
                        "type": "",
                        "returnType": "",
                        "line": 38
                    }
                },
                "isFocused": {
                    "name": "isFocused",
                    "getSignature": {
                        "name": "isFocused",
                        "type": "",
                        "returnType": "",
                        "line": 42
                    }
                },
                "isError": {
                    "name": "isError",
                    "getSignature": {
                        "name": "isError",
                        "type": "",
                        "returnType": "",
                        "line": 46
                    }
                }
            },
            "templateData": "<label class=\"textfield\" [ngClass]=\"[mod, modWithSuffix, modMultiline, isRequired, isFocused, isError, isDisabled]\">\r\n\t<ng-container #fieldComponent></ng-container>\r\n</label>\r\n"
        },
        {
            "name": "LuInputClearerComponent",
            "id": "component-LuInputClearerComponent-c3be9efb52ff77b4112e9f84dd0dd3f3",
            "file": "packages/ng/libraries/input/src/lib/clearer/clearer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "luClearer",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuClearer, useExisting: forwardRef(() => LuInputClearerComponent),\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-input-clearer",
            "styleUrls": [
                "./clearer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clearer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onClear",
                    "defaultValue": "new EventEmitter<T>()",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "onClear",
                    "type": "Observable<T>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "ALuClearer"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Displays user&#39;picture or a placeholder with his/her initials and random bg color&#39;</p>\n",
            "rawdescription": "Displays user'picture or a placeholder with his/her initials and random bg color'",
            "type": "component",
            "sourceCode": "import {\r\n\tChangeDetectionStrategy,\r\n\tComponent,\r\n\tOutput,\r\n\tforwardRef,\r\n\tEventEmitter,\r\n} from '@angular/core';\r\nimport { ALuClearer, ILuClearer } from './clearer.model';\r\n\r\n/**\r\n* Displays user'picture or a placeholder with his/her initials and random bg color'\r\n*/\r\n@Component({\r\n\tselector: 'lu-input-clearer',\r\n\ttemplateUrl: './clearer.component.html',\r\n\tstyleUrls: ['./clearer.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\texportAs: 'luClearer',\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuClearer,\r\n\t\t\tuseExisting: forwardRef(() => LuInputClearerComponent),\r\n\t\t},\r\n\t]\r\n})\r\nexport class LuInputClearerComponent<T = any> extends ALuClearer<T>implements ILuClearer<T> {\r\n\t@Output() onClear = new EventEmitter<T>();\r\n\tonClick($event: Event) {\r\n\t\tthis.onClear.emit(undefined);\r\n\t\t$event.stopPropagation();\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '_definitions';\r\n@include selectClearerStyle;\r\n",
                    "styleUrl": "./clearer.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "ALuClearer",
            "implements": [
                "ILuClearer"
            ],
            "templateData": "<a role=\"button\" class=\"actionIcon\" (click)=\"onClick($event)\">\r\n\t<span aria-hidden=\"true\" class=\"lucca-icon\">thin_cross</span>\r\n\t<span class=\"u-mask\">Clear</span>\r\n</a>\r\n"
        },
        {
            "name": "LuModalPanelComponent",
            "id": "component-LuModalPanelComponent-e9a022d1acda8ad5cf2b604a88e779ac",
            "file": "packages/ng/libraries/modal/src/lib/modal-panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-modal-panel",
            "styleUrls": [
                "./modal-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ViewChild, ComponentRef, OnDestroy, ChangeDetectionStrategy, ChangeDetectorRef, Inject, Directive } from '@angular/core';\r\nimport { PortalOutlet, CdkPortalOutlet, Portal } from '@angular/cdk/portal';\r\nimport { ILuModalContent } from './modal.model';\r\nimport { ALuModalRef } from './modal-ref.model';\r\nimport { LuModalIntl } from './modal.intl';\r\nimport { ILuModalLabel } from './modal.translate';\r\nimport { Subject, timer, Observable, Subscription } from 'rxjs';\r\nimport { tap, delay } from 'rxjs/operators';\r\nimport { LU_MODAL_TRANSLATIONS } from './modal.token';\r\n\r\n@Directive()\r\nexport abstract class ALuModalPanelComponent<T extends ILuModalContent = ILuModalContent> implements PortalOutlet, OnDestroy {\r\n\t@ViewChild('outlet', { read: CdkPortalOutlet, static: true }) protected _outlet: PortalOutlet;\r\n\tprotected _componentInstance: T;\r\n\tget title() {\r\n\t\treturn this._componentInstance.title;\r\n\t}\r\n\tget submitLabel() {\r\n\t\treturn this._componentInstance.submitLabel || this.intl.submit;\r\n\t}\r\n\tget cancelLabel() {\r\n\t\treturn this._componentInstance.cancelLabel || this.intl.cancel;\r\n\t}\r\n\tget isSubmitDisabled() {\r\n\t\treturn this._componentInstance.submitDisabled;\r\n\t}\r\n\tget isSubmitHidden() {\r\n\t\treturn !this._componentInstance.submitAction;\r\n\t}\r\n\tget submitPalette() {\r\n\t\treturn this._componentInstance.submitPalette || 'primary';\r\n\t}\r\n\tget hasSubmitCounter() {\r\n\t\treturn !!this._componentInstance.submitCounter;\r\n\t}\r\n\tget submitCounter() {\r\n\t\treturn this._componentInstance.submitCounter || 0;\r\n\t}\r\n\t\r\n\tsubmitClass$ = new Subject();\r\n\terror$ = new Subject();\r\n\r\n\tprivate _subs = new Subscription();\r\n\r\n\tconstructor(\r\n\t\tprotected _ref: ALuModalRef<LuModalPanelComponent>,\r\n\t\tprotected _cdr: ChangeDetectorRef,\r\n\t\t@Inject(LU_MODAL_TRANSLATIONS) public intl: ILuModalLabel,\r\n\t) {}\r\n\tattach<U extends T = T>(portal: Portal<U>) {\r\n\t\tconst ref = this._outlet.attach(portal) as ComponentRef<U>;\r\n\t\tthis._componentInstance = ref.instance;\r\n\t\treturn ref;\r\n\t}\r\n\tdetach() {\r\n\t\treturn this._outlet.detach();\r\n\t}\r\n\tdispose() {\r\n\t\treturn this._outlet.dispose();\r\n\t}\r\n\thasAttached() {\r\n\t\treturn this._outlet.hasAttached();\r\n\t}\r\n\tngOnDestroy() {\r\n\t\tthis._subs.unsubscribe();\r\n\t\tthis.detach();\r\n\t\tthis.dispose();\r\n\t}\r\n\tdismiss() {\r\n\t\tthis._ref.dismiss();\r\n\t}\r\n\tsubmit() {\r\n\t\tthis.error$.next(undefined);\r\n\t\tthis.submitClass$.next('is-loading');\r\n\t\tconst result$ = this._componentInstance.submitAction();\r\n\t\tif (result$ instanceof Observable) {\r\n\t\t\tthis._subs.add(result$.pipe(\r\n\t\t\t\ttap(_ => this.submitClass$.next('is-success')),\r\n\t\t\t\ttap(() => this._cdr.markForCheck()),\r\n\t\t\t\tdelay(500),\r\n\t\t\t)\r\n\t\t\t.subscribe(result => {\r\n\t\t\t\tthis._ref.close(result);\r\n\t\t\t}, err => {\r\n\t\t\t\tthis.submitClass$.next('is-error');\r\n\t\t\t\tthis.error$.next(err);\r\n\t\t\t\tthis._cdr.markForCheck();\r\n\t\t\t\ttimer(2000).subscribe(_ => {\r\n\t\t\t\t\tthis.submitClass$.next('');\r\n\t\t\t\t\tthis._cdr.markForCheck();\r\n\t\t\t\t});\r\n\t\t\t}));\r\n\t\t} else {\r\n\t\t\tconst result = result$;\r\n\t\t\tthis._ref.close(result);\r\n\t\t}\r\n\r\n\t}\r\n}\r\n\r\n@Component({\r\n\tselector: 'lu-modal-panel',\r\n\ttemplateUrl: './modal-panel.component.html',\r\n\tstyleUrls: ['./modal-panel.component.scss'],\r\n\thost: {'class': 'lu-modal-panel'},\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuModalPanelComponent<T extends ILuModalContent = ILuModalContent> extends ALuModalPanelComponent<T> {\r\n\tconstructor(\r\n\t\t_ref: ALuModalRef<LuModalPanelComponent>,\r\n\t\t_cdr: ChangeDetectorRef,\r\n\t\t@Inject(LuModalIntl) intl: ILuModalLabel,\r\n\t) {\r\n\t\tsuper(_ref, _cdr, intl);\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'lu-modal-panel-default',\r\n\ttemplateUrl: './modal-panel.component.html',\r\n\tstyleUrls: ['./modal-panel.component.scss'],\r\n\thost: {'class': 'lu-modal-panel'},\r\n\tchangeDetection: ChangeDetectionStrategy.Default,\r\n})\r\nexport class LuModalPanelComponentDefaultCD<T extends ILuModalContent = ILuModalContent> extends ALuModalPanelComponent<T> {\r\n\tconstructor(\r\n\t\t_ref: ALuModalRef<LuModalPanelComponent>,\r\n\t\t_cdr: ChangeDetectorRef,\r\n\t\t@Inject(LuModalIntl) intl: ILuModalLabel,\r\n\t) {\r\n\t\tsuper(_ref, _cdr, intl);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./modal-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_ref",
                        "type": "ALuModalRef<LuModalPanelComponent>"
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "intl",
                        "type": "ILuModalLabel"
                    }
                ],
                "line": 108,
                "jsdoctags": [
                    {
                        "name": "_ref",
                        "type": "ALuModalRef<LuModalPanelComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "intl",
                        "type": "ILuModalLabel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuModalPanelComponent",
            "templateData": "<div class=\"lu-modal-panel-inner\" cdkTrapFocus=\"true\" cdkTrapFocusAutoCapture=\"true\" role=\"dialog\" aria-modal=\"true\">\r\n\t<div class=\"lu-modal-header\">\r\n\t\t<h3 class=\"lu-modal-header-title\">{{title}}</h3>\r\n\t\t<button class=\"lu-modal-header-close\" (click)=\"dismiss()\"><span aria-hidden=\"true\" class=\"lucca-icon\">cross</span><span class=\"u-mask\">Close</span></button>\r\n\t</div>\r\n\t<div class=\"lu-modal-content\">\r\n\t\t<ng-container cdkPortalOutlet #outlet></ng-container>\r\n\t</div>\r\n\t<div class=\"lu-modal-footer\">\r\n\t\t<button\r\n\t\t\t*ngIf=\"!isSubmitHidden\"\r\n\t\t\tclass=\"button palette-{{submitPalette}}\"\r\n\t\t\t[disabled]=\"isSubmitDisabled\"\r\n\t\t\t[class.mod-counter]=\"hasSubmitCounter\"\r\n\t\t\t[ngClass]=\"submitClass$ | async\"\r\n\t\t\t(click)=\"submit()\"\r\n\t\t>\r\n\t\t\t{{submitLabel}}\r\n\t\t\t<label class=\"button-counter\" *ngIf=\"hasSubmitCounter\">{{submitCounter}}</label>\r\n\t\t</button>\r\n\t\t<button class=\"button mod-link\" (click)=\"dismiss()\">{{cancelLabel}}</button>\r\n\t</div>\r\n</div>\r\n"
        },
        {
            "name": "LuModalPanelComponentDefaultCD",
            "id": "component-LuModalPanelComponentDefaultCD-e9a022d1acda8ad5cf2b604a88e779ac",
            "file": "packages/ng/libraries/modal/src/lib/modal-panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.Default",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-modal-panel-default",
            "styleUrls": [
                "./modal-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ViewChild, ComponentRef, OnDestroy, ChangeDetectionStrategy, ChangeDetectorRef, Inject, Directive } from '@angular/core';\r\nimport { PortalOutlet, CdkPortalOutlet, Portal } from '@angular/cdk/portal';\r\nimport { ILuModalContent } from './modal.model';\r\nimport { ALuModalRef } from './modal-ref.model';\r\nimport { LuModalIntl } from './modal.intl';\r\nimport { ILuModalLabel } from './modal.translate';\r\nimport { Subject, timer, Observable, Subscription } from 'rxjs';\r\nimport { tap, delay } from 'rxjs/operators';\r\nimport { LU_MODAL_TRANSLATIONS } from './modal.token';\r\n\r\n@Directive()\r\nexport abstract class ALuModalPanelComponent<T extends ILuModalContent = ILuModalContent> implements PortalOutlet, OnDestroy {\r\n\t@ViewChild('outlet', { read: CdkPortalOutlet, static: true }) protected _outlet: PortalOutlet;\r\n\tprotected _componentInstance: T;\r\n\tget title() {\r\n\t\treturn this._componentInstance.title;\r\n\t}\r\n\tget submitLabel() {\r\n\t\treturn this._componentInstance.submitLabel || this.intl.submit;\r\n\t}\r\n\tget cancelLabel() {\r\n\t\treturn this._componentInstance.cancelLabel || this.intl.cancel;\r\n\t}\r\n\tget isSubmitDisabled() {\r\n\t\treturn this._componentInstance.submitDisabled;\r\n\t}\r\n\tget isSubmitHidden() {\r\n\t\treturn !this._componentInstance.submitAction;\r\n\t}\r\n\tget submitPalette() {\r\n\t\treturn this._componentInstance.submitPalette || 'primary';\r\n\t}\r\n\tget hasSubmitCounter() {\r\n\t\treturn !!this._componentInstance.submitCounter;\r\n\t}\r\n\tget submitCounter() {\r\n\t\treturn this._componentInstance.submitCounter || 0;\r\n\t}\r\n\t\r\n\tsubmitClass$ = new Subject();\r\n\terror$ = new Subject();\r\n\r\n\tprivate _subs = new Subscription();\r\n\r\n\tconstructor(\r\n\t\tprotected _ref: ALuModalRef<LuModalPanelComponent>,\r\n\t\tprotected _cdr: ChangeDetectorRef,\r\n\t\t@Inject(LU_MODAL_TRANSLATIONS) public intl: ILuModalLabel,\r\n\t) {}\r\n\tattach<U extends T = T>(portal: Portal<U>) {\r\n\t\tconst ref = this._outlet.attach(portal) as ComponentRef<U>;\r\n\t\tthis._componentInstance = ref.instance;\r\n\t\treturn ref;\r\n\t}\r\n\tdetach() {\r\n\t\treturn this._outlet.detach();\r\n\t}\r\n\tdispose() {\r\n\t\treturn this._outlet.dispose();\r\n\t}\r\n\thasAttached() {\r\n\t\treturn this._outlet.hasAttached();\r\n\t}\r\n\tngOnDestroy() {\r\n\t\tthis._subs.unsubscribe();\r\n\t\tthis.detach();\r\n\t\tthis.dispose();\r\n\t}\r\n\tdismiss() {\r\n\t\tthis._ref.dismiss();\r\n\t}\r\n\tsubmit() {\r\n\t\tthis.error$.next(undefined);\r\n\t\tthis.submitClass$.next('is-loading');\r\n\t\tconst result$ = this._componentInstance.submitAction();\r\n\t\tif (result$ instanceof Observable) {\r\n\t\t\tthis._subs.add(result$.pipe(\r\n\t\t\t\ttap(_ => this.submitClass$.next('is-success')),\r\n\t\t\t\ttap(() => this._cdr.markForCheck()),\r\n\t\t\t\tdelay(500),\r\n\t\t\t)\r\n\t\t\t.subscribe(result => {\r\n\t\t\t\tthis._ref.close(result);\r\n\t\t\t}, err => {\r\n\t\t\t\tthis.submitClass$.next('is-error');\r\n\t\t\t\tthis.error$.next(err);\r\n\t\t\t\tthis._cdr.markForCheck();\r\n\t\t\t\ttimer(2000).subscribe(_ => {\r\n\t\t\t\t\tthis.submitClass$.next('');\r\n\t\t\t\t\tthis._cdr.markForCheck();\r\n\t\t\t\t});\r\n\t\t\t}));\r\n\t\t} else {\r\n\t\t\tconst result = result$;\r\n\t\t\tthis._ref.close(result);\r\n\t\t}\r\n\r\n\t}\r\n}\r\n\r\n@Component({\r\n\tselector: 'lu-modal-panel',\r\n\ttemplateUrl: './modal-panel.component.html',\r\n\tstyleUrls: ['./modal-panel.component.scss'],\r\n\thost: {'class': 'lu-modal-panel'},\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuModalPanelComponent<T extends ILuModalContent = ILuModalContent> extends ALuModalPanelComponent<T> {\r\n\tconstructor(\r\n\t\t_ref: ALuModalRef<LuModalPanelComponent>,\r\n\t\t_cdr: ChangeDetectorRef,\r\n\t\t@Inject(LuModalIntl) intl: ILuModalLabel,\r\n\t) {\r\n\t\tsuper(_ref, _cdr, intl);\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'lu-modal-panel-default',\r\n\ttemplateUrl: './modal-panel.component.html',\r\n\tstyleUrls: ['./modal-panel.component.scss'],\r\n\thost: {'class': 'lu-modal-panel'},\r\n\tchangeDetection: ChangeDetectionStrategy.Default,\r\n})\r\nexport class LuModalPanelComponentDefaultCD<T extends ILuModalContent = ILuModalContent> extends ALuModalPanelComponent<T> {\r\n\tconstructor(\r\n\t\t_ref: ALuModalRef<LuModalPanelComponent>,\r\n\t\t_cdr: ChangeDetectorRef,\r\n\t\t@Inject(LuModalIntl) intl: ILuModalLabel,\r\n\t) {\r\n\t\tsuper(_ref, _cdr, intl);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./modal-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_ref",
                        "type": "ALuModalRef<LuModalPanelComponent>"
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "intl",
                        "type": "ILuModalLabel"
                    }
                ],
                "line": 124,
                "jsdoctags": [
                    {
                        "name": "_ref",
                        "type": "ALuModalRef<LuModalPanelComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "intl",
                        "type": "ILuModalLabel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuModalPanelComponent",
            "templateData": "<div class=\"lu-modal-panel-inner\" cdkTrapFocus=\"true\" cdkTrapFocusAutoCapture=\"true\" role=\"dialog\" aria-modal=\"true\">\r\n\t<div class=\"lu-modal-header\">\r\n\t\t<h3 class=\"lu-modal-header-title\">{{title}}</h3>\r\n\t\t<button class=\"lu-modal-header-close\" (click)=\"dismiss()\"><span aria-hidden=\"true\" class=\"lucca-icon\">cross</span><span class=\"u-mask\">Close</span></button>\r\n\t</div>\r\n\t<div class=\"lu-modal-content\">\r\n\t\t<ng-container cdkPortalOutlet #outlet></ng-container>\r\n\t</div>\r\n\t<div class=\"lu-modal-footer\">\r\n\t\t<button\r\n\t\t\t*ngIf=\"!isSubmitHidden\"\r\n\t\t\tclass=\"button palette-{{submitPalette}}\"\r\n\t\t\t[disabled]=\"isSubmitDisabled\"\r\n\t\t\t[class.mod-counter]=\"hasSubmitCounter\"\r\n\t\t\t[ngClass]=\"submitClass$ | async\"\r\n\t\t\t(click)=\"submit()\"\r\n\t\t>\r\n\t\t\t{{submitLabel}}\r\n\t\t\t<label class=\"button-counter\" *ngIf=\"hasSubmitCounter\">{{submitCounter}}</label>\r\n\t\t</button>\r\n\t\t<button class=\"button mod-link\" (click)=\"dismiss()\">{{cancelLabel}}</button>\r\n\t</div>\r\n</div>\r\n"
        },
        {
            "name": "LuOptionFeederComponent",
            "id": "component-LuOptionFeederComponent-cb12709b1c44523ec7da87c7b115b6d9",
            "file": "packages/ng/libraries/option/src/lib/operator/feeder/option-feeder.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuOptionOperator, useExisting: forwardRef(() => LuOptionFeederComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-option-feeder",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "options",
                    "line": 20,
                    "type": "[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "outOptions$",
                    "defaultValue": "new BehaviorSubject<T[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';\r\nimport { ILuOptionOperator, ALuOptionOperator } from '../option-operator.model';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Component({\r\n\tselector: 'lu-option-feeder',\r\n\ttemplate: '',\r\n\tstyleUrls: [],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuOptionFeederComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuOptionFeederComponent<T = any> implements ILuOptionOperator<T> {\r\n\toutOptions$ = new BehaviorSubject<T[]>([]);\r\n\t@Input() set options(options: T[]) {\r\n\t\tthis.outOptions$.next(options);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "ILuOptionOperator"
            ],
            "accessors": {
                "options": {
                    "name": "options",
                    "setSignature": {
                        "name": "options",
                        "type": "void",
                        "args": [
                            {
                                "name": "options",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "options",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "LuOptionItemComponent",
            "id": "component-LuOptionItemComponent-f107c8ac191dde7435f8a0dfdaae230e",
            "file": "packages/ng/libraries/option/src/lib/item/option-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuOptionItem, useExisting: forwardRef(() => LuOptionItemComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-option",
            "styleUrls": [
                "./option-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./option-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "highlighted",
                    "line": 28,
                    "type": "boolean"
                },
                {
                    "name": "selected",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "value",
                    "line": 34,
                    "type": "T"
                }
            ],
            "outputsClass": [
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter<this>()",
                    "line": 35,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_highlighted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_selected",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "element",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'element', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "element",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionItem"
                    }
                },
                {
                    "name": "highlighted",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionItem"
                    }
                },
                {
                    "name": "onSelect",
                    "type": "Observable<>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionItem"
                    }
                },
                {
                    "name": "selected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionItem"
                    }
                },
                {
                    "name": "value",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionItem"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "select",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Output, Input, EventEmitter, forwardRef, ElementRef, ChangeDetectorRef, ViewChild } from '@angular/core';\r\nimport { ILuOptionItem, ALuOptionItem } from './option-item.model';\r\n\r\n@Component({\r\n\tselector: 'lu-option',\r\n\ttemplateUrl: './option-item.component.html',\r\n\tstyleUrls: ['./option-item.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuOptionItem,\r\n\t\t\tuseExisting: forwardRef(() => LuOptionItemComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuOptionItemComponent<T = any> extends ALuOptionItem<T> implements ILuOptionItem<T> {\r\n\tprotected _selected = false;\r\n\tget selected() { return this._selected; }\r\n\t@Input() set selected(s: boolean) {\r\n\t\tif (s !== this._selected) {\r\n\t\t\tthis._selected = s;\r\n\t\t\tthis._cdr.markForCheck();\r\n\t\t}\r\n\t}\r\n\tprotected _highlighted = false;\r\n\tget highlighted() { return this._highlighted; }\r\n\t@Input() set highlighted(h: boolean) {\r\n\t\tif (h !== this._highlighted) {\r\n\t\t\tthis._highlighted = h;\r\n\t\t\tthis._cdr.markForCheck();\r\n\t\t}\r\n\t}\r\n\t@Input() value: T;\r\n\t@Output() onSelect = new EventEmitter<this>();\r\n\tselect() {\r\n\t\tthis.onSelect.emit(this);\r\n\t}\r\n\t@ViewChild('element', { read: ElementRef, static: true }) element: ElementRef;\r\n\tconstructor(private _cdr: ChangeDetectorRef) {\r\n\t\tsuper();\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '_definitions';\r\n@include optionItemStyle;\r\n",
                    "styleUrl": "./option-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuOptionItem",
            "implements": [
                "ILuOptionItem"
            ],
            "accessors": {
                "selected": {
                    "name": "selected",
                    "setSignature": {
                        "name": "selected",
                        "type": "void",
                        "args": [
                            {
                                "name": "s",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "s",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selected",
                        "type": "",
                        "returnType": "",
                        "line": 19
                    }
                },
                "highlighted": {
                    "name": "highlighted",
                    "setSignature": {
                        "name": "highlighted",
                        "type": "void",
                        "args": [
                            {
                                "name": "h",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "h",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "highlighted",
                        "type": "",
                        "returnType": "",
                        "line": 27
                    }
                }
            },
            "templateData": "<div class=\"optionItem\" #element>\r\n\t<div class=\"optionItem-value\" (click)=\"select()\" [class.is-selected]=\"selected\" [class.is-highlighted]=\"highlighted\">\r\n\t\t<ng-content></ng-content>\r\n\t</div>\r\n</div>\r\n"
        },
        {
            "name": "LuOptionPagerComponent",
            "id": "component-LuOptionPagerComponent-6037251b0218c189f521c3db6acf5dd7",
            "file": "packages/ng/libraries/option/src/lib/operator/pager/option-pager.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuOptionOperator, useExisting: forwardRef(() => LuOptionPagerComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuOnScrollBottomSubscriber, useExisting: forwardRef(() => LuOptionPagerComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-option-pager",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "outOptions$",
                    "type": "Observable<T[]>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "paging$",
                    "defaultValue": "new BehaviorSubject<number>(MAGIC_STEP)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "inOptions$",
                    "type": "Observable<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionOperator"
                    }
                },
                {
                    "name": "outOptions$",
                    "type": "Observable<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionOperator"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "onScrollBottom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, forwardRef } from '@angular/core';\r\nimport { ILuOnScrollBottomSubscriber, ALuOnScrollBottomSubscriber } from '@lucca-front/ng/core';\r\nimport { ILuOptionOperator, ALuOptionOperator } from '../option-operator.model';\r\nimport { Observable, BehaviorSubject, combineLatest } from 'rxjs';\r\nconst MAGIC_STEP = 10;\r\n@Component({\r\n\tselector: 'lu-option-pager',\r\n\ttemplate: '',\r\n\tstyleUrls: [],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuOptionPagerComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOnScrollBottomSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuOptionPagerComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuOptionPagerComponent<T = any> extends ALuOptionOperator<T> implements ILuOptionOperator<T>, ILuOnScrollBottomSubscriber {\r\n\toutOptions$: Observable<T[]>;\r\n\tset inOptions$(in$: Observable<T[]>) {\r\n\t\tthis.outOptions$ = combineLatest(\r\n\t\t\tin$,\r\n\t\t\tthis.paging$,\r\n\t\t\t(options, paging) => {\r\n\t\t\t\treturn (options || []).slice(0, paging);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\tpaging$ = new BehaviorSubject<number>(MAGIC_STEP);\r\n\tnext() {\r\n\t\tthis.paging$.next(this.paging$.value + MAGIC_STEP);\r\n\t}\r\n\tonScrollBottom() {\r\n\t\tthis.next();\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": "ALuOptionOperator",
            "implements": [
                "ILuOptionOperator",
                "ILuOnScrollBottomSubscriber"
            ],
            "accessors": {
                "inOptions$": {
                    "name": "inOptions$",
                    "setSignature": {
                        "name": "inOptions$",
                        "type": "void",
                        "args": [
                            {
                                "name": "in$",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 26,
                        "jsdoctags": [
                            {
                                "name": "in$",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "LuOptionPickerAdvancedComponent",
            "id": "component-LuOptionPickerAdvancedComponent-8666a1bd0d77175910e9074f5bec4bfe",
            "file": "packages/ng/libraries/option/src/lib/picker/option-picker-advanced.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "LuOptionPicker",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuPickerPanel, useExisting: forwardRef(() => LuOptionPickerAdvancedComponent),\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-option-picker-advanced",
            "styleUrls": [
                "./option-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./option-picker-advanced.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>advanced option picker panel</p>\n",
            "rawdescription": "advanced option picker panel",
            "type": "component",
            "sourceCode": "import {\r\n\tChangeDetectionStrategy,\r\n\tComponent,\r\n\tContentChildren,\r\n\tQueryList,\r\n\tforwardRef,\r\n\tChangeDetectorRef,\r\n\tAfterViewInit,\r\n\tDirective,\r\n} from '@angular/core';\r\nimport { luTransformPopover } from '@lucca-front/ng/popover';\r\nimport { Observable, merge } from 'rxjs';\r\nimport { first, mapTo, startWith, shareReplay, delay, mergeAll } from 'rxjs/operators';\r\n\r\nimport { ALuPickerPanel } from '@lucca-front/ng/picker';\r\nimport {\r\n\tALuOptionOperator,\r\n\tILuOptionOperator,\r\n} from '../operator/index';\r\nimport {\r\n\tALuOnOpenSubscriber,\r\n\tALuOnCloseSubscriber,\r\n\tALuOnScrollBottomSubscriber,\r\n\tILuOnOpenSubscriber,\r\n\tILuOnCloseSubscriber,\r\n\tILuOnScrollBottomSubscriber,\r\n} from '@lucca-front/ng/core';\r\nimport { ALuOptionPickerComponent } from './option-picker.component';\r\nimport { ILuOptionItem } from '../item/index';\r\nimport { ALuOptionSelector, ILuOptionSelector } from '../selector/index';\r\n\r\n@Directive()\r\nexport abstract class ALuOptionPickerAdvancedComponent<T = any, O extends ILuOptionItem<T> = ILuOptionItem<T>>\r\nextends ALuOptionPickerComponent<T, O> implements AfterViewInit {\r\n\tloading$: Observable<boolean>;\r\n\r\n\tprotected _operators = [];\r\n\tprotected _operatorsQL: QueryList<ILuOptionOperator<T>>;\r\n\t@ContentChildren(ALuOptionOperator, { descendants: true }) set operatorsQL(ql: QueryList<ILuOptionOperator<T>>) {\r\n\t\tthis._operatorsQL = ql;\r\n\t}\r\n\tprotected _onOpenSubscribers = [];\r\n\t@ContentChildren(ALuOnOpenSubscriber, { descendants: true }) set onOpenSubsQL(ql: QueryList<ILuOnOpenSubscriber>) {\r\n\t\tthis._onOpenSubscribers = ql.toArray();\r\n\t}\r\n\tprotected _onCloseSubscribers = [];\r\n\t@ContentChildren(ALuOnCloseSubscriber, { descendants: true }) set onCloseSubsQL(ql: QueryList<ILuOnCloseSubscriber>) {\r\n\t\tthis._onCloseSubscribers = ql.toArray();\r\n\t}\r\n\tprotected _onScrollBottomSubscribers = [];\r\n\t@ContentChildren(ALuOnScrollBottomSubscriber, { descendants: true }) set onScrollBottomSubsQL(ql: QueryList<ILuOnScrollBottomSubscriber>) {\r\n\t\tthis._onScrollBottomSubscribers = ql.toArray();\r\n\t}\r\n\tprotected _selectors: ILuOptionSelector<T>[] = [];\r\n\tprotected _selectorsQL: QueryList<ILuOptionSelector<T>>;\r\n\t@ContentChildren(ALuOptionSelector, {descendants: true}) set selectorsQL(ql: QueryList<ILuOptionSelector<T>>) {\r\n\t\tthis._selectorsQL = ql;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\t_changeDetectorRef: ChangeDetectorRef,\r\n\t) {\r\n\t\tsuper(_changeDetectorRef);\r\n\t}\r\n\tonScrollBottom() {\r\n\t\tthis._onScrollBottomSubscribers.forEach(o => {\r\n\t\t\tif (!o.onScrollBottom) { return; }\r\n\t\t\to.onScrollBottom();\r\n\t\t});\r\n\t}\r\n\tonOpen() {\r\n\t\tthis._onOpenSubscribers.forEach(o => {\r\n\t\t\to.onOpen();\r\n\t\t});\r\n\t\tconst operators = this._operators || [];\r\n\t\tconst lastOperator = operators[operators.length - 1];\r\n\t\tif (lastOperator && lastOperator.outOptions$) {\r\n\t\t\tthis.loading$ = lastOperator.outOptions$.pipe(\r\n\t\t\t\tfirst(),\r\n\t\t\t\tmapTo(false),\r\n\t\t\t\tstartWith(true),\r\n\t\t\t\tshareReplay(),\r\n\t\t\t);\r\n\t\t}\r\n\t\tsuper.onOpen();\r\n\t}\r\n\tonClose() {\r\n\t\tthis._onCloseSubscribers.forEach(o => {\r\n\t\t\to.onClose();\r\n\t\t});\r\n\t\tsuper.onClose();\r\n\t}\r\n\tsetValue(value: T | T[]) {\r\n\t\tsuper.setValue(value);\r\n\t\tthis._selectors.forEach(s => s.setValue(value));\r\n\t}\r\n\tprotected initOperators() {\r\n\t\tconst operators = this._operatorsQL.toArray();\r\n\t\tthis._operators = operators;\r\n\t\tlet options$: Observable<T[]>;\r\n\t\toperators.forEach(operator => {\r\n\t\t\toperator.inOptions$ = options$;\r\n\t\t\toptions$ = operator.outOptions$;\r\n\t\t});\r\n\t}\r\n\tprotected initSelectors() {\r\n\t\tconst selectors$: Observable<ILuOptionSelector<T>[]> = this._selectorsQL.changes.pipe(\r\n\t\t\tstartWith(this._selectorsQL.toArray()),\r\n\t\t);\r\n\t\tthis._subs.add(\r\n\t\t\tselectors$.subscribe(selectors => {\r\n\t\t\t\tthis._selectors = selectors;\r\n\t\t\t\tthis._subs.add(\r\n\t\t\t\t\tmerge(\r\n\t\t\t\t\t\tthis._selectors.map(s => s.onSelectValue),\r\n\t\t\t\t\t).pipe(\r\n\t\t\t\t\t\tmergeAll(),\r\n\t\t\t\t\t).subscribe(values => {\r\n\t\t\t\t\t\tthis._select(values);\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t}),\r\n\t\t);\r\n\t}\r\n\tngAfterViewInit() {\r\n\t\tsuper.ngAfterViewInit();\r\n\t\tthis.initOperators();\r\n\t\tthis.initSelectors();\r\n\t}\r\n}\r\n\r\n/**\r\n* advanced option picker panel\r\n*/\r\n@Component({\r\n\tselector: 'lu-option-picker-advanced',\r\n\ttemplateUrl: './option-picker-advanced.component.html',\r\n\tstyleUrls: ['./option-picker.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tanimations: [luTransformPopover],\r\n\texportAs: 'LuOptionPicker',\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuPickerPanel,\r\n\t\t\tuseExisting: forwardRef(() => LuOptionPickerAdvancedComponent),\r\n\t\t},\r\n\t]\r\n})\r\nexport class LuOptionPickerAdvancedComponent<T = any, O extends ILuOptionItem<T> = ILuOptionItem<T>> extends ALuOptionPickerAdvancedComponent<T, O> {\r\n\tconstructor(\r\n\t\t_changeDetectorRef: ChangeDetectorRef,\r\n\t) {\r\n\t\tsuper(_changeDetectorRef);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./option-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 149,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuOptionPickerAdvancedComponent",
            "templateData": "<ng-template>\r\n\t<div class=\"lu-picker-panel lu-option-picker-panel\" role=\"dialog\" [ngClass]=\"panelClassesMap\" [class.mod-multiple]=\"multiple\"\r\n\t (click)=\"onClick()\" (mouseover)=\"onMouseOver()\" (mouseleave)=\"onMouseLeave()\" (mousedown)=\"onMouseDown($event)\">\r\n\t\t<div [class.is-loading]=\"loading$ | async\" class=\"lu-picker-content\" [ngClass]=\"contentClassesMap\" [cdkTrapFocus]=\"trapFocus\" luScroll (onScrollBottom)=\"onScrollBottom()\">\r\n\t\t\t<ng-content></ng-content>\r\n\t\t\t<div *ngIf=\"loading$ | async\" class=\"loading lu-picker-loading\"></div>\r\n\t\t</div>\r\n\t</div>\r\n</ng-template>\r\n"
        },
        {
            "name": "LuOptionPickerComponent",
            "id": "component-LuOptionPickerComponent-1876e984874335ca81fce81c667ac53c",
            "file": "packages/ng/libraries/option/src/lib/picker/option-picker.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "LuOptionPicker",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuPickerPanel, useExisting: forwardRef(() => LuOptionPickerComponent),\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-option-picker",
            "styleUrls": [
                "./option-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./option-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>basic option picker panel</p>\n",
            "rawdescription": "basic option picker panel",
            "type": "component",
            "sourceCode": "import {\r\n\tChangeDetectionStrategy,\r\n\tComponent,\r\n\tContentChildren,\r\n\tQueryList,\r\n\tOutput,\r\n\tEventEmitter,\r\n\tOnDestroy,\r\n\tforwardRef,\r\n\tViewChild,\r\n\tTemplateRef,\r\n\tChangeDetectorRef,\r\n\tAfterViewInit,\r\n\tInput,\r\n\tDirective,\r\n} from '@angular/core';\r\nimport { luTransformPopover } from '@lucca-front/ng/popover';\r\nimport { ILuOptionItem, ALuOptionItem } from '../item/index';\r\nimport { ILuOptionPickerPanel, ALuOptionPicker, LuOptionComparer } from './option-picker.model';\r\nimport { merge, of } from 'rxjs';\r\nimport { map, delay, share } from 'rxjs/operators';\r\nimport { ALuPickerPanel } from '@lucca-front/ng/picker';\r\nimport { UP_ARROW, DOWN_ARROW, ENTER } from '@angular/cdk/keycodes';\r\n\r\n@Directive()\r\nexport abstract class ALuOptionPickerComponent<T = any, O extends ILuOptionItem<T> = ILuOptionItem<T>>\r\nextends ALuOptionPicker<T, O>\r\nimplements ILuOptionPickerPanel<T, O>, OnDestroy, AfterViewInit {\r\n\t/**\r\n\t * This method takes classes set on the host lu-popover element and applies them on the\r\n\t * popover template that displays in the overlay container.  Otherwise, it's difficult\r\n\t * to style the containing popover from outside the component.\r\n\t * @param classes list of class names\r\n\t */\r\n\t@Input('panel-classes')\r\n\tset inputPanelClasses(classes: string) {\r\n\t\tthis.panelClasses = classes;\r\n\t}\r\n\t/**\r\n\t * This method takes classes set on the host lu-popover element and applies them on the\r\n\t * popover template that displays in the overlay container. Otherwise, it's difficult\r\n\t * to style the containing popover from outside the component.\r\n\t * @param classes list of class names\r\n\t */\r\n\t@Input('content-classes')\r\n\tset inputContentClasses(classes: string) {\r\n\t\tthis.contentClasses = classes;\r\n\t}\r\n\r\n\t/**\r\n\t * This method take a function that compare options from feeder and options from form value.\r\n\t * By default, compare JSON values.\r\n\t */\r\n\t@Input('option-comparer')\r\n\tset inputOptionComparer(comparer: LuOptionComparer<T>) {\r\n\t\tthis.optionComparer = comparer;\r\n\t}\r\n\r\n\r\n\t@Output() close = new EventEmitter<void>();\r\n\t@Output() open = new EventEmitter<void>();\r\n\t@Output() hovered = new EventEmitter<boolean>();\r\n\t@Output() onSelectValue = new EventEmitter<T>();\r\n\r\n\tprotected _isOptionItemsInitialized: boolean;\r\n\tprotected _defaultOverlayPaneClasses = ['mod-optionPicker'];\r\n\r\n\tprotected _options: O[] = [];\r\n\tprotected _optionsQL: QueryList<O>;\r\n\t@ContentChildren(ALuOptionItem, { descendants: true }) set optionsQL(ql: QueryList<O>) {\r\n\t\tthis._optionsQL = ql;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tprotected _changeDetectorRef: ChangeDetectorRef,\r\n\t) {\r\n\t\tsuper();\r\n\t\tthis._isOptionItemsInitialized = false;\r\n\t\tthis.overlayPaneClass = this._defaultOverlayPaneClasses;\r\n\t}\r\n\r\n\tprotected _emitSelectValue(val: T) {\r\n\t\tthis.onSelectValue.emit(val);\r\n\t}\r\n\tngOnDestroy() {\r\n\t\tsuper.destroy();\r\n\t}\r\n\t_emitOpenEvent(): void {\r\n\t\tthis.open.emit();\r\n\t}\r\n\t_emitCloseEvent(): void {\r\n\t\tthis.close.emit();\r\n\t}\r\n\t_emitHoveredEvent(h): void {\r\n\t\tthis.hovered.emit(h);\r\n\t}\r\n\tonOpen() {\r\n\t\tsuper.onOpen();\r\n\t\tthis.highlightIndex = 0;\r\n\t\t// this._initObserver();\r\n\t\tthis._applySelected();\r\n\t}\r\n\t@ViewChild(TemplateRef, { static: true })\r\n\tset vcTemplateRef(tr: TemplateRef<any>) {\r\n\t\tthis.templateRef = tr;\r\n\t}\r\n\r\n\t// keydown\r\n\t_handleKeydown(event: KeyboardEvent) {\r\n\t\tsuper._handleKeydown(event);\r\n\t\tswitch (event.keyCode) {\r\n\t\t\tcase ENTER:\r\n\t\t\t\tthis._selectHighlighted();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tbreak;\r\n\t\t\tcase UP_ARROW:\r\n\t\t\t\tthis._decrHighlight();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tbreak;\r\n\t\t\tcase DOWN_ARROW:\r\n\t\t\t\tthis._incrHighlight();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tprotected _highlightIndex = -1;\r\n\tget highlightIndex() { return this._highlightIndex; }\r\n\tset highlightIndex(i: number) {\r\n\t\tthis._highlightIndex = i;\r\n\t\tthis._applyHighlight(true);\r\n\t}\r\n\tprotected _initHighlight() {\r\n\t\tthis._subs.add(this._options$.subscribe(options => {\r\n\t\t\tconst optionCount = options.length;\r\n\t\t\tconst newHighlight =  Math.max(Math.min(this.highlightIndex, optionCount - 1), -1);\r\n\t\t\tif (newHighlight !== this.highlightIndex) {\r\n\t\t\t\tthis.highlightIndex = newHighlight;\r\n\t\t\t}\r\n\t\t}));\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.highlightIndex = -1;\r\n\t\t}, 1);\r\n\t}\r\n\tprotected _incrHighlight() {\r\n\t\tconst optionCount = this._options.length;\r\n\t\tthis.highlightIndex = Math.max(Math.min(this.highlightIndex + 1, optionCount - 1), -1);\r\n\t}\r\n\tprotected _decrHighlight() {\r\n\t\tthis.highlightIndex = Math.max(this.highlightIndex - 1, -1);\r\n\t}\r\n\tprotected _applyHighlight(reScroll = false) {\r\n\t\tif (!this.isOpen) { return; }\r\n\t\t// const highlightClass = 'is-highlighted';\r\n\t\tconst options = this._options;\r\n\t\t// remove `is-highlighted` class from all other options\r\n\t\toptions.forEach(option => option.highlighted = false);\r\n\t\t// apply `is-highlighted` to current highlight\r\n\t\tconst highlightedOption = options[this.highlightIndex];\r\n\t\tif (!!highlightedOption) {\r\n\t\t\thighlightedOption.highlighted = true;\r\n\t\t\t// scroll to let the highlighted option visible\r\n\t\t\tif (reScroll) {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis._scrollToHighlight(highlightedOption.element.nativeElement);\r\n\t\t\t\t}, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._changeDetectorRef.markForCheck();\r\n\t}\r\n\tprotected _scrollToHighlight(targetElt: HTMLElement) {\r\n\t\tif (!targetElt) { return; }\r\n\t\tconst contentElt = document.querySelector('.lu-picker-content') as HTMLElement;\r\n\t\tif (!contentElt) { return; }\r\n\t\tconst headerElt = document.querySelector('.lu-picker-content .lu-picker-header') as HTMLElement;\r\n\t\tconst headerHeight = headerElt ? headerElt.offsetHeight : 0;\r\n\t\tconst footerElt = document.querySelector('.lu-picker-content .lu-picker-footer') as HTMLElement;\r\n\t\tconst footerHeight = footerElt ? footerElt.offsetHeight : 0;\r\n\t\t// highlighted option is too high\r\n\t\tif (contentElt.scrollTop + headerHeight > targetElt.offsetTop) {\r\n\t\t\tcontentElt.scrollTop = targetElt.offsetTop - headerHeight;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// highlight option is too low\r\n\t\tconst offsetHeight = contentElt.offsetHeight;\r\n\t\tif (contentElt.scrollTop + offsetHeight - footerHeight < targetElt.offsetTop + targetElt.offsetHeight) {\r\n\t\t\tcontentElt.scrollTop = targetElt.offsetTop + targetElt.offsetHeight - offsetHeight + footerHeight;\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tprotected _selectHighlighted() {\r\n\t\tconst options = this._options ? this._options : [];\r\n\t\tconst highlightedOption = options[this.highlightIndex];\r\n\t\tif (!!highlightedOption) {\r\n\t\t\tthis._toggle(highlightedOption);\r\n\t\t}\r\n\t}\r\n\tprotected _initSelected() {\r\n\t\tthis._subs.add(this._options$.subscribe(() => {\r\n\t\t\tthis._applySelected();\r\n\t\t}));\r\n\t}\r\n\tprotected _applySelected() {\r\n\t\tif (!this._options) { return; }\r\n\t\t// const selectedClass = 'is-selected';\r\n\r\n\t\tconst options = this._options;\r\n\t\t// remove `is-selected` class from all other options\r\n\t\toptions.forEach(option => option.selected = false);\r\n\r\n\t\t// add `is-selected` to all selected indexes\r\n\t\tconst selectedIndexes: number[] = [];\r\n\t\tif (!this.multiple) {\r\n\t\t\tconst selectedIndex = this._options.findIndex(o => this.optionComparer(o.value, this._value as T));\r\n\t\t\tif (selectedIndex !== -1) { selectedIndexes.push(selectedIndex); }\r\n\t\t\tif (selectedIndex !== -1 && this.highlightIndex === -1) { this.highlightIndex = selectedIndex; }\r\n\t\t} else {\r\n\t\t\tconst values = <T[]> this._value || [];\r\n\t\t\tconst matchingIndexes = this._options.map(\r\n\t\t\t\to => values.some(v => this.optionComparer(o.value, v)),\r\n\t\t\t).map((f, i) => f ? i : null)\r\n\t\t\t.filter(i => i !== null);\r\n\t\t\tselectedIndexes.push(...matchingIndexes);\r\n\t\t\t// selectedIndexes.push(\r\n\t\t\t// \t...values\r\n\t\t\t// \t.map(v => this._options.findIndex(o => this.optionComparer(o.value, v)))\r\n\t\t\t// \t.filter(i => i !== -1)\r\n\t\t\t// );\r\n\t\t}\r\n\t\tselectedIndexes.forEach(i => {\r\n\t\t\tconst option = options[i];\r\n\t\t\tif (!!option) {\r\n\t\t\t\toption.selected = true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprotected initItems() {\r\n\r\n\t\tconst items$ = merge(of(this._optionsQL), this._optionsQL.changes)\r\n\t\t\t.pipe(\r\n\t\t\t\tmap<QueryList<O>, O[]>(q => q.toArray()),\r\n\t\t\t\tdelay(0),\r\n\t\t\t\tshare(),\r\n\t\t\t);\r\n\t\titems$.subscribe(o => this._options = o || []);\r\n\t\tthis._options$ = items$;\r\n\t\tthis._initHighlight();\r\n\t\tthis._initSelected();\r\n\t}\r\n\tngAfterViewInit() {\r\n\t\tthis.initItems();\r\n\t}\r\n}\r\n/**\r\n* basic option picker panel\r\n*/\r\n@Component({\r\n\tselector: 'lu-option-picker',\r\n\ttemplateUrl: './option-picker.component.html',\r\n\tstyleUrls: ['./option-picker.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tanimations: [luTransformPopover],\r\n\texportAs: 'LuOptionPicker',\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuPickerPanel,\r\n\t\t\tuseExisting: forwardRef(() => LuOptionPickerComponent),\r\n\t\t},\r\n\t]\r\n})\r\nexport class LuOptionPickerComponent<T = any, O extends ILuOptionItem<T> = ILuOptionItem<T>> extends ALuOptionPickerComponent<T, O> {\r\n\tconstructor(\r\n\t\t_changeDetectorRef: ChangeDetectorRef,\r\n\t) {\r\n\t\tsuper(_changeDetectorRef);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./option-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 274,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuOptionPickerComponent",
            "templateData": "<ng-template>\r\n\t<div class=\"lu-picker-panel lu-option-picker-panel\" role=\"dialog\" [ngClass]=\"panelClassesMap\" [class.mod-multiple]=\"multiple\"\r\n\t(click)=\"onClick()\" (mouseover)=\"onMouseOver()\" (mouseleave)=\"onMouseLeave()\" (mousedown)=\"onMouseDown($event)\">\r\n\t\t<div class=\"lu-picker-content\" [ngClass]=\"contentClassesMap\" [cdkTrapFocus]=\"trapFocus\">\r\n\t\t\t<ng-content></ng-content>\r\n\t\t</div>\r\n\t</div>\r\n</ng-template>\r\n"
        },
        {
            "name": "LuOptionPlaceholderComponent",
            "id": "component-LuOptionPlaceholderComponent-b484e500d468985e935f73865537b182",
            "file": "packages/ng/libraries/option/src/lib/placeholder/option-placeholder.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-option-placeholder",
            "styleUrls": [
                "./option-placeholder.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./option-placeholder.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onClear",
                    "defaultValue": "new EventEmitter()",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "intl",
                    "type": "ILuOptionPlaceholderLabel",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LuOptionPlaceholderIntl"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output, Inject } from '@angular/core';\r\nimport { LuOptionPlaceholderIntl } from './option-placeholder.intl';\r\nimport { ILuOptionPlaceholderLabel } from './option-placeholder.translate';\r\n\r\n@Component({\r\n\tselector: 'lu-option-placeholder',\r\n\ttemplateUrl: './option-placeholder.component.html',\r\n\tstyleUrls: ['./option-placeholder.component.scss']\r\n})\r\nexport class LuOptionPlaceholderComponent {\r\n\t@Output() onClear = new EventEmitter();\r\n\r\n\tconstructor(\r\n\t\t@Inject(LuOptionPlaceholderIntl) public intl: ILuOptionPlaceholderLabel,\r\n\t){}\r\n\r\n\tclear() {\r\n\t\tthis.onClear.emit();\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '_definitions';\r\n@include optionPlaceholderStyle;",
                    "styleUrl": "./option-placeholder.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "intl",
                        "type": "ILuOptionPlaceholderLabel"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "intl",
                        "type": "ILuOptionPlaceholderLabel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"optionPlaceholder\">\r\n\t<p class=\"optionPlaceholder-content u-marginBottomReset\">\r\n\t\t{{intl.placeholderDescription}}\r\n\t</p>\r\n\t<button class=\"link\" (click)=\"clear()\">\r\n\t\t{{intl.placeholderAction}}\r\n\t</button>\r\n</div>"
        },
        {
            "name": "LuOptionSearcherComponent",
            "id": "component-LuOptionSearcherComponent-2651149bfb2977c5ec6f934340be0071",
            "file": "packages/ng/libraries/option/src/lib/operator/searcher/option-searcher.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuOptionOperator, useExisting: forwardRef(() => LuOptionSearcherComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuOnOpenSubscriber, useExisting: forwardRef(() => LuOptionSearcherComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-option-searcher",
            "styleUrls": [
                "option-searcher.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "option-searcher.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "searchFn",
                    "defaultValue": "() => true",
                    "line": 44,
                    "type": "function"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clue$",
                    "defaultValue": "merge(of(''), this.searchControl.valueChanges)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "empty$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "outOptions$",
                    "type": "Observable<T[]>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "searchControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "searchInput",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchInput', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "inOptions$",
                    "type": "Observable<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionOperator"
                    }
                },
                {
                    "name": "outOptions$",
                    "type": "Observable<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionOperator"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "resetClue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, forwardRef, Input, ViewChild, ElementRef, HostBinding, Inject } from '@angular/core';\r\nimport { ILuOnOpenSubscriber, ALuOnOpenSubscriber } from '@lucca-front/ng/core';\r\nimport { ILuOptionOperator, ALuOptionOperator } from '../option-operator.model';\r\nimport { Observable, combineLatest, merge, of } from 'rxjs';\r\nimport { FormControl } from '@angular/forms';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Component({\r\n\tselector: 'lu-option-searcher',\r\n\ttemplateUrl: 'option-searcher.component.html',\r\n\tstyleUrls: ['option-searcher.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuOptionSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOnOpenSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuOptionSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuOptionSearcherComponent<T = any> extends ALuOptionOperator<T> implements ILuOptionOperator<T>, ILuOnOpenSubscriber {\r\n\tsearchControl = new FormControl();\r\n\tclue$ = merge(of(''), this.searchControl.valueChanges);\r\n\tempty$: Observable<boolean>;\r\n\t@ViewChild('searchInput', { read: ElementRef, static: true }) searchInput: ElementRef;\r\n\toutOptions$: Observable<T[]>;\r\n\tset inOptions$(in$: Observable<T[]>) {\r\n\t\tthis.outOptions$ = combineLatest(\r\n\t\t\tin$,\r\n\t\t\tthis.clue$,\r\n\t\t\t(options, clue) => {\r\n\t\t\t\treturn !!clue ? (options || []).filter(o => this.searchFn(o, clue)) : options || [];\r\n\t\t\t}\r\n\t\t);\r\n\t\tthis.empty$ = this.outOptions$.pipe(\r\n\t\t\tmap(o => !o || o.length === 0),\r\n\t\t);\r\n\t}\r\n\t@Input() searchFn: (option: T, clue: string) => boolean = () => true;\r\n\r\n\tonOpen() {\r\n\t\tthis.searchInput.nativeElement.focus();\r\n\t\tthis.searchControl.setValue('');\r\n\t}\r\n\tresetClue() {\r\n\t\tthis.searchControl.setValue('');\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '_definitions';\r\n@include optionSearcherStyle;\r\n",
                    "styleUrl": "option-searcher.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "ALuOptionOperator",
            "implements": [
                "ILuOptionOperator",
                "ILuOnOpenSubscriber"
            ],
            "accessors": {
                "inOptions$": {
                    "name": "inOptions$",
                    "setSignature": {
                        "name": "inOptions$",
                        "type": "void",
                        "args": [
                            {
                                "name": "in$",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "jsdoctags": [
                            {
                                "name": "in$",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"textfield mod-search\">\r\n\t<input #searchInput class=\"textfield-input\" [formControl]=\"searchControl\">\r\n</div>\r\n\r\n<lu-option-placeholder *ngIf=\"empty$ | async\" (onClear)=\"resetClue()\"></lu-option-placeholder>"
        },
        {
            "name": "LuOptionSelectAllComponent",
            "id": "component-LuOptionSelectAllComponent-2b9b07c355cbc3c68720f38f93428677",
            "file": "packages/ng/libraries/option/src/lib/selector/all/select-all.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuOptionOperator, useExisting: forwardRef(() => LuOptionSelectAllComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuOptionSelector, useExisting: forwardRef(() => LuOptionSelectAllComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-option-select-all",
            "styleUrls": [
                "select-all.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-all.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_values",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "intl",
                    "type": "ILuOptionSelectAllLabel",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LuOptionSelectAllIntl"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "multiple",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "onSelectValue",
                    "defaultValue": "new Subject<T | T[]>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "options",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "outOptions$",
                    "type": "Observable<T[]>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "inOptions$",
                    "type": "Observable<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionOperator"
                    }
                },
                {
                    "name": "outOptions$",
                    "type": "Observable<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionOperator"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "deselectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "selectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "values",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "class.position-fixed",
                    "defaultValue": "true",
                    "line": 32
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, forwardRef, HostBinding, Inject } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { ALuOptionSelector, ILuOptionSelector } from '../option-selector.model';\r\nimport { tap } from 'rxjs/operators';\r\nimport { ALuOptionOperator } from '../../operator/option-operator.model';\r\nimport { ILuOptionSelectAllLabel } from './select-all.translate';\r\nimport { LuOptionSelectAllIntl } from './select-all.intl';\r\n\r\n@Component({\r\n\tselector: 'lu-option-select-all',\r\n\ttemplateUrl: './select-all.component.html',\r\n\tstyleUrls: ['select-all.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuOptionSelectAllComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOptionSelector,\r\n\t\t\tuseExisting: forwardRef(() => LuOptionSelectAllComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuOptionSelectAllComponent<T = any> extends ALuOptionOperator<T> implements ILuOptionSelector<T> {\r\n\tmultiple = true;\r\n\tonSelectValue = new Subject<T | T[]>();\r\n\tprivate _values: T[];\r\n\r\n\t@HostBinding('class.position-fixed') fixed = true;\r\n\toptions;\r\n\toutOptions$: Observable<T[]>;\r\n\tset inOptions$(in$: Observable<T[]>) {\r\n\t\tthis.outOptions$ = in$.pipe(\r\n\t\t\ttap(options => this.options = options)\r\n\t\t);\r\n\t}\r\n\r\n\tconstructor(\r\n\t\t@Inject(LuOptionSelectAllIntl) public intl: ILuOptionSelectAllLabel,\r\n\t) {\r\n\t\tsuper();\r\n\t}\r\n\r\n\tselectAll() {\r\n\t\tthis.onSelectValue.next([...this.options]);\r\n\t}\r\n\tdeselectAll() {\r\n\t\tthis.onSelectValue.next([]);\r\n\t}\r\n\tsetValue(values: T | T[]): void {\r\n\t\tthis._values = values as T[];\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '_definitions';\r\n:host {\r\n\t@include optionSelectorStyle;\r\n}\r\n",
                    "styleUrl": "select-all.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "intl",
                        "type": "ILuOptionSelectAllLabel"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "intl",
                        "type": "ILuOptionSelectAllLabel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuOptionOperator",
            "implements": [
                "ILuOptionSelector"
            ],
            "accessors": {
                "inOptions$": {
                    "name": "inOptions$",
                    "setSignature": {
                        "name": "inOptions$",
                        "type": "void",
                        "args": [
                            {
                                "name": "in$",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 35,
                        "jsdoctags": [
                            {
                                "name": "in$",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<button (click)=\"selectAll()\" class=\"link selectAll-button\">{{intl.select}}</button>\r\n<button (click)=\"deselectAll()\" class=\"link selectAll-button u-marginLeftSmaller\">{{intl.deselect}}</button>"
        },
        {
            "name": "LuPopoverPanelComponent",
            "id": "component-LuPopoverPanelComponent-aeea1b5cf9485b94f22cbefd0a92d709",
            "file": "packages/ng/libraries/popover/src/lib/panel/popover-panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "LuPopoverPanel",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-popover",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./popover-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "close-on-click",
                    "description": "<p>Popover container close on click\ndefault: false</p>\n",
                    "line": 56,
                    "type": "boolean"
                },
                {
                    "name": "content-classes",
                    "description": "<p>This method takes classes set on the host lu-popover element and applies them on the\npopover template that displays in the overlay container. Otherwise, it&#39;s difficult\nto style the containing popover from outside the component.</p>\n",
                    "line": 95,
                    "type": "string"
                },
                {
                    "name": "panel-classes",
                    "description": "<p>This method takes classes set on the host lu-popover element and applies them on the\npopover template that displays in the overlay container.  Otherwise, it&#39;s difficult\nto style the containing popover from outside the component.</p>\n",
                    "line": 85,
                    "type": "string"
                },
                {
                    "name": "scroll-strategy",
                    "description": "<p>Popover scrollStrategy\ndefault: reposition</p>\n",
                    "line": 74,
                    "type": ""
                },
                {
                    "name": "template",
                    "line": 38,
                    "type": ""
                },
                {
                    "name": "template-context",
                    "line": 47,
                    "type": "any"
                },
                {
                    "name": "trap-focus",
                    "description": "<p>Popover focus trap using cdkTrapFocus\ndefault: false</p>\n",
                    "line": 65,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<void>()",
                    "description": "<p>Event emitted when the popover is closed. </p>\n",
                    "line": 100,
                    "type": "EventEmitter"
                },
                {
                    "name": "hovered",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 102,
                    "type": "EventEmitter"
                },
                {
                    "name": "open",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 101,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_template",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_templateContext",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_closeOnClick",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_contentClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_isOpen",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_keydownEventsSub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_overlayPaneClass",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "<p>Classes to be passed into the popover&#39;s overlay </p>\n",
                    "line": 96,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_panelClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_positionClassesMap",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_scrollStrategy",
                    "defaultValue": "'reposition'",
                    "type": "LuPopoverScrollStrategy",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_templateRef",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_trapFocus",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "close",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "hovered",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "open",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "panelId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "triggerId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "_emitCloseEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117
                },
                {
                    "name": "_emitHoveredEvent",
                    "args": [
                        {
                            "name": "hovered",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "jsdoctags": [
                        {
                            "name": "hovered",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_emitOpenEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113
                },
                {
                    "name": "_emitCloseEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_emitHoveredEvent",
                    "args": [
                        {
                            "name": "hovered",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "hovered",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_emitOpenEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_handleKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onMouseDown",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "description": "<p>does nothing but must be overridable </p>\n",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "description": "<p>Enables close of popover when mouse leaving popover element </p>\n",
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onMouseOver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "description": "<p>TODO: Refactor when @angular/cdk includes feature I mentioned on github see link below.\n<a href=\"https://github.com/angular/material2/pull/5493#issuecomment-313085323\">https://github.com/angular/material2/pull/5493#issuecomment-313085323</a></p>\n",
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "setPositionClasses",
                    "args": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos"
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n\tComponent,\r\n\tEventEmitter,\r\n\tInput,\r\n\tOnDestroy,\r\n\tOutput,\r\n\tTemplateRef,\r\n\tViewChild,\r\n\tChangeDetectionStrategy,\r\n} from '@angular/core';\r\n\r\nimport {\r\n\tILuPopoverPanel,\r\n\tLuPopoverScrollStrategy,\r\n\tALuPopoverPanel,\r\n} from './popover-panel.model';\r\nimport { luTransformPopover } from '../animation/index';\r\n\r\n\r\n// import { standardPopoverTemplate } from './popover.template';\r\n\r\n@Component({\r\n\tselector: 'lu-popover',\r\n\ttemplateUrl: './popover-panel.component.html',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tanimations: [luTransformPopover],\r\n\texportAs: 'LuPopoverPanel',\r\n})\r\nexport class LuPopoverPanelComponent extends ALuPopoverPanel implements ILuPopoverPanel, OnDestroy {\r\n\tprotected _template: TemplateRef<any>;\r\n\tprotected _templateContext: any;\r\n\r\n\t/** Template to Use for the popover */\r\n\tget template(): TemplateRef<any> {\r\n\t\treturn this._template;\r\n\t}\r\n\t@Input()\r\n\tset template(value: TemplateRef<any>) {\r\n\t\tthis._template = value;\r\n\t}\r\n\r\n\t/** Template context to use for the popover when created using a template */\r\n\tget templateContext(): any {\r\n\t\treturn this._templateContext;\r\n\t}\r\n\t@Input('template-context')\r\n\tset templateContext(value: any) {\r\n\t\tthis._templateContext = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Popover container close on click\r\n\t * default: false\r\n\t */\r\n\t@Input('close-on-click')\r\n\tset inputCloseOnClick(v: boolean) {\r\n\t\tthis.closeOnClick = v;\r\n\t}\r\n\r\n\t/**\r\n\t * Popover focus trap using cdkTrapFocus\r\n\t * default: false\r\n\t */\r\n\t@Input('trap-focus')\r\n\tset inputTrapFocus(v: boolean) {\r\n\t\tthis.trapFocus = v;\r\n\t}\r\n\r\n\t/**\r\n\t * Popover scrollStrategy\r\n\t * default: reposition\r\n\t */\r\n\t@Input('scroll-strategy')\r\n\tset inputScrollStrategy(v: LuPopoverScrollStrategy) {\r\n\t\tthis.scrollStrategy = v;\r\n\t}\r\n\r\n\t/**\r\n\t * This method takes classes set on the host lu-popover element and applies them on the\r\n\t * popover template that displays in the overlay container.  Otherwise, it's difficult\r\n\t * to style the containing popover from outside the component.\r\n\t * @param classes list of class names\r\n\t */\r\n\t@Input('panel-classes')\r\n\tset inputPanelClasses(classes: string) {\r\n\t\tthis.panelClasses = classes;\r\n\t}\r\n\t/**\r\n\t * This method takes classes set on the host lu-popover element and applies them on the\r\n\t * popover template that displays in the overlay container. Otherwise, it's difficult\r\n\t * to style the containing popover from outside the component.\r\n\t * @param classes list of class names\r\n\t */\r\n\t@Input('content-classes')\r\n\tset inputContentClasses(classes: string) {\r\n\t\tthis.contentClasses = classes;\r\n\t}\r\n\r\n\t/** Event emitted when the popover is closed. */\r\n\t@Output() close = new EventEmitter<void>();\r\n\t@Output() open = new EventEmitter<void>();\r\n\t@Output() hovered = new EventEmitter<boolean>();\r\n\r\n\t@ViewChild(TemplateRef, { static: true })\r\n\tset vcTemplateRef(tr: TemplateRef<any>) {\r\n\t\tthis.templateRef = tr;\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\tngOnDestroy() {\r\n\t\tthis.onClose();\r\n\t\tthis.close.complete();\r\n\t}\r\n\t_emitCloseEvent(): void {\r\n\t\tthis.close.emit();\r\n\t}\r\n\r\n\t_emitOpenEvent(): void {\r\n\t\tthis.open.emit();\r\n\t}\r\n\t_emitHoveredEvent(hovered: boolean): void {\r\n\t\tthis.hovered.emit(hovered);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 107
            },
            "extends": "ALuPopoverPanel",
            "implements": [
                "ILuPopoverPanel",
                "OnDestroy"
            ],
            "accessors": {
                "template": {
                    "name": "template",
                    "setSignature": {
                        "name": "template",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "template",
                        "type": "",
                        "returnType": "TemplateRef<any>",
                        "line": 34,
                        "description": "<p>Template to Use for the popover </p>\n"
                    }
                },
                "templateContext": {
                    "name": "templateContext",
                    "setSignature": {
                        "name": "templateContext",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "any"
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "templateContext",
                        "type": "any",
                        "returnType": "any",
                        "line": 43,
                        "description": "<p>Template context to use for the popover when created using a template </p>\n"
                    }
                },
                "inputCloseOnClick": {
                    "name": "inputCloseOnClick",
                    "setSignature": {
                        "name": "inputCloseOnClick",
                        "type": "void",
                        "args": [
                            {
                                "name": "v",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 56,
                        "description": "<p>Popover container close on click\ndefault: false</p>\n",
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputTrapFocus": {
                    "name": "inputTrapFocus",
                    "setSignature": {
                        "name": "inputTrapFocus",
                        "type": "void",
                        "args": [
                            {
                                "name": "v",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 65,
                        "description": "<p>Popover focus trap using cdkTrapFocus\ndefault: false</p>\n",
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputScrollStrategy": {
                    "name": "inputScrollStrategy",
                    "setSignature": {
                        "name": "inputScrollStrategy",
                        "type": "void",
                        "args": [
                            {
                                "name": "v",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 74,
                        "description": "<p>Popover scrollStrategy\ndefault: reposition</p>\n",
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputPanelClasses": {
                    "name": "inputPanelClasses",
                    "setSignature": {
                        "name": "inputPanelClasses",
                        "type": "void",
                        "args": [
                            {
                                "name": "classes",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 85,
                        "description": "<p>This method takes classes set on the host lu-popover element and applies them on the\npopover template that displays in the overlay container.  Otherwise, it&#39;s difficult\nto style the containing popover from outside the component.</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 2000,
                                    "end": 2007,
                                    "flags": 0,
                                    "escapedText": "classes"
                                },
                                "type": "string",
                                "tagName": {
                                    "pos": 1994,
                                    "end": 1999,
                                    "flags": 0,
                                    "escapedText": "param"
                                },
                                "comment": "<p>list of class names</p>\n"
                            }
                        ]
                    }
                },
                "inputContentClasses": {
                    "name": "inputContentClasses",
                    "setSignature": {
                        "name": "inputContentClasses",
                        "type": "void",
                        "args": [
                            {
                                "name": "classes",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 95,
                        "description": "<p>This method takes classes set on the host lu-popover element and applies them on the\npopover template that displays in the overlay container. Otherwise, it&#39;s difficult\nto style the containing popover from outside the component.</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 2400,
                                    "end": 2407,
                                    "flags": 0,
                                    "escapedText": "classes"
                                },
                                "type": "string",
                                "tagName": {
                                    "pos": 2394,
                                    "end": 2399,
                                    "flags": 0,
                                    "escapedText": "param"
                                },
                                "comment": "<p>list of class names</p>\n"
                            }
                        ]
                    }
                },
                "vcTemplateRef": {
                    "name": "vcTemplateRef",
                    "setSignature": {
                        "name": "vcTemplateRef",
                        "type": "void",
                        "args": [
                            {
                                "name": "tr",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 105,
                        "jsdoctags": [
                            {
                                "name": "tr",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-template>\r\n\t<div class=\"lu-popover-panel\"\r\n\t\t[ngClass]=\"panelClassesMap\"\r\n\t\t(keydown)=\"_handleKeydown($event)\"\r\n\t\t(click)=\"onClick()\"\r\n\t\t(mouseover)=\"onMouseOver()\"\r\n\t\t(mouseleave)=\"onMouseLeave()\"\r\n\t\t(mousedown)=\"onMouseDown($event)\"\r\n\t\t[attr.id]=\"panelId\"\r\n\t\t[attr.aria-labelledby]=\"triggerId\"\r\n\t\t[@transformPopover]=\"'enter'\"\r\n\t>\r\n\t\t<div class=\"lu-popover-content\" [ngClass]=\"contentClassesMap\" [cdkTrapFocus]=\"trapFocus\">\r\n\t\t\t<ng-content></ng-content><ng-container *ngTemplateOutlet=\"template; context: templateContext\"></ng-container>\r\n\t\t</div>\r\n\t</div>\r\n</ng-template>\r\n"
        },
        {
            "name": "LuSelectInputComponent",
            "id": "component-LuSelectInputComponent-d05d0e204822eff6e2134e70464906f1",
            "file": "packages/ng/libraries/select/src/lib/input/select-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => LuSelectInputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-select",
            "styleUrls": [
                "./select-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clearerEltRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 209,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "ALuClearer, {read: ElementRef, static: false}"
                        }
                    ]
                },
                {
                    "name": "suffixEltRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 210,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'suffix', {read: ElementRef, static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "displayClearer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 211
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217
                }
            ],
            "hostBindings": [
                {
                    "name": "class.mod-multipleView",
                    "line": 192
                }
            ],
            "hostListeners": [],
            "description": "<p>select input</p>\n",
            "rawdescription": "select input",
            "type": "component",
            "sourceCode": "import {\r\n\tChangeDetectionStrategy,\r\n\tComponent,\r\n\tChangeDetectorRef,\r\n\tforwardRef,\r\n\tViewContainerRef,\r\n\tElementRef,\r\n\tContentChild,\r\n\tHostListener,\r\n\tViewChild,\r\n\tRenderer2,\r\n\tInput,\r\n\tHostBinding,\r\n\tOnDestroy,\r\n\tAfterViewInit,\r\n\tOutput,\r\n\tEventEmitter,\r\n\tDirective,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\nimport { Overlay } from '@angular/cdk/overlay';\r\nimport {\r\n\tILuInputWithPicker,\r\n\tILuPickerPanel,\r\n\tALuPickerPanel,\r\n} from '@lucca-front/ng/picker';\r\nimport {\r\n\tALuClearer,\r\n\tILuClearer,\r\n\tILuInputDisplayer,\r\n\tALuInputDisplayer,\r\n} from '@lucca-front/ng/input';\r\nimport { ALuSelectInput } from './select-input.model';\r\n\r\n@Directive()\r\nexport abstract class ALuSelectInputComponent<T = any, TPicker extends ILuPickerPanel<T> = ILuPickerPanel<T>>\r\nextends ALuSelectInput<T, TPicker>\r\nimplements ControlValueAccessor, ILuInputWithPicker<T>, AfterViewInit, OnDestroy {\r\n\t@ViewChild('display', { read: ViewContainerRef, static: true }) protected set _vcDisplayContainer(vcr: ViewContainerRef) {\r\n\t\tthis.displayContainer = vcr;\r\n\t}\r\n\r\n\t@HostBinding('tabindex') tabindex = 0;\r\n\r\n\t@Input('pickerOverlap') set overlapInput(o: boolean) {\r\n\t\tthis.target.overlap = o;\r\n\t}\r\n\r\n\t@Input('placeholder') set inputPlaceholder(p: string) { this._placeholder = p; }\r\n\t@Input('multiple') set inputMultiple(m: boolean | string) {\r\n\t\tif (m === '') {\r\n\t\t\t// allows to have multiple = true when writing\r\n\t\t\t// <lu-select multiple>\r\n\t\t\tthis.multiple = true;\r\n\t\t} else {\r\n\t\t\tthis.multiple = !!m;\r\n\t\t}\r\n\t}\r\n\t/** Event emitted when the associated popover is opened. */\r\n\t@Output() onOpen = new EventEmitter<void>();\r\n\t/** Event emitted when the associated popover is closed. */\r\n\t@Output() onClose = new EventEmitter<void>();\r\n\r\n\tconstructor(\r\n\t\tprotected _changeDetectorRef: ChangeDetectorRef,\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _elementRef: ElementRef,\r\n\t\tprotected _viewContainerRef: ViewContainerRef,\r\n\t\tprotected _renderer: Renderer2,\r\n\t) {\r\n\t\tsuper(\r\n\t\t\t_changeDetectorRef,\r\n\t\t\t_overlay,\r\n\t\t\t_elementRef,\r\n\t\t\t_viewContainerRef,\r\n\t\t\t_renderer,\r\n\t\t);\r\n\t}\r\n\t@HostBinding('class.is-disabled')\r\n\tget isDisabled() { return this.disabled; }\r\n\t@HostBinding('class.is-focused')\r\n\tget isFocused() { return this._popoverOpen && !this.target.overlap; }\r\n\t@HostBinding('class.mod-multiple')\r\n\tget modMultiple() { return this._multiple; }\r\n\r\n\t@HostBinding('class.is-clearable')\r\n\tget isClearable() { return !!this._clearer; }\r\n\t/**\r\n\t * popover trigger class extension\r\n\t */\r\n\t@ContentChild(ALuPickerPanel, { static: true }) ccPicker: TPicker;\r\n\t@ViewChild(ALuPickerPanel, { static: true }) vcPicker: TPicker;\r\n\r\n\t@ContentChild(ALuInputDisplayer, { static: true }) ccDisplayer: ILuInputDisplayer<T>;\r\n\t@ViewChild(ALuInputDisplayer, { static: true }) vcDisplayer: ILuInputDisplayer<T>;\r\n\r\n\t@ContentChild(ALuClearer, { static: true }) ccClearer: ILuClearer<T>;\r\n\t@ViewChild(ALuClearer, { static: true }) vcClearer: ILuClearer<T>;\r\n\r\n\t@HostListener('click')\r\n\tonClick() {\r\n\t\tsuper.onClick();\r\n\t}\r\n\t@HostListener('mouseenter')\r\n\tonMouseEnter() {\r\n\t\tsuper.onMouseEnter();\r\n\t}\r\n\t@HostListener('mouseleave')\r\n\tonMouseLeave() {\r\n\t\tsuper.onMouseLeave();\r\n\t}\r\n\t@HostListener('focus')\r\n\tonFocus() {\r\n\t\tsuper.onFocus();\r\n\t}\r\n\t@HostListener('blur')\r\n\tonBlur() {\r\n\t\tsuper.onBlur();\r\n\t}\r\n\t@HostListener('keydown.space', ['$event'])\r\n\t@HostListener('keydown.enter', ['$event'])\r\n\tonKeydown($event: KeyboardEvent) {\r\n\t\tif (!this._popoverOpen) {\r\n\t\t\tthis.openPopover();\r\n\t\t\t$event.stopPropagation();\r\n\t\t\t$event.preventDefault();\r\n\t\t}\r\n\t}\r\n\r\n\tngAfterViewInit() {\r\n\t\tthis._isContentInitialized = true;\r\n\r\n\t\t// init picker and displayer and clearer\r\n\t\tconst picker = this.ccPicker || this.vcPicker;\r\n\t\tif (!!picker) {\r\n\t\t\tthis._picker = picker;\r\n\t\t}\r\n\t\tconst displayer = this.ccDisplayer || this.vcDisplayer;\r\n\t\tif (!!displayer) {\r\n\t\t\tthis._displayer = displayer;\r\n\t\t}\r\n\t\tconst clearer = this.ccClearer || this.vcClearer;\r\n\t\tif (!!clearer) {\r\n\t\t\tthis._clearer = clearer;\r\n\t\t}\r\n\r\n\t\tthis.render();\r\n\t\tthis._picker.setValue(this.value);\r\n\r\n\t\t// strange bug where the view renderred in the displayer was only injected after a hover\r\n\t\t// no matter how many cdr.markforchack i added\r\n\t\t// but with a timeout it works\r\n\t\t// shrug emoji\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis._changeDetectorRef.markForCheck();\r\n\t\t}, 1);\r\n\t}\r\n\r\n\tngOnDestroy() {\r\n\t\tif (this._popoverOpen) {\r\n\t\t\tthis.closePopover();\r\n\t\t}\r\n\t\tthis.destroyPopover();\r\n\t\tthis.onDestroy();\r\n\t}\r\n\tprotected _emitOpen(): void {\r\n\t\tthis.onOpen.emit();\r\n\t}\r\n\tprotected _emitClose(): void {\r\n\t\tthis.onClose.emit();\r\n\t}\r\n}\r\n\r\n/**\r\n* select input\r\n*/\r\n@Component({\r\n\tselector: 'lu-select',\r\n\ttemplateUrl: './select-input.component.html',\r\n\tstyleUrls: ['./select-input.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: NG_VALUE_ACCESSOR,\r\n\t\t\tuseExisting: forwardRef(() => LuSelectInputComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuSelectInputComponent<T = any> extends ALuSelectInputComponent<T> {\r\n\t@HostBinding('class.mod-multipleView')\r\n\tget modMultipleView() { return this.useMultipleViews(); }\r\n\tconstructor(\r\n\t\tprotected _changeDetectorRef: ChangeDetectorRef,\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _elementRef: ElementRef,\r\n\t\tprotected _viewContainerRef: ViewContainerRef,\r\n\t\tprotected _renderer: Renderer2,\r\n\t) {\r\n\t\tsuper(\r\n\t\t\t_changeDetectorRef,\r\n\t\t\t_overlay,\r\n\t\t\t_elementRef,\r\n\t\t\t_viewContainerRef,\r\n\t\t\t_renderer,\r\n\t\t);\r\n\t}\r\n\t// display clearer\r\n\t@ContentChild(ALuClearer, { read: ElementRef, static: false }) clearerEltRef: ElementRef;\r\n\t@ViewChild('suffix', { read: ElementRef, static: true }) suffixEltRef: ElementRef;\r\n\tdisplayClearer() {\r\n\t\tif (!!this.clearerEltRef) {\r\n\t\t\tthis._renderer.appendChild(this.suffixEltRef.nativeElement, this.clearerEltRef.nativeElement);\r\n\t\t}\r\n\t}\r\n\r\n\tngAfterViewInit() {\r\n\t\tsuper.ngAfterViewInit();\r\n\t\tthis.displayClearer(); // dont keep\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '_definitions';\r\n@include selectInputStyle;\r\n",
                    "styleUrl": "./select-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 192,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuSelectInputComponent",
            "templateData": "<div class=\"lu-select-placeholder\">{{placeholder}}</div>\r\n<div class=\"lu-select-value\">\r\n\t<div class=\"lu-select-display-wrapper\">\r\n\t\t<ng-container #display></ng-container>\r\n\t</div>\r\n</div>\r\n<div #suffix class=\"lu-select-suffix\"></div>\r\n"
        },
        {
            "name": "LuSidepanelPanelComponent",
            "id": "component-LuSidepanelPanelComponent-07fa1109daac684d2a6a79476675f7a0",
            "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel-panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-sidepanel-panel",
            "styleUrls": [
                "./sidepanel-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidepanel-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, ChangeDetectorRef, Inject } from '@angular/core';\r\nimport { ILuSidepanelContent } from './sidepanel.model';\r\nimport { ALuSidepanelRef } from './sidepanel-ref.model';\r\nimport { LuSidepanelIntl } from './sidepanel.intl';\r\nimport { ILuSidepanelLabel } from './sidepanel.translate';\r\nimport { ALuModalPanelComponent } from '@lucca-front/ng/modal';\r\n\r\n\r\n@Component({\r\n\tselector: 'lu-sidepanel-panel',\r\n\ttemplateUrl: './sidepanel-panel.component.html',\r\n\tstyleUrls: ['./sidepanel-panel.component.scss'],\r\n\thost: {'class': 'lu-sidepanel-panel'},\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuSidepanelPanelComponent<T extends ILuSidepanelContent = ILuSidepanelContent> extends ALuModalPanelComponent<T> {\r\n\tconstructor(\r\n\t\t_ref: ALuSidepanelRef<LuSidepanelPanelComponent>,\r\n\t\t_cdr: ChangeDetectorRef,\r\n\t\t@Inject(LuSidepanelIntl) intl: ILuSidepanelLabel,\r\n\t) {\r\n\t\tsuper(_ref, _cdr, intl);\r\n\t}\r\n}\r\n\r\n@Component({\r\n\tselector: 'lu-sidepanel-panel-default',\r\n\ttemplateUrl: './sidepanel-panel.component.html',\r\n\tstyleUrls: ['./sidepanel-panel.component.scss'],\r\n\thost: {'class': 'lu-sidepanel-panel'},\r\n\tchangeDetection: ChangeDetectionStrategy.Default,\r\n})\r\nexport class LuSidepanelPanelComponentDefaultCD<T extends ILuSidepanelContent = ILuSidepanelContent> extends ALuModalPanelComponent<T> {\r\n\tconstructor(\r\n\t\t_ref: ALuSidepanelRef<LuSidepanelPanelComponent>,\r\n\t\t_cdr: ChangeDetectorRef,\r\n\t\t@Inject(LuSidepanelIntl) intl: ILuSidepanelLabel,\r\n\t) {\r\n\t\tsuper(_ref, _cdr, intl);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sidepanel-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_ref",
                        "type": "ALuSidepanelRef<LuSidepanelPanelComponent>"
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "intl",
                        "type": "ILuSidepanelLabel"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_ref",
                        "type": "ALuSidepanelRef<LuSidepanelPanelComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "intl",
                        "type": "ILuSidepanelLabel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuModalPanelComponent",
            "templateData": "<div class=\"lu-sidepanel-panel-inner\" cdkTrapFocus=\"true\" cdkTrapFocusAutoCapture=\"true\" role=\"dialog\" aria-modal=\"true\">\r\n\t<div class=\"lu-modal-header\">\r\n\t\t<h3 class=\"lu-modal-header-title\">{{title}}</h3>\r\n\t\t<button class=\"lu-modal-header-close\" (click)=\"dismiss()\"><span aria-hidden=\"true\" class=\"lucca-icon\">cross</span><span class=\"u-mask\">Close</span></button>\r\n\t</div>\r\n\t<div class=\"lu-modal-content\">\r\n\t\t<ng-container cdkPortalOutlet #outlet></ng-container>\r\n\t</div>\r\n\t<div class=\"lu-modal-footer\">\r\n\t\t<button\r\n\t\t\t*ngIf=\"!isSubmitHidden\"\r\n\t\t\tclass=\"button palette-{{submitPalette}}\"\r\n\t\t\t[disabled]=\"isSubmitDisabled\"\r\n\t\t\t[class.mod-counter]=\"hasSubmitCounter\"\r\n\t\t\t[ngClass]=\"submitClass$ | async\"\r\n\t\t\t(click)=\"submit()\"\r\n\t\t>\r\n\t\t\t{{submitLabel}}\r\n\t\t\t<label class=\"button-counter\" *ngIf=\"hasSubmitCounter\">{{submitCounter}}</label>\r\n\t\t</button>\r\n\t\t<button class=\"button mod-link\" (click)=\"dismiss()\">{{cancelLabel}}</button>\r\n\t</div>\r\n</div>\r\n"
        },
        {
            "name": "LuSidepanelPanelComponentDefaultCD",
            "id": "component-LuSidepanelPanelComponentDefaultCD-07fa1109daac684d2a6a79476675f7a0",
            "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel-panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.Default",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-sidepanel-panel-default",
            "styleUrls": [
                "./sidepanel-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidepanel-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, ChangeDetectorRef, Inject } from '@angular/core';\r\nimport { ILuSidepanelContent } from './sidepanel.model';\r\nimport { ALuSidepanelRef } from './sidepanel-ref.model';\r\nimport { LuSidepanelIntl } from './sidepanel.intl';\r\nimport { ILuSidepanelLabel } from './sidepanel.translate';\r\nimport { ALuModalPanelComponent } from '@lucca-front/ng/modal';\r\n\r\n\r\n@Component({\r\n\tselector: 'lu-sidepanel-panel',\r\n\ttemplateUrl: './sidepanel-panel.component.html',\r\n\tstyleUrls: ['./sidepanel-panel.component.scss'],\r\n\thost: {'class': 'lu-sidepanel-panel'},\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuSidepanelPanelComponent<T extends ILuSidepanelContent = ILuSidepanelContent> extends ALuModalPanelComponent<T> {\r\n\tconstructor(\r\n\t\t_ref: ALuSidepanelRef<LuSidepanelPanelComponent>,\r\n\t\t_cdr: ChangeDetectorRef,\r\n\t\t@Inject(LuSidepanelIntl) intl: ILuSidepanelLabel,\r\n\t) {\r\n\t\tsuper(_ref, _cdr, intl);\r\n\t}\r\n}\r\n\r\n@Component({\r\n\tselector: 'lu-sidepanel-panel-default',\r\n\ttemplateUrl: './sidepanel-panel.component.html',\r\n\tstyleUrls: ['./sidepanel-panel.component.scss'],\r\n\thost: {'class': 'lu-sidepanel-panel'},\r\n\tchangeDetection: ChangeDetectionStrategy.Default,\r\n})\r\nexport class LuSidepanelPanelComponentDefaultCD<T extends ILuSidepanelContent = ILuSidepanelContent> extends ALuModalPanelComponent<T> {\r\n\tconstructor(\r\n\t\t_ref: ALuSidepanelRef<LuSidepanelPanelComponent>,\r\n\t\t_cdr: ChangeDetectorRef,\r\n\t\t@Inject(LuSidepanelIntl) intl: ILuSidepanelLabel,\r\n\t) {\r\n\t\tsuper(_ref, _cdr, intl);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sidepanel-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_ref",
                        "type": "ALuSidepanelRef<LuSidepanelPanelComponent>"
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "intl",
                        "type": "ILuSidepanelLabel"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "_ref",
                        "type": "ALuSidepanelRef<LuSidepanelPanelComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "intl",
                        "type": "ILuSidepanelLabel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuModalPanelComponent",
            "templateData": "<div class=\"lu-sidepanel-panel-inner\" cdkTrapFocus=\"true\" cdkTrapFocusAutoCapture=\"true\" role=\"dialog\" aria-modal=\"true\">\r\n\t<div class=\"lu-modal-header\">\r\n\t\t<h3 class=\"lu-modal-header-title\">{{title}}</h3>\r\n\t\t<button class=\"lu-modal-header-close\" (click)=\"dismiss()\"><span aria-hidden=\"true\" class=\"lucca-icon\">cross</span><span class=\"u-mask\">Close</span></button>\r\n\t</div>\r\n\t<div class=\"lu-modal-content\">\r\n\t\t<ng-container cdkPortalOutlet #outlet></ng-container>\r\n\t</div>\r\n\t<div class=\"lu-modal-footer\">\r\n\t\t<button\r\n\t\t\t*ngIf=\"!isSubmitHidden\"\r\n\t\t\tclass=\"button palette-{{submitPalette}}\"\r\n\t\t\t[disabled]=\"isSubmitDisabled\"\r\n\t\t\t[class.mod-counter]=\"hasSubmitCounter\"\r\n\t\t\t[ngClass]=\"submitClass$ | async\"\r\n\t\t\t(click)=\"submit()\"\r\n\t\t>\r\n\t\t\t{{submitLabel}}\r\n\t\t\t<label class=\"button-counter\" *ngIf=\"hasSubmitCounter\">{{submitCounter}}</label>\r\n\t\t</button>\r\n\t\t<button class=\"button mod-link\" (click)=\"dismiss()\">{{cancelLabel}}</button>\r\n\t</div>\r\n</div>\r\n"
        },
        {
            "name": "LuTooltipPanelComponent",
            "id": "component-LuTooltipPanelComponent-682125b0f929f3c899c2b5771edbde4f",
            "file": "packages/ng/libraries/tooltip/src/lib/panel/tooltip-panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-tooltip-panel",
            "styleUrls": [
                "./tooltip-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tooltip-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "hovered",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 25,
                    "type": "EventEmitter"
                },
                {
                    "name": "open",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_content",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_closeOnClick",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_contentClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_isOpen",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_keydownEventsSub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_overlayPaneClass",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "<p>Classes to be passed into the popover&#39;s overlay </p>\n",
                    "line": 96,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_panelClasses",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_positionClassesMap",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_scrollStrategy",
                    "defaultValue": "'reposition'",
                    "type": "LuPopoverScrollStrategy",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_templateRef",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_trapFocus",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "close",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "hovered",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "open",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "panelId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "triggerId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "_emitCloseEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "_emitHoveredEvent",
                    "args": [
                        {
                            "name": "hovered",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "hovered",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_emitOpenEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "_emitCloseEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_emitHoveredEvent",
                    "args": [
                        {
                            "name": "hovered",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "hovered",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_emitOpenEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "_handleKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onMouseDown",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "description": "<p>does nothing but must be overridable </p>\n",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "description": "<p>Enables close of popover when mouse leaving popover element </p>\n",
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onMouseOver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "description": "<p>TODO: Refactor when @angular/cdk includes feature I mentioned on github see link below.\n<a href=\"https://github.com/angular/material2/pull/5493#issuecomment-313085323\">https://github.com/angular/material2/pull/5493#issuecomment-313085323</a></p>\n",
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                },
                {
                    "name": "setPositionClasses",
                    "args": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos"
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "posX",
                            "type": "HorizontalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "posY",
                            "type": "VerticalConnectionPos",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ALuPopoverPanel"
                    }
                }
            ],
            "hostBindings": [
                {
                    "name": "@transformTooltip",
                    "defaultValue": "'enter'",
                    "line": 14
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output, HostBinding, ChangeDetectorRef, ChangeDetectionStrategy, ViewChild, TemplateRef } from '@angular/core';\r\nimport { ALuPopoverPanel, ILuPopoverPanel } from '@lucca-front/ng/popover';\r\nimport { luTransformTooltip } from '../animation/index';\r\n\r\n@Component({\r\n\tselector: 'lu-tooltip-panel',\r\n\ttemplateUrl: './tooltip-panel.component.html',\r\n\tstyleUrls: ['./tooltip-panel.component.scss'],\r\n\tanimations: [luTransformTooltip],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuTooltipPanelComponent extends ALuPopoverPanel implements ILuPopoverPanel {\r\n\r\n\t@HostBinding('@transformTooltip') animationState = 'enter';\r\n\r\n\tprivate _content;\r\n\tget content() { return this._content; }\r\n\tset content(c) {\r\n\t\tthis._content = c;\r\n\t\tthis._changeDetectorRef.markForCheck();\r\n\t}\r\n\r\n\t@Output() close = new EventEmitter<void>();\r\n\t@Output() open = new EventEmitter<void>();\r\n\t@Output() hovered = new EventEmitter<boolean>();\r\n\t@ViewChild(TemplateRef, { static: true })\r\n\tset vcTemplateRef(tr: TemplateRef<any>) {\r\n\t\tthis.templateRef = tr;\r\n\t}\r\n\tconstructor(private _changeDetectorRef: ChangeDetectorRef) {\r\n\t\tsuper();\r\n\t\tthis.scrollStrategy = 'close';\r\n\t}\r\n\r\n\t_emitCloseEvent(): void {\r\n\t\tthis.close.emit();\r\n\t}\r\n\r\n\t_emitOpenEvent(): void {\r\n\t\tthis.open.emit();\r\n\t}\r\n\t_emitHoveredEvent(hovered: boolean): void {\r\n\t\tthis.hovered.emit(hovered);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '_definitions';\r\n@include tooltipStyle;\r\n",
                    "styleUrl": "./tooltip-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuPopoverPanel",
            "implements": [
                "ILuPopoverPanel"
            ],
            "accessors": {
                "content": {
                    "name": "content",
                    "setSignature": {
                        "name": "content",
                        "type": "void",
                        "args": [
                            {
                                "name": "c",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 18,
                        "jsdoctags": [
                            {
                                "name": "c",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "content",
                        "type": "",
                        "returnType": "",
                        "line": 17
                    }
                },
                "vcTemplateRef": {
                    "name": "vcTemplateRef",
                    "setSignature": {
                        "name": "vcTemplateRef",
                        "type": "void",
                        "args": [
                            {
                                "name": "tr",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "jsdoctags": [
                            {
                                "name": "tr",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<!-- <div [ngClass]=\"panelClassesMap\" (mouseover)=\"onMouseOver()\" (mouseleave)=\"onMouseLeave()\" [innerHtml]=\"content | luSafeContent: 'html'\">\r\n</div> -->\r\n<ng-template>\r\n\t<div\r\n\t\tclass=\"lu-tooltip-panel\"\r\n\t\trole=\"tooltip\"\r\n\t\t[ngClass]=\"panelClassesMap\"\r\n\t\t(mouseover)=\"onMouseOver()\"\r\n\t\t(mouseleave)=\"onMouseLeave()\"\r\n\t\t[attr.id]=\"panelId\"\r\n\t\t[@transformTooltip]=\"'enter'\"\r\n\t>\r\n\t\t<div class=\"lu-tooltip-content\" [ngClass]=\"contentClassesMap\" [innerHtml]=\"content | luSafeContent: 'html'\"></div>\r\n\t</div>\r\n</ng-template>"
        },
        {
            "name": "LuTreeOptionFeederComponent",
            "id": "component-LuTreeOptionFeederComponent-ea839adb8eec36deabc55263e0d397c5",
            "file": "packages/ng/libraries/option/src/lib/operator/feeder/tree-option-feeder.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuTreeOptionOperator, useExisting: forwardRef(() => LuTreeOptionFeederComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-tree-option-feeder",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "options",
                    "line": 21,
                    "type": "[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "outOptions$",
                    "defaultValue": "new BehaviorSubject<ILuTree<T>[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { ILuTreeOptionOperator, ALuTreeOptionOperator } from '../tree-option-operator.model';\r\nimport { ILuTree } from '@lucca-front/ng/core';\r\n\r\n@Component({\r\n\tselector: 'lu-tree-option-feeder',\r\n\ttemplate: '',\r\n\tstyleUrls: [],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuTreeOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuTreeOptionFeederComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuTreeOptionFeederComponent<T = any> implements ILuTreeOptionOperator<T> {\r\n\toutOptions$ = new BehaviorSubject<ILuTree<T>[]>([]);\r\n\t@Input() set options(options: ILuTree<T>[]) {\r\n\t\tthis.outOptions$.next(options);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "ILuTreeOptionOperator"
            ],
            "accessors": {
                "options": {
                    "name": "options",
                    "setSignature": {
                        "name": "options",
                        "type": "void",
                        "args": [
                            {
                                "name": "options",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 21,
                        "jsdoctags": [
                            {
                                "name": "options",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "LuTreeOptionItemComponent",
            "id": "component-LuTreeOptionItemComponent-0bca83f7799c00ee5671f61227beb820",
            "file": "packages/ng/libraries/option/src/lib/item/tree-option-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuTreeOptionItem, useExisting: forwardRef(() => LuTreeOptionItemComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-tree-option",
            "styleUrls": [
                "./tree-option-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tree-option-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "highlighted",
                    "line": 76,
                    "type": "boolean"
                },
                {
                    "name": "selected",
                    "line": 68,
                    "type": "boolean"
                },
                {
                    "name": "tree",
                    "line": 56,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter<this>()",
                    "line": 43,
                    "type": "EventEmitter"
                },
                {
                    "name": "onSelectChildren",
                    "defaultValue": "new EventEmitter<this>()",
                    "line": 45,
                    "type": "EventEmitter"
                },
                {
                    "name": "onSelectSelf",
                    "defaultValue": "new EventEmitter<this>()",
                    "line": 44,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_children",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_childrenVCR",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'children', {static: true, read: ViewContainerRef}"
                        }
                    ],
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_displayer",
                    "type": "ILuInputDisplayer<T>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_highlighted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_selected",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_tree",
                    "type": "ILuTree<T>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_valueVCR",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'value', {static: true, read: ViewContainerRef}"
                        }
                    ],
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "element",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'element', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "intl",
                    "type": "ILuTreeOptionItemLabel",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LuTreeOptionItemIntl"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "children",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuTreeOptionItem"
                    }
                },
                {
                    "name": "onSelectChildren",
                    "type": "Observable<>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuTreeOptionItem"
                    }
                },
                {
                    "name": "onSelectSelf",
                    "type": "Observable<>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuTreeOptionItem"
                    }
                },
                {
                    "name": "element",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionItem"
                    }
                },
                {
                    "name": "highlighted",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionItem"
                    }
                },
                {
                    "name": "onSelect",
                    "type": "Observable<>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionItem"
                    }
                },
                {
                    "name": "selected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionItem"
                    }
                },
                {
                    "name": "value",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionItem"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "_renderChildren",
                    "args": [
                        {
                            "name": "children",
                            "type": "ILuTree<T>[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "children",
                            "type": "ILuTree<T>[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_renderValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "selectChildren",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "selectSelf",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n\tChangeDetectionStrategy,\r\n\tComponent,\r\n\tOutput,\r\n\tInput,\r\n\tEventEmitter,\r\n\tforwardRef,\r\n\tElementRef,\r\n\tViewChild,\r\n\tContentChild,\r\n\tViewContainerRef,\r\n\tComponentFactoryResolver,\r\n\tInject,\r\n\tChangeDetectorRef,\r\n} from '@angular/core';\r\nimport { ALuTreeOptionItem, ILuTreeOptionItem } from './tree-option-item.model';\r\nimport { ILuTree } from '@lucca-front/ng/core';\r\nimport { ILuInputDisplayer, ALuInputDisplayer } from '@lucca-front/ng/input';\r\nimport { ILuTreeOptionItemLabel } from './tree-option-item.translate';\r\nimport { LuTreeOptionItemIntl } from './tree-option-item.intl';\r\n\r\n@Component({\r\n\tselector: 'lu-tree-option',\r\n\ttemplateUrl: './tree-option-item.component.html',\r\n\tstyleUrls: ['./tree-option-item.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuTreeOptionItem,\r\n\t\t\tuseExisting: forwardRef(() => LuTreeOptionItemComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuTreeOptionItemComponent<T = any> extends ALuTreeOptionItem<T> implements ILuTreeOptionItem<T> {\r\n\tprotected _children = [];\r\n\tprotected _tree: ILuTree<T>;\r\n\tprotected _displayer: ILuInputDisplayer<T>;\r\n\t@ViewChild('value', { static: true, read: ViewContainerRef }) protected _valueVCR: ViewContainerRef;\r\n\t@ViewChild('children', { static: true, read: ViewContainerRef }) protected _childrenVCR: ViewContainerRef;\r\n\t@ViewChild('element', { read: ElementRef, static: true }) element: ElementRef;\r\n\r\n\t@Output() onSelect = new EventEmitter<this>();\r\n\t@Output() onSelectSelf = new EventEmitter<this>();\r\n\t@Output() onSelectChildren = new EventEmitter<this>();\r\n\tselect() {\r\n\t\tthis.onSelect.emit(this);\r\n\t}\r\n\tselectSelf() {\r\n\t\tthis.onSelectSelf.emit(this);\r\n\t}\r\n\tselectChildren() {\r\n\t\tthis.onSelectChildren.emit(this);\r\n\t}\r\n\r\n\t@Input() set tree(t: ILuTree<T>) {\r\n\t\tthis._tree = t;\r\n\t\tthis._renderValue(t.value);\r\n\t\tthis._renderChildren(t.children);\r\n\t}\r\n\tget value() { return this._tree.value; }\r\n\tget children() { return this._children; }\r\n\tset children(c) { this._children = c; }\r\n\tget hasChildren() { return !!this.children && this.children.length > 0; }\r\n\r\n\tprotected _selected = false;\r\n\tget selected() { return this._selected; }\r\n\t@Input() set selected(s: boolean) {\r\n\t\tif (s !== this._selected) {\r\n\t\t\tthis._selected = s;\r\n\t\t\tthis._cdr.markForCheck();\r\n\t\t}\r\n\t}\r\n\tprotected _highlighted = false;\r\n\tget highlighted() { return this._highlighted; }\r\n\t@Input() set highlighted(h: boolean) {\r\n\t\tif (h !== this._highlighted) {\r\n\t\t\tthis._highlighted = h;\r\n\t\t\tthis._cdr.markForCheck();\r\n\t\t}\r\n\t}\r\n\r\n\t@ContentChild(ALuInputDisplayer, { static: true }) set _contentChildDisplayer(displayer: ILuInputDisplayer<T>) {\r\n\t\tthis._displayer = displayer;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tprivate _componentFactoryResolver: ComponentFactoryResolver,\r\n\t\t@Inject(LuTreeOptionItemIntl) public intl: ILuTreeOptionItemLabel,\r\n\t\tprivate _cdr: ChangeDetectorRef,\r\n\t) {\r\n\t\tsuper();\r\n\t}\r\n\r\n\tprivate _renderValue(value: T) {\r\n\t\tconst evr = this._displayer.getViewRef(value);\r\n\t\tthis._valueVCR.clear();\r\n\t\tthis._valueVCR.insert(evr);\r\n\t}\r\n\tprivate _renderChildren(children: ILuTree<T>[] = []) {\r\n\t\tconst factory = this._componentFactoryResolver.resolveComponentFactory(LuTreeOptionItemComponent);\r\n\t\tthis._childrenVCR.clear();\r\n\t\tthis.children = children.map(c => {\r\n\t\t\tconst ref = this._childrenVCR.createComponent(factory);\r\n\t\t\tref.instance._displayer = this._displayer;\r\n\t\t\tref.instance.tree = c;\r\n\t\t\treturn ref.instance;\r\n\t\t});\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_definitions\";\r\n@include optionItemStyle;\r\n\r\n.optionItem {\r\n  &:hover {\r\n    .optionItem-value {\r\n      background: _theme('commons.highlight',true);\r\n\t\t\tbackground: _theme('commons.highlight');\r\n    }\r\n\r\n    .optionItem-icons {\r\n      opacity: 1;\r\n    }\r\n  }\r\n}\r\n\r\n.optionItem-value {\r\n  padding: _component(\"options.item.padding-vertical\", true) _component(\"options.item.padding-horizontal\", true) _component(\"options.item.padding-vertical\", true) .5rem;\r\n  padding: _component(\"options.item.padding-vertical\") _component(\"options.item.padding-horizontal\") _component(\"options.item.padding-vertical\") .5rem;\r\n}\r\n\r\n.optionItem-icons {\r\n  display: none;\r\n  position: absolute;\r\n  top: .5rem;\r\n  right: .5rem;\r\n  opacity: 0;\r\n  transition: all _theme(\"commons.animations.durations.fast\", true) ease;\r\n  transition: all _theme(\"commons.animations.durations.fast\") ease;\r\n}\r\n\r\n.optionItem-icon {\r\n  cursor: pointer;\r\n  opacity: .66;\r\n  margin-left: .5rem;\r\n  transition: all _theme(\"commons.animations.durations.fast\", true) ease;\r\n  transition: all _theme(\"commons.animations.durations.fast\") ease;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n.optionItem-icon-shape {\r\n  fill: _component(\"options.item.icon.color\");\r\n  width: 1.4rem;\r\n  height: 1.4rem;\r\n}\r\n\r\n:host-context(.lu-picker-panel) {\r\n  padding: 0;\r\n\r\n  .optionItem-value {\r\n    &::before {\r\n      top: 1.3rem;\r\n      left: .5rem;\r\n      pointer-events: none;\r\n    }\r\n\r\n    &::after {\r\n      top: 1.3rem;\r\n      left: .5rem;\r\n      pointer-events: none;\r\n    }\r\n  }\r\n}\r\n\r\n:host-context(.lu-picker-panel.mod-multiple) {\r\n  .optionItem-icons {\r\n    display: block;\r\n  }\r\n\r\n  .optionItem-value {\r\n    padding-right: 4rem;\r\n  }\r\n}\r\n\r\n/* clean-css ignore:start */\r\n:host-context(.lu-picker-panel lu-tree-option) {\r\n  .optionItem-value {\r\n    padding-left: 1.5rem;\r\n\r\n    &::before {\r\n      left: 1.5rem;\r\n    }\r\n\r\n    &::after {\r\n      left: 1.5rem;\r\n    }\r\n  }\r\n}\r\n\r\n:host-context(.lu-picker-panel.mod-multiple lu-tree-option) {\r\n  .optionItem-value {\r\n    padding-left: 3rem;\r\n  }\r\n}\r\n\r\n:host-context(.lu-picker-panel lu-tree-option lu-tree-option) {\r\n  .optionItem-value {\r\n    padding-left: 2.5rem;\r\n\r\n    &::before {\r\n      left: 2.5rem;\r\n    }\r\n\r\n    &::after {\r\n      left: 2.5rem;\r\n    }\r\n  }\r\n}\r\n\r\n:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option) {\r\n  .optionItem-value {\r\n    padding-left: 4rem;\r\n  }\r\n}\r\n\r\n:host-context(.lu-picker-panel lu-tree-option lu-tree-option lu-tree-option) {\r\n  .optionItem-value {\r\n    padding-left: 3.5rem;\r\n\r\n    &::before {\r\n      left: 3.5rem;\r\n    }\r\n\r\n    &::after {\r\n      left: 3.5rem;\r\n    }\r\n  }\r\n}\r\n\r\n:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option) {\r\n  .optionItem-value {\r\n    padding-left: 5rem;\r\n  }\r\n}\r\n\r\n:host-context(.lu-picker-panel lu-tree-option lu-tree-option lu-tree-option lu-tree-option) {\r\n  .optionItem-value {\r\n    padding-left: 4.5rem;\r\n\r\n    &::before {\r\n      left: 4.5rem;\r\n    }\r\n\r\n    &::after {\r\n      left: 4.5rem;\r\n    }\r\n  }\r\n}\r\n\r\n:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option lu-tree-option) {\r\n  .optionItem-value {\r\n    padding-left: 6rem;\r\n  }\r\n}\r\n\r\n:host-context(.lu-picker-panel lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option) {\r\n  .optionItem-value {\r\n    padding-left: 5.5rem;\r\n\r\n    &::before {\r\n      left: 5.5rem;\r\n    }\r\n\r\n    &::after {\r\n      left: 5.5rem;\r\n    }\r\n  }\r\n}\r\n\r\n:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option) {\r\n  .optionItem-value {\r\n    padding-left: 7rem;\r\n  }\r\n}\r\n\r\n:host-context(.lu-picker-panel lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option) {\r\n  .optionItem-value {\r\n    padding-left: 6.5rem;\r\n\r\n    &::before {\r\n      left: 6.5rem;\r\n    }\r\n\r\n    &::after {\r\n      left: 6.5rem;\r\n    }\r\n  }\r\n}\r\n\r\n:host-context(.lu-picker-panel.mod-multiple lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option lu-tree-option) {\r\n  .optionItem-value {\r\n    padding-left: 8rem;\r\n  }\r\n}\r\n/* clean-css ignore:end */\r\n",
                    "styleUrl": "./tree-option-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_componentFactoryResolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "intl",
                        "type": "ILuTreeOptionItemLabel"
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 85,
                "jsdoctags": [
                    {
                        "name": "_componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "intl",
                        "type": "ILuTreeOptionItemLabel",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuTreeOptionItem",
            "implements": [
                "ILuTreeOptionItem"
            ],
            "accessors": {
                "tree": {
                    "name": "tree",
                    "setSignature": {
                        "name": "tree",
                        "type": "void",
                        "args": [
                            {
                                "name": "t",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 56,
                        "jsdoctags": [
                            {
                                "name": "t",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 61
                    }
                },
                "children": {
                    "name": "children",
                    "setSignature": {
                        "name": "children",
                        "type": "void",
                        "args": [
                            {
                                "name": "c",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 63,
                        "jsdoctags": [
                            {
                                "name": "c",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "children",
                        "type": "",
                        "returnType": "",
                        "line": 62
                    }
                },
                "hasChildren": {
                    "name": "hasChildren",
                    "getSignature": {
                        "name": "hasChildren",
                        "type": "",
                        "returnType": "",
                        "line": 64
                    }
                },
                "selected": {
                    "name": "selected",
                    "setSignature": {
                        "name": "selected",
                        "type": "void",
                        "args": [
                            {
                                "name": "s",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 68,
                        "jsdoctags": [
                            {
                                "name": "s",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selected",
                        "type": "",
                        "returnType": "",
                        "line": 67
                    }
                },
                "highlighted": {
                    "name": "highlighted",
                    "setSignature": {
                        "name": "highlighted",
                        "type": "void",
                        "args": [
                            {
                                "name": "h",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 76,
                        "jsdoctags": [
                            {
                                "name": "h",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "highlighted",
                        "type": "",
                        "returnType": "",
                        "line": 75
                    }
                },
                "_contentChildDisplayer": {
                    "name": "_contentChildDisplayer",
                    "setSignature": {
                        "name": "_contentChildDisplayer",
                        "type": "void",
                        "args": [
                            {
                                "name": "displayer",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 83,
                        "jsdoctags": [
                            {
                                "name": "displayer",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"optionItem\" #element>\r\n\t<div class=\"optionItem-value\" (click)=\"select()\" [class.is-selected]=\"selected\" [class.is-highlighted]=\"highlighted\">\r\n\t\t<ng-container #value></ng-container>\r\n\t</div>\r\n\t<div class=\"optionItem-icons\" *ngIf=\"hasChildren\">\r\n\t\t<span class=\"optionItem-icon parentOnly\" (click)=\"selectSelf()\" [luTooltip]=\"intl.parentOnly\">\r\n\t\t\t<svg class=\"optionItem-icon-shape\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" focusable=\"false\">\r\n\t\t\t\t<path opacity=\"0.2\"\r\n\t\t\t\t\td=\"M8 13C8.55 13 9 12.55 9 12C9 11.45 8.55 11 8 11C7.45 11 7 11.45 7 12C7 12.55 7.45 13 8 13ZM8 18C8.55 18 9 17.55 9 17C9 16.45 8.55 16 8 16C7.45 16 7 16.45 7 17C7 17.55 7.45 18 8 18ZM12 13H20C20.55 13 21 12.55 21 12C21 11.45 20.55 11 20 11H12C11.45 11 11 11.45 11 12C11 12.55 11.45 13 12 13ZM12 18H20C20.55 18 21 17.55 21 17C21 16.45 20.55 16 20 16H12C11.45 16 11 16.45 11 17C11 17.55 11.45 18 12 18ZM8 13C8.55 13 9 12.55 9 12C9 11.45 8.55 11 8 11C7.45 11 7 11.45 7 12C7 12.55 7.45 13 8 13ZM8 18C8.55 18 9 17.55 9 17C9 16.45 8.55 16 8 16C7.45 16 7 16.45 7 17C7 17.55 7.45 18 8 18ZM12 13H20C20.55 13 21 12.55 21 12C21 11.45 20.55 11 20 11H12C11.45 11 11 11.45 11 12C11 12.55 11.45 13 12 13ZM12 18H20C20.55 18 21 17.55 21 17C21 16.45 20.55 16 20 16H12C11.45 16 11 16.45 11 17C11 17.55 11.45 18 12 18Z\"\r\n\t\t\t\t/>\r\n\t\t\t\t<path\r\n\t\t\t\t\td=\"M4 8C4.55 8 5 7.55 5 7C5 6.45 4.55 6 4 6C3.45 6 3 6.45 3 7C3 7.55 3.45 8 4 8ZM7 7C7 7.55 7.45 8 8 8H20C20.55 8 21 7.55 21 7C21 6.45 20.55 6 20 6H8C7.45 6 7 6.45 7 7ZM4 8C4.55 8 5 7.55 5 7C5 6.45 4.55 6 4 6C3.45 6 3 6.45 3 7C3 7.55 3.45 8 4 8ZM7 7C7 7.55 7.45 8 8 8H20C20.55 8 21 7.55 21 7C21 6.45 20.55 6 20 6H8C7.45 6 7 6.45 7 7Z\"\r\n\t\t\t\t/>\r\n\t\t\t</svg>\r\n\t\t</span>\r\n\t\t<span class=\"optionItem-icon childrenOnly\" (click)=\"selectChildren()\" [luTooltip]=\"intl.childrenOnly\">\r\n\t\t\t<svg class=\"optionItem-icon-shape\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" focusable=\"false\">\r\n\t\t\t\t<path\r\n\t\t\t\t\td=\"M8 13C8.55 13 9 12.55 9 12C9 11.45 8.55 11 8 11C7.45 11 7 11.45 7 12C7 12.55 7.45 13 8 13ZM8 18C8.55 18 9 17.55 9 17C9 16.45 8.55 16 8 16C7.45 16 7 16.45 7 17C7 17.55 7.45 18 8 18ZM12 13H20C20.55 13 21 12.55 21 12C21 11.45 20.55 11 20 11H12C11.45 11 11 11.45 11 12C11 12.55 11.45 13 12 13ZM12 18H20C20.55 18 21 17.55 21 17C21 16.45 20.55 16 20 16H12C11.45 16 11 16.45 11 17C11 17.55 11.45 18 12 18ZM8 13C8.55 13 9 12.55 9 12C9 11.45 8.55 11 8 11C7.45 11 7 11.45 7 12C7 12.55 7.45 13 8 13ZM8 18C8.55 18 9 17.55 9 17C9 16.45 8.55 16 8 16C7.45 16 7 16.45 7 17C7 17.55 7.45 18 8 18ZM12 13H20C20.55 13 21 12.55 21 12C21 11.45 20.55 11 20 11H12C11.45 11 11 11.45 11 12C11 12.55 11.45 13 12 13ZM12 18H20C20.55 18 21 17.55 21 17C21 16.45 20.55 16 20 16H12C11.45 16 11 16.45 11 17C11 17.55 11.45 18 12 18Z\"\r\n\t\t\t\t/>\r\n\t\t\t\t<path opacity=\"0.2\"\r\n\t\t\t\t\td=\"M4 8C4.55 8 5 7.55 5 7C5 6.45 4.55 6 4 6C3.45 6 3 6.45 3 7C3 7.55 3.45 8 4 8ZM7 7C7 7.55 7.45 8 8 8H20C20.55 8 21 7.55 21 7C21 6.45 20.55 6 20 6H8C7.45 6 7 6.45 7 7ZM4 8C4.55 8 5 7.55 5 7C5 6.45 4.55 6 4 6C3.45 6 3 6.45 3 7C3 7.55 3.45 8 4 8ZM7 7C7 7.55 7.45 8 8 8H20C20.55 8 21 7.55 21 7C21 6.45 20.55 6 20 6H8C7.45 6 7 6.45 7 7Z\"\r\n\t\t\t\t/>\r\n\t\t\t</svg>\r\n\t\t</span>\r\n\t</div>\r\n</div>\r\n\r\n<div #children class=\"children\">\r\n\t<ng-container #children></ng-container>\r\n</div>\r\n"
        },
        {
            "name": "LuTreeOptionPagerComponent",
            "id": "component-LuTreeOptionPagerComponent-f0659e6dd0d8784c4df33cd65e576d73",
            "file": "packages/ng/libraries/option/src/lib/operator/pager/tree-option-pager.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuTreeOptionOperator, useExisting: forwardRef(() => LuTreeOptionPagerComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuOnScrollBottomSubscriber, useExisting: forwardRef(() => LuTreeOptionPagerComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-tree-option-pager",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "outOptions$",
                    "type": "Observable<ILuTree[]>",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "paging$",
                    "defaultValue": "new BehaviorSubject<number>(MAGIC_STEP)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "inOptions$",
                    "type": "Observable<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionOperator"
                    }
                },
                {
                    "name": "outOptions$",
                    "type": "Observable<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionOperator"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "filter",
                    "args": [
                        {
                            "name": "trees",
                            "type": "ILuTree<T>[]",
                            "defaultValue": "[]"
                        },
                        {
                            "name": "values",
                            "type": "T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "ILuTree[]",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "trees",
                            "type": "ILuTree<T>[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "values",
                            "type": "T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "flatten",
                    "args": [
                        {
                            "name": "trees",
                            "type": "ILuTree<T>[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [],
                    "line": 49,
                    "jsdoctags": [
                        {
                            "name": "trees",
                            "type": "ILuTree<T>[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "onScrollBottom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "trim",
                    "args": [
                        {
                            "name": "trees",
                            "type": "ILuTree<T>[]",
                            "defaultValue": "[]"
                        },
                        {
                            "name": "paging",
                            "type": "number",
                            "defaultValue": "MAGIC_STEP"
                        }
                    ],
                    "optional": false,
                    "returnType": "ILuTree[]",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "trees",
                            "type": "ILuTree<T>[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "paging",
                            "type": "number",
                            "defaultValue": "MAGIC_STEP",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, forwardRef } from '@angular/core';\r\nimport { ILuOnScrollBottomSubscriber, ALuOnScrollBottomSubscriber } from '@lucca-front/ng/core';\r\nimport { Observable, BehaviorSubject, combineLatest } from 'rxjs';\r\nimport { ALuTreeOptionOperator, ILuTreeOptionOperator } from '../tree-option-operator.model';\r\nimport { ILuTree } from '@lucca-front/ng/core';\r\nconst MAGIC_STEP = 10;\r\n@Component({\r\n\tselector: 'lu-tree-option-pager',\r\n\ttemplate: '',\r\n\tstyleUrls: [],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuTreeOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuTreeOptionPagerComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOnScrollBottomSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuTreeOptionPagerComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuTreeOptionPagerComponent<T = any> extends ALuTreeOptionOperator<T> implements ILuTreeOptionOperator<T>, ILuOnScrollBottomSubscriber {\r\n\toutOptions$: Observable<ILuTree<T>[]>;\r\n\tset inOptions$(in$: Observable<ILuTree<T>[]>) {\r\n\t\tthis.outOptions$ = combineLatest(\r\n\t\t\tin$,\r\n\t\t\tthis.paging$,\r\n\t\t\t(options, paging) => {\r\n\t\t\t\treturn this.trim(options, paging);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\tpaging$ = new BehaviorSubject<number>(MAGIC_STEP);\r\n\tnext() {\r\n\t\tthis.paging$.next(this.paging$.value + MAGIC_STEP);\r\n\t}\r\n\tonScrollBottom() {\r\n\t\tthis.next();\r\n\t}\r\n\ttrim(trees: ILuTree<T>[] = [], paging: number = MAGIC_STEP): ILuTree<T>[] {\r\n\t\tconst flat = this.flatten(trees);\r\n\t\tconst flatTrimmed = flat.slice(0, paging);\r\n\r\n\t\treturn this.filter(trees, flatTrimmed);\r\n\t}\r\n\tflatten(trees: ILuTree<T>[] = []): T[] {\r\n\t\treturn trees.map(t => [t.value, ...this.flatten(t.children)]).reduce((a, v) => [...a, ...v], []);\r\n\t}\r\n\tfilter(trees: ILuTree<T>[] = [], values: T[]): ILuTree<T>[] {\r\n\t\treturn trees.map(t => {\r\n\t\t\tif (!values.some(v => v === t.value)) {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t\treturn { ...t, children: this.filter(t.children, values) }\r\n\t\t}).filter(t => !!t);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": "ALuTreeOptionOperator",
            "implements": [
                "ILuTreeOptionOperator",
                "ILuOnScrollBottomSubscriber"
            ],
            "accessors": {
                "inOptions$": {
                    "name": "inOptions$",
                    "setSignature": {
                        "name": "inOptions$",
                        "type": "void",
                        "args": [
                            {
                                "name": "in$",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "jsdoctags": [
                            {
                                "name": "in$",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "LuTreeOptionPickerAdvancedComponent",
            "id": "component-LuTreeOptionPickerAdvancedComponent-11b66a4850617bc4395a3604c0a232f3",
            "file": "packages/ng/libraries/option/src/lib/picker/tree-option-picker-advanced.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "LuOptionPicker",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuPickerPanel, useExisting: forwardRef(() => LuTreeOptionPickerAdvancedComponent),\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-tree-option-picker-advanced",
            "styleUrls": [
                "./tree-option-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tree-option-picker-advanced.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>advanced option picker panel</p>\n",
            "rawdescription": "advanced option picker panel",
            "type": "component",
            "sourceCode": "import {\r\n\tChangeDetectionStrategy,\r\n\tComponent,\r\n\tContentChildren,\r\n\tQueryList,\r\n\tforwardRef,\r\n\tChangeDetectorRef,\r\n\tAfterViewInit,\r\n\tDirective,\r\n} from '@angular/core';\r\nimport { luTransformPopover } from '@lucca-front/ng/popover';\r\nimport { Observable, merge } from 'rxjs';\r\nimport { first, mapTo, startWith, shareReplay, delay, mergeAll } from 'rxjs/operators';\r\nimport { ALuPickerPanel } from '@lucca-front/ng/picker';\r\nimport {\r\n\tALuTreeOptionOperator,\r\n\tILuTreeOptionOperator,\r\n} from '../operator/index';\r\nimport { ILuTreeOptionItem } from '../item/index';\r\nimport { ALuTreeOptionPickerComponent } from './tree-option-picker.component';\r\nimport { ILuTree } from '@lucca-front/ng/core';\r\nimport {\r\n\tALuOnOpenSubscriber,\r\n\tILuOnOpenSubscriber,\r\n\tALuOnCloseSubscriber,\r\n\tILuOnCloseSubscriber,\r\n\tILuOnScrollBottomSubscriber,\r\n\tALuOnScrollBottomSubscriber\r\n} from '@lucca-front/ng/core';\r\nimport { ILuTreeOptionSelector, ALuTreeOptionSelector } from '../selector/index';\r\n\r\n@Directive()\r\nexport abstract class ALuTreeOptionPickerAdvancedComponent<T = any, O extends ILuTreeOptionItem<T> = ILuTreeOptionItem<T>>\r\nextends ALuTreeOptionPickerComponent<T, O> implements AfterViewInit {\r\n\tloading$: Observable<boolean>;\r\n\r\n\tprotected _operators: ILuTreeOptionOperator<T>[] = [];\r\n\tprotected _operatorsQL: QueryList<ILuTreeOptionOperator<T>>;\r\n\t@ContentChildren(ALuTreeOptionOperator, { descendants: true }) set operatorsQL(ql: QueryList<ILuTreeOptionOperator<T>>) {\r\n\t\tthis._operatorsQL = ql;\r\n\r\n\t}\r\n\tprotected _onOpenSubscribers = [];\r\n\t@ContentChildren(ALuOnOpenSubscriber, { descendants: true }) set onOpenSubsQL(ql: QueryList<ILuOnOpenSubscriber>) {\r\n\t\tthis._onOpenSubscribers = ql.toArray();\r\n\t}\r\n\tprotected _onCloseSubscribers = [];\r\n\t@ContentChildren(ALuOnCloseSubscriber, { descendants: true }) set onCloseSubsQL(ql: QueryList<ILuOnCloseSubscriber>) {\r\n\t\tthis._onCloseSubscribers = ql.toArray();\r\n\t}\r\n\tprotected _onScrollBottomSubscribers = [];\r\n\t@ContentChildren(ALuOnScrollBottomSubscriber, { descendants: true }) set onScrollBottomSubsQL(ql: QueryList<ILuOnScrollBottomSubscriber>) {\r\n\t\tthis._onScrollBottomSubscribers = ql.toArray();\r\n\t}\r\n\r\n\tprotected _selectorsQL: QueryList<ILuTreeOptionSelector<T>>;\r\n\tprotected _selectors: ILuTreeOptionSelector<T>[] = [];\r\n\t@ContentChildren(ALuTreeOptionSelector, {descendants: true}) set selectorsQL(ql: QueryList<ILuTreeOptionSelector<T>>) {\r\n\t\tthis._selectorsQL = ql;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\t_changeDetectorRef: ChangeDetectorRef,\r\n\t) {\r\n\t\tsuper(_changeDetectorRef);\r\n\t}\r\n\tonScrollBottom() {\r\n\t\tthis._onScrollBottomSubscribers.forEach(o => {\r\n\t\t\tif (!o.onScrollBottom) { return; }\r\n\t\t\to.onScrollBottom();\r\n\t\t});\r\n\t}\r\n\tonOpen() {\r\n\t\tthis._onOpenSubscribers.forEach(o => {\r\n\t\t\to.onOpen();\r\n\t\t});\r\n\t\tsuper.onOpen();\r\n\t}\r\n\tonClose() {\r\n\t\tthis._onCloseSubscribers.forEach(o => {\r\n\t\t\to.onClose();\r\n\t\t});\r\n\t\tsuper.onClose();\r\n\t}\r\n\tsetValue(value: T | T[]) {\r\n\t\tsuper.setValue(value);\r\n\t\tthis._selectors.forEach(s => s.setValue(value));\r\n\t}\r\n\r\n\tprotected initOperators() {\r\n\t\tconst operators = this._operatorsQL.toArray();\r\n\t\tthis._operators = operators;\r\n\t\tlet options$: Observable<ILuTree<T>[]>;\r\n\t\toperators.forEach(operator => {\r\n\t\t\toperator.inOptions$ = options$;\r\n\t\t\toptions$ = operator.outOptions$;\r\n\t\t});\r\n\t\tconst lastOperator = operators[operators.length - 1];\r\n\t\tif (lastOperator && lastOperator.outOptions$) {\r\n\t\t\tthis.loading$ = lastOperator.outOptions$.pipe(\r\n\t\t\t\tfirst(),\r\n\t\t\t\tmapTo(false),\r\n\t\t\t\tstartWith(true),\r\n\t\t\t\tshareReplay(),\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\tprotected initSelectors() {\r\n\t\tthis._selectors = this._selectorsQL.toArray();\r\n\t\tthis._subs.add(\r\n\t\t\tmerge(\r\n\t\t\t\tthis._selectors.map(s => s.onSelectValue),\r\n\t\t\t).pipe(\r\n\t\t\t\tmergeAll(),\r\n\t\t\t).subscribe(values => {\r\n\t\t\t\tthis._select(values);\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\tngAfterViewInit() {\r\n\t\tsuper.ngAfterViewInit();\r\n\t\tthis.initOperators();\r\n\t\tthis.initSelectors();\r\n\t}\r\n}\r\n\r\n/**\r\n* advanced option picker panel\r\n*/\r\n@Component({\r\n\tselector: 'lu-tree-option-picker-advanced',\r\n\ttemplateUrl: './tree-option-picker-advanced.component.html',\r\n\tstyleUrls: ['./tree-option-picker.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tanimations: [luTransformPopover],\r\n\texportAs: 'LuOptionPicker',\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuPickerPanel,\r\n\t\t\tuseExisting: forwardRef(() => LuTreeOptionPickerAdvancedComponent),\r\n\t\t},\r\n\t]\r\n})\r\nexport class LuTreeOptionPickerAdvancedComponent<T = any, O extends ILuTreeOptionItem<T> = ILuTreeOptionItem<T>> extends ALuTreeOptionPickerAdvancedComponent<T, O> {\r\n\tconstructor(\r\n\t\t_changeDetectorRef: ChangeDetectorRef,\r\n\t) {\r\n\t\tsuper(_changeDetectorRef);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tree-option-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 144,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuTreeOptionPickerAdvancedComponent",
            "templateData": "<ng-template>\r\n\t<div class=\"lu-picker-panel lu-tree-option-picker-panel\" role=\"dialog\" [ngClass]=\"panelClassesMap\" [class.mod-multiple]=\"multiple\"\r\n\t (click)=\"onClick()\" (mouseover)=\"onMouseOver()\" (mouseleave)=\"onMouseLeave()\" (mousedown)=\"onMouseDown($event)\">\r\n\t\t<div class=\"lu-picker-content\" [ngClass]=\"contentClassesMap\" [cdkTrapFocus]=\"trapFocus\" luScroll (onScrollBottom)=\"onScrollBottom()\">\r\n\t\t\t<ng-content [class.is-loading]=\"loading$ | async\"></ng-content>\r\n\t\t</div>\r\n\t</div>\r\n</ng-template>\r\n"
        },
        {
            "name": "LuTreeOptionPickerComponent",
            "id": "component-LuTreeOptionPickerComponent-30d2035fa84f1082ad97f8928c361025",
            "file": "packages/ng/libraries/option/src/lib/picker/tree-option-picker.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "LuTreeOptionPicker",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuPickerPanel, useExisting: forwardRef(() => LuTreeOptionPickerComponent),\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-tree-option-picker",
            "styleUrls": [
                "./tree-option-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tree-option-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>basic tree option picker panel</p>\n",
            "rawdescription": "basic tree option picker panel",
            "type": "component",
            "sourceCode": "import {\r\n\tChangeDetectionStrategy,\r\n\tComponent,\r\n\tforwardRef,\r\n\tOnDestroy,\r\n\tContentChildren,\r\n\tViewContainerRef,\r\n\tQueryList,\r\n\tChangeDetectorRef,\r\n\tAfterContentInit,\r\n\tAfterViewInit,\r\n\tOnInit,\r\n\tDirective,\r\n} from '@angular/core';\r\nimport { luTransformPopover } from '@lucca-front/ng/popover';\r\nimport { ALuPickerPanel } from '@lucca-front/ng/picker';\r\nimport { ALuOptionPickerComponent } from './option-picker.component';\r\nimport { ILuTreeOptionPickerPanel } from './tree-option-picker.model';\r\nimport { ILuTreeOptionItem, ALuTreeOptionItem } from '../item/index';\r\nimport { Observable, merge, of } from 'rxjs';\r\nimport { switchMap, map, delay, startWith } from 'rxjs/operators';\r\n\r\nenum ToggleMode {\r\n\tall,\r\n\tself,\r\n\tchildren,\r\n}\r\n\r\n@Directive()\r\nexport abstract class ALuTreeOptionPickerComponent<T = any, O extends ILuTreeOptionItem<T> = ILuTreeOptionItem<T>>\r\nextends ALuOptionPickerComponent<T, O>\r\nimplements ILuTreeOptionPickerPanel<T, O>, OnDestroy, AfterViewInit {\r\n\t@ContentChildren(ALuTreeOptionItem, { descendants: true }) set optionsQL(ql: QueryList<O>) {\r\n\t\tthis._optionsQL = ql;\r\n\t}\r\n\t@ContentChildren(ALuTreeOptionItem, { descendants: true, read: ViewContainerRef }) optionsQLVR: QueryList<ViewContainerRef>;\r\n\tprotected set _options$(optionItems$: Observable<O[]>) {\r\n\t\t// reapply selected when the options change\r\n\t\tthis._subs.add(\r\n\t\t\toptionItems$\r\n\t\t\t.subscribe(o => this._applySelected())\r\n\t\t);\r\n\t\t// subscribe to any option.onSelect\r\n\t\tconst singleFlowSelect$ = optionItems$.pipe(switchMap(\r\n\t\t\titems => merge(...items.map(i => i.onSelect))\r\n\t\t));\r\n\t\tconst singleFlowSelectSelf$ = optionItems$.pipe(switchMap(\r\n\t\t\titems => merge(...items.map(i => i.onSelectSelf))\r\n\t\t));\r\n\t\tconst singleFlowSelectChildren$ = optionItems$.pipe(switchMap(\r\n\t\t\titems => merge(...items.map(i => i.onSelectChildren))\r\n\t\t));\r\n\r\n\t\tthis._subs.add(\r\n\t\t\tsingleFlowSelect$\r\n\t\t\t.subscribe(option => this._toggle(option, ToggleMode.all))\r\n\t\t);\r\n\t\tthis._subs.add(\r\n\t\t\tsingleFlowSelectSelf$\r\n\t\t\t.subscribe(option => this._toggle(option, ToggleMode.self))\r\n\t\t);\r\n\t\tthis._subs.add(\r\n\t\t\tsingleFlowSelectChildren$\r\n\t\t\t.subscribe(option => this._toggle(option, ToggleMode.children))\r\n\t\t);\r\n\t}\r\n\tconstructor(\r\n\t\t_changeDetectorRef: ChangeDetectorRef,\r\n\t) {\r\n\t\tsuper(_changeDetectorRef);\r\n\t}\r\n\tprotected _toggle(option: O, mod = ToggleMode.all) {\r\n\t\tswitch (mod) {\r\n\t\t\tcase ToggleMode.self:\r\n\t\t\t\treturn this._toggleSelf(option);\r\n\t\t\tcase ToggleMode.children:\r\n\t\t\t\treturn this._toggleChildren(option);\r\n\t\t\tcase ToggleMode.self:\r\n\t\t\tdefault:\r\n\t\t\t\treturn this._toggleAll(option);\r\n\t\t}\r\n\t}\r\n\tprotected _toggleAll(option: O) {\r\n\t\tconst value = option.value;\r\n\t\tif (!this.multiple) {\r\n\t\t\tthis._select(value);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst allChildren = option.allChildren.map(i => i.value);\r\n\t\tconst values = <T[]>this._value || [];\r\n\t\tlet newValues;\r\n\t\tconst selfSelected = values.some(v => this.optionComparer(v, value));\r\n\t\tconst allChildrenSelected = allChildren.every(child => values.some(v => this.optionComparer(v, child)));\r\n\t\tif (selfSelected && allChildrenSelected) {\r\n\t\t\t// remove option and its children\r\n\t\t\tnewValues = this._remove(values, [value, ...allChildren]);\r\n\t\t} else {\r\n\t\t\t// add option and its children\r\n\t\t\tnewValues = this._add(values, [value, ...allChildren]);\r\n\t\t}\r\n\t\tthis._select(newValues);\r\n\t}\r\n\tprotected _toggleSelf(option: O) {\r\n\t\tconst value = option.value;\r\n\t\tif (!this.multiple) {\r\n\t\t\tthis._select(value);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst allChildren = option.allChildren.map(i => i.value);\r\n\t\tconst values = <T[]>this._value || [];\r\n\t\tconst selfSelected = values.some(v => this.optionComparer(v, value));\r\n\t\tconst someChildSelected = allChildren.some(child => values.some(v => this.optionComparer(v, child)));\r\n\r\n\t\tlet newValues = this._remove(values, [...allChildren]);\r\n\t\tif (selfSelected && !someChildSelected) {\r\n\t\t\t// remove option\r\n\t\t\tnewValues = this._remove(newValues, [value]);\r\n\t\t} else {\r\n\t\t\t// add option\r\n\t\t\tnewValues = this._add(newValues, [value]);\r\n\t\t}\r\n\t\tthis._select(newValues);\r\n\t}\r\n\tprotected _toggleChildren(option: O) {\r\n\t\tconst value = option.value;\r\n\t\tif (!this.multiple) {\r\n\t\t\tthis._select(value);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst allChildren = option.allChildren.map(i => i.value);\r\n\t\tconst values = <T[]>this._value || [];\r\n\t\tconst selfSelected = values.some(v => this.optionComparer(v, value));\r\n\t\tlet newValues = this._remove(values, [value]);\r\n\t\tconst allChildrenSelected = allChildren.every(child => values.some(v => this.optionComparer(v, child)));\r\n\t\tif (allChildrenSelected && !selfSelected) {\r\n\t\t\tnewValues = this._remove(newValues, allChildren);\r\n\t\t} else {\r\n\t\t\tnewValues = this._add(newValues, allChildren);\r\n\t\t}\r\n\t\tthis._select(newValues);\r\n\t}\r\n\tprotected _add(values: T[], entries: T[]): T[] {\r\n\t\tconst newEntries = entries.filter(entry => !values.some(v => this.optionComparer(v, entry)));\r\n\t\treturn [...values, ...newEntries];\r\n\t}\r\n\tprotected _remove(values: T[], entries: T[]): T[] {\r\n\t\tconst entriesToKeep = values.filter(value => !entries.some(e => this.optionComparer(e, value)));\r\n\t\treturn [...entriesToKeep];\r\n\t}\r\n\r\n\tprotected initItems() {\r\n\r\n\t\tconst items$ = this._optionsQL.changes\r\n\t\t\t.pipe(\r\n\t\t\t\tstartWith(this._optionsQL),\r\n\t\t\t\tmap<QueryList<O>, O[]>(q => q.toArray()),\r\n\t\t\t\tmap(roots => roots.map(r => [r, ...r.allChildren]).reduce((agg, val) => [...agg, ...val], [])),\r\n\t\t\t\tdelay(0),\r\n\t\t\t);\r\n\t\tthis._subs.add(items$.subscribe(o => this._options = o || []));\r\n\t\tthis._options$ = items$;\r\n\t}\r\n\tngAfterViewInit() {\r\n\t\tthis.initItems();\r\n\t}\r\n}\r\n/**\r\n* basic tree option picker panel\r\n*/\r\n@Component({\r\n\tselector: 'lu-tree-option-picker',\r\n\ttemplateUrl: './tree-option-picker.component.html',\r\n\tstyleUrls: ['./tree-option-picker.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tanimations: [luTransformPopover],\r\n\texportAs: 'LuTreeOptionPicker',\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuPickerPanel,\r\n\t\t\tuseExisting: forwardRef(() => LuTreeOptionPickerComponent),\r\n\t\t},\r\n\t]\r\n})\r\nexport class LuTreeOptionPickerComponent<T = any, O extends ILuTreeOptionItem<T> = ILuTreeOptionItem<T>>\r\nextends ALuTreeOptionPickerComponent<T, O> {\r\n\tconstructor(\r\n\t\t_changeDetectorRef: ChangeDetectorRef,\r\n\t) {\r\n\t\tsuper(_changeDetectorRef);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tree-option-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 185,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuTreeOptionPickerComponent",
            "templateData": "<ng-template>\r\n\t<div class=\"lu-picker-panel lu-tree-option-picker-panel\" role=\"dialog\" [ngClass]=\"panelClassesMap\" [class.mod-multiple]=\"multiple\"\r\n\t (click)=\"onClick()\" (mouseover)=\"onMouseOver()\" (mouseleave)=\"onMouseLeave()\" (mousedown)=\"onMouseDown($event)\">\r\n\t\t<div class=\"lu-picker-content\" [ngClass]=\"contentClassesMap\" [cdkTrapFocus]=\"trapFocus\">\r\n\t\t\t<ng-content></ng-content>\r\n\t\t</div>\r\n\t</div>\r\n</ng-template>\r\n"
        },
        {
            "name": "LuTreeOptionSearcherComponent",
            "id": "component-LuTreeOptionSearcherComponent-1a960598cca7af9e4a9a6da4a5c5860e",
            "file": "packages/ng/libraries/option/src/lib/operator/searcher/tree-option-searcher.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuTreeOptionOperator, useExisting: forwardRef(() => LuTreeOptionSearcherComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuOnOpenSubscriber, useExisting: forwardRef(() => LuTreeOptionSearcherComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-tree-option-searcher",
            "styleUrls": [
                "./option-searcher.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./option-searcher.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "searchFn",
                    "defaultValue": "() => true",
                    "line": 48,
                    "type": "function"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clue$",
                    "defaultValue": "merge(of(''), this.searchControl.valueChanges)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "empty$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "outOptions$",
                    "type": "Observable<ILuTree[]>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "searchControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "searchInput",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchInput', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "inOptions$",
                    "type": "Observable<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionOperator"
                    }
                },
                {
                    "name": "outOptions$",
                    "type": "Observable<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionOperator"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "resetClue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "trim",
                    "args": [
                        {
                            "name": "options",
                            "type": "ILuTree<T>[]"
                        },
                        {
                            "name": "clue",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "ILuTree[]",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "ILuTree<T>[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, forwardRef, Input, ViewChild, ElementRef, HostBinding, Inject } from '@angular/core';\r\nimport { Observable, combineLatest, merge, of } from 'rxjs';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ALuTreeOptionOperator, ILuTreeOptionOperator } from '../tree-option-operator.model';\r\nimport { ALuOnOpenSubscriber, ILuOnOpenSubscriber } from '@lucca-front/ng/core';\r\nimport { ILuTree } from '@lucca-front/ng/core';\r\nimport { tap, map } from 'rxjs/operators';\r\n\r\n@Component({\r\n\tselector: 'lu-tree-option-searcher',\r\n\ttemplateUrl: './option-searcher.component.html',\r\n\tstyleUrls: ['./option-searcher.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuTreeOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuTreeOptionSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOnOpenSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuTreeOptionSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuTreeOptionSearcherComponent<T = any> extends ALuTreeOptionOperator<T> implements ILuTreeOptionOperator<T>, ILuOnOpenSubscriber {\r\n\tsearchControl = new FormControl();\r\n\tclue$ = merge(of(''), this.searchControl.valueChanges);\r\n\tempty$: Observable<boolean>;\r\n\t@ViewChild('searchInput', { read: ElementRef, static: true }) searchInput: ElementRef;\r\n\toutOptions$: Observable<ILuTree<T>[]>;\r\n\tset inOptions$(in$: Observable<ILuTree<T>[]>) {\r\n\t\tthis.outOptions$ = combineLatest(\r\n\t\t\tin$,\r\n\t\t\tthis.clue$,\r\n\t\t\t(options, clue) => {\r\n\t\t\t\tif (!clue) {\r\n\t\t\t\t\treturn options || [];\r\n\t\t\t\t}\r\n\t\t\t\treturn this.trim(options, clue);\r\n\t\t\t}\r\n\t\t);\r\n\t\tthis.empty$ = this.outOptions$.pipe(\r\n\t\t\tmap(o => !o || o.length === 0),\r\n\t\t);\r\n\t}\r\n\t@Input() searchFn: (option: T, clue: string) => boolean = () => true;\r\n\r\n\tonOpen() {\r\n\t\tthis.searchInput.nativeElement.focus();\r\n\t\tthis.searchControl.setValue('');\r\n\t}\r\n\ttrim(options: ILuTree<T>[], clue: string): ILuTree<T>[] {\r\n\t\treturn options.map(option => {\r\n\t\t\tif (this.searchFn(option.value, clue)) {\r\n\t\t\t\treturn { ...option };\r\n\t\t\t}\r\n\t\t\tconst trimmedChildren = option.children ? this.trim(option.children, clue) : [];\r\n\t\t\tif (trimmedChildren.length) {\r\n\t\t\t\treturn { ...option, children: trimmedChildren };\r\n\t\t\t}\r\n\t\t\treturn undefined;\r\n\t\t}).filter(o => !!o);\r\n\t}\r\n\tresetClue() {\r\n\t\tthis.searchControl.setValue('');\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '_definitions';\r\n@include optionSearcherStyle;\r\n",
                    "styleUrl": "./option-searcher.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "ALuTreeOptionOperator",
            "implements": [
                "ILuTreeOptionOperator",
                "ILuOnOpenSubscriber"
            ],
            "accessors": {
                "inOptions$": {
                    "name": "inOptions$",
                    "setSignature": {
                        "name": "inOptions$",
                        "type": "void",
                        "args": [
                            {
                                "name": "in$",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "jsdoctags": [
                            {
                                "name": "in$",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"textfield mod-search\">\r\n\t<input #searchInput class=\"textfield-input\" [formControl]=\"searchControl\">\r\n</div>\r\n\r\n<lu-option-placeholder *ngIf=\"empty$ | async\" (onClear)=\"resetClue()\"></lu-option-placeholder>"
        },
        {
            "name": "LuTreeOptionSelectAllComponent",
            "id": "component-LuTreeOptionSelectAllComponent-4e27670423f80101bfec21ba2aec4c09",
            "file": "packages/ng/libraries/option/src/lib/selector/all/tree-select-all.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuTreeOptionOperator, useExisting: forwardRef(() => LuTreeOptionSelectAllComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuTreeOptionSelector, useExisting: forwardRef(() => LuTreeOptionSelectAllComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-tree-option-select-all",
            "styleUrls": [
                "select-all.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-all.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_values",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "flatOptions",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "intl",
                    "type": "ILuOptionSelectAllLabel",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LuOptionSelectAllIntl"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "multiple",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "onSelectValue",
                    "defaultValue": "new Subject<T | T[]>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "outOptions$",
                    "type": "Observable<ILuTree[]>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "inOptions$",
                    "type": "Observable<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionOperator"
                    }
                },
                {
                    "name": "outOptions$",
                    "type": "Observable<T[]>",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        117
                    ],
                    "inheritance": {
                        "file": "ALuOptionOperator"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "deselectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "flattenTree",
                    "args": [
                        {
                            "name": "tree",
                            "type": "ILuTree<T>[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "ILuTree<T>[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "values",
                            "type": "T | T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "T | T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "class.position-fixed",
                    "defaultValue": "true",
                    "line": 32
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, forwardRef, HostBinding, Inject } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { ALuTreeOptionSelector, ILuTreeOptionSelector } from '../tree-option-selector.model';\r\nimport { tap } from 'rxjs/operators';\r\nimport { ALuTreeOptionOperator } from '../../operator/index';\r\nimport { ILuOptionSelectAllLabel } from './select-all.translate';\r\nimport { LuOptionSelectAllIntl } from './select-all.intl';\r\nimport { ILuTree } from '@lucca-front/ng/core';\r\n@Component({\r\n\tselector: 'lu-tree-option-select-all',\r\n\ttemplateUrl: './select-all.component.html',\r\n\tstyleUrls: ['select-all.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuTreeOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuTreeOptionSelectAllComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuTreeOptionSelector,\r\n\t\t\tuseExisting: forwardRef(() => LuTreeOptionSelectAllComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuTreeOptionSelectAllComponent<T = any> extends ALuTreeOptionOperator<T> implements ILuTreeOptionSelector<T> {\r\n\tmultiple = true;\r\n\tonSelectValue = new Subject<T | T[]>();\r\n\tprivate _values: T[];\r\n\r\n\t@HostBinding('class.position-fixed') fixed = true;\r\n\tflatOptions: T[];\r\n\toutOptions$: Observable<ILuTree<T>[]>;\r\n\tset inOptions$(in$: Observable<ILuTree<T>[]>) {\r\n\t\tthis.outOptions$ = in$.pipe(\r\n\t\t\ttap(options => this.flatOptions = this.flattenTree(options))\r\n\t\t);\r\n\t}\r\n\r\n\tconstructor(\r\n\t\t@Inject(LuOptionSelectAllIntl) public intl: ILuOptionSelectAllLabel,\r\n\t) {\r\n\t\tsuper();\r\n\t}\r\n\r\n\tselectAll() {\r\n\t\tthis.onSelectValue.next([...this.flatOptions]);\r\n\t}\r\n\tdeselectAll() {\r\n\t\tthis.onSelectValue.next([]);\r\n\t}\r\n\tsetValue(values: T | T[]): void {\r\n\t\tthis._values = values as T[];\r\n\t}\r\n\r\n\tprivate flattenTree(tree: ILuTree<T>[] = []): T[] {\r\n\t\treturn tree\r\n\t\t\t.map(t => [t.value, ...this.flattenTree(t.children)])\r\n\t\t\t.reduce((agg, cur) => [...agg, ...cur], []);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '_definitions';\r\n:host {\r\n\t@include optionSelectorStyle;\r\n}\r\n",
                    "styleUrl": "select-all.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "intl",
                        "type": "ILuOptionSelectAllLabel"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "intl",
                        "type": "ILuOptionSelectAllLabel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuTreeOptionOperator",
            "implements": [
                "ILuTreeOptionSelector"
            ],
            "accessors": {
                "inOptions$": {
                    "name": "inOptions$",
                    "setSignature": {
                        "name": "inOptions$",
                        "type": "void",
                        "args": [
                            {
                                "name": "in$",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 35,
                        "jsdoctags": [
                            {
                                "name": "in$",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<button (click)=\"selectAll()\" class=\"link selectAll-button\">{{intl.select}}</button>\r\n<button (click)=\"deselectAll()\" class=\"link selectAll-button u-marginLeftSmaller\">{{intl.deselect}}</button>"
        },
        {
            "name": "LuUserHomonymsComponent",
            "id": "component-LuUserHomonymsComponent-101adfacefdb264382d1a4509a24d076",
            "file": "packages/ng/libraries/user/src/lib/select/homonyms/user-homonyms.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuOptionOperator, useExisting: forwardRef(() => LuUserHomonymsComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuUserHomonymsService, useClass: LuUserHomonymsService,\n}"
                }
            ],
            "selector": "lu-user-homonyms",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_outOptions$",
                    "type": "Observable<U[]>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_service",
                    "type": "ILuUserHomonymsService<U>",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, forwardRef, SkipSelf, Self, Optional, Inject } from '@angular/core';\r\nimport { ALuOptionOperator, ILuOptionOperator} from '@lucca-front/ng/option';\r\nimport { ILuUser } from '../../user.model';\r\nimport { map, withLatestFrom, switchMap } from 'rxjs/operators';\r\nimport { ALuUserHomonymsService, LuUserHomonymsService, ILuUserHomonymsService } from './user-homonyms.service';\r\nimport { merge, Observable } from 'rxjs';\r\n\r\n@Component({\r\n\tselector: 'lu-user-homonyms',\r\n\ttemplate: '',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuUserHomonymsComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuUserHomonymsService,\r\n\t\t\tuseClass: LuUserHomonymsService,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuUserHomonymsComponent<U extends ILuUser = ILuUser> implements ILuOptionOperator<U> {\r\n\tset inOptions$(in$: Observable<U[]>) {\r\n\t\tthis._outOptions$ = merge(\r\n\t\t\tin$,\r\n\t\t\tin$.pipe(\r\n\t\t\t\tmap(users => this._service.extractHomonyms(users)),\r\n\t\t\t\tswitchMap((homonyms: U[]) => this._service.enrichHomonyms(homonyms)),\r\n\t\t\t\twithLatestFrom(in$),\r\n\t\t\t\tmap<[U[], U[]], U[]>(([enrichedUsers, users]) => {\r\n\t\t\t\t\tconst result = [ ...users];\r\n\t\t\t\t\tenrichedUsers.forEach(user => {\r\n\t\t\t\t\t\tconst i = result.findIndex(u => u.id === user.id);\r\n\t\t\t\t\t\tresult[i] = user;\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}),\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\tprivate _outOptions$: Observable<U[]>;\r\n\tget outOptions$() {\r\n\t\treturn this._outOptions$;\r\n\t}\r\n\tprivate _service: ILuUserHomonymsService<U>;\r\n\tconstructor(\r\n\t\t@Inject(ALuUserHomonymsService) @Optional() @SkipSelf() hostService: ILuUserHomonymsService<U>,\r\n\t\t@Inject(ALuUserHomonymsService) @Self() selfService: ILuUserHomonymsService<U>,\r\n\t) {\r\n\t\tthis._service = hostService || selfService;\r\n\t}\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hostService",
                        "type": "ILuUserHomonymsService<U>"
                    },
                    {
                        "name": "selfService",
                        "type": "ILuUserHomonymsService<U>"
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "hostService",
                        "type": "ILuUserHomonymsService<U>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selfService",
                        "type": "ILuUserHomonymsService<U>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ILuOptionOperator"
            ],
            "accessors": {
                "inOptions$": {
                    "name": "inOptions$",
                    "setSignature": {
                        "name": "inOptions$",
                        "type": "void",
                        "args": [
                            {
                                "name": "in$",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 25,
                        "jsdoctags": [
                            {
                                "name": "in$",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "outOptions$": {
                    "name": "outOptions$",
                    "getSignature": {
                        "name": "outOptions$",
                        "type": "",
                        "returnType": "",
                        "line": 44
                    }
                }
            }
        },
        {
            "name": "LuUserPagedSearcherComponent",
            "id": "component-LuUserPagedSearcherComponent-ccb51d15c17ee33fc4cdf24f278ca4c1",
            "file": "packages/ng/libraries/user/src/lib/select/searcher/user-searcher.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: ALuOptionOperator, useExisting: forwardRef(() => LuUserPagedSearcherComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuOnOpenSubscriber, useExisting: forwardRef(() => LuUserPagedSearcherComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuOnCloseSubscriber, useExisting: forwardRef(() => LuUserPagedSearcherComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuOnScrollBottomSubscriber, useExisting: forwardRef(() => LuUserPagedSearcherComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: ALuUserService, useClass: LuUserV3Service,\n}"
                }
            ],
            "selector": "lu-user-paged-searcher",
            "styleUrls": [
                "user-searcher.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "user-searcher.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appInstanceId",
                    "line": 65,
                    "type": ""
                },
                {
                    "name": "enableFormerEmployees",
                    "defaultValue": "false",
                    "line": 67
                },
                {
                    "name": "fields",
                    "line": 62,
                    "type": "string"
                },
                {
                    "name": "filters",
                    "line": 63,
                    "type": "[]"
                },
                {
                    "name": "operations",
                    "line": 66,
                    "type": "[]"
                },
                {
                    "name": "orderBy",
                    "line": 64,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_options",
                    "defaultValue": "[]",
                    "type": "U[]",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_page",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_page$",
                    "defaultValue": "new Subject<number>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_service",
                    "type": "LuUserV3Service<U>",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_subs",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "empty$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "intl",
                    "type": "ILuUserSearcherLabel",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LuUserSearcherIntl"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loading$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "outOptions$",
                    "defaultValue": "new Subject<U[]>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "searchInput",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchInput', {read: ElementRef, static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147
                },
                {
                    "name": "onScrollBottom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160
                }
            ],
            "hostBindings": [
                {
                    "name": "class.position-fixed",
                    "defaultValue": "true",
                    "line": 59
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, forwardRef, Input, ViewChild, ElementRef, SkipSelf, Self, Optional, Inject, HostBinding, OnInit, OnDestroy } from '@angular/core';\r\nimport {\r\n\tALuOnOpenSubscriber,\r\n\tALuOnScrollBottomSubscriber,\r\n\tALuOnCloseSubscriber,\r\n\tILuOnOpenSubscriber,\r\n\tILuOnScrollBottomSubscriber,\r\n\tILuOnCloseSubscriber,\r\n} from '@lucca-front/ng/core';\r\n\r\nimport { ALuOptionOperator } from '@lucca-front/ng/option';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { distinctUntilChanged, debounceTime, switchMap, catchError, share, startWith, withLatestFrom, mapTo, map } from 'rxjs/operators';\r\nimport { ILuUser } from '../../user.model';\r\nimport { ALuUserService, LuUserV3Service } from '../../service/index';\r\nimport { Subject, Observable, Subscription, combineLatest, of, merge } from 'rxjs';\r\nimport { LuUserSearcherIntl } from './user-searcher.intl';\r\nimport { ILuUserSearcherLabel } from './user-searcher.translate';\r\n\r\n@Component({\r\n\tselector: 'lu-user-paged-searcher',\r\n\ttemplateUrl: 'user-searcher.component.html',\r\n\tstyleUrls: ['user-searcher.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: ALuOptionOperator,\r\n\t\t\tuseExisting: forwardRef(() => LuUserPagedSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOnOpenSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuUserPagedSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOnCloseSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuUserPagedSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuOnScrollBottomSubscriber,\r\n\t\t\tuseExisting: forwardRef(() => LuUserPagedSearcherComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: ALuUserService,\r\n\t\t\tuseClass: LuUserV3Service,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuUserPagedSearcherComponent<U extends ILuUser = ILuUser>\r\n\timplements OnInit, OnDestroy, ILuOnOpenSubscriber, ILuOnScrollBottomSubscriber, ILuOnCloseSubscriber\r\n{\r\n\r\n\tprivate _service: LuUserV3Service<U>;\r\n\tprivate _subs = new Subscription();\r\n\r\n\t@HostBinding('class.position-fixed') fixed = true;\r\n\t@ViewChild('searchInput', { read: ElementRef, static: true }) searchInput: ElementRef;\r\n\r\n\t@Input() set fields(fields: string) { this._service.fields = fields; }\r\n\t@Input() set filters(filters: string[]) { this._service.filters = filters; }\r\n\t@Input() set orderBy(orderBy: string) { this._service.orderBy = orderBy; }\r\n\t@Input() set appInstanceId(appInstanceId: number | string) { this._service.appInstanceId = appInstanceId; }\r\n\t@Input() set operations(operations: number[]) { this._service.operations = operations; }\r\n\t@Input() enableFormerEmployees = false;\r\n\r\n\tform: FormGroup;\r\n\t// page$: Subject<number>;\r\n\toutOptions$ = new Subject<U[]>();\r\n\tloading$: Observable<boolean>;\r\n\tempty$: Observable<boolean>;\r\n\tprivate _loading = false;\r\n\tprivate _page$ = new Subject<number>();\r\n\tprivate _page: number;\r\n\tprivate _options: U[] = [];\r\n\r\n\tconstructor(\r\n\t\t@Inject(ALuUserService) @Optional() @SkipSelf() hostService: ALuUserService,\r\n\t\t@Inject(ALuUserService) @Self() selfService: LuUserV3Service<U>,\r\n\t\t@Inject(LuUserSearcherIntl) public intl: ILuUserSearcherLabel,\r\n\r\n\t) {\r\n\t\tthis._service = (hostService || selfService) as LuUserV3Service<U>;\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.form = new FormGroup({\r\n\t\t\tclue: new FormControl(''),\r\n\t\t\tformerEmployees: new FormControl(false),\r\n\t\t});\r\n\t\tconst formValue$ = this.form.valueChanges.pipe(\r\n\t\t\tstartWith(this.form.value),\r\n\t\t);\r\n\t\tthis._page$ = new Subject<number>();\r\n\t\tconst distinctPage$ = this._page$.pipe(\r\n\t\t\tdistinctUntilChanged(),\r\n\t\t);\r\n\r\n\t\tconst pageSub = this._page$.subscribe(p => this._page = p);\r\n\t\tthis._subs.add(pageSub);\r\n\r\n\t\tconst results$ = combineLatest(\r\n\t\t\tdistinctPage$,\r\n\t\t\tformValue$\r\n\t\t).pipe(\r\n\t\t\tdebounceTime(100),\r\n\t\t\tswitchMap(([page, val]) => {\r\n\t\t\t\tconst filters = [];\r\n\t\t\t\tif (val.formerEmployees) {\r\n\t\t\t\t\tfilters.push(`formerEmployees=true`);\r\n\t\t\t\t}\r\n\t\t\t\treturn this._service.searchPaged(val.clue, page, filters);\r\n\t\t\t}),\r\n\t\t\tcatchError(err => of([])),\r\n\t\t\tshare(),\r\n\t\t);\r\n\r\n\t\tconst resultsSub = results$\r\n\t\t.pipe(withLatestFrom(distinctPage$))\r\n\t\t.subscribe(([items, page]) => {\r\n\t\t\tif (page === 0) {\r\n\t\t\t\tthis._options = [...items];\r\n\t\t\t} else {\r\n\t\t\t\tthis._options.push(...items);\r\n\t\t\t}\r\n\t\t\tthis.outOptions$.next([...this._options]);\r\n\t\t});\r\n\t\tthis._subs.add(resultsSub);\r\n\r\n\t\tthis.loading$ = merge(\r\n\t\t\tformValue$.pipe(mapTo(true)),\r\n\t\t\tresults$.pipe(mapTo(false)),\r\n\t\t);\r\n\t\tconst loadingSub = this.loading$.subscribe(l => this._loading = l);\r\n\t\tthis._subs.add(loadingSub);\r\n\r\n\t\tthis.empty$ = this.outOptions$.pipe(\r\n\t\t\tmap(o => o.length === 0),\r\n\t\t);\r\n\t}\r\n\tngOnDestroy() {\r\n\t\tthis._subs.unsubscribe();\r\n\t}\r\n\r\n\tonOpen() {\r\n\t\tthis.searchInput.nativeElement.focus();\r\n\t\tthis.reset();\r\n\t}\r\n\tonScrollBottom() {\r\n\t\tif (!this._loading) {\r\n\t\t\tthis._page$.next(this._page + 1);\r\n\t\t}\r\n\t}\r\n\tonClose() {\r\n\t\tthis.outOptions$.next([]);\r\n\t}\r\n\r\n\treset() {\r\n\t\tthis.form.reset();\r\n\t\tthis._page$.next(0);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '_definitions';\r\n@include optionSearcherStyle;\r\n",
                    "styleUrl": "user-searcher.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hostService",
                        "type": "ALuUserService"
                    },
                    {
                        "name": "selfService",
                        "type": "LuUserV3Service<U>"
                    },
                    {
                        "name": "intl",
                        "type": "ILuUserSearcherLabel"
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "hostService",
                        "type": "ALuUserService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selfService",
                        "type": "LuUserV3Service<U>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "intl",
                        "type": "ILuUserSearcherLabel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "ILuOnOpenSubscriber",
                "ILuOnScrollBottomSubscriber",
                "ILuOnCloseSubscriber"
            ],
            "accessors": {
                "fields": {
                    "name": "fields",
                    "setSignature": {
                        "name": "fields",
                        "type": "void",
                        "args": [
                            {
                                "name": "fields",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 62,
                        "jsdoctags": [
                            {
                                "name": "fields",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "filters": {
                    "name": "filters",
                    "setSignature": {
                        "name": "filters",
                        "type": "void",
                        "args": [
                            {
                                "name": "filters",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 63,
                        "jsdoctags": [
                            {
                                "name": "filters",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "orderBy": {
                    "name": "orderBy",
                    "setSignature": {
                        "name": "orderBy",
                        "type": "void",
                        "args": [
                            {
                                "name": "orderBy",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 64,
                        "jsdoctags": [
                            {
                                "name": "orderBy",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "appInstanceId": {
                    "name": "appInstanceId",
                    "setSignature": {
                        "name": "appInstanceId",
                        "type": "void",
                        "args": [
                            {
                                "name": "appInstanceId",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 65,
                        "jsdoctags": [
                            {
                                "name": "appInstanceId",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "operations": {
                    "name": "operations",
                    "setSignature": {
                        "name": "operations",
                        "type": "void",
                        "args": [
                            {
                                "name": "operations",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 66,
                        "jsdoctags": [
                            {
                                "name": "operations",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<form [formGroup]=\"form\">\r\n\t<div class=\"textfield mod-search\" [class.is-loading]=\"loading$ | async\">\r\n\t\t<input #searchInput class=\"textfield-input\" formControlName=\"clue\">\r\n\t</div>\r\n\r\n\t<label class=\"checkbox mod-formerEmployee mod-small\" *ngIf=\"enableFormerEmployees\">\r\n\t\t<input class=\"checkbox-input\" type=\"checkbox\" formControlName=\"formerEmployees\"/>\r\n\t\t<span class=\"checkbox-label\">{{ intl.includeFormerEmployees }}</span>\r\n\t</label>\r\n</form>\r\n\r\n<lu-option-placeholder *ngIf=\"(empty$ | async) && !(loading$ | async)\" (onClear)=\"reset()\"></lu-option-placeholder>\r\n"
        },
        {
            "name": "LuUserPictureComponent",
            "id": "component-LuUserPictureComponent-b225cd7b4585eee8ddf95ab2b627f1f5",
            "file": "packages/ng/libraries/user/src/lib/picture/user-picture.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-user-picture",
            "styleUrls": [
                "./user-picture.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-picture.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "displayFormat",
                    "description": "<p>User Display format.\nIt is set to &#39;LF&#39; by default</p>\n",
                    "line": 26,
                    "type": ""
                },
                {
                    "name": "user",
                    "line": 41,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_displayFormat",
                    "defaultValue": "LuDisplayInitials.lastfirst",
                    "type": "LuDisplayInitials",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_user",
                    "type": "ILuUser",
                    "optional": false,
                    "description": "<p>ILuUser whose picture you wanna display.</p>\n",
                    "line": 38,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "hasPicture",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "initials",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "style",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "methodsClass": [
                {
                    "name": "getNameHue",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 68,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Displays user&#39;picture or a placeholder with his/her initials and random bg color&#39;</p>\n",
            "rawdescription": "Displays user'picture or a placeholder with his/her initials and random bg color'",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, ChangeDetectorRef } from '@angular/core';\r\nimport { ILuUser } from '../user.model';\r\nimport {\r\n\tLuUserDisplayPipe,\r\n\tLuDisplayInitials,\r\n\tLuDisplayFullname,\r\n} from '../display/index';\r\n\r\n/**\r\n * Displays user'picture or a placeholder with his/her initials and random bg color'\r\n */\r\n@Component({\r\n\tselector: 'lu-user-picture',\r\n\ttemplateUrl: './user-picture.component.html',\r\n\tstyleUrls: ['./user-picture.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuUserPictureComponent {\r\n\r\n\tprivate _displayFormat: LuDisplayInitials = LuDisplayInitials.lastfirst;\r\n\t/**\r\n\t * User Display format.\r\n\t * It is set to 'LF' by default\r\n\t */\r\n\t@Input()\r\n\tset displayFormat(displayFormat: LuDisplayInitials) {\r\n\t\tthis._displayFormat = displayFormat;\r\n\t\tthis._changeDetector.markForCheck();\r\n\t}\r\n\r\n\tget displayFormat(): LuDisplayInitials {\r\n\t\treturn this._displayFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * ILuUser whose picture you wanna display.\r\n\t */\r\n\tprivate _user: ILuUser;\r\n\r\n\t@Input()\r\n\tset user(user: ILuUser) {\r\n\t\tthis._user = user;\r\n\t\tthis.initials = this.displayPipe.transform(user, this.displayFormat);\r\n\t\tconst pictureHref = user?.picture?.href || user?.pictureHref\r\n\t\tthis.hasPicture = !!pictureHref;\r\n\t\tif (this.hasPicture) {\r\n\t\t\tthis.style = { 'background-image': `url('${pictureHref}')` };\r\n\t\t} else {\r\n\t\t\tconst hsl = this.getNameHue();\r\n\t\t\tthis.style = { 'background-color': `hsl(${hsl}, 60%, 60%)` };\r\n\t\t}\r\n\t\tthis._changeDetector.markForCheck();\r\n\t}\r\n\tget user() {\r\n\t\treturn this._user;\r\n\t}\r\n\r\n\tinitials = '';\r\n\thasPicture = false;\r\n\r\n\tstyle;\r\n\r\n\tconstructor(\r\n\t\tprivate displayPipe: LuUserDisplayPipe,\r\n\t\tprivate _changeDetector: ChangeDetectorRef\r\n\t) {}\r\n\r\n\tprivate getNameHue(): number {\r\n\t\t// we sum the chars in user's firstname + lastname\r\n\t\tconst charSum = this.displayPipe\r\n\t\t\t.transform(this._user, LuDisplayFullname.firstlast)\r\n\t\t\t.split('')\r\n\t\t\t.reduce((sum, a) => sum + a.charCodeAt(0), 0);\r\n\t\t// and take a modulo 360 for hue\r\n\t\tconst hue = charSum % 360;\r\n\t\treturn hue;\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '_definitions';\r\n@include userPictureStyle;\r\n",
                    "styleUrl": "./user-picture.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "displayPipe",
                        "type": "LuUserDisplayPipe"
                    },
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "displayPipe",
                        "type": "LuUserDisplayPipe",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "displayFormat": {
                    "name": "displayFormat",
                    "setSignature": {
                        "name": "displayFormat",
                        "type": "void",
                        "args": [
                            {
                                "name": "displayFormat",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 26,
                        "description": "<p>User Display format.\nIt is set to &#39;LF&#39; by default</p>\n",
                        "jsdoctags": [
                            {
                                "name": "displayFormat",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "displayFormat",
                        "type": "",
                        "returnType": "LuDisplayInitials",
                        "line": 31
                    }
                },
                "user": {
                    "name": "user",
                    "setSignature": {
                        "name": "user",
                        "type": "void",
                        "args": [
                            {
                                "name": "user",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 41,
                        "jsdoctags": [
                            {
                                "name": "user",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "user",
                        "type": "",
                        "returnType": "",
                        "line": 54
                    }
                }
            },
            "templateData": "<div class=\"picture\" [ngStyle]=\"style\">\r\n\t<span *ngIf=\"!hasPicture\">{{initials}}</span>\r\n</div>"
        },
        {
            "name": "LuUserSelectInputComponent",
            "id": "component-LuUserSelectInputComponent-5f37e18d93c2979bbae857a5d8da32f5",
            "file": "packages/ng/libraries/user/src/lib/select/input/user-select-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => LuUserSelectInputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "lu-user-select",
            "styleUrls": [
                "./user-select-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-select-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appInstanceId",
                    "line": 61,
                    "type": "number | string"
                },
                {
                    "name": "enableFormerEmployees",
                    "defaultValue": "false",
                    "line": 63
                },
                {
                    "name": "fields",
                    "line": 58,
                    "type": "string"
                },
                {
                    "name": "filters",
                    "line": 59,
                    "type": "string[]"
                },
                {
                    "name": "operations",
                    "line": 62,
                    "type": "number[]"
                },
                {
                    "name": "orderBy",
                    "line": 60,
                    "type": "string"
                },
                {
                    "name": "placeholder",
                    "line": 56,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "byId",
                    "defaultValue": "() => {...}",
                    "type": "LuOptionComparer<U>",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "intl",
                    "type": "ILuUserSelectInputLabel",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LuUserSelectInputIntl"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "searchFormat",
                    "defaultValue": "LuDisplayFullname.lastfirst",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Displays user&#39;picture or a placeholder with his/her initials and random bg color&#39;</p>\n",
            "rawdescription": "Displays user'picture or a placeholder with his/her initials and random bg color'",
            "type": "component",
            "sourceCode": "import {\r\n\tChangeDetectionStrategy,\r\n\tComponent,\r\n\tChangeDetectorRef,\r\n\tforwardRef,\r\n\tViewContainerRef,\r\n\tElementRef,\r\n\tHostListener,\r\n\tTemplateRef,\r\n\tViewChild,\r\n\tInput,\r\n\tRenderer2,\r\n\tHostBinding,\r\n\tAfterContentInit,\r\n\tInject,\r\n\tAfterViewInit,\r\n\tOptional,\r\n\tSkipSelf,\r\n\tSelf\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\nimport { Overlay } from '@angular/cdk/overlay';\r\nimport { ALuClearer, ILuClearer, ILuInputDisplayer, ALuInputDisplayer } from '@lucca-front/ng/input';\r\nimport { ILuInputWithPicker, ALuPickerPanel } from '@lucca-front/ng/picker';\r\nimport { ILuUser } from '../../user.model';\r\nimport { ALuSelectInputComponent } from '@lucca-front/ng/select';\r\nimport { ILuPickerPanel } from '@lucca-front/ng/picker';\r\nimport { LuDisplayFullname } from '../../display/index';\r\nimport { LuUserSelectInputIntl } from './user-select-input.intl';\r\nimport { ILuUserSelectInputLabel } from './user-select-input.translate';\r\nimport { LuOptionComparer } from '@lucca-front/ng/option';\r\nimport { ALuUserService, LuUserV3Service } from '../../service/index';\r\n\r\n/**\r\n* Displays user'picture or a placeholder with his/her initials and random bg color'\r\n*/\r\n@Component({\r\n\tselector: 'lu-user-select',\r\n\ttemplateUrl: './user-select-input.component.html',\r\n\tstyleUrls: ['./user-select-input.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: NG_VALUE_ACCESSOR,\r\n\t\t\tuseExisting: forwardRef(() => LuUserSelectInputComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class LuUserSelectInputComponent<U extends ILuUser = ILuUser>\r\nextends ALuSelectInputComponent<U>\r\nimplements ControlValueAccessor, ILuInputWithPicker<U>, AfterViewInit {\r\n\r\n\tsearchFormat = LuDisplayFullname.lastfirst;\r\n\r\n\t@Input('placeholder') set inputPlaceholder(p: string) { this._placeholder = p; }\r\n\r\n\t@Input() fields: string;\r\n\t@Input() filters: string[];\r\n\t@Input() orderBy: string;\r\n\t@Input() appInstanceId: number | string;\r\n\t@Input() operations: number[];\r\n\t@Input() enableFormerEmployees = false;\r\n\r\n\tbyId: LuOptionComparer<U> = (option1: U, option2: U) => option1 && option2 && option1.id === option2.id;\r\n\r\n\tconstructor(\r\n\t\tprotected _changeDetectorRef: ChangeDetectorRef,\r\n\t\tprotected _overlay: Overlay,\r\n\t\tprotected _elementRef: ElementRef,\r\n\t\tprotected _viewContainerRef: ViewContainerRef,\r\n\t\tprotected _renderer: Renderer2,\r\n\t\t@Inject(LuUserSelectInputIntl) public intl: ILuUserSelectInputLabel,\r\n\t) {\r\n\t\tsuper(\r\n\t\t\t_changeDetectorRef,\r\n\t\t\t_overlay,\r\n\t\t\t_elementRef,\r\n\t\t\t_viewContainerRef,\r\n\t\t\t_renderer,\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '_definitions';\r\n@include selectInputStyle;\r\n\r\n.lu-select-value {\r\n\tpadding-right: 2.5rem;\r\n}\r\n\r\n.lu-select-additionalInformation {\r\n\tfont-size: 80%;\r\n\tfont-style: italic;\r\n\tmargin-top: -.25em;\r\n}\r\n",
                    "styleUrl": "./user-select-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "intl",
                        "type": "ILuUserSelectInputLabel"
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "intl",
                        "type": "ILuUserSelectInputLabel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ALuSelectInputComponent",
            "implements": [
                "ControlValueAccessor",
                "ILuInputWithPicker",
                "AfterViewInit"
            ],
            "accessors": {
                "inputPlaceholder": {
                    "name": "inputPlaceholder",
                    "setSignature": {
                        "name": "inputPlaceholder",
                        "type": "void",
                        "args": [
                            {
                                "name": "p",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 56,
                        "jsdoctags": [
                            {
                                "name": "p",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"lu-select-placeholder\">{{ placeholder }}</div>\r\n<div class=\"lu-select-value\">\r\n\t<div class=\"lu-select-display-wrapper\">\r\n\t\t<ng-container #display></ng-container>\r\n\t</div>\r\n</div>\r\n<div class=\"lu-select-suffix\">\r\n\t<lu-input-clearer></lu-input-clearer>\r\n</div>\r\n<ng-template luDisplayer [luDisplayerMultiple]=\"true\" let-values>\r\n\t<span *ngIf=\"multiple && values?.length > 1; else: singleView\"><span class=\"chip mod-unkillable\">{{values.length}}</span> {{intl.users}}</span>\r\n\t<ng-template #singleView>{{(values[0] || values) | luUserDisplay}}</ng-template>\r\n</ng-template>\r\n<lu-option-picker-advanced [option-comparer]=\"byId\">\r\n\t<header class=\"lu-picker-header\">\r\n\t\t<lu-user-paged-searcher\r\n\t\t\t[fields]=\"fields\"\r\n\t\t\t[filters]=\"filters\"\r\n\t\t\t[orderBy]=\"orderBy\"\r\n\t\t\t[appInstanceId]=\"appInstanceId\"\r\n\t\t\t[operations]=\"operations\"\r\n\t\t\t[enableFormerEmployees]=\"enableFormerEmployees\"\r\n\t\t></lu-user-paged-searcher>\r\n\t</header>\r\n\t<lu-user-homonyms></lu-user-homonyms>\r\n\t<lu-option *luUserMeOption=\"let user\" [value]=\"user\">\r\n\t\t<div><b>{{intl.me}} {{ user | luUserDisplay: searchFormat }}</b></div>\r\n\t\t<div class=\"lu-select-additionalInformation\" *ngIf=\"user.additionalInformation\">\r\n\t\t\t({{user.additionalInformation}})\r\n\t\t</div>\r\n\t</lu-option>\r\n\t<lu-option *luForOptions=\"let user\" [value]=\"user\">\r\n\t\t<div>{{ user | luUserDisplay: searchFormat }}</div>\r\n\t\t<div class=\"lu-select-additionalInformation\" *ngIf=\"user.additionalInformation\">\r\n\t\t\t({{user.additionalInformation}})\r\n\t\t</div>\r\n\t</lu-option>\r\n</lu-option-picker-advanced>\r\n"
        },
        {
            "name": "LuUserTileComponent",
            "id": "component-LuUserTileComponent-45ace10a3470c3f590ea07777ff0f1b9",
            "file": "packages/ng/libraries/user/src/lib/tile/user-tile.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-user-tile",
            "styleUrls": [
                "./user-tile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-tile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "displayFormat",
                    "description": "<p>User Display format.\nIt is set to &#39;lf&#39; by default</p>\n",
                    "line": 41,
                    "type": "LuDisplayFormat"
                },
                {
                    "name": "role",
                    "description": "<p>ILuUser role to display</p>\n",
                    "line": 48,
                    "type": "string"
                },
                {
                    "name": "user",
                    "description": "<p>ILuUser to display.</p>\n",
                    "line": 27,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_role",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_user",
                    "type": "ILuUser",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Displays user picture and name. ILuUser&#39;s role can be specified, and the footer is customizable.</p>\n",
            "rawdescription": "Displays user picture and name. ILuUser's role can be specified, and the footer is customizable.",
            "type": "component",
            "sourceCode": "import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\r\nimport { ILuUser } from '../user.model';\r\nimport {\r\n\tLuUserDisplayPipe,\r\n\tLuDisplayInitials,\r\n\tLuDisplayFullname,\r\n\tLuDisplayHybrid,\r\n\tLuDisplayFormat,\r\n} from '../display/index';\r\n\r\n/**\r\n * Displays user picture and name. ILuUser's role can be specified, and the footer is customizable.\r\n */\r\n@Component({\r\n\tselector: 'lu-user-tile',\r\n\ttemplateUrl: './user-tile.component.html',\r\n\tstyleUrls: ['./user-tile.component.scss'],\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LuUserTileComponent {\r\n\r\n\tprivate _user: ILuUser;\r\n\t/**\r\n\t * ILuUser to display.\r\n\t */\r\n\t@Input()\r\n\tset user(user: ILuUser) {\r\n\t\tthis._user = user;\r\n\t\tthis._changeDetector.markForCheck();\r\n\t}\r\n\r\n\tget user(): ILuUser {\r\n\t\treturn this._user;\r\n\t}\r\n\r\n\t/**\r\n\t * User Display format.\r\n\t * It is set to 'lf' by default\r\n\t */\r\n\t@Input()\r\n\tdisplayFormat: LuDisplayFormat;\r\n\r\n\tprivate _role: string;\r\n\t/**\r\n\t * ILuUser role to display\r\n\t */\r\n\t@Input()\r\n\tset role(role: string) {\r\n\t\tthis._role = role;\r\n\t\tthis._changeDetector.markForCheck();\r\n\t}\r\n\r\n\tget role(): string {\r\n\t\treturn this._role;\r\n\t}\r\n\r\n\tget displayPictureFormat(): LuDisplayInitials {\r\n\t\tswitch (this.displayFormat) {\r\n\t\t\tcase LuDisplayFullname.lastfirst:\r\n\t\t\tcase LuDisplayInitials.lastfirst:\r\n\t\t\tcase LuDisplayHybrid.lastIfirstFull:\r\n\t\t\tcase LuDisplayHybrid.lastFullfirstI:\r\n\t\t\t\treturn LuDisplayInitials.lastfirst;\r\n\t\t\tcase LuDisplayFullname.last:\r\n\t\t\tcase LuDisplayInitials.last:\r\n\t\t\t\treturn LuDisplayInitials.last;\r\n\t\t\tcase LuDisplayFullname.first:\r\n\t\t\tcase LuDisplayInitials.first:\r\n\t\t\t\treturn LuDisplayInitials.first;\r\n\t\t\tcase LuDisplayFullname.firstlast:\r\n\t\t\tcase LuDisplayInitials.firstlast:\r\n\t\t\tcase LuDisplayHybrid.firstIlastFull:\r\n\t\t\tcase LuDisplayHybrid.firstFulllastI:\r\n\t\t\tdefault:\r\n\t\t\t\treturn LuDisplayInitials.firstlast;\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tprivate _changeDetector: ChangeDetectorRef\r\n\t) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '_definitions';\r\n@include userTileStyle;\r\n",
                    "styleUrl": "./user-tile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "user": {
                    "name": "user",
                    "setSignature": {
                        "name": "user",
                        "type": "void",
                        "args": [
                            {
                                "name": "user",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "description": "<p>ILuUser to display.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "user",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "user",
                        "type": "",
                        "returnType": "ILuUser",
                        "line": 32
                    }
                },
                "role": {
                    "name": "role",
                    "setSignature": {
                        "name": "role",
                        "type": "void",
                        "args": [
                            {
                                "name": "role",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 48,
                        "description": "<p>ILuUser role to display</p>\n",
                        "jsdoctags": [
                            {
                                "name": "role",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "role",
                        "type": "string",
                        "returnType": "string",
                        "line": 53
                    }
                },
                "displayPictureFormat": {
                    "name": "displayPictureFormat",
                    "getSignature": {
                        "name": "displayPictureFormat",
                        "type": "",
                        "returnType": "LuDisplayInitials",
                        "line": 57
                    }
                }
            },
            "templateData": "<lu-user-picture [user]=\"user\" [displayFormat]=\"displayPictureFormat\"></lu-user-picture>\r\n<div class=\"user-info\">\r\n\t<span class=\"user-tile-label\">{{role ? role : user?.jobTitle}}</span>\r\n\t<h5 class=\"user-tile-title\">{{user | luUserDisplay: displayFormat}}</h5>\r\n\t<span class=\"user-tile-footnote\"><ng-content></ng-content></span>\r\n</div>\r\n"
        },
        {
            "name": "ModalA11yComponent",
            "id": "component-ModalA11yComponent-31921ba4f35983a4e603f3bce48c92b1",
            "file": "packages/ng/applications/sandbox/src/app/issues/modal-a11y/modal-a11y.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-modal-a11y",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./modal-a11y.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "openModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "openSidepanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { LuModal } from '@lucca-front/ng/modal';\r\nimport { LuSidepanel } from '@lucca-front/ng/sidepanel';\r\nconst MAGIC_POSITIONS = [\r\n\t'center',\r\n\t'top',\r\n\t'right',\r\n\t'bottom',\r\n\t'left',\r\n];\r\nconst MAGIC_SIZES = [\r\n\t'small',\r\n\t'medium',\r\n\t'large',\r\n];\r\n@Component({\r\n\tselector: 'lu-modal-content',\r\n\ttemplate: `\r\n\t<p>content of the modal component</p>\r\n\t<button class=\"button\" (click)=\"openModal()\">more modals</button>\r\n\t<button class=\"button\" (click)=\"incr()\">incr</button>\r\n\t`\r\n})\r\nexport class BasicModalContent {\r\n\ttitle = 'title';\r\n\tsubmitAction = () => true;\r\n\t// submitPalette = 'warning';\r\n\tsubmitCounter = 0;\r\n\tget submitDisabled() { return this.submitCounter % 2; } \r\n\tconstructor(\r\n\t\tprivate _modal: LuModal,\r\n\t) {}\r\n\topenModal() {\r\n\t\tconst randPosition = Math.floor(Math.random() * 5);\r\n\t\tconst randSize = Math.floor(Math.random() * 3);\r\n\t\tconst config = { position: undefined, size: undefined };\r\n\t\tconfig.position = MAGIC_POSITIONS[randPosition];\r\n\t\tconfig.size = MAGIC_SIZES[randSize];\r\n\r\n\t\tthis._modal.open(BasicModalContent, undefined, config);\r\n\t}\r\n\tincr() {\r\n\t\tthis.submitCounter++;\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'sand-modal-a11y',\r\n\ttemplateUrl: './modal-a11y.component.html'\r\n})\r\nexport class ModalA11yComponent {\r\n\tconstructor(\r\n\t\tprivate _modal: LuModal,\r\n\t\tprivate _sidepanel: LuSidepanel,\r\n\t) {}\r\n\topenModal() {\r\n\t\tthis._modal.open(BasicModalContent);\r\n\t}\r\n\topenSidepanel() {\r\n\t\tthis._sidepanel.open(BasicModalContent);\r\n\t}\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_modal",
                        "type": "LuModal"
                    },
                    {
                        "name": "_sidepanel",
                        "type": "LuSidepanel"
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "_modal",
                        "type": "LuModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_sidepanel",
                        "type": "LuSidepanel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1>modal-a11y</h1>\r\n<button class=\"button\">other button</button>\r\n<button class=\"button\" (click)=\"openModal()\">open modal</button>\r\n<button class=\"button\" (click)=\"openSidepanel()\">open sidepanel</button>\r\n<button class=\"button\">other button to check focus</button>"
        },
        {
            "name": "ModalDismissComponent",
            "id": "component-ModalDismissComponent-b1a88a21d4b061a57b33dfb6b6aab707",
            "file": "packages/ng/applications/sandbox/src/app/issues/modal-dismiss/modal-dismiss.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-modal-dismiss",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./modal-dismiss.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "event$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "subs",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "openModal",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openPopup",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSidepanel",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { LuPopup, ALuPopupRef, ILuPopupRef } from '@lucca-front/ng/popup';\r\nimport { LuModal } from '@lucca-front/ng/modal';\r\nimport { LuSidepanel } from '@lucca-front/ng/sidepanel';\r\nimport { Subject, Subscription } from 'rxjs';\r\n\r\n/*tslint:disable*/\r\n@Component({\r\n\tselector: 'lu-modal-dismiss',\r\n\ttemplateUrl: './modal-dismiss.component.html'\r\n})\r\nexport class ModalDismissComponent {\r\n\tconstructor(\r\n\t\tprivate _popup: LuPopup,\r\n\t\tprivate _modal: LuModal,\r\n\t\tprivate _sidepanel: LuSidepanel,\r\n\t) {}\r\n\r\n\tevent$ = new Subject();\r\n\tsubs = new Subscription();\r\n\tget activeSubscriptions() { return this.subs['_subscriptions'] ? this.subs['_subscriptions'].length : 0; }\r\n\r\n\r\n\topenPopup(data?) {\r\n\t\tconst ref = this._popup.open(BasicPopupContent, data);\r\n\t\tthis.subs.add(ref.onDismiss.subscribe(() => this.event$.next('popup dismissed')));\r\n\t\tthis.subs.add(ref.onClose.subscribe(() => this.event$.next('popup closed')));\r\n\t}\r\n\topenModal(data?) {\r\n\t\tconst ref = this._modal.open(BasicModalContent, data);\r\n\t\tthis.subs.add(ref.onDismiss.subscribe(() => this.event$.next('modal dismissed')));\r\n\t\tthis.subs.add(ref.onClose.subscribe(() => this.event$.next('modal closed')));\r\n\t}\r\n\topenSidepanel(data?) {\r\n\t\tconst ref = this._sidepanel.open(BasicModalContent, data);\r\n\t\tthis.subs.add(ref.onDismiss.subscribe(() => this.event$.next('sidepanel dismissed')));\r\n\t\tthis.subs.add(ref.onClose.subscribe(() => this.event$.next('sidepanel closed')));\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'lu-modal-content',\r\n\ttemplate: `content of the modal component\r\n\t`\r\n})\r\nexport class BasicModalContent {\r\n\ttitle = 'title';\r\n\tsubmitAction = () => true;\r\n\r\n}\r\n@Component({\r\n\tselector: 'lu-popup-content',\r\n\ttemplate: `popup <br />\r\n\t\t<button class=\"button\" (click)=\"close()\">close</button>\r\n\t\t<button class=\"button\" (click)=\"dismiss()\">dismiss</button>\r\n\t`\r\n})\r\nexport class BasicPopupContent {\r\n\tconstructor(\r\n\t\t@Inject(ALuPopupRef) private _ref: ILuPopupRef,\r\n\t) {}\r\n\tclose() {\r\n\t\tthis._ref.close(true);\r\n\t}\r\n\tdismiss() {\r\n\t\tthis._ref.dismiss();\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_popup",
                        "type": "LuPopup"
                    },
                    {
                        "name": "_modal",
                        "type": "LuModal"
                    },
                    {
                        "name": "_sidepanel",
                        "type": "LuSidepanel"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_popup",
                        "type": "LuPopup",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_modal",
                        "type": "LuModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_sidepanel",
                        "type": "LuSidepanel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "activeSubscriptions": {
                    "name": "activeSubscriptions",
                    "getSignature": {
                        "name": "activeSubscriptions",
                        "type": "",
                        "returnType": "",
                        "line": 21
                    }
                }
            },
            "templateData": "<h1>modal-dismiss</h1>\r\n<button class=\"button\" (click)=\"openPopup()\">open popup</button>\r\n<button class=\"button\" (click)=\"openModal()\">open modal</button>\r\n<button class=\"button\" (click)=\"openSidepanel()\">open sidepanel</button>\r\n<br />\r\nactive subscriptions: {{activeSubscriptions }} <br />\r\nevents: {{event$ | async }}"
        },
        {
            "name": "ModalsNoSubmitComponent",
            "id": "component-ModalsNoSubmitComponent-d5acf7a5fffda703cc278061c6fa80f7",
            "file": "packages/ng/applications/sandbox/src/app/issues/modals-no-submit/modals-no-submit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-modals-no-submit",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./modals-no-submit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "openModal",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSidepanel",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { LuModal } from '@lucca-front/ng/modal';\r\nimport { LuSidepanel } from '@lucca-front/ng/sidepanel';\r\n\r\n@Component({\r\n\tselector: 'lu-modals-no-submit',\r\n\ttemplateUrl: './modals-no-submit.component.html'\r\n})\r\nexport class ModalsNoSubmitComponent {\r\n\tconstructor(\r\n\t\tprivate _modal: LuModal,\r\n\t\tprivate _sidepanel: LuSidepanel,\r\n\t) {}\r\n\topenModal(data?) {\r\n\t\tthis._modal.open(BasicModalContent, data);\r\n\t}\r\n\topenSidepanel(data?) {\r\n\t\tthis._sidepanel.open(BasicModalContent, data);\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'lu-modal-content',\r\n\ttemplate: `content of the modal component\r\n\t`\r\n})\r\nexport class BasicModalContent {\r\n\ttitle = 'title';\r\n\r\n\tconstructor(\r\n\t) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_modal",
                        "type": "LuModal"
                    },
                    {
                        "name": "_sidepanel",
                        "type": "LuSidepanel"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "_modal",
                        "type": "LuModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_sidepanel",
                        "type": "LuSidepanel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1>modals-no-submit</h1>\r\n<button class=\"button\" (click)=\"openModal()\">open modal</button>\r\n<button class=\"button\" (click)=\"openSidepanel()\">open sidepanel</button>\r\n"
        },
        {
            "name": "ModalSynchedComponent",
            "id": "component-ModalSynchedComponent-8660abe2fb43f80c733de155cef6e87d",
            "file": "packages/ng/applications/sandbox/src/app/issues/modal-synched/modal-synched.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-modal-synched",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./modal-synched.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "openAsyncModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "openSyncModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { LuModal } from '@lucca-front/ng/modal';\r\nimport { of } from 'rxjs';\r\nimport { delay } from 'rxjs/operators';\r\n\r\n@Component({\r\n\tselector: 'lu-modal-synched',\r\n\ttemplateUrl: './modal-synched.component.html'\r\n})\r\nexport class ModalSynchedComponent {\r\n\tconstructor(\r\n\t\tprivate _modal: LuModal,\r\n\t) {}\r\n\topenSyncModal() {\r\n\t\tthis._modal.open(SyncModalContent);\r\n\t}\r\n\topenAsyncModal() {\r\n\t\tthis._modal.open(AsyncModalContent);\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'lu-sync-modal-content',\r\n\ttemplate: `the submit on this modal resolves synchronously\r\n\t`\r\n})\r\nexport class SyncModalContent {\r\n\ttitle = 'title';\r\n\tsubmitAction = () => true;\r\n}\r\n@Component({\r\n\tselector: 'lu-async-modal-content',\r\n\ttemplate: `the submit on this modal resolves asynchronously\r\n\t`\r\n})\r\nexport class AsyncModalContent {\r\n\ttitle = 'title';\r\n\tsubmitAction = () => of(true).pipe(delay(500));\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_modal",
                        "type": "LuModal"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "_modal",
                        "type": "LuModal",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1>modal-synched</h1>\r\n<button class=\"button\" (click)=\"openSyncModal()\">open sync</button>\r\n<button class=\"button\" (click)=\"openAsyncModal()\">open async</button>\r\n"
        },
        {
            "name": "ModalUndismissableComponent",
            "id": "component-ModalUndismissableComponent-05ac65f36a21073f58776ddef3df3f6f",
            "file": "packages/ng/applications/sandbox/src/app/issues/modal-undismissable/modal-undismissable.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-modal-undismissable",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./modal-undismissable.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "undismissable",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "openModal",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openPopup",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSidepanel",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { LuPopup, ALuPopupRef, ILuPopupRef } from '@lucca-front/ng/popup';\r\nimport { LuModal } from '@lucca-front/ng/modal';\r\nimport { LuSidepanel } from '@lucca-front/ng/sidepanel';\r\n@Component({\r\n\tselector: 'sand-modal-undismissable',\r\n\ttemplateUrl: './modal-undismissable.component.html'\r\n})\r\nexport class ModalUndismissableComponent {\r\n\tundismissable = false;\r\n\tconstructor(\r\n\t\tprivate _popup: LuPopup,\r\n\t\tprivate _modal: LuModal,\r\n\t\tprivate _sidepanel: LuSidepanel,\r\n\t) {}\r\n\topenPopup(data?) {\r\n\t\tconst ref = this._popup.open(BasicPopupContent, data, { undismissable: this.undismissable});\r\n\t}\r\n\topenModal(data?) {\r\n\t\tconst ref = this._modal.open(BasicModalContent, data, { undismissable: this.undismissable});\r\n\t}\r\n\topenSidepanel(data?) {\r\n\t\tconst ref = this._sidepanel.open(BasicModalContent, data, { undismissable: this.undismissable});\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'lu-modal-content',\r\n\ttemplate: `content of the modal component\r\n\t`\r\n})\r\nexport class BasicModalContent {\r\n\ttitle = 'title';\r\n\tsubmitAction = () => true;\r\n}\r\n@Component({\r\n\tselector: 'lu-popup-content',\r\n\ttemplate: `popup <br />\r\n\t\t<button class=\"button\" (click)=\"close()\">close</button>\r\n\t\t<button class=\"button\" (click)=\"dismiss()\">dismiss</button>\r\n\t`\r\n})\r\nexport class BasicPopupContent {\r\n\tconstructor(\r\n\t\t@Inject(ALuPopupRef) private _ref: ILuPopupRef,\r\n\t) {}\r\n\tclose() {\r\n\t\tthis._ref.close(true);\r\n\t}\r\n\tdismiss() {\r\n\t\tthis._ref.dismiss();\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_popup",
                        "type": "LuPopup"
                    },
                    {
                        "name": "_modal",
                        "type": "LuModal"
                    },
                    {
                        "name": "_sidepanel",
                        "type": "LuSidepanel"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "_popup",
                        "type": "LuPopup",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_modal",
                        "type": "LuModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_sidepanel",
                        "type": "LuSidepanel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1>modal-undismissable</h1>\r\n<button class=\"button\" (click)=\"openPopup()\">open popup</button>\r\n<button class=\"button\" (click)=\"openModal()\">open modal</button>\r\n<button class=\"button\" (click)=\"openSidepanel()\">open sidepanel</button>\r\n\r\n<div class=\"checkboxesfield\">\r\n\t<div class=\"checkboxesfield-input\">\r\n\t\t<div class=\"checkbox\">\r\n\t\t\t<input class=\"checkbox-input\" type=\"checkbox\" name=\"dismissable\" id=\"dismissable\" [(ngModel)]=\"undismissable\">\r\n\t\t\t<label class=\"checkbox-label\" for=\"dismissable\">Undismissable</label>\r\n\t\t</div>\r\n\t</div>\r\n</div>"
        },
        {
            "name": "NodeSassEndComponent",
            "id": "component-NodeSassEndComponent-cc820af8c397f2d7d4dd7ef246bc0415",
            "file": "packages/ng/applications/sandbox/src/app/issues/node-sass-end/node-sass-end.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-node-sass-end",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./node-sass-end.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "input",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {read: ElementRef, static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closePicker",
                    "args": [
                        {
                            "name": "picker",
                            "type": "MatDatepicker<any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "picker",
                            "type": "MatDatepicker<any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openPicker",
                    "args": [
                        {
                            "name": "picker",
                            "type": "MatDatepicker<any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "picker",
                            "type": "MatDatepicker<any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refocusInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "togglePicker",
                    "args": [
                        {
                            "name": "picker",
                            "type": "MatDatepicker<any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "picker",
                            "type": "MatDatepicker<any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ViewChild, ElementRef } from '@angular/core';\r\nimport { MatDatepicker } from '@angular/material/datepicker';\r\n\r\n@Component({\r\n\tselector: 'lu-node-sass-end',\r\n\ttemplateUrl: './node-sass-end.component.html'\r\n})\r\nexport class NodeSassEndComponent {\r\n\r\n\t@ViewChild('input', { read: ElementRef, static: true }) input: ElementRef;\r\n\r\n\r\n\topenPicker(picker: MatDatepicker<any>) {\r\n\t\tif (!picker.opened) {\r\n\t\t\tpicker.open();\r\n\t\t\tthis.refocusInput();\r\n\t\t}\r\n\t}\r\n\tclosePicker(picker: MatDatepicker<any>) {\r\n\t\tif (picker.opened) {\r\n\t\t\tpicker.close();\r\n\t\t}\r\n\t}\r\n\ttogglePicker(picker: MatDatepicker<any>) {\r\n\t\tif (!picker.opened) {\r\n\t\t\tpicker.open();\r\n\t\t\tthis.refocusInput();\r\n\t\t} else {\r\n\t\t\tpicker.close();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate refocusInput() {\r\n\t\tsetTimeout(() => { // need timeout here because shenanigans\r\n\t\t\tthis.input.nativeElement.focus();\r\n\t\t}, 1);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h2>Mat-datepicker</h2>\r\n<div class=\"textfield mod-withSuffix\">\r\n\t<input [matDatepicker]=\"myDatepicker\" class=\"textfield-input\" #input (click)=\"togglePicker(myDatepicker)\">\r\n\t<label class=\"textfield-label\" for=\"\">Pick a date</label>\r\n\t<div class=\"textfield-suffix\">\r\n\t\t<span aria-hidden=\"true\" class=\"lucca-icon icon-calendar\"></span>\r\n\t</div>\r\n\t<mat-datepicker #myDatepicker></mat-datepicker>\r\n</div>\r\n\r\n<h2>Mat-menu</h2>\r\n<button class=\"button\" [matMenuTriggerFor]=\"appMenu\">Menu</button>\r\n<mat-menu #appMenu=\"matMenu\">\r\n\t<button mat-menu-item>Settings</button>\r\n\t<button mat-menu-item>Help</button>\r\n</mat-menu>\r\n"
        },
        {
            "name": "OptionComparerComponent",
            "id": "component-OptionComparerComponent-63b79ad6ebe30ce25445c7ac65e634eb",
            "file": "packages/ng/applications/sandbox/src/app/issues/option-comparer/option-comparer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-option-comparer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./option-comparer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "department",
                    "defaultValue": "{ id: 13, name: 'placeholder name' }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "departments",
                    "defaultValue": "[this.department]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "empty",
                    "defaultValue": "undefined",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "item",
                    "defaultValue": "{ id: 27, name: 'placeholder name' }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "items",
                    "defaultValue": "[this.item]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "user",
                    "defaultValue": "{ id: 8, lastName: 'Not', firstName: 'my real name' }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "users",
                    "defaultValue": "[this.user]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'sand-option-comparer',\r\n\ttemplateUrl: './option-comparer.component.html'\r\n})\r\nexport class OptionComparerComponent {\r\n\tempty = undefined;\r\n\tuser = { id: 8, lastName: 'Not', firstName: 'my real name' };\r\n\tusers = [this.user];\r\n\tdepartment = { id: 13, name: 'placeholder name' };\r\n\tdepartments = [this.department];\r\n\titem = { id: 27, name: 'placeholder name' };\r\n\titems = [this.item];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>option-comparer</h1>\r\n<h2>Api</h2>\r\n<div class=\"textfield\">\r\n\t<lu-api-select class=\"textfield-input\" [ngModel]=\"empty\" api=\"/api/v3/axissections\"></lu-api-select>\r\n\t<label for=\"\" class=\"textfield-label\">empty</label>\r\n</div>\r\n<div class=\"textfield\">\r\n\t<lu-api-select class=\"textfield-input\" [(ngModel)]=\"item\" api=\"/api/v3/axissections\"></lu-api-select>\r\n\t<label for=\"\" class=\"textfield-label\">section</label>\r\n</div>\r\n<pre>{{ item | json }}</pre>\r\n<div class=\"textfield\">\r\n\t<lu-api-select class=\"textfield-input\" [(ngModel)]=\"items\" api=\"/api/v3/axissections\" multiple></lu-api-select>\r\n\t<label for=\"\" class=\"textfield-label\">sections</label>\r\n</div>\r\n<pre>{{ items | json }}</pre>\r\n<h2>User</h2>\r\n<div class=\"textfield\">\r\n\t<lu-user-select class=\"textfield-input\" [ngModel]=\"empty\"></lu-user-select>\r\n\t<label class=\"textfield-label\">user</label>\r\n</div>\r\n<div class=\"textfield\">\r\n\t<lu-user-select class=\"textfield-input\" [(ngModel)]=\"user\"></lu-user-select>\r\n\t<label class=\"textfield-label\">user</label>\r\n</div>\r\n<pre>{{ user | json }}</pre>\r\n<div class=\"textfield\">\r\n\t<lu-user-select class=\"textfield-input\" [(ngModel)]=\"users\" multiple></lu-user-select>\r\n\t<label class=\"textfield-label\">users</label>\r\n</div>\r\n<pre>{{ users | json }}</pre>\r\n<h2>Department</h2>\r\n<div class=\"textfield\">\r\n\t<lu-department-select class=\"textfield-input\" [ngModel]=\"empty\"></lu-department-select>\r\n\t<label for=\"\" class=\"textfield-label\">empty</label>\r\n</div>\r\n<div class=\"textfield\">\r\n\t<lu-department-select class=\"textfield-input\" [(ngModel)]=\"department\"></lu-department-select>\r\n\t<label for=\"\" class=\"textfield-label\">department</label>\r\n</div>\r\n<pre>{{ department | json }}</pre>\r\n<div class=\"textfield\">\r\n\t<lu-department-select class=\"textfield-input\" [(ngModel)]=\"departments\" multiple></lu-department-select>\r\n\t<label for=\"\" class=\"textfield-label\">departments</label>\r\n</div>\r\n<pre>{{ departments | json }}</pre>\r\n"
        },
        {
            "name": "OptionGroupbyComponent",
            "id": "component-OptionGroupbyComponent-44d8bf31501be63b2e4f26b4b05dd0f1",
            "file": "packages/ng/applications/sandbox/src/app/issues/option-groupby/option-groupby.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-option-groupby",
            "styleUrls": [],
            "styles": [
                ".color-preview { height: 16px; width: 16px; display: inline-block; }"
            ],
            "templateUrl": [
                "./option-groupby.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colors",
                    "defaultValue": "[\r\n\t\t{ name: 'aliceblue', code: '#f0f8ff' },\r\n\t\t{ name: 'antiquewhite', code: '#faebd7' },\r\n\t\t{ name: 'aqua', code: '#00ffff' },\r\n\t\t{ name: 'aquamarine', code: '#7fffd4' },\r\n\t\t{ name: 'azure', code: '#f0ffff' },\r\n\t\t{ name: 'beige', code: '#f5f5dc' },\r\n\t\t{ name: 'bisque', code: '#ffe4c4' },\r\n\t\t{ name: 'black', code: '#000000' },\r\n\t\t{ name: 'blanchedalmond', code: '#ffebcd' },\r\n\t\t{ name: 'blue', code: '#0000ff' },\r\n\t\t{ name: 'blueviolet', code: '#8a2be2' },\r\n\t\t{ name: 'brown', code: '#a52a2a' },\r\n\t\t{ name: 'burlywood', code: '#deb887' },\r\n\t\t{ name: 'cadetblue', code: '#5f9ea0' },\r\n\t\t{ name: 'chartreuse', code: '#7fff00' },\r\n\t\t{ name: 'chocolate', code: '#d2691e' },\r\n\t\t{ name: 'coral', code: '#ff7f50' },\r\n\t\t{ name: 'cornflowerblue', code: '#6495ed' },\r\n\t\t{ name: 'cornsilk', code: '#fff8dc' },\r\n\t\t{ name: 'crimson', code: '#dc143c' },\r\n\t\t{ name: 'cyan', code: '#00ffff' },\r\n\t\t{ name: 'darkblue', code: '#00008b' },\r\n\t\t{ name: 'darkcyan', code: '#008b8b' },\r\n\t\t{ name: 'darkgoldenrod', code: '#b8860b' },\r\n\t\t{ name: 'darkgray', code: '#a9a9a9' },\r\n\t\t{ name: 'darkgreen', code: '#006400' },\r\n\t\t{ name: 'darkgrey', code: '#a9a9a9' },\r\n\t\t{ name: 'darkkhaki', code: '#bdb76b' },\r\n\t\t{ name: 'darkmagenta', code: '#8b008b' },\r\n\t\t{ name: 'darkolivegreen', code: '#556b2f' },\r\n\t\t{ name: 'darkorange', code: '#ff8c00' },\r\n\t\t{ name: 'darkorchid', code: '#9932cc' },\r\n\t\t{ name: 'darkred', code: '#8b0000' },\r\n\t\t{ name: 'darksalmon', code: '#e9967a' },\r\n\t\t{ name: 'darkseagreen', code: '#8fbc8f' },\r\n\t\t{ name: 'darkslateblue', code: '#483d8b' },\r\n\t\t{ name: 'darkslategray', code: '#2f4f4f' },\r\n\t\t{ name: 'darkslategrey', code: '#2f4f4f' },\r\n\t\t{ name: 'darkturquoise', code: '#00ced1' },\r\n\t\t{ name: 'darkviolet', code: '#9400d3' },\r\n\t\t{ name: 'deeppink', code: '#ff1493' },\r\n\t\t{ name: 'deepskyblue', code: '#00bfff' },\r\n\t\t{ name: 'dimgray', code: '#696969' },\r\n\t\t{ name: 'dimgrey', code: '#696969' },\r\n\t\t{ name: 'dodgerblue', code: '#1e90ff' },\r\n\t\t{ name: 'firebrick', code: '#b22222' },\r\n\t\t{ name: 'floralwhite', code: '#fffaf0' },\r\n\t\t{ name: 'forestgreen', code: '#228b22' },\r\n\t\t{ name: 'fuchsia', code: '#ff00ff' },\r\n\t\t{ name: 'gainsboro', code: '#dcdcdc' },\r\n\t\t{ name: 'ghostwhite', code: '#f8f8ff' },\r\n\t\t{ name: 'gold', code: '#ffd700' },\r\n\t\t{ name: 'goldenrod', code: '#daa520' },\r\n\t\t{ name: 'gray', code: '#808080' },\r\n\t\t{ name: 'green', code: '#008000' },\r\n\t\t{ name: 'greenyellow', code: '#adff2f' },\r\n\t\t{ name: 'grey', code: '#808080' },\r\n\t\t{ name: 'honeydew', code: '#f0fff0' },\r\n\t\t{ name: 'hotpink', code: '#ff69b4' },\r\n\t\t{ name: 'indianred', code: '#cd5c5c' },\r\n\t\t{ name: 'indigo', code: '#4b0082' },\r\n\t\t{ name: 'ivory', code: '#fffff0' },\r\n\t\t{ name: 'khaki', code: '#f0e68c' },\r\n\t\t{ name: 'lavender', code: '#e6e6fa' },\r\n\t\t{ name: 'lavenderblush', code: '#fff0f5' },\r\n\t\t{ name: 'lawngreen', code: '#7cfc00' },\r\n\t\t{ name: 'lemonchiffon', code: '#fffacd' },\r\n\t\t{ name: 'lightblue', code: '#add8e6' },\r\n\t\t{ name: 'lightcoral', code: '#f08080' },\r\n\t\t{ name: 'lightcyan', code: '#e0ffff' },\r\n\t\t{ name: 'lightgoldenrodyellow', code: '#fafad2' },\r\n\t\t{ name: 'lightgray', code: '#d3d3d3' },\r\n\t\t{ name: 'lightgreen', code: '#90ee90' },\r\n\t\t{ name: 'lightgrey', code: '#d3d3d3' },\r\n\t\t{ name: 'lightpink', code: '#ffb6c1' },\r\n\t\t{ name: 'lightsalmon', code: '#ffa07a' },\r\n\t\t{ name: 'lightseagreen', code: '#20b2aa' },\r\n\t\t{ name: 'lightskyblue', code: '#87cefa' },\r\n\t\t{ name: 'lightslategray', code: '#778899' },\r\n\t\t{ name: 'lightslategrey', code: '#778899' },\r\n\t\t{ name: 'lightsteelblue', code: '#b0c4de' },\r\n\t\t{ name: 'lightyellow', code: '#ffffe0' },\r\n\t\t{ name: 'lime', code: '#00ff00' },\r\n\t\t{ name: 'limegreen', code: '#32cd32' },\r\n\t\t{ name: 'linen', code: '#faf0e6' },\r\n\t\t{ name: 'magenta', code: '#ff00ff' },\r\n\t\t{ name: 'maroon', code: '#800000' },\r\n\t\t{ name: 'mediumaquamarine', code: '#66cdaa' },\r\n\t\t{ name: 'mediumblue', code: '#0000cd' },\r\n\t\t{ name: 'mediumorchid', code: '#ba55d3' },\r\n\t\t{ name: 'mediumpurple', code: '#9370db' },\r\n\t\t{ name: 'mediumseagreen', code: '#3cb371' },\r\n\t\t{ name: 'mediumslateblue', code: '#7b68ee' },\r\n\t\t{ name: 'mediumspringgreen', code: '#00fa9a' },\r\n\t\t{ name: 'mediumturquoise', code: '#48d1cc' },\r\n\t\t{ name: 'mediumvioletred', code: '#c71585' },\r\n\t\t{ name: 'midnightblue', code: '#191970' },\r\n\t\t{ name: 'mintcream', code: '#f5fffa' },\r\n\t\t{ name: 'mistyrose', code: '#ffe4e1' },\r\n\t\t{ name: 'moccasin', code: '#ffe4b5' },\r\n\t\t{ name: 'navajowhite', code: '#ffdead' },\r\n\t\t{ name: 'navy', code: '#000080' },\r\n\t\t{ name: 'oldlace', code: '#fdf5e6' },\r\n\t\t{ name: 'olive', code: '#808000' },\r\n\t\t{ name: 'olivedrab', code: '#6b8e23' },\r\n\t\t{ name: 'orange', code: '#ffa500' },\r\n\t\t{ name: 'orangered', code: '#ff4500' },\r\n\t\t{ name: 'orchid', code: '#da70d6' },\r\n\t\t{ name: 'palegoldenrod', code: '#eee8aa' },\r\n\t\t{ name: 'palegreen', code: '#98fb98' },\r\n\t\t{ name: 'paleturquoise', code: '#afeeee' },\r\n\t\t{ name: 'palevioletred', code: '#db7093' },\r\n\t\t{ name: 'papayawhip', code: '#ffefd5' },\r\n\t\t{ name: 'peachpuff', code: '#ffdab9' },\r\n\t\t{ name: 'peru', code: '#cd853f' },\r\n\t\t{ name: 'pink', code: '#ffc0cb' },\r\n\t\t{ name: 'plum', code: '#dda0dd' },\r\n\t\t{ name: 'powderblue', code: '#b0e0e6' },\r\n\t\t{ name: 'purple', code: '#800080' },\r\n\t\t{ name: 'rebeccapurple', code: '#663399' },\r\n\t\t{ name: 'red', code: '#ff0000' },\r\n\t\t{ name: 'rosybrown', code: '#bc8f8f' },\r\n\t\t{ name: 'royalblue', code: '#4169e1' },\r\n\t\t{ name: 'saddlebrown', code: '#8b4513' },\r\n\t\t{ name: 'salmon', code: '#fa8072' },\r\n\t\t{ name: 'sandybrown', code: '#f4a460' },\r\n\t\t{ name: 'seagreen', code: '#2e8b57' },\r\n\t\t{ name: 'seashell', code: '#fff5ee' },\r\n\t\t{ name: 'sienna', code: '#a0522d' },\r\n\t\t{ name: 'silver', code: '#c0c0c0' },\r\n\t\t{ name: 'skyblue', code: '#87ceeb' },\r\n\t\t{ name: 'slateblue', code: '#6a5acd' },\r\n\t\t{ name: 'slategray', code: '#708090' },\r\n\t\t{ name: 'slategrey', code: '#708090' },\r\n\t\t{ name: 'snow', code: '#fffafa' },\r\n\t\t{ name: 'springgreen', code: '#00ff7f' },\r\n\t\t{ name: 'steelblue', code: '#4682b4' },\r\n\t\t{ name: 'tan', code: '#d2b48c' },\r\n\t\t{ name: 'teal', code: '#008080' },\r\n\t\t{ name: 'thistle', code: '#d8bfd8' },\r\n\t\t{ name: 'tomato', code: '#ff6347' },\r\n\t\t{ name: 'turquoise', code: '#40e0d0' },\r\n\t\t{ name: 'violet', code: '#ee82ee' },\r\n\t\t{ name: 'wheat', code: '#f5deb3' },\r\n\t\t{ name: 'white', code: '#ffffff' },\r\n\t\t{ name: 'whitesmoke', code: '#f5f5f5' },\r\n\t\t{ name: 'yellow', code: '#ffff00' },\r\n\t\t{ name: 'yellowgreen', code: '#9acd32' },\r\n\t]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "item",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "groupBy",
                    "args": [
                        {
                            "name": "color",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchFn",
                    "args": [
                        {
                            "name": "o",
                            "type": ""
                        },
                        {
                            "name": "c",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "o",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "c",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackBy",
                    "args": [
                        {
                            "name": "idx",
                            "type": ""
                        },
                        {
                            "name": "color",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'sand-option-groupby',\r\n\ttemplateUrl: './option-groupby.component.html',\r\n\tstyles: [\r\n\t\t`.color-preview { height: 16px; width: 16px; display: inline-block; }`\r\n\t]\r\n})\r\nexport class OptionGroupbyComponent {\r\n\tsearchFn(o, c) {\r\n\t\treturn o.name.includes(c);\r\n\t}\r\n\ttrackBy(idx, color): string {\r\n\t\treturn color.code;\r\n\t}\r\n\tgroupBy(color): string {\r\n\t\tconst hsl = hexToHsl(color.code);\r\n\t\tif (hsl.l < .1 ) { return 'Blacks'; }\r\n\t\tif (hsl.l > .95 ) { return 'Whites'; }\r\n\t\tif (hsl.s < .1 ) { return 'Greys'; }\r\n\t\tif (hsl.h < 1/6) { return 'Reds'; }\r\n\t\tif (hsl.h < 3/6) { return 'Greens'; }\r\n\t\tif (hsl.h < 5/6) { return 'Blues'; }\r\n\t\treturn 'Reds';\r\n\t}\r\n\titem;\r\n\tcolors = [\r\n\t\t{ name: 'aliceblue', code: '#f0f8ff' },\r\n\t\t{ name: 'antiquewhite', code: '#faebd7' },\r\n\t\t{ name: 'aqua', code: '#00ffff' },\r\n\t\t{ name: 'aquamarine', code: '#7fffd4' },\r\n\t\t{ name: 'azure', code: '#f0ffff' },\r\n\t\t{ name: 'beige', code: '#f5f5dc' },\r\n\t\t{ name: 'bisque', code: '#ffe4c4' },\r\n\t\t{ name: 'black', code: '#000000' },\r\n\t\t{ name: 'blanchedalmond', code: '#ffebcd' },\r\n\t\t{ name: 'blue', code: '#0000ff' },\r\n\t\t{ name: 'blueviolet', code: '#8a2be2' },\r\n\t\t{ name: 'brown', code: '#a52a2a' },\r\n\t\t{ name: 'burlywood', code: '#deb887' },\r\n\t\t{ name: 'cadetblue', code: '#5f9ea0' },\r\n\t\t{ name: 'chartreuse', code: '#7fff00' },\r\n\t\t{ name: 'chocolate', code: '#d2691e' },\r\n\t\t{ name: 'coral', code: '#ff7f50' },\r\n\t\t{ name: 'cornflowerblue', code: '#6495ed' },\r\n\t\t{ name: 'cornsilk', code: '#fff8dc' },\r\n\t\t{ name: 'crimson', code: '#dc143c' },\r\n\t\t{ name: 'cyan', code: '#00ffff' },\r\n\t\t{ name: 'darkblue', code: '#00008b' },\r\n\t\t{ name: 'darkcyan', code: '#008b8b' },\r\n\t\t{ name: 'darkgoldenrod', code: '#b8860b' },\r\n\t\t{ name: 'darkgray', code: '#a9a9a9' },\r\n\t\t{ name: 'darkgreen', code: '#006400' },\r\n\t\t{ name: 'darkgrey', code: '#a9a9a9' },\r\n\t\t{ name: 'darkkhaki', code: '#bdb76b' },\r\n\t\t{ name: 'darkmagenta', code: '#8b008b' },\r\n\t\t{ name: 'darkolivegreen', code: '#556b2f' },\r\n\t\t{ name: 'darkorange', code: '#ff8c00' },\r\n\t\t{ name: 'darkorchid', code: '#9932cc' },\r\n\t\t{ name: 'darkred', code: '#8b0000' },\r\n\t\t{ name: 'darksalmon', code: '#e9967a' },\r\n\t\t{ name: 'darkseagreen', code: '#8fbc8f' },\r\n\t\t{ name: 'darkslateblue', code: '#483d8b' },\r\n\t\t{ name: 'darkslategray', code: '#2f4f4f' },\r\n\t\t{ name: 'darkslategrey', code: '#2f4f4f' },\r\n\t\t{ name: 'darkturquoise', code: '#00ced1' },\r\n\t\t{ name: 'darkviolet', code: '#9400d3' },\r\n\t\t{ name: 'deeppink', code: '#ff1493' },\r\n\t\t{ name: 'deepskyblue', code: '#00bfff' },\r\n\t\t{ name: 'dimgray', code: '#696969' },\r\n\t\t{ name: 'dimgrey', code: '#696969' },\r\n\t\t{ name: 'dodgerblue', code: '#1e90ff' },\r\n\t\t{ name: 'firebrick', code: '#b22222' },\r\n\t\t{ name: 'floralwhite', code: '#fffaf0' },\r\n\t\t{ name: 'forestgreen', code: '#228b22' },\r\n\t\t{ name: 'fuchsia', code: '#ff00ff' },\r\n\t\t{ name: 'gainsboro', code: '#dcdcdc' },\r\n\t\t{ name: 'ghostwhite', code: '#f8f8ff' },\r\n\t\t{ name: 'gold', code: '#ffd700' },\r\n\t\t{ name: 'goldenrod', code: '#daa520' },\r\n\t\t{ name: 'gray', code: '#808080' },\r\n\t\t{ name: 'green', code: '#008000' },\r\n\t\t{ name: 'greenyellow', code: '#adff2f' },\r\n\t\t{ name: 'grey', code: '#808080' },\r\n\t\t{ name: 'honeydew', code: '#f0fff0' },\r\n\t\t{ name: 'hotpink', code: '#ff69b4' },\r\n\t\t{ name: 'indianred', code: '#cd5c5c' },\r\n\t\t{ name: 'indigo', code: '#4b0082' },\r\n\t\t{ name: 'ivory', code: '#fffff0' },\r\n\t\t{ name: 'khaki', code: '#f0e68c' },\r\n\t\t{ name: 'lavender', code: '#e6e6fa' },\r\n\t\t{ name: 'lavenderblush', code: '#fff0f5' },\r\n\t\t{ name: 'lawngreen', code: '#7cfc00' },\r\n\t\t{ name: 'lemonchiffon', code: '#fffacd' },\r\n\t\t{ name: 'lightblue', code: '#add8e6' },\r\n\t\t{ name: 'lightcoral', code: '#f08080' },\r\n\t\t{ name: 'lightcyan', code: '#e0ffff' },\r\n\t\t{ name: 'lightgoldenrodyellow', code: '#fafad2' },\r\n\t\t{ name: 'lightgray', code: '#d3d3d3' },\r\n\t\t{ name: 'lightgreen', code: '#90ee90' },\r\n\t\t{ name: 'lightgrey', code: '#d3d3d3' },\r\n\t\t{ name: 'lightpink', code: '#ffb6c1' },\r\n\t\t{ name: 'lightsalmon', code: '#ffa07a' },\r\n\t\t{ name: 'lightseagreen', code: '#20b2aa' },\r\n\t\t{ name: 'lightskyblue', code: '#87cefa' },\r\n\t\t{ name: 'lightslategray', code: '#778899' },\r\n\t\t{ name: 'lightslategrey', code: '#778899' },\r\n\t\t{ name: 'lightsteelblue', code: '#b0c4de' },\r\n\t\t{ name: 'lightyellow', code: '#ffffe0' },\r\n\t\t{ name: 'lime', code: '#00ff00' },\r\n\t\t{ name: 'limegreen', code: '#32cd32' },\r\n\t\t{ name: 'linen', code: '#faf0e6' },\r\n\t\t{ name: 'magenta', code: '#ff00ff' },\r\n\t\t{ name: 'maroon', code: '#800000' },\r\n\t\t{ name: 'mediumaquamarine', code: '#66cdaa' },\r\n\t\t{ name: 'mediumblue', code: '#0000cd' },\r\n\t\t{ name: 'mediumorchid', code: '#ba55d3' },\r\n\t\t{ name: 'mediumpurple', code: '#9370db' },\r\n\t\t{ name: 'mediumseagreen', code: '#3cb371' },\r\n\t\t{ name: 'mediumslateblue', code: '#7b68ee' },\r\n\t\t{ name: 'mediumspringgreen', code: '#00fa9a' },\r\n\t\t{ name: 'mediumturquoise', code: '#48d1cc' },\r\n\t\t{ name: 'mediumvioletred', code: '#c71585' },\r\n\t\t{ name: 'midnightblue', code: '#191970' },\r\n\t\t{ name: 'mintcream', code: '#f5fffa' },\r\n\t\t{ name: 'mistyrose', code: '#ffe4e1' },\r\n\t\t{ name: 'moccasin', code: '#ffe4b5' },\r\n\t\t{ name: 'navajowhite', code: '#ffdead' },\r\n\t\t{ name: 'navy', code: '#000080' },\r\n\t\t{ name: 'oldlace', code: '#fdf5e6' },\r\n\t\t{ name: 'olive', code: '#808000' },\r\n\t\t{ name: 'olivedrab', code: '#6b8e23' },\r\n\t\t{ name: 'orange', code: '#ffa500' },\r\n\t\t{ name: 'orangered', code: '#ff4500' },\r\n\t\t{ name: 'orchid', code: '#da70d6' },\r\n\t\t{ name: 'palegoldenrod', code: '#eee8aa' },\r\n\t\t{ name: 'palegreen', code: '#98fb98' },\r\n\t\t{ name: 'paleturquoise', code: '#afeeee' },\r\n\t\t{ name: 'palevioletred', code: '#db7093' },\r\n\t\t{ name: 'papayawhip', code: '#ffefd5' },\r\n\t\t{ name: 'peachpuff', code: '#ffdab9' },\r\n\t\t{ name: 'peru', code: '#cd853f' },\r\n\t\t{ name: 'pink', code: '#ffc0cb' },\r\n\t\t{ name: 'plum', code: '#dda0dd' },\r\n\t\t{ name: 'powderblue', code: '#b0e0e6' },\r\n\t\t{ name: 'purple', code: '#800080' },\r\n\t\t{ name: 'rebeccapurple', code: '#663399' },\r\n\t\t{ name: 'red', code: '#ff0000' },\r\n\t\t{ name: 'rosybrown', code: '#bc8f8f' },\r\n\t\t{ name: 'royalblue', code: '#4169e1' },\r\n\t\t{ name: 'saddlebrown', code: '#8b4513' },\r\n\t\t{ name: 'salmon', code: '#fa8072' },\r\n\t\t{ name: 'sandybrown', code: '#f4a460' },\r\n\t\t{ name: 'seagreen', code: '#2e8b57' },\r\n\t\t{ name: 'seashell', code: '#fff5ee' },\r\n\t\t{ name: 'sienna', code: '#a0522d' },\r\n\t\t{ name: 'silver', code: '#c0c0c0' },\r\n\t\t{ name: 'skyblue', code: '#87ceeb' },\r\n\t\t{ name: 'slateblue', code: '#6a5acd' },\r\n\t\t{ name: 'slategray', code: '#708090' },\r\n\t\t{ name: 'slategrey', code: '#708090' },\r\n\t\t{ name: 'snow', code: '#fffafa' },\r\n\t\t{ name: 'springgreen', code: '#00ff7f' },\r\n\t\t{ name: 'steelblue', code: '#4682b4' },\r\n\t\t{ name: 'tan', code: '#d2b48c' },\r\n\t\t{ name: 'teal', code: '#008080' },\r\n\t\t{ name: 'thistle', code: '#d8bfd8' },\r\n\t\t{ name: 'tomato', code: '#ff6347' },\r\n\t\t{ name: 'turquoise', code: '#40e0d0' },\r\n\t\t{ name: 'violet', code: '#ee82ee' },\r\n\t\t{ name: 'wheat', code: '#f5deb3' },\r\n\t\t{ name: 'white', code: '#ffffff' },\r\n\t\t{ name: 'whitesmoke', code: '#f5f5f5' },\r\n\t\t{ name: 'yellow', code: '#ffff00' },\r\n\t\t{ name: 'yellowgreen', code: '#9acd32' },\r\n\t];\r\n}\r\n\r\nfunction hexToHsl(hex: string) {\r\n\tconst r = parseInt(hex.substring(1, 3), 16) / 255;\r\n\tconst g = parseInt(hex.substring(3, 5), 16) / 255;\r\n\tconst b = parseInt(hex.substring(5, 7), 16) / 255;\r\n\t// r /= 255, g /= 255, b /= 255;\r\n\r\n\tconst max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n\tlet h, s, l = (max + min) / 2;\r\n\r\n\tif (max == min) {\r\n\t\th = s = 0; // achromatic\r\n\t} else {\r\n\t\tlet d = max - min;\r\n\t\ts = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n\r\n\t\tswitch (max) {\r\n\t\t\tcase r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n\t\t\tcase g: h = (b - r) / d + 2; break;\r\n\t\t\tcase b: h = (r - g) / d + 4; break;\r\n\t\t}\r\n\r\n\t\th /= 6;\r\n\t}\r\n\r\n\treturn { h, s, l };\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ".color-preview { height: 16px; width: 16px; display: inline-block; }\n",
            "templateData": "<h1>option-groupby</h1>\r\n<h2>Not grouped</h2>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{value.name}}</ng-container>\r\n\t\t<lu-option-picker-advanced>\r\n\t\t\t<!-- transforms the colors array to be passed between operators -->\r\n\t\t\t<lu-option-feeder [options]=\"colors\"></lu-option-feeder>\r\n\t\t\t<!-- allows you to filter said colors -->\r\n\t\t\t<lu-option-searcher [searchFn]=\"searchFn\"></lu-option-searcher>\r\n\t\t\t<!-- adds paging to the results to not break your DOM -->\r\n\t\t\t<lu-option-pager></lu-option-pager>\r\n\t\t\t<!-- specify the template to display each color -->\r\n\t\t\t<lu-option *luForOptions=\"let color; trackBy: trackBy\" [value]=\"color\">\r\n\t\t\t\t<div class=\"color-preview\" [style.background-color]=\"color.code\"></div>\r\n\t\t\t\t{{color.name}}\r\n\t\t\t</lu-option>\r\n\t\t</lu-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">colors not grouped</label>\r\n</div>\r\n<h2>Grouped by hue</h2>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{value.name}}</ng-container>\r\n\t\t<lu-option-picker-advanced>\r\n\t\t\t<!-- transforms the colors array to be passed between operators -->\r\n\t\t\t<lu-option-feeder [options]=\"colors\"></lu-option-feeder>\r\n\t\t\t<!-- allows you to filter said colors -->\r\n\t\t\t<lu-option-searcher [searchFn]=\"searchFn\"></lu-option-searcher>\r\n\t\t\t<!-- adds paging to the results to not break your DOM -->\r\n\t\t\t<!-- <lu-option-pager></lu-option-pager> -->\r\n\t\t\t<!-- specify the template to display each color -->\r\n\t\t\t<!-- <lu-option *luForOptions=\"let color; trackBy: trackBy\" [value]=\"color\">{{color.name}}</lu-option> -->\r\n\t\t\t<ng-template luForGroups let-group [luForGroupsGroupBy]=\"groupBy\">\r\n\t\t\t\t<h4>{{group.key}}</h4>\r\n\r\n\t\t\t\t<lu-option *ngFor=\"let color of group.items; trackBy: trackBy\" [value]=\"color\">\r\n\t\t\t\t\t<div class=\"color-preview\" [style.background-color]=\"color.code\"></div>\r\n\t\t\t\t\t{{color.name}}\r\n\t\t\t\t</lu-option>\r\n\t\t\t</ng-template>\r\n\t\t</lu-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">colors grouped by hue</label>\r\n</div>"
        },
        {
            "name": "OptionSelectorComponent",
            "id": "component-OptionSelectorComponent-7601dd3ee7c00538adc88fd1dbda7937",
            "file": "packages/ng/applications/sandbox/src/app/issues/option-selector/option-selector.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-option-selector",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./option-selector.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colors",
                    "defaultValue": "[\r\n\t\t{ name: 'aliceblue', code: '#f0f8ff' },\r\n\t\t{ name: 'antiquewhite', code: '#faebd7' },\r\n\t\t{ name: 'aqua', code: '#00ffff' },\r\n\t\t{ name: 'aquamarine', code: '#7fffd4' },\r\n\t\t{ name: 'azure', code: '#f0ffff' },\r\n\t\t{ name: 'beige', code: '#f5f5dc' },\r\n\t\t{ name: 'bisque', code: '#ffe4c4' },\r\n\t\t{ name: 'black', code: '#000000' },\r\n\t\t{ name: 'blanchedalmond', code: '#ffebcd' },\r\n\t\t{ name: 'blue', code: '#0000ff' },\r\n\t\t{ name: 'blueviolet', code: '#8a2be2' },\r\n\t\t{ name: 'brown', code: '#a52a2a' },\r\n\t\t{ name: 'burlywood', code: '#deb887' },\r\n\t\t{ name: 'cadetblue', code: '#5f9ea0' },\r\n\t\t{ name: 'chartreuse', code: '#7fff00' },\r\n\t\t{ name: 'chocolate', code: '#d2691e' },\r\n\t\t{ name: 'coral', code: '#ff7f50' },\r\n\t\t{ name: 'cornflowerblue', code: '#6495ed' },\r\n\t\t{ name: 'cornsilk', code: '#fff8dc' },\r\n\t\t{ name: 'crimson', code: '#dc143c' },\r\n\t\t{ name: 'cyan', code: '#00ffff' },\r\n\t\t{ name: 'darkblue', code: '#00008b' },\r\n\t\t{ name: 'darkcyan', code: '#008b8b' },\r\n\t\t{ name: 'darkgoldenrod', code: '#b8860b' },\r\n\t\t{ name: 'darkgray', code: '#a9a9a9' },\r\n\t\t{ name: 'darkgreen', code: '#006400' },\r\n\t\t{ name: 'darkgrey', code: '#a9a9a9' },\r\n\t\t{ name: 'darkkhaki', code: '#bdb76b' },\r\n\t\t{ name: 'darkmagenta', code: '#8b008b' },\r\n\t\t{ name: 'darkolivegreen', code: '#556b2f' },\r\n\t\t{ name: 'darkorange', code: '#ff8c00' },\r\n\t\t{ name: 'darkorchid', code: '#9932cc' },\r\n\t\t{ name: 'darkred', code: '#8b0000' },\r\n\t\t{ name: 'darksalmon', code: '#e9967a' },\r\n\t\t{ name: 'darkseagreen', code: '#8fbc8f' },\r\n\t\t{ name: 'darkslateblue', code: '#483d8b' },\r\n\t\t{ name: 'darkslategray', code: '#2f4f4f' },\r\n\t\t{ name: 'darkslategrey', code: '#2f4f4f' },\r\n\t\t{ name: 'darkturquoise', code: '#00ced1' },\r\n\t\t{ name: 'darkviolet', code: '#9400d3' },\r\n\t\t{ name: 'deeppink', code: '#ff1493' },\r\n\t\t{ name: 'deepskyblue', code: '#00bfff' },\r\n\t\t{ name: 'dimgray', code: '#696969' },\r\n\t\t{ name: 'dimgrey', code: '#696969' },\r\n\t\t{ name: 'dodgerblue', code: '#1e90ff' },\r\n\t\t{ name: 'firebrick', code: '#b22222' },\r\n\t\t{ name: 'floralwhite', code: '#fffaf0' },\r\n\t\t{ name: 'forestgreen', code: '#228b22' },\r\n\t\t{ name: 'fuchsia', code: '#ff00ff' },\r\n\t\t{ name: 'gainsboro', code: '#dcdcdc' },\r\n\t\t{ name: 'ghostwhite', code: '#f8f8ff' },\r\n\t\t{ name: 'gold', code: '#ffd700' },\r\n\t\t{ name: 'goldenrod', code: '#daa520' },\r\n\t\t{ name: 'gray', code: '#808080' },\r\n\t\t{ name: 'green', code: '#008000' },\r\n\t\t{ name: 'greenyellow', code: '#adff2f' },\r\n\t\t{ name: 'grey', code: '#808080' },\r\n\t\t{ name: 'honeydew', code: '#f0fff0' },\r\n\t\t{ name: 'hotpink', code: '#ff69b4' },\r\n\t\t{ name: 'indianred', code: '#cd5c5c' },\r\n\t\t{ name: 'indigo', code: '#4b0082' },\r\n\t\t{ name: 'ivory', code: '#fffff0' },\r\n\t\t{ name: 'khaki', code: '#f0e68c' },\r\n\t\t{ name: 'lavender', code: '#e6e6fa' },\r\n\t\t{ name: 'lavenderblush', code: '#fff0f5' },\r\n\t\t{ name: 'lawngreen', code: '#7cfc00' },\r\n\t\t{ name: 'lemonchiffon', code: '#fffacd' },\r\n\t\t{ name: 'lightblue', code: '#add8e6' },\r\n\t\t{ name: 'lightcoral', code: '#f08080' },\r\n\t\t{ name: 'lightcyan', code: '#e0ffff' },\r\n\t\t{ name: 'lightgoldenrodyellow', code: '#fafad2' },\r\n\t\t{ name: 'lightgray', code: '#d3d3d3' },\r\n\t\t{ name: 'lightgreen', code: '#90ee90' },\r\n\t\t{ name: 'lightgrey', code: '#d3d3d3' },\r\n\t\t{ name: 'lightpink', code: '#ffb6c1' },\r\n\t\t{ name: 'lightsalmon', code: '#ffa07a' },\r\n\t\t{ name: 'lightseagreen', code: '#20b2aa' },\r\n\t\t{ name: 'lightskyblue', code: '#87cefa' },\r\n\t\t{ name: 'lightslategray', code: '#778899' },\r\n\t\t{ name: 'lightslategrey', code: '#778899' },\r\n\t\t{ name: 'lightsteelblue', code: '#b0c4de' },\r\n\t\t{ name: 'lightyellow', code: '#ffffe0' },\r\n\t\t{ name: 'lime', code: '#00ff00' },\r\n\t\t{ name: 'limegreen', code: '#32cd32' },\r\n\t\t{ name: 'linen', code: '#faf0e6' },\r\n\t\t{ name: 'magenta', code: '#ff00ff' },\r\n\t\t{ name: 'maroon', code: '#800000' },\r\n\t\t{ name: 'mediumaquamarine', code: '#66cdaa' },\r\n\t\t{ name: 'mediumblue', code: '#0000cd' },\r\n\t\t{ name: 'mediumorchid', code: '#ba55d3' },\r\n\t\t{ name: 'mediumpurple', code: '#9370db' },\r\n\t\t{ name: 'mediumseagreen', code: '#3cb371' },\r\n\t\t{ name: 'mediumslateblue', code: '#7b68ee' },\r\n\t\t{ name: 'mediumspringgreen', code: '#00fa9a' },\r\n\t\t{ name: 'mediumturquoise', code: '#48d1cc' },\r\n\t\t{ name: 'mediumvioletred', code: '#c71585' },\r\n\t\t{ name: 'midnightblue', code: '#191970' },\r\n\t\t{ name: 'mintcream', code: '#f5fffa' },\r\n\t\t{ name: 'mistyrose', code: '#ffe4e1' },\r\n\t\t{ name: 'moccasin', code: '#ffe4b5' },\r\n\t\t{ name: 'navajowhite', code: '#ffdead' },\r\n\t\t{ name: 'navy', code: '#000080' },\r\n\t\t{ name: 'oldlace', code: '#fdf5e6' },\r\n\t\t{ name: 'olive', code: '#808000' },\r\n\t\t{ name: 'olivedrab', code: '#6b8e23' },\r\n\t\t{ name: 'orange', code: '#ffa500' },\r\n\t\t{ name: 'orangered', code: '#ff4500' },\r\n\t\t{ name: 'orchid', code: '#da70d6' },\r\n\t\t{ name: 'palegoldenrod', code: '#eee8aa' },\r\n\t\t{ name: 'palegreen', code: '#98fb98' },\r\n\t\t{ name: 'paleturquoise', code: '#afeeee' },\r\n\t\t{ name: 'palevioletred', code: '#db7093' },\r\n\t\t{ name: 'papayawhip', code: '#ffefd5' },\r\n\t\t{ name: 'peachpuff', code: '#ffdab9' },\r\n\t\t{ name: 'peru', code: '#cd853f' },\r\n\t\t{ name: 'pink', code: '#ffc0cb' },\r\n\t\t{ name: 'plum', code: '#dda0dd' },\r\n\t\t{ name: 'powderblue', code: '#b0e0e6' },\r\n\t\t{ name: 'purple', code: '#800080' },\r\n\t\t{ name: 'rebeccapurple', code: '#663399' },\r\n\t\t{ name: 'red', code: '#ff0000' },\r\n\t\t{ name: 'rosybrown', code: '#bc8f8f' },\r\n\t\t{ name: 'royalblue', code: '#4169e1' },\r\n\t\t{ name: 'saddlebrown', code: '#8b4513' },\r\n\t\t{ name: 'salmon', code: '#fa8072' },\r\n\t\t{ name: 'sandybrown', code: '#f4a460' },\r\n\t\t{ name: 'seagreen', code: '#2e8b57' },\r\n\t\t{ name: 'seashell', code: '#fff5ee' },\r\n\t\t{ name: 'sienna', code: '#a0522d' },\r\n\t\t{ name: 'silver', code: '#c0c0c0' },\r\n\t\t{ name: 'skyblue', code: '#87ceeb' },\r\n\t\t{ name: 'slateblue', code: '#6a5acd' },\r\n\t\t{ name: 'slategray', code: '#708090' },\r\n\t\t{ name: 'slategrey', code: '#708090' },\r\n\t\t{ name: 'snow', code: '#fffafa' },\r\n\t\t{ name: 'springgreen', code: '#00ff7f' },\r\n\t\t{ name: 'steelblue', code: '#4682b4' },\r\n\t\t{ name: 'tan', code: '#d2b48c' },\r\n\t\t{ name: 'teal', code: '#008080' },\r\n\t\t{ name: 'thistle', code: '#d8bfd8' },\r\n\t\t{ name: 'tomato', code: '#ff6347' },\r\n\t\t{ name: 'turquoise', code: '#40e0d0' },\r\n\t\t{ name: 'violet', code: '#ee82ee' },\r\n\t\t{ name: 'wheat', code: '#f5deb3' },\r\n\t\t{ name: 'white', code: '#ffffff' },\r\n\t\t{ name: 'whitesmoke', code: '#f5f5f5' },\r\n\t\t{ name: 'yellow', code: '#ffff00' },\r\n\t\t{ name: 'yellowgreen', code: '#9acd32' },\r\n\t]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "nodes",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "options",
                    "defaultValue": "[{\r\n\t\tvalue: node1,\r\n\t\tchildren: [\r\n\t\t\t{ value: node11, children: [ { value: node111, children: [] } ] },\r\n\t\t\t{ value: node12, children: [] },\r\n\t\t]\r\n\t}, {\r\n\t\tvalue: node2,\r\n\t\tchildren: [ { value: node21, children: [] }]\r\n\t}]",
                    "type": "ILuTree<literal type>[]",
                    "optional": false,
                    "description": "",
                    "line": 175
                }
            ],
            "methodsClass": [
                {
                    "name": "searchFn",
                    "args": [
                        {
                            "name": "o",
                            "type": ""
                        },
                        {
                            "name": "c",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "o",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "c",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackBy",
                    "args": [
                        {
                            "name": "idx",
                            "type": ""
                        },
                        {
                            "name": "color",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ILuTree } from '@lucca-front/ng/core';\r\n\r\nconst node1 = { id: 1, name: 'root 1' };\r\nconst node11 = { id: 11, name: 'node 1.1' };\r\nconst node111 = { id: 111, name: 'leaf 1.1.1' };\r\nconst node12 = { id: 11, name: 'node 1.2' };\r\nconst node2 = { id: 2, name: 'root 2' };\r\nconst node21 = { id: 21, name: 'node 2.1' };\r\n\r\n@Component({\r\n\tselector: 'lu-option-selector',\r\n\ttemplateUrl: './option-selector.component.html'\r\n})\r\nexport class OptionSelectorComponent {\r\n\tsearchFn(o, c) {\r\n\t\treturn o.name.startsWith(c);\r\n\t}\r\n\ttrackBy(idx, color): string {\r\n\t\treturn color.code;\r\n\t}\r\n\titems = [];\r\n\tnodes = [];\r\n\tcolors = [\r\n\t\t{ name: 'aliceblue', code: '#f0f8ff' },\r\n\t\t{ name: 'antiquewhite', code: '#faebd7' },\r\n\t\t{ name: 'aqua', code: '#00ffff' },\r\n\t\t{ name: 'aquamarine', code: '#7fffd4' },\r\n\t\t{ name: 'azure', code: '#f0ffff' },\r\n\t\t{ name: 'beige', code: '#f5f5dc' },\r\n\t\t{ name: 'bisque', code: '#ffe4c4' },\r\n\t\t{ name: 'black', code: '#000000' },\r\n\t\t{ name: 'blanchedalmond', code: '#ffebcd' },\r\n\t\t{ name: 'blue', code: '#0000ff' },\r\n\t\t{ name: 'blueviolet', code: '#8a2be2' },\r\n\t\t{ name: 'brown', code: '#a52a2a' },\r\n\t\t{ name: 'burlywood', code: '#deb887' },\r\n\t\t{ name: 'cadetblue', code: '#5f9ea0' },\r\n\t\t{ name: 'chartreuse', code: '#7fff00' },\r\n\t\t{ name: 'chocolate', code: '#d2691e' },\r\n\t\t{ name: 'coral', code: '#ff7f50' },\r\n\t\t{ name: 'cornflowerblue', code: '#6495ed' },\r\n\t\t{ name: 'cornsilk', code: '#fff8dc' },\r\n\t\t{ name: 'crimson', code: '#dc143c' },\r\n\t\t{ name: 'cyan', code: '#00ffff' },\r\n\t\t{ name: 'darkblue', code: '#00008b' },\r\n\t\t{ name: 'darkcyan', code: '#008b8b' },\r\n\t\t{ name: 'darkgoldenrod', code: '#b8860b' },\r\n\t\t{ name: 'darkgray', code: '#a9a9a9' },\r\n\t\t{ name: 'darkgreen', code: '#006400' },\r\n\t\t{ name: 'darkgrey', code: '#a9a9a9' },\r\n\t\t{ name: 'darkkhaki', code: '#bdb76b' },\r\n\t\t{ name: 'darkmagenta', code: '#8b008b' },\r\n\t\t{ name: 'darkolivegreen', code: '#556b2f' },\r\n\t\t{ name: 'darkorange', code: '#ff8c00' },\r\n\t\t{ name: 'darkorchid', code: '#9932cc' },\r\n\t\t{ name: 'darkred', code: '#8b0000' },\r\n\t\t{ name: 'darksalmon', code: '#e9967a' },\r\n\t\t{ name: 'darkseagreen', code: '#8fbc8f' },\r\n\t\t{ name: 'darkslateblue', code: '#483d8b' },\r\n\t\t{ name: 'darkslategray', code: '#2f4f4f' },\r\n\t\t{ name: 'darkslategrey', code: '#2f4f4f' },\r\n\t\t{ name: 'darkturquoise', code: '#00ced1' },\r\n\t\t{ name: 'darkviolet', code: '#9400d3' },\r\n\t\t{ name: 'deeppink', code: '#ff1493' },\r\n\t\t{ name: 'deepskyblue', code: '#00bfff' },\r\n\t\t{ name: 'dimgray', code: '#696969' },\r\n\t\t{ name: 'dimgrey', code: '#696969' },\r\n\t\t{ name: 'dodgerblue', code: '#1e90ff' },\r\n\t\t{ name: 'firebrick', code: '#b22222' },\r\n\t\t{ name: 'floralwhite', code: '#fffaf0' },\r\n\t\t{ name: 'forestgreen', code: '#228b22' },\r\n\t\t{ name: 'fuchsia', code: '#ff00ff' },\r\n\t\t{ name: 'gainsboro', code: '#dcdcdc' },\r\n\t\t{ name: 'ghostwhite', code: '#f8f8ff' },\r\n\t\t{ name: 'gold', code: '#ffd700' },\r\n\t\t{ name: 'goldenrod', code: '#daa520' },\r\n\t\t{ name: 'gray', code: '#808080' },\r\n\t\t{ name: 'green', code: '#008000' },\r\n\t\t{ name: 'greenyellow', code: '#adff2f' },\r\n\t\t{ name: 'grey', code: '#808080' },\r\n\t\t{ name: 'honeydew', code: '#f0fff0' },\r\n\t\t{ name: 'hotpink', code: '#ff69b4' },\r\n\t\t{ name: 'indianred', code: '#cd5c5c' },\r\n\t\t{ name: 'indigo', code: '#4b0082' },\r\n\t\t{ name: 'ivory', code: '#fffff0' },\r\n\t\t{ name: 'khaki', code: '#f0e68c' },\r\n\t\t{ name: 'lavender', code: '#e6e6fa' },\r\n\t\t{ name: 'lavenderblush', code: '#fff0f5' },\r\n\t\t{ name: 'lawngreen', code: '#7cfc00' },\r\n\t\t{ name: 'lemonchiffon', code: '#fffacd' },\r\n\t\t{ name: 'lightblue', code: '#add8e6' },\r\n\t\t{ name: 'lightcoral', code: '#f08080' },\r\n\t\t{ name: 'lightcyan', code: '#e0ffff' },\r\n\t\t{ name: 'lightgoldenrodyellow', code: '#fafad2' },\r\n\t\t{ name: 'lightgray', code: '#d3d3d3' },\r\n\t\t{ name: 'lightgreen', code: '#90ee90' },\r\n\t\t{ name: 'lightgrey', code: '#d3d3d3' },\r\n\t\t{ name: 'lightpink', code: '#ffb6c1' },\r\n\t\t{ name: 'lightsalmon', code: '#ffa07a' },\r\n\t\t{ name: 'lightseagreen', code: '#20b2aa' },\r\n\t\t{ name: 'lightskyblue', code: '#87cefa' },\r\n\t\t{ name: 'lightslategray', code: '#778899' },\r\n\t\t{ name: 'lightslategrey', code: '#778899' },\r\n\t\t{ name: 'lightsteelblue', code: '#b0c4de' },\r\n\t\t{ name: 'lightyellow', code: '#ffffe0' },\r\n\t\t{ name: 'lime', code: '#00ff00' },\r\n\t\t{ name: 'limegreen', code: '#32cd32' },\r\n\t\t{ name: 'linen', code: '#faf0e6' },\r\n\t\t{ name: 'magenta', code: '#ff00ff' },\r\n\t\t{ name: 'maroon', code: '#800000' },\r\n\t\t{ name: 'mediumaquamarine', code: '#66cdaa' },\r\n\t\t{ name: 'mediumblue', code: '#0000cd' },\r\n\t\t{ name: 'mediumorchid', code: '#ba55d3' },\r\n\t\t{ name: 'mediumpurple', code: '#9370db' },\r\n\t\t{ name: 'mediumseagreen', code: '#3cb371' },\r\n\t\t{ name: 'mediumslateblue', code: '#7b68ee' },\r\n\t\t{ name: 'mediumspringgreen', code: '#00fa9a' },\r\n\t\t{ name: 'mediumturquoise', code: '#48d1cc' },\r\n\t\t{ name: 'mediumvioletred', code: '#c71585' },\r\n\t\t{ name: 'midnightblue', code: '#191970' },\r\n\t\t{ name: 'mintcream', code: '#f5fffa' },\r\n\t\t{ name: 'mistyrose', code: '#ffe4e1' },\r\n\t\t{ name: 'moccasin', code: '#ffe4b5' },\r\n\t\t{ name: 'navajowhite', code: '#ffdead' },\r\n\t\t{ name: 'navy', code: '#000080' },\r\n\t\t{ name: 'oldlace', code: '#fdf5e6' },\r\n\t\t{ name: 'olive', code: '#808000' },\r\n\t\t{ name: 'olivedrab', code: '#6b8e23' },\r\n\t\t{ name: 'orange', code: '#ffa500' },\r\n\t\t{ name: 'orangered', code: '#ff4500' },\r\n\t\t{ name: 'orchid', code: '#da70d6' },\r\n\t\t{ name: 'palegoldenrod', code: '#eee8aa' },\r\n\t\t{ name: 'palegreen', code: '#98fb98' },\r\n\t\t{ name: 'paleturquoise', code: '#afeeee' },\r\n\t\t{ name: 'palevioletred', code: '#db7093' },\r\n\t\t{ name: 'papayawhip', code: '#ffefd5' },\r\n\t\t{ name: 'peachpuff', code: '#ffdab9' },\r\n\t\t{ name: 'peru', code: '#cd853f' },\r\n\t\t{ name: 'pink', code: '#ffc0cb' },\r\n\t\t{ name: 'plum', code: '#dda0dd' },\r\n\t\t{ name: 'powderblue', code: '#b0e0e6' },\r\n\t\t{ name: 'purple', code: '#800080' },\r\n\t\t{ name: 'rebeccapurple', code: '#663399' },\r\n\t\t{ name: 'red', code: '#ff0000' },\r\n\t\t{ name: 'rosybrown', code: '#bc8f8f' },\r\n\t\t{ name: 'royalblue', code: '#4169e1' },\r\n\t\t{ name: 'saddlebrown', code: '#8b4513' },\r\n\t\t{ name: 'salmon', code: '#fa8072' },\r\n\t\t{ name: 'sandybrown', code: '#f4a460' },\r\n\t\t{ name: 'seagreen', code: '#2e8b57' },\r\n\t\t{ name: 'seashell', code: '#fff5ee' },\r\n\t\t{ name: 'sienna', code: '#a0522d' },\r\n\t\t{ name: 'silver', code: '#c0c0c0' },\r\n\t\t{ name: 'skyblue', code: '#87ceeb' },\r\n\t\t{ name: 'slateblue', code: '#6a5acd' },\r\n\t\t{ name: 'slategray', code: '#708090' },\r\n\t\t{ name: 'slategrey', code: '#708090' },\r\n\t\t{ name: 'snow', code: '#fffafa' },\r\n\t\t{ name: 'springgreen', code: '#00ff7f' },\r\n\t\t{ name: 'steelblue', code: '#4682b4' },\r\n\t\t{ name: 'tan', code: '#d2b48c' },\r\n\t\t{ name: 'teal', code: '#008080' },\r\n\t\t{ name: 'thistle', code: '#d8bfd8' },\r\n\t\t{ name: 'tomato', code: '#ff6347' },\r\n\t\t{ name: 'turquoise', code: '#40e0d0' },\r\n\t\t{ name: 'violet', code: '#ee82ee' },\r\n\t\t{ name: 'wheat', code: '#f5deb3' },\r\n\t\t{ name: 'white', code: '#ffffff' },\r\n\t\t{ name: 'whitesmoke', code: '#f5f5f5' },\r\n\t\t{ name: 'yellow', code: '#ffff00' },\r\n\t\t{ name: 'yellowgreen', code: '#9acd32' },\r\n\t];\r\n\toptions: ILuTree<{ id: number, name: string }>[] = [{\r\n\t\tvalue: node1,\r\n\t\tchildren: [\r\n\t\t\t{ value: node11, children: [ { value: node111, children: [] } ] },\r\n\t\t\t{ value: node12, children: [] },\r\n\t\t]\r\n\t}, {\r\n\t\tvalue: node2,\r\n\t\tchildren: [ { value: node21, children: [] }]\r\n\t}];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>option-selector</h1>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"items\" multiple>\r\n\t\t<span *luDisplayer=\"let values; multiple: true\">{{values.length}} colors</span>\r\n\t\t<lu-option-picker-advanced>\r\n\t\t\t<header class=\"lu-picker-header\">\r\n\t\t\t\t<!-- transforms the colors array to be passed between operators -->\r\n\t\t\t\t<lu-option-feeder [options]=\"colors\"></lu-option-feeder>\r\n\t\t\t\t<!-- allows you to filter said colors -->\r\n\t\t\t\t<lu-option-searcher [searchFn]=\"searchFn\"></lu-option-searcher>\r\n\t\t\t\t<!-- adds a link to select all entries -->\r\n\t\t\t\t<lu-option-select-all></lu-option-select-all>\r\n\t\t\t\t<!-- adds paging to the results to not break your DOM -->\r\n\t\t\t\t<lu-option-pager></lu-option-pager>\r\n\t\t\t</header>\r\n\t\t\t<!-- specify the template to display each color -->\r\n\t\t\t<lu-option *luForOptions=\"let color; trackBy: trackBy\" [value]=\"color\">{{color.name}}</lu-option>\r\n\t\t</lu-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">option picker</label>\r\n</div>\r\n\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"nodes\" multiple>\r\n\t\t<ng-container *luDisplayer=\"let values; multiple: true\">{{ values.length }} items selected</ng-container>\r\n\t\t<lu-tree-option-picker-advanced>\r\n\t\t\t<header class=\"lu-picker-header\">\r\n\t\t\t\t<lu-tree-option-feeder [options]=\"options\"></lu-tree-option-feeder>\r\n\t\t\t\t<lu-tree-option-searcher [searchFn]=\"searchFn\"></lu-tree-option-searcher>\r\n\t\t\t\t<lu-tree-option-select-all></lu-tree-option-select-all>\r\n\t\t\t</header>\r\n\t\t\t<lu-tree-option *luForTreeOptions=\"let option\" [tree]=\"option\">\r\n\t\t\t\t<ng-container *luDisplayer=\"let value\">{{ value.name }}</ng-container>\r\n\t\t\t</lu-tree-option>\r\n\t\t</lu-tree-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">tree option picker</label>\r\n</div>\r\n\r\n{{ nodes | json }}"
        },
        {
            "name": "OverlaysEventsComponent",
            "id": "component-OverlaysEventsComponent-67164db9c3782ed1724bdd173e74ce0f",
            "file": "packages/ng/applications/sandbox/src/app/issues/overlays-events/overlays-events.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-overlays-events",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./overlays-events.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "date",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "department",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "item",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "user",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "debug",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'sand-overlays-events',\r\n\ttemplateUrl: './overlays-events.component.html'\r\n})\r\nexport class OverlaysEventsComponent {\r\n\titem;\r\n\tuser;\r\n\tdepartment;\r\n\tdate;\r\n\tonOpen() {\r\n\t\tconsole.log('on open')\r\n\t}\r\n\tonClose() {\r\n\t\tconsole.log('on close')\r\n\t}\r\n\tdebug() {\r\n\t\tconsole.log('debug');\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>overlays-events</h1>\r\n<h2>Popover</h2>\r\n<button class=\"button\" [luPopover]=\"thePopover\" (luPopoverOnOpen)=\"onOpen()\" (luPopoverOnClose)=\"onClose()\">click me</button>\r\n<lu-popover #thePopover>content</lu-popover>\r\n\r\n<h2>Tooltip</h2>\r\n<label class=\"label\" luTooltip=\"tooltip\" (luTooltipOnOpen)=\"onOpen()\" (luTooltipOnClose)=\"onClose()\">hover me</label>\r\n\r\n<h2>Dropdown</h2>\r\n\r\n<div class=\"button-group\">\r\n\t<button class=\"button\">Main action</button>\r\n\t<button class=\"button mod-more\" [luDropdown]=\"dropdown\" (luDropdownOnOpen)=\"onOpen()\" (luDropdownOnClose)=\"onClose()\">\r\n\t\t<span class=\"cdk-visually-hidden\">\r\n\t\t\tMore actions\r\n\t\t</span>\r\n\t</button>\r\n</div>\r\n<lu-dropdown #dropdown>\r\n\t<li class=\"lu-dropdown-options-item\" >\r\n\t\t<a routerLink=\".\" fragment=\"link1\" class=\"lu-dropdown-options-item-action\" luDropdownItem>Link 1</a>\r\n\t</li>\r\n\t<li class=\"lu-dropdown-options-item\" >\r\n\t\t<button class=\"lu-dropdown-options-item-action\" luDropdownItem (click)=\"debug()\">Button 2</button>\r\n\t</li>\r\n</lu-dropdown>\r\n\r\n<h2>Select</h2>\r\n<h3>Basic</h3>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\" (onPickerOpen)=\"onOpen()\" (onPickerClose)=\"onClose()\">\r\n\t\t<span *luDisplayer=\"let value\">{{value}}</span>\r\n\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t<lu-option-picker>\r\n\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t<lu-option value=\"2\">2</lu-option>\r\n\t\t</lu-option-picker>\r\n\t</lu-select>\r\n\t<label class=\"textfield-label\">Textfield label</label>\r\n</div>\r\n<h3>Api</h3>\r\n<div class=\"textfield\">\r\n\t<lu-api-select class=\"textfield-input\" [(ngModel)]=\"item\" api=\"/api/v3/departments\" placeholder=\"Everything\" (onOpen)=\"onOpen()\" (onClose)=\"onClose()\"></lu-api-select>\r\n\t<label class=\"textfield-label\">Woobwoob</label>\r\n</div>\r\n\r\n<h3>User</h3>\r\n<div class=\"textfield\">\r\n\t<lu-user-select class=\"textfield-input\" [(ngModel)]=\"user\" placeholder=\"Everything\" (onOpen)=\"onOpen()\" (onClose)=\"onClose()\"></lu-user-select>\r\n\t<label class=\"textfield-label\">Woobwoob</label>\r\n</div>\r\n<h3>Department</h3>\r\n<div class=\"textfield\">\r\n\t<lu-department-select class=\"textfield-input\" [(ngModel)]=\"department\" (onOpen)=\"onOpen()\" (onClose)=\"onClose()\"></lu-department-select>\r\n\t<label for=\"\" class=\"textfield-label\">departments select</label>\r\n</div>\r\n<h3>Date</h3>\r\n<div class=\"textfield\">\r\n\t<lu-date-select class=\"textfield-input\" [(ngModel)]=\"date\" (onOpen)=\"onOpen()\" (onClose)=\"onClose()\"></lu-date-select>\r\n\t<label for=\"\" class=\"textfield-label\">date select</label>\r\n</div>"
        },
        {
            "name": "PickerStructureComponent",
            "id": "component-PickerStructureComponent-c7715663bb46ae06bfd818b479f8dc77",
            "file": "packages/ng/applications/sandbox/src/app/issues/picker-structure/picker-structure.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-picker-structure",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./picker-structure.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "department",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "item",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "model",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "user",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'lu-picker-structure',\r\n\ttemplateUrl: './picker-structure.component.html'\r\n})\r\nexport class PickerStructureComponent {\r\n\tmodel = 1;\r\n\titem;\r\n\tuser;\r\n\tdepartment;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>picker-structure</h1>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"model\">\r\n\t\t<span *luDisplayer=\"let value\">{{value}}</span>\r\n\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t<lu-option-picker>\r\n\t\t\t<lu-option value=\"0\">0</lu-option>\r\n\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t<lu-option value=\"2\">2</lu-option>\r\n\t\t\t<lu-option value=\"3\">3</lu-option>\r\n\t\t\t<lu-option value=\"4\">4</lu-option>\r\n\t\t\t<lu-option value=\"5\">5</lu-option>\r\n\t\t\t<lu-option value=\"6\">6</lu-option>\r\n\t\t\t<lu-option value=\"7\">7</lu-option>\r\n\t\t\t<lu-option value=\"8\">8</lu-option>\r\n\t\t\t<lu-option value=\"9\">9</lu-option>\r\n\t\t</lu-option-picker>\r\n\t</lu-select>\r\n\t<label class=\"textfield-label\">no header / footer</label>\r\n</div>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"model\">\r\n\t\t<span *luDisplayer=\"let value\">{{value}}</span>\r\n\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t<lu-option-picker>\r\n\t\t\t<header class=\"lu-picker-header\">header</header>\r\n\t\t\t<lu-option value=\"0\">0</lu-option>\r\n\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t<lu-option value=\"2\">2</lu-option>\r\n\t\t\t<lu-option value=\"3\">3</lu-option>\r\n\t\t\t<lu-option value=\"4\">4</lu-option>\r\n\t\t\t<lu-option value=\"5\">5</lu-option>\r\n\t\t\t<lu-option value=\"6\">6</lu-option>\r\n\t\t\t<lu-option value=\"7\">7</lu-option>\r\n\t\t\t<lu-option value=\"8\">8</lu-option>\r\n\t\t\t<lu-option value=\"9\">9</lu-option>\r\n\t\t\t<footer class=\"lu-picker-footer\">footer</footer>\r\n\t\t</lu-option-picker>\r\n\t</lu-select>\r\n\t<label class=\"textfield-label\">with header / footer</label>\r\n</div>\r\n<div class=\"textfield\">\r\n\t<lu-api-select class=\"textfield-input\" [(ngModel)]=\"item\" api=\"/api/v3/departments\"></lu-api-select>\r\n\t<label class=\"textfield-label\">api-select</label>\r\n</div>\r\n<div class=\"textfield\">\r\n\t<lu-user-select class=\"textfield-input\" [(ngModel)]=\"user\"></lu-user-select>\r\n\t<label class=\"textfield-label\">user-select</label>\r\n</div>\r\n<div class=\"textfield\">\r\n\t<lu-department-select class=\"textfield-input\" [(ngModel)]=\"department\"></lu-department-select>\r\n\t<label class=\"textfield-label\">department-select</label>\r\n</div>\r\n"
        },
        {
            "name": "PocModalComponent",
            "id": "component-PocModalComponent-3e4e42c2408354bd8953db5c9b633d05",
            "file": "packages/ng/applications/sandbox/src/app/issues/poc-modal/poc-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-poc-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./poc-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "result$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { LuModal, ALuModalRef, ILuModalContent } from '@lucca-front/ng/modal';\r\nimport { timer, Subject, throwError, of } from 'rxjs';\r\nimport { mapTo, catchError, delay } from 'rxjs/operators';\r\n\r\n@Component({\r\n\tselector: 'lu-poc-modal',\r\n\ttemplateUrl: './poc-modal.component.html'\r\n})\r\nexport class PocModalComponent {\r\n\tresult$ = new Subject();\r\n\tconstructor(private _luModal: LuModal) {}\r\n\topen() {\r\n\t\tthis._luModal.open(PocModalInsideComponent).onClose.subscribe(r => this.result$.next(r));\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'lu-poc-modal-inside',\r\n\ttemplate: `\r\n\t\t<p>only the content in this injected component</p>\r\n\t\t<label class=\"label\">{{error}}</label>\r\n\t\t<div class=\"textfield\">\r\n\t\t\t<input class=\"textfield-input\" type=\"number\" [(ngModel)]=\"result\">\r\n\t\t\t<label class=\"textfield-label\">result</label>\r\n\t\t</div>\r\n\t\t<div class=\"checkbox\">\r\n\t\t\t<input class=\"checkbox-input\" type=\"checkbox\" name=\"checkbox\" id=\"checkbox\" [(ngModel)]=\"submitDisabled\">\r\n\t\t\t<label class=\"checkbox-label\" for=\"checkbox\">disable submit</label>\r\n\t\t</div>\r\n\t`,\r\n})\r\nexport class PocModalInsideComponent implements ILuModalContent {\r\n\ttitle = 'title of the component';\r\n\tsubmitLabel = 'submit';\r\n\tcancelLabel = 'dismiss';\r\n\tsubmitDisabled = false;\r\n\tsubmitPalette = 'warning';\r\n\tresult = 0;\r\n\terror;\r\n\t// submitAction = () => timer(1500).pipe(mapTo(this.result));\r\n\tsubmitAction = () => {\r\n\t\tlet obs$;\r\n\t\tif (this.result % 2 === 0) {\r\n\t\t\tobs$ = throwError(`error with result ${this.result}`);\r\n\t\t} else {\r\n\t\t\tobs$ = of(this.result).pipe(delay(2000));\r\n\r\n\t\t}\r\n\r\n\t\treturn obs$.pipe(\r\n\t\t\tcatchError(err => { this.error = err; return throwError(`error message`); })\r\n\t\t)\r\n\t}\r\n\tconstructor(\r\n\t\tprotected _ref: ALuModalRef<PocModalInsideComponent>,\r\n\t) {}\r\n\tcloseModal() {\r\n\t\tthis._ref.close();\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_luModal",
                        "type": "LuModal"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "_luModal",
                        "type": "LuModal",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1>poc-modal</h1>\r\n<button class=\"button\" (click)=\"open()\">click me</button> {{result$ | async}}\r\n"
        },
        {
            "name": "PocModalInsideComponent",
            "id": "component-PocModalInsideComponent-3e4e42c2408354bd8953db5c9b633d05",
            "file": "packages/ng/applications/sandbox/src/app/issues/poc-modal/poc-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-poc-modal-inside",
            "styleUrls": [],
            "styles": [],
            "template": "<p>only the content in this injected component</p>\n<label class=\"label\">{{error}}</label>\n<div class=\"textfield\">\n\t<input class=\"textfield-input\" type=\"number\" [(ngModel)]=\"result\">\n\t<label class=\"textfield-label\">result</label>\n</div>\n<div class=\"checkbox\">\n\t<input class=\"checkbox-input\" type=\"checkbox\" name=\"checkbox\" id=\"checkbox\" [(ngModel)]=\"submitDisabled\">\n\t<label class=\"checkbox-label\" for=\"checkbox\">disable submit</label>\n</div>\n\t",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cancelLabel",
                    "defaultValue": "'dismiss'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "error",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "result",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "submitAction",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "submitDisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "submitLabel",
                    "defaultValue": "'submit'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "submitPalette",
                    "defaultValue": "'warning'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "title",
                    "defaultValue": "'title of the component'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { LuModal, ALuModalRef, ILuModalContent } from '@lucca-front/ng/modal';\r\nimport { timer, Subject, throwError, of } from 'rxjs';\r\nimport { mapTo, catchError, delay } from 'rxjs/operators';\r\n\r\n@Component({\r\n\tselector: 'lu-poc-modal',\r\n\ttemplateUrl: './poc-modal.component.html'\r\n})\r\nexport class PocModalComponent {\r\n\tresult$ = new Subject();\r\n\tconstructor(private _luModal: LuModal) {}\r\n\topen() {\r\n\t\tthis._luModal.open(PocModalInsideComponent).onClose.subscribe(r => this.result$.next(r));\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'lu-poc-modal-inside',\r\n\ttemplate: `\r\n\t\t<p>only the content in this injected component</p>\r\n\t\t<label class=\"label\">{{error}}</label>\r\n\t\t<div class=\"textfield\">\r\n\t\t\t<input class=\"textfield-input\" type=\"number\" [(ngModel)]=\"result\">\r\n\t\t\t<label class=\"textfield-label\">result</label>\r\n\t\t</div>\r\n\t\t<div class=\"checkbox\">\r\n\t\t\t<input class=\"checkbox-input\" type=\"checkbox\" name=\"checkbox\" id=\"checkbox\" [(ngModel)]=\"submitDisabled\">\r\n\t\t\t<label class=\"checkbox-label\" for=\"checkbox\">disable submit</label>\r\n\t\t</div>\r\n\t`,\r\n})\r\nexport class PocModalInsideComponent implements ILuModalContent {\r\n\ttitle = 'title of the component';\r\n\tsubmitLabel = 'submit';\r\n\tcancelLabel = 'dismiss';\r\n\tsubmitDisabled = false;\r\n\tsubmitPalette = 'warning';\r\n\tresult = 0;\r\n\terror;\r\n\t// submitAction = () => timer(1500).pipe(mapTo(this.result));\r\n\tsubmitAction = () => {\r\n\t\tlet obs$;\r\n\t\tif (this.result % 2 === 0) {\r\n\t\t\tobs$ = throwError(`error with result ${this.result}`);\r\n\t\t} else {\r\n\t\t\tobs$ = of(this.result).pipe(delay(2000));\r\n\r\n\t\t}\r\n\r\n\t\treturn obs$.pipe(\r\n\t\t\tcatchError(err => { this.error = err; return throwError(`error message`); })\r\n\t\t)\r\n\t}\r\n\tconstructor(\r\n\t\tprotected _ref: ALuModalRef<PocModalInsideComponent>,\r\n\t) {}\r\n\tcloseModal() {\r\n\t\tthis._ref.close();\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_ref",
                        "type": "ALuModalRef<PocModalInsideComponent>"
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "_ref",
                        "type": "ALuModalRef<PocModalInsideComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ILuModalContent"
            ]
        },
        {
            "name": "PocPopupComponent",
            "id": "component-PocPopupComponent-cba40bca502e857dcbc60b84d43c76e3",
            "file": "packages/ng/applications/sandbox/src/app/issues/poc-popup/poc-popup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-poc-popup",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./poc-popup.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "bottom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "left",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10
                },
                {
                    "name": "openWithConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                },
                {
                    "name": "right",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "top",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, Optional } from '@angular/core';\r\nimport { LuPopup, ALuPopupRef, LU_POPUP_DATA, ILuPopupConfig } from '@lucca-front/ng/popup';\r\n\r\n@Component({\r\n\tselector: 'lu-poc-popup',\r\n\ttemplateUrl: './poc-popup.component.html'\r\n})\r\nexport class PocPopupComponent {\r\n\tconstructor(private _popup: LuPopup) {}\r\n\topen() {\r\n\t\tthis._popup.open(PocPopupInsideComponent);\r\n\t}\r\n\topenWithConfig() {\r\n\t\tconst config: ILuPopupConfig = {\r\n\t\t\tnoBackdrop: true,\r\n\t\t\tsize: 'bigger',\r\n\t\t};\r\n\r\n\t\tthis._popup.open(PocPopupInsideComponent, 3, config);\r\n\t}\r\n\ttop() {\r\n\t\tthis._popup.open(PocPopupInsideComponent, 3, { position: 'top' });\r\n\t}\r\n\tbottom() {\r\n\t\tthis._popup.open(PocPopupInsideComponent, 3, { position: 'bottom' });\r\n\t}\r\n\tleft() {\r\n\t\tthis._popup.open(PocPopupInsideComponent, 3, { position: 'left' });\r\n\t}\r\n\tright() {\r\n\t\tthis._popup.open(PocPopupInsideComponent, 3, { position: 'right' });\r\n\t}\r\n}\r\n\r\n\r\n@Component({\r\n\tselector: 'lu-poc-popup-inside',\r\n\ttemplateUrl: './poc-popup.template.html',\r\n})\r\nexport class PocPopupInsideComponent {\r\n\tconstructor(\r\n\t\tprotected _ref: ALuPopupRef<PocPopupInsideComponent>,\r\n\t\tprotected _popup: LuPopup,\r\n\t\t@Optional() @Inject(LU_POPUP_DATA) public data,\r\n\t\t) {}\r\n\tclosePopup() {\r\n\t\tthis._ref.close(8);\r\n\t}\r\n\topenSecondary() {\r\n\t\tthis._popup.open(PocPopupSecondaryComponent);\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'lu-poc-popup-secondary',\r\n\ttemplate: `\r\n\t<h1>title {{data}}</h1>\r\n\t<button class=\"button\" (click)=\"closePopup()\">close</button>\r\n\t`,\r\n})\r\nexport class PocPopupSecondaryComponent {\r\n\tconstructor(\r\n\t\tprotected _ref: ALuPopupRef<PocPopupSecondaryComponent>,\r\n\t\t@Optional() @Inject(LU_POPUP_DATA) public data,\r\n\t) {}\r\n\tclosePopup() {\r\n\t\tthis._ref.close(8);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_popup",
                        "type": "LuPopup"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "_popup",
                        "type": "LuPopup",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1>poc-popup</h1>\r\n<button class=\"button\" (click)=\"open()\">click me</button>\r\n<button class=\"button\" (click)=\"openWithConfig()\">with config</button>\r\n<button class=\"button\" (click)=\"top()\">top</button>\r\n<button class=\"button\" (click)=\"bottom()\">bottom</button>\r\n<button class=\"button\" (click)=\"left()\">left</button>\r\n<button class=\"button\" (click)=\"right()\">right</button>"
        },
        {
            "name": "PocPopupInsideComponent",
            "id": "component-PocPopupInsideComponent-cba40bca502e857dcbc60b84d43c76e3",
            "file": "packages/ng/applications/sandbox/src/app/issues/poc-popup/poc-popup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-poc-popup-inside",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./poc-popup.template.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LU_POPUP_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closePopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "openSecondary",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, Optional } from '@angular/core';\r\nimport { LuPopup, ALuPopupRef, LU_POPUP_DATA, ILuPopupConfig } from '@lucca-front/ng/popup';\r\n\r\n@Component({\r\n\tselector: 'lu-poc-popup',\r\n\ttemplateUrl: './poc-popup.component.html'\r\n})\r\nexport class PocPopupComponent {\r\n\tconstructor(private _popup: LuPopup) {}\r\n\topen() {\r\n\t\tthis._popup.open(PocPopupInsideComponent);\r\n\t}\r\n\topenWithConfig() {\r\n\t\tconst config: ILuPopupConfig = {\r\n\t\t\tnoBackdrop: true,\r\n\t\t\tsize: 'bigger',\r\n\t\t};\r\n\r\n\t\tthis._popup.open(PocPopupInsideComponent, 3, config);\r\n\t}\r\n\ttop() {\r\n\t\tthis._popup.open(PocPopupInsideComponent, 3, { position: 'top' });\r\n\t}\r\n\tbottom() {\r\n\t\tthis._popup.open(PocPopupInsideComponent, 3, { position: 'bottom' });\r\n\t}\r\n\tleft() {\r\n\t\tthis._popup.open(PocPopupInsideComponent, 3, { position: 'left' });\r\n\t}\r\n\tright() {\r\n\t\tthis._popup.open(PocPopupInsideComponent, 3, { position: 'right' });\r\n\t}\r\n}\r\n\r\n\r\n@Component({\r\n\tselector: 'lu-poc-popup-inside',\r\n\ttemplateUrl: './poc-popup.template.html',\r\n})\r\nexport class PocPopupInsideComponent {\r\n\tconstructor(\r\n\t\tprotected _ref: ALuPopupRef<PocPopupInsideComponent>,\r\n\t\tprotected _popup: LuPopup,\r\n\t\t@Optional() @Inject(LU_POPUP_DATA) public data,\r\n\t\t) {}\r\n\tclosePopup() {\r\n\t\tthis._ref.close(8);\r\n\t}\r\n\topenSecondary() {\r\n\t\tthis._popup.open(PocPopupSecondaryComponent);\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'lu-poc-popup-secondary',\r\n\ttemplate: `\r\n\t<h1>title {{data}}</h1>\r\n\t<button class=\"button\" (click)=\"closePopup()\">close</button>\r\n\t`,\r\n})\r\nexport class PocPopupSecondaryComponent {\r\n\tconstructor(\r\n\t\tprotected _ref: ALuPopupRef<PocPopupSecondaryComponent>,\r\n\t\t@Optional() @Inject(LU_POPUP_DATA) public data,\r\n\t) {}\r\n\tclosePopup() {\r\n\t\tthis._ref.close(8);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_ref",
                        "type": "ALuPopupRef<PocPopupInsideComponent>"
                    },
                    {
                        "name": "_popup",
                        "type": "LuPopup"
                    },
                    {
                        "name": "data",
                        "type": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "_ref",
                        "type": "ALuPopupRef<PocPopupInsideComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_popup",
                        "type": "LuPopup",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"lu-modal-header\">\r\n\t<h1 class=\"lu-modal-header-title\">title {{data}}</h1>\r\n\t<button class=\"lu-modal-header-close\">\r\n\t\t<span aria-hidden=\"true\" class=\"lucca-icon\">cross</span>\r\n\t\t<span class=\"u-mask\">Close</span>\r\n\t</button>\r\n</div>\r\n<div class=\"lu-modal-content\">\r\n\tThe almighty content\r\n</div>\r\n<div class=\"lu-modal-footer\">\r\n\t<button class=\"button palette-primary\" (click)=\"openSecondary()\">open other popup</button>\r\n\t<button class=\"button mod-link\" (click)=\"closePopup()\">close</button>\r\n</div>\r\n"
        },
        {
            "name": "PocPopupSecondaryComponent",
            "id": "component-PocPopupSecondaryComponent-cba40bca502e857dcbc60b84d43c76e3",
            "file": "packages/ng/applications/sandbox/src/app/issues/poc-popup/poc-popup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-poc-popup-secondary",
            "styleUrls": [],
            "styles": [],
            "template": "<h1>title {{data}}</h1>\n<button class=\"button\" (click)=\"closePopup()\">close</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LU_POPUP_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closePopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, Optional } from '@angular/core';\r\nimport { LuPopup, ALuPopupRef, LU_POPUP_DATA, ILuPopupConfig } from '@lucca-front/ng/popup';\r\n\r\n@Component({\r\n\tselector: 'lu-poc-popup',\r\n\ttemplateUrl: './poc-popup.component.html'\r\n})\r\nexport class PocPopupComponent {\r\n\tconstructor(private _popup: LuPopup) {}\r\n\topen() {\r\n\t\tthis._popup.open(PocPopupInsideComponent);\r\n\t}\r\n\topenWithConfig() {\r\n\t\tconst config: ILuPopupConfig = {\r\n\t\t\tnoBackdrop: true,\r\n\t\t\tsize: 'bigger',\r\n\t\t};\r\n\r\n\t\tthis._popup.open(PocPopupInsideComponent, 3, config);\r\n\t}\r\n\ttop() {\r\n\t\tthis._popup.open(PocPopupInsideComponent, 3, { position: 'top' });\r\n\t}\r\n\tbottom() {\r\n\t\tthis._popup.open(PocPopupInsideComponent, 3, { position: 'bottom' });\r\n\t}\r\n\tleft() {\r\n\t\tthis._popup.open(PocPopupInsideComponent, 3, { position: 'left' });\r\n\t}\r\n\tright() {\r\n\t\tthis._popup.open(PocPopupInsideComponent, 3, { position: 'right' });\r\n\t}\r\n}\r\n\r\n\r\n@Component({\r\n\tselector: 'lu-poc-popup-inside',\r\n\ttemplateUrl: './poc-popup.template.html',\r\n})\r\nexport class PocPopupInsideComponent {\r\n\tconstructor(\r\n\t\tprotected _ref: ALuPopupRef<PocPopupInsideComponent>,\r\n\t\tprotected _popup: LuPopup,\r\n\t\t@Optional() @Inject(LU_POPUP_DATA) public data,\r\n\t\t) {}\r\n\tclosePopup() {\r\n\t\tthis._ref.close(8);\r\n\t}\r\n\topenSecondary() {\r\n\t\tthis._popup.open(PocPopupSecondaryComponent);\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'lu-poc-popup-secondary',\r\n\ttemplate: `\r\n\t<h1>title {{data}}</h1>\r\n\t<button class=\"button\" (click)=\"closePopup()\">close</button>\r\n\t`,\r\n})\r\nexport class PocPopupSecondaryComponent {\r\n\tconstructor(\r\n\t\tprotected _ref: ALuPopupRef<PocPopupSecondaryComponent>,\r\n\t\t@Optional() @Inject(LU_POPUP_DATA) public data,\r\n\t) {}\r\n\tclosePopup() {\r\n\t\tthis._ref.close(8);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_ref",
                        "type": "ALuPopupRef<PocPopupSecondaryComponent>"
                    },
                    {
                        "name": "data",
                        "type": ""
                    }
                ],
                "line": 60,
                "jsdoctags": [
                    {
                        "name": "_ref",
                        "type": "ALuPopupRef<PocPopupSecondaryComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "PocSidepanelInsideComponent",
            "id": "component-PocSidepanelInsideComponent-25022cb5bc5c8002ee4f09eda97f80d8",
            "file": "packages/ng/applications/sandbox/src/app/issues/sidepanel/sidepanel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-sidepanel-inside",
            "styleUrls": [],
            "styles": [],
            "template": "<p>only the content in this injected component</p>\n<label class=\"label\">{{error}}</label>\n<div class=\"textfield\">\n\t<input class=\"textfield-input\" type=\"number\" [(ngModel)]=\"result\">\n\t<label class=\"textfield-label\">result</label>\n</div>\n<div class=\"checkbox\">\n\t<input class=\"checkbox-input\" type=\"checkbox\" name=\"checkbox\" id=\"checkbox\" [(ngModel)]=\"submitDisabled\">\n\t<label class=\"checkbox-label\" for=\"checkbox\">disable submit</label>\n</div>\n\t",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cancelLabel",
                    "defaultValue": "'dismiss'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "error",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "result",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "submitAction",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "submitDisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "submitLabel",
                    "defaultValue": "'submit'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "submitPalette",
                    "defaultValue": "'error'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "title",
                    "defaultValue": "'title of the component'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { LuSidepanel, ALuSidepanelRef, ILuSidepanelContent } from '@lucca-front/ng/sidepanel';\r\nimport { timer, Subject, throwError, of } from 'rxjs';\r\nimport { mapTo, catchError, delay } from 'rxjs/operators';\r\n@Component({\r\n\tselector: 'lu-sidepanel',\r\n\ttemplateUrl: './sidepanel.component.html'\r\n})\r\nexport class SidepanelComponent {\r\n\tresult$ = new Subject();\r\n\tconstructor(private _luSidepanel: LuSidepanel) {}\r\n\topen() {\r\n\t\tthis._luSidepanel.open(PocSidepanelInsideComponent).onClose.subscribe(r => this.result$.next(r));\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'lu-sidepanel-inside',\r\n\ttemplate: `\r\n\t\t<p>only the content in this injected component</p>\r\n\t\t<label class=\"label\">{{error}}</label>\r\n\t\t<div class=\"textfield\">\r\n\t\t\t<input class=\"textfield-input\" type=\"number\" [(ngModel)]=\"result\">\r\n\t\t\t<label class=\"textfield-label\">result</label>\r\n\t\t</div>\r\n\t\t<div class=\"checkbox\">\r\n\t\t\t<input class=\"checkbox-input\" type=\"checkbox\" name=\"checkbox\" id=\"checkbox\" [(ngModel)]=\"submitDisabled\">\r\n\t\t\t<label class=\"checkbox-label\" for=\"checkbox\">disable submit</label>\r\n\t\t</div>\r\n\t`,\r\n})\r\nexport class PocSidepanelInsideComponent implements ILuSidepanelContent {\r\n\ttitle = 'title of the component';\r\n\tsubmitLabel = 'submit';\r\n\tcancelLabel = 'dismiss';\r\n\tsubmitDisabled = false;\r\n\tsubmitPalette = 'error';\r\n\tresult = 0;\r\n\terror;\r\n\t// submitAction = () => timer(1500).pipe(mapTo(this.result));\r\n\tsubmitAction = () => {\r\n\t\tlet obs$;\r\n\t\tif (this.result % 2 === 0) {\r\n\t\t\tobs$ = throwError(`error with result ${this.result}`);\r\n\t\t} else {\r\n\t\t\tobs$ = of(this.result).pipe(delay(2000));\r\n\r\n\t\t}\r\n\r\n\t\treturn obs$.pipe(\r\n\t\t\tcatchError(err => { this.error = err; return throwError(`error message`); })\r\n\t\t)\r\n\t}\r\n\tconstructor(\r\n\t\tprotected _ref: ALuSidepanelRef<PocSidepanelInsideComponent>,\r\n\t) {}\r\n\tcloseModal() {\r\n\t\tthis._ref.close();\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_ref",
                        "type": "ALuSidepanelRef<PocSidepanelInsideComponent>"
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "_ref",
                        "type": "ALuSidepanelRef<PocSidepanelInsideComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ILuSidepanelContent"
            ]
        },
        {
            "name": "PocTranslateComponent",
            "id": "component-PocTranslateComponent-11f2904ec61dbaea9963f79a7530b16d",
            "file": "packages/ng/applications/sandbox/src/app/issues/poc-translate/poc-translate.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-poc-translate",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./poc-translate.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "locale",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LOCALE_ID"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, LOCALE_ID } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'lu-poc-translate',\r\n\ttemplateUrl: './poc-translate.component.html'\r\n})\r\nexport class PocTranslateComponent {\r\n\tconstructor(@Inject(LOCALE_ID) public locale) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "locale",
                        "type": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "locale",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1>Locale: {{locale}}</h1>\r\n\r\n<lu-lol></lu-lol>"
        },
        {
            "name": "PocTreeComponent",
            "id": "component-PocTreeComponent-af27856f0167250e6904e42002e56e87",
            "file": "packages/ng/applications/sandbox/src/app/issues/poc-tree/poc-tree.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-poc-tree",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./poc-tree.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collection",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "item",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "tree",
                    "defaultValue": "{\r\n\t\tvalue: node1,\r\n\t\tchildren: [\r\n\t\t\t{ value: node11, children: [ { value: node111, children: [] } ] },\r\n\t\t\t{ value: node12, children: [] },\r\n\t\t]\r\n\t}",
                    "type": "ILuTree<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ILuTree } from '@lucca-front/ng/core';\r\n\r\nconst node1 = { id: 1, name: 'root 1' };\r\nconst node11 = { id: 11, name: 'node 1.1' };\r\nconst node111 = { id: 111, name: 'leaf 1.1.1' };\r\nconst node12 = { id: 11, name: 'node 1.2' };\r\n@Component({\r\n\tselector: 'lu-poc-tree',\r\n\ttemplateUrl: './poc-tree.component.html'\r\n})\r\nexport class PocTreeComponent {\r\n\ttree: ILuTree<{ id: number, name: string }> = {\r\n\t\tvalue: node1,\r\n\t\tchildren: [\r\n\t\t\t{ value: node11, children: [ { value: node111, children: [] } ] },\r\n\t\t\t{ value: node12, children: [] },\r\n\t\t]\r\n\t};\r\n\titem;\r\n\tcollection = [];\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>poc-tree</h1>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{ value.name }}</ng-container>\r\n\t\t<lu-tree-option-picker>\r\n\t\t\t<lu-tree-option [tree]=\"tree\">\r\n\t\t\t\t<ng-container *luDisplayer=\"let value\">{{ value.name }}</ng-container>\r\n\t\t\t</lu-tree-option>\r\n\t\t</lu-tree-option-picker>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">select single</label>\r\n</div>\r\n\r\n<div class=\"textfield\">\r\n\t\t<lu-select class=\"textfield-input\" [(ngModel)]=\"collection\" multiple>\r\n\t\t\t<ng-container *luDisplayer=\"let values; multiple: true\">{{ values.length }} items selected</ng-container>\r\n\t\t\t<lu-tree-option-picker>\r\n\t\t\t\t<lu-tree-option [tree]=\"tree\">\r\n\t\t\t\t\t<ng-container *luDisplayer=\"let value\">{{ value.name }}</ng-container>\r\n\t\t\t\t</lu-tree-option>\r\n\t\t\t</lu-tree-option-picker>\r\n\t\t</lu-select>\r\n\t\t<label for=\"\" class=\"textfield-label\">select multiple</label>\r\n\t</div>"
        },
        {
            "name": "PopoverAccessibleComponent",
            "id": "component-PopoverAccessibleComponent-8bbe664e72043a8f0e2665d86d0b440f",
            "file": "packages/ng/applications/sandbox/src/app/issues/popover-accessible/popover-accessible.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-popover-accessible",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./popover-accessible.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'sand-popover-accessible',\r\n\ttemplateUrl: './popover-accessible.component.html'\r\n})\r\nexport class PopoverAccessibleComponent {\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>popover-accessible</h1>\r\n<button class=\"button\" [luPopover]=\"basic\">click me</button>\r\n<button id=\"goodStuff\" class=\"button\" [luPopover]=\"basic\">this button already has an id</button>\r\n<lu-popover #basic>basic-est of popovers</lu-popover>"
        },
        {
            "name": "RefactoOverlayAdvancedComponent",
            "id": "component-RefactoOverlayAdvancedComponent-520245f817567e26798f721fc5abecac",
            "file": "packages/ng/applications/sandbox/src/app/issues/refacto-overlay-advanced/refacto-overlay-advanced.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-refacto-overlay-advanced",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./refacto-overlay-advanced.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'lu-refacto-overlay-advanced',\r\n\ttemplateUrl: './refacto-overlay-advanced.component.html'\r\n})\r\nexport class RefactoOverlayAdvancedComponent {\r\n\tonOpen() {\r\n\t\tconsole.log('onopen')\r\n\t}\r\n\tonClose() {\r\n\t\tconsole.log('onclose')\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>refacto-overlay-advanced</h1>\r\n<h2>overlapping popovers</h2>\r\n<button class=\"button\" [luPopover]=\"overlap\" [luPopoverOverlap]=\"true\">click me</button>\r\n<br />\r\n<button class=\"button\" [luPopover]=\"overlap\" [luPopoverTarget]=\"overlapTarget\">trigger for my neighbour</button>\r\n<span class=\"label\" luPopoverTarget #overlapTarget=\"LuPopoverTarget\" [luPopoverOverlap]=\"true\">neighbour</span>\r\n<br />\r\n<span class=\"label\" [luPopover]=\"overlap\" luPopoverTrigger=\"hover\" [luPopoverOverlap]=\"true\">on hover + overlap</span>\r\n\r\n<lu-popover #overlap>overlapping popover</lu-popover>\r\n<h2>offset</h2>\r\n<button class=\"button\" [luPopover]=\"offset\" [luPopoverTarget]=\"targetOffset\">trigger for my neighbour</button>\r\n<span class=\"label\" luPopoverTarget #targetOffset=\"LuPopoverTarget\" [luPopoverOffsetX]=\"-50\" [luPopoverOffsetY]=\"10\">neighbour</span>\r\n<lu-popover #offset>offset popover</lu-popover>\r\n<br />\r\n<button class=\"button\" [luPopover]=\"offset\" [luPopoverOffsetX]=\"50\" [luPopoverOffsetY]=\"100\">click me</button>\r\n<h2>close on click</h2>\r\n<button class=\"button\" [luPopover]=\"closer\">click me</button>\r\n<lu-popover #closer [close-on-click]=\"true\">close on click popover</lu-popover>\r\n\r\n<h2>panel-content-backdrop classes injection</h2>\r\n<button class=\"button\" [luPopover]=\"class\" [luPopoverOverlap]=\"true\">1 class</button>\r\n<lu-popover #class panel-classes=\"my-panel\" content-classes=\"my-content\">popover with custom class for content and panel</lu-popover>\r\n<br />\r\n<button class=\"button\" [luPopover]=\"classes\" [luPopoverOverlap]=\"true\">2 classes</button>\r\n<lu-popover #classes panel-classes=\"my-panel my-panel-again\" content-classes=\"my-content my-content-again\">popover with custom class<b>es</b> for content and panel</lu-popover>\r\n<br />\r\n\r\n<br />\r\n<h2>disabled</h2>\r\n<button class=\"button\" [luPopover]=\"disabled\">enabled popover</button>\r\n<button class=\"button\" [luPopover]=\"disabled\" [luPopoverDisabled]=\"true\">disabled popover</button>\r\n<button class=\"button\" [luPopover]=\"disabled\" disabled=\"true\" luPopoverTrigger=\"hover\">disabled button</button>\r\n<button class=\"button is-disabled\" [luPopover]=\"disabled\"  luPopoverTrigger=\"hover\">is-disabled button</button>\r\n<span [luPopover]=\"disabled\"  luPopoverTrigger=\"hover\">\r\n\t<button class=\"button is-disabled\">is-disabled button in a span</button>\r\n</span>\r\n<lu-popover #disabled>normal popover</lu-popover>\r\n<p>\r\n\ti cant trigger hover or click if there's no pointer event :'(\r\n</p>\r\n<button class=\"button\" luTooltip=\"tooltip enabled\" (luTooltipOnClose)=\"onClose()\"  (luTooltipOnOpen)=\"onOpen()\">enabled tooltip</button>\r\n<button class=\"button\" luTooltip=\"ttooltip disabled\" [luTooltipDisabled]=\"true\">disabled tooltip</button>\r\n<button class=\"button\" luTooltip=\"disabled button\" disabled=\"disabled\">disabled button</button>\r\n<br />\r\n<h2>focus trap</h2>\r\n<button class=\"button\" [luPopover]=\"trapped\" (luPopoverOnClose)=\"onClose()\"  (luPopoverOnOpen)=\"onOpen()\">click me</button>\r\n<lu-popover #trapped [trap-focus]=\"true\">\r\n\t<div class=\"textfiled\">\r\n\t\t<input type=\"text\" class=\"textfield-input\">\r\n\t\t<label for=\"\" class=\"textfield-label\">label</label>\r\n\t</div>\r\n\t<div class=\"textfiled\">\r\n\t\t<input type=\"text\" class=\"textfield-input\">\r\n\t\t<label for=\"\" class=\"textfield-label\">label</label>\r\n\t</div>\r\n</lu-popover>\r\n"
        },
        {
            "name": "RefactoOverlaysComponent",
            "id": "component-RefactoOverlaysComponent-e4deed2fb7d5f647a0eaf492a5248fa9",
            "file": "packages/ng/applications/sandbox/src/app/issues/refacto-overlays/refacto-overlays.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-refacto-overlays",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./refacto-overlays.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'lu-refacto-overlays',\r\n\ttemplateUrl: './refacto-overlays.component.html'\r\n})\r\nexport class RefactoOverlaysComponent {\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>refacto overlays</h1>\r\n\r\n<button class=\"button\" [luPopover]=\"basic\">click me</button>\r\n<br />\r\n<button class=\"button\" [luPopover]=\"basic\" [luPopoverTarget]=\"target\">trigger for my neighbour</button> <span class=\"label\" luPopoverTarget #target=\"LuPopoverTarget\">neighbour</span>\r\n<br />\r\n<span class=\"label\" [luPopover]=\"basic\" luPopoverTrigger=\"hover\">on hover</span>\r\n<br />\r\n<button class=\"button\" [luPopover]=\"basic\" luPopoverPosition=\"before\">positioned before</button>\r\n<br />\r\n<button class=\"button\" [luPopover]=\"basic\" luPopoverAlignment=\"right\">aligned right</button>\r\n<br />\r\n<div class=\"textfield\">\r\n\t<input type=\"text\" class=\"textfield-input\" [luPopover]=\"basic\" luPopoverTrigger=\"focus\" placeholder=\"on focus\">\r\n</div>\r\n<br />\r\n<span class=\"label\" [luPopover]=\"basic\" luPopoverTrigger=\"hover\" [luPopoverEnterDelay]=\"2000\" [luPopoverLeaveDelay]=\"1000\">on hover with delay</span>\r\n<br />\r\n<button class=\"button\" [luPopover]=\"popoverUsingTemplate\">using template</button>\r\n<br />\r\n<button class=\"button\" [luPopover]=\"popoverUsingTemplateWithContext\">using template with context</button>\r\n<br />\r\n\r\n\r\n<lu-popover #basic>basic-est of popovers</lu-popover>\r\n\r\n<lu-popover\r\n\t#popoverUsingTemplate\r\n\t[template]=\"templateWithoutContext\">\r\n</lu-popover>\r\n\r\n<lu-popover\r\n\t#popoverUsingTemplateWithContext\r\n\t[template]=\"templateWithContext\"\r\n\t[template-context]=\"{ $implicit: 'Hello', target: 'World' }\">\r\n</lu-popover>\r\n\r\n<ng-template #templateWithoutContext>\r\n\tPopover using template\r\n</ng-template>\r\n<ng-template #templateWithContext let-hi let-target=\"target\">\r\n\t{{ hi }} {{ target }}\r\n</ng-template>\r\n"
        },
        {
            "name": "RefactoOverlaysRepositionComponent",
            "id": "component-RefactoOverlaysRepositionComponent-e303aa8fae537b2682bcdb800f185570",
            "file": "packages/ng/applications/sandbox/src/app/issues/refacto-overlays-reposition/refacto-overlays-reposition.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-refacto-overlays-reposition",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./refacto-overlays-reposition.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'lu-refacto-overlays-reposition',\r\n\ttemplateUrl: './refacto-overlays-reposition.component.html'\r\n})\r\nexport class RefactoOverlaysRepositionComponent {\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>refacto-overlays-reposition</h1>\r\n<h2>scroll strat</h2>\r\n<button class=\"button\" [luPopover]=\"scrollBlock\">block scroll</button>\r\n<button class=\"button\" [luPopover]=\"scrollClose\">close on scroll</button>\r\n<button class=\"button\" [luPopover]=\"scrollFollow\">follw scroll</button>\r\n<lu-popover #scrollBlock scroll-strategy=\"block\">block scroll</lu-popover>\r\n<lu-popover #scrollClose scroll-strategy=\"close\">close on scroll</lu-popover>\r\n<lu-popover #scrollFollow scroll-strategy=\"reposition\">follow scroll</lu-popover>\r\n<p>scroll block doesnt seem to work but i dont know how to do it</p>\r\n<h2>Repositionning</h2>\r\n<button class=\"button\" [luPopover]=\"reposition\" luPopoverPosition=\"before\">before</button>\r\n<button class=\"button\" [luPopover]=\"reposition\" luPopoverPosition=\"below\">below</button>\r\n<lu-popover #reposition>reposition</lu-popover>\r\n"
        },
        {
            "name": "RefactoOverlaysTooltipComponent",
            "id": "component-RefactoOverlaysTooltipComponent-ecfa2603f466cc1b75429542d482a08c",
            "file": "packages/ng/applications/sandbox/src/app/issues/refacto-overlays-tooltip/refacto-overlays-tooltip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-refacto-overlays-tooltip",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./refacto-overlays-tooltip.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'lu-refacto-overlays-tooltip',\r\n\ttemplateUrl: './refacto-overlays-tooltip.component.html'\r\n})\r\nexport class RefactoOverlaysTooltipComponent {\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>refacto-overlays-tooltip</h1>\r\n<span class=\"label\" luTooltip=\"lol\">basic</span>\r\n<br />\r\n<span class=\"label\" luTooltip=\"lol\" luTooltipPosition=\"above\">above</span>\r\n<br />\r\n<span class=\"label\" luTooltip=\"lol\" luTooltipPosition=\"below\">below</span>\r\n<br />\r\n<span class=\"label\" luTooltip=\"lol\" luTooltipPosition=\"before\">before</span>\r\n<br />\r\n<span class=\"label\" luTooltip=\"lol\" luTooltipPosition=\"after\">after</span>\r\n<br />\r\n<span class=\"label\" luTooltip=\"lol\" [luTooltipEnterDelay]=\"2000\" [luTooltipLeaveDelay]=\"1000\">delayed</span>\r\n<br />\r\n"
        },
        {
            "name": "RefactorApiSelectComponent",
            "id": "component-RefactorApiSelectComponent-47eee3c47525d1e2d92101a10714358e",
            "file": "packages/ng/applications/sandbox/src/app/issues/refactor-api-select/refactor-api-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-refactor-api-select",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./refactor-api-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "model",
                    "defaultValue": "{ id: 1, name: 'initial value' }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "user",
                    "defaultValue": "{ id: 1, firstName: 'john', lastName: 'doe' }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'lu-refactor-api-select',\r\n\ttemplateUrl: './refactor-api-select.component.html'\r\n})\r\nexport class RefactorApiSelectComponent {\r\n\tmodel = { id: 1, name: 'initial value' };\r\n\tuser = { id: 1, firstName: 'john', lastName: 'doe' };\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>refactor-api-select</h1>\r\n<div class=\"filters\">\r\n\t<div class=\"textfield mod-filter\">\r\n\t\t<lu-api-select class=\"textfield-input\" [(ngModel)]=\"model\" api=\"/api/v3/departments\" placeholder=\"Everything\"></lu-api-select>\r\n\t\t<label class=\"textfield-label\">Woobwoob</label>\r\n\t</div>\r\n\t<div class=\"textfield mod-filter\">\r\n\t\t<lu-user-select class=\"textfield-input\" [(ngModel)]=\"user\" placeholder=\"Everything\"></lu-user-select>\r\n\t\t<label class=\"textfield-label\">Woobwoob</label>\r\n\t</div>\r\n</div>\r\n"
        },
        {
            "name": "RefactorSelectComponent",
            "id": "component-RefactorSelectComponent-72488abb564d4871665db8187fb9c13e",
            "file": "packages/ng/applications/sandbox/src/app/issues/refactor-select/refactor-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-refactor-select",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./refactor-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collection",
                    "defaultValue": "['1']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "ctrl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "item",
                    "defaultValue": "'1'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "model",
                    "defaultValue": "'1'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "showSelect",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n\tselector: 'lu-refactor-select',\r\n\ttemplateUrl: './refactor-select.component.html'\r\n})\r\nexport class RefactorSelectComponent {\r\n\titem = '1';\r\n\tcollection = ['1'];\r\n\tmodel = '1';\r\n\tctrl = new FormControl();\r\n\tshowSelect = true;\r\n\ttoggle() {\r\n\t\tthis.showSelect = !this.showSelect\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<section style=\"background:white; padding: 3rem;\">\r\n\r\n<h1>refactor-select</h1>\r\n<div class=\"filters u-marginBottomBig\">\r\n\t<div class=\"textfield mod-filter\">\r\n\t\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t\t<span *luDisplayer=\"let value\">{{value}}</span>\r\n\t\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t\t<lu-option-picker>\r\n\t\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t\t<lu-option value=\"oezifjoiezjf ezeofijezo fijze fojizefzfzeof ezf\">oezifjoiezjf ezeofijezo fijze fojizefzfzeof ezf</lu-option>\r\n\t\t\t</lu-option-picker>\r\n\t\t</lu-select>\r\n\t\t<label class=\"textfield-label\">Textfield label</label>\r\n\t</div>\r\n\t<div class=\"textfield mod-filter\">\r\n\t\t<lu-select class=\"textfield-input\" [(ngModel)]=\"collection\" multiple=\"true\">\r\n\t\t\t<span *luDisplayer=\"let values; multiple: true\">{{values.length}} items</span>\r\n\t\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t\t<lu-option-picker>\r\n\t\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t\t<lu-option value=\"2\">2</lu-option>\r\n\t\t\t</lu-option-picker>\r\n\t\t</lu-select>\r\n\t\t<label class=\"textfield-label\">Textfield label</label>\r\n\t</div>\r\n</div>\r\n\r\n<div class=\"form-group\">\r\n\t<div class=\"textfield\">\r\n\t\t<lu-select class=\"textfield-input\" [(ngModel)]=\"model\">\r\n\t\t\t<span *luDisplayer=\"let value\">{{value}}</span>\r\n\t\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t\t<lu-option-picker>\r\n\t\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t\t<lu-option value=\"oezifjoiezjf ezeofijezo fijze fojizefzfzeof ezf\">oezifjoiezjf ezeofijezo fijze fojizefzfzeof ezf</lu-option>\r\n\t\t\t</lu-option-picker>\r\n\t\t</lu-select>\r\n\t\t<label class=\"textfield-label\">Textfield label</label>\r\n\t</div>\r\n</div>\r\n<div class=\"form-group\">\r\n\t<div class=\"textfield mod-small\">\r\n\t\t<lu-select class=\"textfield-input\" [(ngModel)]=\"model\">\r\n\t\t\t<span *luDisplayer=\"let value\">{{value}}</span>\r\n\t\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t\t<lu-option-picker>\r\n\t\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t\t<lu-option value=\"oezifjoiezjf ezeofijezo fijze fojizefzfzeof ezf\">oezifjoiezjf ezeofijezo fijze fojizefzfzeof ezf</lu-option>\r\n\t\t\t</lu-option-picker>\r\n\t\t</lu-select>\r\n\t\t<label class=\"textfield-label\">Textfield label</label>\r\n\t</div>\r\n</div>\r\n<div class=\"form-group\">\r\n\t<div class=\"textfield\">\r\n\t\t<input class=\"textfield-input\" type=\"text\" value=\"Filter\">\r\n\t\t<label class=\"textfield-label\">Textfield label</label>\r\n\t</div>\r\n</div>\r\n<div class=\"form-group\">\r\n\t<div class=\"textfield mod-small\">\r\n\t\t<input class=\"textfield-input\" type=\"text\" value=\"Filter\">\r\n\t\t<label class=\"textfield-label\">Textfield label</label>\r\n\t</div>\r\n</div>\r\n</section>\r\n\r\n<section>\r\n\t<label class=\"textfield\">\r\n\t\t<lu-select class=\"textfield-input\" [formControl]=\"ctrl\" *ngIf=\"showSelect\">\r\n\t\t\t<span *luDisplayer=\"let value\">{{value}}</span>\r\n\t\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t\t<lu-option-picker>\r\n\t\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t\t<lu-option value=\"2\">2</lu-option>\r\n\t\t\t</lu-option-picker>\r\n\t\t</lu-select>\r\n\t\t<span class=\"textfield-label\">Textfield label</span>\r\n\t</label>\r\n\t<button class=\"button\" (click)=\"toggle()\">toggle</button>\r\n\t<pre>touched : {{ctrl.touched}}</pre>\r\n</section>"
        },
        {
            "name": "RefactoTooltipComponent",
            "id": "component-RefactoTooltipComponent-086eaeb2317d56c3941e5ed4a56994ac",
            "file": "packages/ng/applications/sandbox/src/app/issues/refacto-tooltip/refacto-tooltip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-refacto-tooltip",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./refacto-tooltip.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_subs",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "display",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "interval$",
                    "defaultValue": "interval(2000)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { interval, Subscription } from 'rxjs';\r\nimport { delay } from 'rxjs/operators';\r\n\r\n@Component({\r\n\tselector: 'lu-refacto-tooltip',\r\n\ttemplateUrl: './refacto-tooltip.component.html'\r\n})\r\nexport class RefactoTooltipComponent implements OnInit, OnDestroy {\r\n\tprivate _subs = new Subscription();\r\n\tdisplay = true;\r\n\tinterval$ = interval(2000);\r\n\tngOnInit() {\r\n\t\tconst sub = this.interval$.pipe(\r\n\t\t\tdelay(300),\r\n\t\t)\r\n\t\t.subscribe(() => this.display = !this.display);\r\n\t\tthis._subs.add(sub)\r\n\t}\r\n\tngOnDestroy() {\r\n\t\tthis._subs.unsubscribe();\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<h1>refacto-tooltip</h1>\r\n<h2>tooltip</h2>\r\n<span class=\"label\" luTooltip=\"lol\">basic</span>\r\n\r\n<h2>popover</h2>\r\n<button class=\"button\" [luPopover]=\"basic\">click me</button>\r\n<lu-popover #basic>basic-est of popovers</lu-popover>\r\n\r\n<hr />\r\n\r\n<span class=\"label\" *ngIf=\"display\" luTooltip=\"ngif\">blinking throuh ngif</span>\r\n<span class=\"label\" [class.u-displayNone]=\"!display\" luTooltip=\"display-none\">blinking throuh display-none</span>\r\n<p [class.u-displayNone]=\"!display\">\r\n\tlorem ipsum yaddi yaddi yadda - this text block changes the position of the tooltip trigger below it\r\n</p>\r\n<span class=\"label\" luTooltip=\"moving trigger/target\">moving cuz layout changes</span>\r\n\r\n<pre>{{ interval$ | async }}</pre>"
        },
        {
            "name": "SelectMeFirstComponent",
            "id": "component-SelectMeFirstComponent-6f305dce72b5e272ca1ddf71d9ff0fbe",
            "file": "packages/ng/applications/sandbox/src/app/issues/select-me-first/select-me-first.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-select-me-first",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./select-me-first.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collection",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "item",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'sand-select-me-first',\r\n\ttemplateUrl: './select-me-first.component.html'\r\n})\r\nexport class SelectMeFirstComponent {\r\n\titem;\r\n\tcollection = [];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>select-me-first</h1>\r\n<h2>Single</h2>\r\n<div class=\"textfield\">\r\n\t<lu-user-select class=\"textfield-input\" [(ngModel)]=\"item\"></lu-user-select>\r\n\t<label for=\"\" class=\"textfield-label\">user select</label>\r\n</div>\r\n<code>{{item | json }}</code>\r\n<h2>Multiple</h2>\r\n<div class=\"textfield\">\r\n\t<lu-user-select class=\"textfield-input\" [(ngModel)]=\"collection\" multiple></lu-user-select>\r\n\t<label for=\"\" class=\"textfield-label\">users select multiple</label>\r\n</div>\r\n<code>{{collection | json }}</code>"
        },
        {
            "name": "SelectOptionPlaceholderComponent",
            "id": "component-SelectOptionPlaceholderComponent-ccabcddb1a52350a239fb28c2e698c50",
            "file": "packages/ng/applications/sandbox/src/app/issues/select-option-placeholder/select-option-placeholder.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-select-option-placeholder",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./select-option-placeholder.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collection",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 184
                },
                {
                    "name": "colors",
                    "defaultValue": "[\r\n\t\t{ name: 'aliceblue', code: '#f0f8ff' },\r\n\t\t{ name: 'antiquewhite', code: '#faebd7' },\r\n\t\t{ name: 'aqua', code: '#00ffff' },\r\n\t\t{ name: 'aquamarine', code: '#7fffd4' },\r\n\t\t{ name: 'azure', code: '#f0ffff' },\r\n\t\t{ name: 'beige', code: '#f5f5dc' },\r\n\t\t{ name: 'bisque', code: '#ffe4c4' },\r\n\t\t{ name: 'black', code: '#000000' },\r\n\t\t{ name: 'blanchedalmond', code: '#ffebcd' },\r\n\t\t{ name: 'blue', code: '#0000ff' },\r\n\t\t{ name: 'blueviolet', code: '#8a2be2' },\r\n\t\t{ name: 'brown', code: '#a52a2a' },\r\n\t\t{ name: 'burlywood', code: '#deb887' },\r\n\t\t{ name: 'cadetblue', code: '#5f9ea0' },\r\n\t\t{ name: 'chartreuse', code: '#7fff00' },\r\n\t\t{ name: 'chocolate', code: '#d2691e' },\r\n\t\t{ name: 'coral', code: '#ff7f50' },\r\n\t\t{ name: 'cornflowerblue', code: '#6495ed' },\r\n\t\t{ name: 'cornsilk', code: '#fff8dc' },\r\n\t\t{ name: 'crimson', code: '#dc143c' },\r\n\t\t{ name: 'cyan', code: '#00ffff' },\r\n\t\t{ name: 'darkblue', code: '#00008b' },\r\n\t\t{ name: 'darkcyan', code: '#008b8b' },\r\n\t\t{ name: 'darkgoldenrod', code: '#b8860b' },\r\n\t\t{ name: 'darkgray', code: '#a9a9a9' },\r\n\t\t{ name: 'darkgreen', code: '#006400' },\r\n\t\t{ name: 'darkgrey', code: '#a9a9a9' },\r\n\t\t{ name: 'darkkhaki', code: '#bdb76b' },\r\n\t\t{ name: 'darkmagenta', code: '#8b008b' },\r\n\t\t{ name: 'darkolivegreen', code: '#556b2f' },\r\n\t\t{ name: 'darkorange', code: '#ff8c00' },\r\n\t\t{ name: 'darkorchid', code: '#9932cc' },\r\n\t\t{ name: 'darkred', code: '#8b0000' },\r\n\t\t{ name: 'darksalmon', code: '#e9967a' },\r\n\t\t{ name: 'darkseagreen', code: '#8fbc8f' },\r\n\t\t{ name: 'darkslateblue', code: '#483d8b' },\r\n\t\t{ name: 'darkslategray', code: '#2f4f4f' },\r\n\t\t{ name: 'darkslategrey', code: '#2f4f4f' },\r\n\t\t{ name: 'darkturquoise', code: '#00ced1' },\r\n\t\t{ name: 'darkviolet', code: '#9400d3' },\r\n\t\t{ name: 'deeppink', code: '#ff1493' },\r\n\t\t{ name: 'deepskyblue', code: '#00bfff' },\r\n\t\t{ name: 'dimgray', code: '#696969' },\r\n\t\t{ name: 'dimgrey', code: '#696969' },\r\n\t\t{ name: 'dodgerblue', code: '#1e90ff' },\r\n\t\t{ name: 'firebrick', code: '#b22222' },\r\n\t\t{ name: 'floralwhite', code: '#fffaf0' },\r\n\t\t{ name: 'forestgreen', code: '#228b22' },\r\n\t\t{ name: 'fuchsia', code: '#ff00ff' },\r\n\t\t{ name: 'gainsboro', code: '#dcdcdc' },\r\n\t\t{ name: 'ghostwhite', code: '#f8f8ff' },\r\n\t\t{ name: 'gold', code: '#ffd700' },\r\n\t\t{ name: 'goldenrod', code: '#daa520' },\r\n\t\t{ name: 'gray', code: '#808080' },\r\n\t\t{ name: 'green', code: '#008000' },\r\n\t\t{ name: 'greenyellow', code: '#adff2f' },\r\n\t\t{ name: 'grey', code: '#808080' },\r\n\t\t{ name: 'honeydew', code: '#f0fff0' },\r\n\t\t{ name: 'hotpink', code: '#ff69b4' },\r\n\t\t{ name: 'indianred', code: '#cd5c5c' },\r\n\t\t{ name: 'indigo', code: '#4b0082' },\r\n\t\t{ name: 'ivory', code: '#fffff0' },\r\n\t\t{ name: 'khaki', code: '#f0e68c' },\r\n\t\t{ name: 'lavender', code: '#e6e6fa' },\r\n\t\t{ name: 'lavenderblush', code: '#fff0f5' },\r\n\t\t{ name: 'lawngreen', code: '#7cfc00' },\r\n\t\t{ name: 'lemonchiffon', code: '#fffacd' },\r\n\t\t{ name: 'lightblue', code: '#add8e6' },\r\n\t\t{ name: 'lightcoral', code: '#f08080' },\r\n\t\t{ name: 'lightcyan', code: '#e0ffff' },\r\n\t\t{ name: 'lightgoldenrodyellow', code: '#fafad2' },\r\n\t\t{ name: 'lightgray', code: '#d3d3d3' },\r\n\t\t{ name: 'lightgreen', code: '#90ee90' },\r\n\t\t{ name: 'lightgrey', code: '#d3d3d3' },\r\n\t\t{ name: 'lightpink', code: '#ffb6c1' },\r\n\t\t{ name: 'lightsalmon', code: '#ffa07a' },\r\n\t\t{ name: 'lightseagreen', code: '#20b2aa' },\r\n\t\t{ name: 'lightskyblue', code: '#87cefa' },\r\n\t\t{ name: 'lightslategray', code: '#778899' },\r\n\t\t{ name: 'lightslategrey', code: '#778899' },\r\n\t\t{ name: 'lightsteelblue', code: '#b0c4de' },\r\n\t\t{ name: 'lightyellow', code: '#ffffe0' },\r\n\t\t{ name: 'lime', code: '#00ff00' },\r\n\t\t{ name: 'limegreen', code: '#32cd32' },\r\n\t\t{ name: 'linen', code: '#faf0e6' },\r\n\t\t{ name: 'magenta', code: '#ff00ff' },\r\n\t\t{ name: 'maroon', code: '#800000' },\r\n\t\t{ name: 'mediumaquamarine', code: '#66cdaa' },\r\n\t\t{ name: 'mediumblue', code: '#0000cd' },\r\n\t\t{ name: 'mediumorchid', code: '#ba55d3' },\r\n\t\t{ name: 'mediumpurple', code: '#9370db' },\r\n\t\t{ name: 'mediumseagreen', code: '#3cb371' },\r\n\t\t{ name: 'mediumslateblue', code: '#7b68ee' },\r\n\t\t{ name: 'mediumspringgreen', code: '#00fa9a' },\r\n\t\t{ name: 'mediumturquoise', code: '#48d1cc' },\r\n\t\t{ name: 'mediumvioletred', code: '#c71585' },\r\n\t\t{ name: 'midnightblue', code: '#191970' },\r\n\t\t{ name: 'mintcream', code: '#f5fffa' },\r\n\t\t{ name: 'mistyrose', code: '#ffe4e1' },\r\n\t\t{ name: 'moccasin', code: '#ffe4b5' },\r\n\t\t{ name: 'navajowhite', code: '#ffdead' },\r\n\t\t{ name: 'navy', code: '#000080' },\r\n\t\t{ name: 'oldlace', code: '#fdf5e6' },\r\n\t\t{ name: 'olive', code: '#808000' },\r\n\t\t{ name: 'olivedrab', code: '#6b8e23' },\r\n\t\t{ name: 'orange', code: '#ffa500' },\r\n\t\t{ name: 'orangered', code: '#ff4500' },\r\n\t\t{ name: 'orchid', code: '#da70d6' },\r\n\t\t{ name: 'palegoldenrod', code: '#eee8aa' },\r\n\t\t{ name: 'palegreen', code: '#98fb98' },\r\n\t\t{ name: 'paleturquoise', code: '#afeeee' },\r\n\t\t{ name: 'palevioletred', code: '#db7093' },\r\n\t\t{ name: 'papayawhip', code: '#ffefd5' },\r\n\t\t{ name: 'peachpuff', code: '#ffdab9' },\r\n\t\t{ name: 'peru', code: '#cd853f' },\r\n\t\t{ name: 'pink', code: '#ffc0cb' },\r\n\t\t{ name: 'plum', code: '#dda0dd' },\r\n\t\t{ name: 'powderblue', code: '#b0e0e6' },\r\n\t\t{ name: 'purple', code: '#800080' },\r\n\t\t{ name: 'rebeccapurple', code: '#663399' },\r\n\t\t{ name: 'red', code: '#ff0000' },\r\n\t\t{ name: 'rosybrown', code: '#bc8f8f' },\r\n\t\t{ name: 'royalblue', code: '#4169e1' },\r\n\t\t{ name: 'saddlebrown', code: '#8b4513' },\r\n\t\t{ name: 'salmon', code: '#fa8072' },\r\n\t\t{ name: 'sandybrown', code: '#f4a460' },\r\n\t\t{ name: 'seagreen', code: '#2e8b57' },\r\n\t\t{ name: 'seashell', code: '#fff5ee' },\r\n\t\t{ name: 'sienna', code: '#a0522d' },\r\n\t\t{ name: 'silver', code: '#c0c0c0' },\r\n\t\t{ name: 'skyblue', code: '#87ceeb' },\r\n\t\t{ name: 'slateblue', code: '#6a5acd' },\r\n\t\t{ name: 'slategray', code: '#708090' },\r\n\t\t{ name: 'slategrey', code: '#708090' },\r\n\t\t{ name: 'snow', code: '#fffafa' },\r\n\t\t{ name: 'springgreen', code: '#00ff7f' },\r\n\t\t{ name: 'steelblue', code: '#4682b4' },\r\n\t\t{ name: 'tan', code: '#d2b48c' },\r\n\t\t{ name: 'teal', code: '#008080' },\r\n\t\t{ name: 'thistle', code: '#d8bfd8' },\r\n\t\t{ name: 'tomato', code: '#ff6347' },\r\n\t\t{ name: 'turquoise', code: '#40e0d0' },\r\n\t\t{ name: 'violet', code: '#ee82ee' },\r\n\t\t{ name: 'wheat', code: '#f5deb3' },\r\n\t\t{ name: 'white', code: '#ffffff' },\r\n\t\t{ name: 'whitesmoke', code: '#f5f5f5' },\r\n\t\t{ name: 'yellow', code: '#ffff00' },\r\n\t\t{ name: 'yellowgreen', code: '#9acd32' },\r\n\t]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "dpt",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "item",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "options",
                    "defaultValue": "[{\r\n\t\tvalue: node1,\r\n\t\tchildren: [\r\n\t\t\t{ value: node11, children: [ { value: node111, children: [] } ] },\r\n\t\t\t{ value: node12, children: [] },\r\n\t\t]\r\n\t}, {\r\n\t\tvalue: node2,\r\n\t\tchildren: [ { value: node21, children: [] }]\r\n\t}]",
                    "type": "ILuTree<literal type>[]",
                    "optional": false,
                    "description": "",
                    "line": 174
                },
                {
                    "name": "user",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "searchFn",
                    "args": [
                        {
                            "name": "o",
                            "type": ""
                        },
                        {
                            "name": "c",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "o",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "c",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackBy",
                    "args": [
                        {
                            "name": "idx",
                            "type": ""
                        },
                        {
                            "name": "color",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ILuTree } from '@lucca-front/ng/core';\r\nconst node1 = { id: 1, name: 'root 1' };\r\nconst node11 = { id: 11, name: 'node 1.1' };\r\nconst node111 = { id: 111, name: 'leaf 1.1.1' };\r\nconst node12 = { id: 11, name: 'node 1.2' };\r\nconst node2 = { id: 2, name: 'root 2' };\r\nconst node21 = { id: 21, name: 'node 2.1' };\r\n@Component({\r\n\tselector: 'sand-select-option-placeholder',\r\n\ttemplateUrl: './select-option-placeholder.component.html'\r\n})\r\nexport class SelectOptionPlaceholderComponent {\r\n\tsearchFn(o, c) {\r\n\t\treturn o.name.startsWith(c);\r\n\t}\r\n\ttrackBy(idx, color): string {\r\n\t\treturn color.code;\r\n\t}\r\n\titem;\r\n\tdpt;\r\n\tuser;\r\n\tcolors = [\r\n\t\t{ name: 'aliceblue', code: '#f0f8ff' },\r\n\t\t{ name: 'antiquewhite', code: '#faebd7' },\r\n\t\t{ name: 'aqua', code: '#00ffff' },\r\n\t\t{ name: 'aquamarine', code: '#7fffd4' },\r\n\t\t{ name: 'azure', code: '#f0ffff' },\r\n\t\t{ name: 'beige', code: '#f5f5dc' },\r\n\t\t{ name: 'bisque', code: '#ffe4c4' },\r\n\t\t{ name: 'black', code: '#000000' },\r\n\t\t{ name: 'blanchedalmond', code: '#ffebcd' },\r\n\t\t{ name: 'blue', code: '#0000ff' },\r\n\t\t{ name: 'blueviolet', code: '#8a2be2' },\r\n\t\t{ name: 'brown', code: '#a52a2a' },\r\n\t\t{ name: 'burlywood', code: '#deb887' },\r\n\t\t{ name: 'cadetblue', code: '#5f9ea0' },\r\n\t\t{ name: 'chartreuse', code: '#7fff00' },\r\n\t\t{ name: 'chocolate', code: '#d2691e' },\r\n\t\t{ name: 'coral', code: '#ff7f50' },\r\n\t\t{ name: 'cornflowerblue', code: '#6495ed' },\r\n\t\t{ name: 'cornsilk', code: '#fff8dc' },\r\n\t\t{ name: 'crimson', code: '#dc143c' },\r\n\t\t{ name: 'cyan', code: '#00ffff' },\r\n\t\t{ name: 'darkblue', code: '#00008b' },\r\n\t\t{ name: 'darkcyan', code: '#008b8b' },\r\n\t\t{ name: 'darkgoldenrod', code: '#b8860b' },\r\n\t\t{ name: 'darkgray', code: '#a9a9a9' },\r\n\t\t{ name: 'darkgreen', code: '#006400' },\r\n\t\t{ name: 'darkgrey', code: '#a9a9a9' },\r\n\t\t{ name: 'darkkhaki', code: '#bdb76b' },\r\n\t\t{ name: 'darkmagenta', code: '#8b008b' },\r\n\t\t{ name: 'darkolivegreen', code: '#556b2f' },\r\n\t\t{ name: 'darkorange', code: '#ff8c00' },\r\n\t\t{ name: 'darkorchid', code: '#9932cc' },\r\n\t\t{ name: 'darkred', code: '#8b0000' },\r\n\t\t{ name: 'darksalmon', code: '#e9967a' },\r\n\t\t{ name: 'darkseagreen', code: '#8fbc8f' },\r\n\t\t{ name: 'darkslateblue', code: '#483d8b' },\r\n\t\t{ name: 'darkslategray', code: '#2f4f4f' },\r\n\t\t{ name: 'darkslategrey', code: '#2f4f4f' },\r\n\t\t{ name: 'darkturquoise', code: '#00ced1' },\r\n\t\t{ name: 'darkviolet', code: '#9400d3' },\r\n\t\t{ name: 'deeppink', code: '#ff1493' },\r\n\t\t{ name: 'deepskyblue', code: '#00bfff' },\r\n\t\t{ name: 'dimgray', code: '#696969' },\r\n\t\t{ name: 'dimgrey', code: '#696969' },\r\n\t\t{ name: 'dodgerblue', code: '#1e90ff' },\r\n\t\t{ name: 'firebrick', code: '#b22222' },\r\n\t\t{ name: 'floralwhite', code: '#fffaf0' },\r\n\t\t{ name: 'forestgreen', code: '#228b22' },\r\n\t\t{ name: 'fuchsia', code: '#ff00ff' },\r\n\t\t{ name: 'gainsboro', code: '#dcdcdc' },\r\n\t\t{ name: 'ghostwhite', code: '#f8f8ff' },\r\n\t\t{ name: 'gold', code: '#ffd700' },\r\n\t\t{ name: 'goldenrod', code: '#daa520' },\r\n\t\t{ name: 'gray', code: '#808080' },\r\n\t\t{ name: 'green', code: '#008000' },\r\n\t\t{ name: 'greenyellow', code: '#adff2f' },\r\n\t\t{ name: 'grey', code: '#808080' },\r\n\t\t{ name: 'honeydew', code: '#f0fff0' },\r\n\t\t{ name: 'hotpink', code: '#ff69b4' },\r\n\t\t{ name: 'indianred', code: '#cd5c5c' },\r\n\t\t{ name: 'indigo', code: '#4b0082' },\r\n\t\t{ name: 'ivory', code: '#fffff0' },\r\n\t\t{ name: 'khaki', code: '#f0e68c' },\r\n\t\t{ name: 'lavender', code: '#e6e6fa' },\r\n\t\t{ name: 'lavenderblush', code: '#fff0f5' },\r\n\t\t{ name: 'lawngreen', code: '#7cfc00' },\r\n\t\t{ name: 'lemonchiffon', code: '#fffacd' },\r\n\t\t{ name: 'lightblue', code: '#add8e6' },\r\n\t\t{ name: 'lightcoral', code: '#f08080' },\r\n\t\t{ name: 'lightcyan', code: '#e0ffff' },\r\n\t\t{ name: 'lightgoldenrodyellow', code: '#fafad2' },\r\n\t\t{ name: 'lightgray', code: '#d3d3d3' },\r\n\t\t{ name: 'lightgreen', code: '#90ee90' },\r\n\t\t{ name: 'lightgrey', code: '#d3d3d3' },\r\n\t\t{ name: 'lightpink', code: '#ffb6c1' },\r\n\t\t{ name: 'lightsalmon', code: '#ffa07a' },\r\n\t\t{ name: 'lightseagreen', code: '#20b2aa' },\r\n\t\t{ name: 'lightskyblue', code: '#87cefa' },\r\n\t\t{ name: 'lightslategray', code: '#778899' },\r\n\t\t{ name: 'lightslategrey', code: '#778899' },\r\n\t\t{ name: 'lightsteelblue', code: '#b0c4de' },\r\n\t\t{ name: 'lightyellow', code: '#ffffe0' },\r\n\t\t{ name: 'lime', code: '#00ff00' },\r\n\t\t{ name: 'limegreen', code: '#32cd32' },\r\n\t\t{ name: 'linen', code: '#faf0e6' },\r\n\t\t{ name: 'magenta', code: '#ff00ff' },\r\n\t\t{ name: 'maroon', code: '#800000' },\r\n\t\t{ name: 'mediumaquamarine', code: '#66cdaa' },\r\n\t\t{ name: 'mediumblue', code: '#0000cd' },\r\n\t\t{ name: 'mediumorchid', code: '#ba55d3' },\r\n\t\t{ name: 'mediumpurple', code: '#9370db' },\r\n\t\t{ name: 'mediumseagreen', code: '#3cb371' },\r\n\t\t{ name: 'mediumslateblue', code: '#7b68ee' },\r\n\t\t{ name: 'mediumspringgreen', code: '#00fa9a' },\r\n\t\t{ name: 'mediumturquoise', code: '#48d1cc' },\r\n\t\t{ name: 'mediumvioletred', code: '#c71585' },\r\n\t\t{ name: 'midnightblue', code: '#191970' },\r\n\t\t{ name: 'mintcream', code: '#f5fffa' },\r\n\t\t{ name: 'mistyrose', code: '#ffe4e1' },\r\n\t\t{ name: 'moccasin', code: '#ffe4b5' },\r\n\t\t{ name: 'navajowhite', code: '#ffdead' },\r\n\t\t{ name: 'navy', code: '#000080' },\r\n\t\t{ name: 'oldlace', code: '#fdf5e6' },\r\n\t\t{ name: 'olive', code: '#808000' },\r\n\t\t{ name: 'olivedrab', code: '#6b8e23' },\r\n\t\t{ name: 'orange', code: '#ffa500' },\r\n\t\t{ name: 'orangered', code: '#ff4500' },\r\n\t\t{ name: 'orchid', code: '#da70d6' },\r\n\t\t{ name: 'palegoldenrod', code: '#eee8aa' },\r\n\t\t{ name: 'palegreen', code: '#98fb98' },\r\n\t\t{ name: 'paleturquoise', code: '#afeeee' },\r\n\t\t{ name: 'palevioletred', code: '#db7093' },\r\n\t\t{ name: 'papayawhip', code: '#ffefd5' },\r\n\t\t{ name: 'peachpuff', code: '#ffdab9' },\r\n\t\t{ name: 'peru', code: '#cd853f' },\r\n\t\t{ name: 'pink', code: '#ffc0cb' },\r\n\t\t{ name: 'plum', code: '#dda0dd' },\r\n\t\t{ name: 'powderblue', code: '#b0e0e6' },\r\n\t\t{ name: 'purple', code: '#800080' },\r\n\t\t{ name: 'rebeccapurple', code: '#663399' },\r\n\t\t{ name: 'red', code: '#ff0000' },\r\n\t\t{ name: 'rosybrown', code: '#bc8f8f' },\r\n\t\t{ name: 'royalblue', code: '#4169e1' },\r\n\t\t{ name: 'saddlebrown', code: '#8b4513' },\r\n\t\t{ name: 'salmon', code: '#fa8072' },\r\n\t\t{ name: 'sandybrown', code: '#f4a460' },\r\n\t\t{ name: 'seagreen', code: '#2e8b57' },\r\n\t\t{ name: 'seashell', code: '#fff5ee' },\r\n\t\t{ name: 'sienna', code: '#a0522d' },\r\n\t\t{ name: 'silver', code: '#c0c0c0' },\r\n\t\t{ name: 'skyblue', code: '#87ceeb' },\r\n\t\t{ name: 'slateblue', code: '#6a5acd' },\r\n\t\t{ name: 'slategray', code: '#708090' },\r\n\t\t{ name: 'slategrey', code: '#708090' },\r\n\t\t{ name: 'snow', code: '#fffafa' },\r\n\t\t{ name: 'springgreen', code: '#00ff7f' },\r\n\t\t{ name: 'steelblue', code: '#4682b4' },\r\n\t\t{ name: 'tan', code: '#d2b48c' },\r\n\t\t{ name: 'teal', code: '#008080' },\r\n\t\t{ name: 'thistle', code: '#d8bfd8' },\r\n\t\t{ name: 'tomato', code: '#ff6347' },\r\n\t\t{ name: 'turquoise', code: '#40e0d0' },\r\n\t\t{ name: 'violet', code: '#ee82ee' },\r\n\t\t{ name: 'wheat', code: '#f5deb3' },\r\n\t\t{ name: 'white', code: '#ffffff' },\r\n\t\t{ name: 'whitesmoke', code: '#f5f5f5' },\r\n\t\t{ name: 'yellow', code: '#ffff00' },\r\n\t\t{ name: 'yellowgreen', code: '#9acd32' },\r\n\t];\r\n\r\n\toptions: ILuTree<{ id: number, name: string }>[] = [{\r\n\t\tvalue: node1,\r\n\t\tchildren: [\r\n\t\t\t{ value: node11, children: [ { value: node111, children: [] } ] },\r\n\t\t\t{ value: node12, children: [] },\r\n\t\t]\r\n\t}, {\r\n\t\tvalue: node2,\r\n\t\tchildren: [ { value: node21, children: [] }]\r\n\t}];\r\n\tcollection = [];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>select-option-placeholder</h1>\r\n<h2>Basic select</h2>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{value.name}}</ng-container>\r\n\t\t<lu-option-picker-advanced>\r\n\t\t\t<!-- transforms the colors array to be passed between operators -->\r\n\t\t\t<lu-option-feeder [options]=\"colors\"></lu-option-feeder>\r\n\t\t\t<!-- allows you to filter said colors -->\r\n\t\t\t<lu-option-searcher [searchFn]=\"searchFn\"></lu-option-searcher>\r\n\t\t\t<!-- adds paging to the results to not break your DOM -->\r\n\t\t\t<lu-option-pager></lu-option-pager>\r\n\t\t\t<!-- specify the template to display each color -->\r\n\t\t\t<lu-option *luForOptions=\"let color; trackBy: trackBy\" [value]=\"color\">{{color.name}}</lu-option>\r\n\t\t</lu-option-picker-advanced>\r\n\t</lu-select>\r\n</div>\r\n<h2>Api select</h2>\r\n<div class=\"textfield\">\r\n\t<lu-api-select class=\"textfield-input\" [(ngModel)]=\"dpt\" api=\"/api/v3/departments\" placeholder=\"Everything\"></lu-api-select>\r\n\t<label class=\"textfield-label\">Woobwoob</label>\r\n</div>\r\n<h2>User select</h2>\r\n<div class=\"textfield\">\r\n\t<lu-user-select class=\"textfield-input\" [(ngModel)]=\"user\"></lu-user-select>\r\n\t<label for=\"\" class=\"textfield-label\">user select</label>\r\n</div>\r\n<h2>Department select</h2>\r\n<div class=\"textfield\">\r\n\t<lu-department-select class=\"textfield-input\" [(ngModel)]=\"dpt\"></lu-department-select>\r\n\t<label for=\"\" class=\"textfield-label\">departments select</label>\r\n</div>\r\n\r\n<h2>Tree select</h2>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{ value.name }}</ng-container>\r\n\t\t<lu-tree-option-picker-advanced>\r\n\t\t\t<lu-tree-option-feeder [options]=\"options\"></lu-tree-option-feeder>\r\n\t\t\t<lu-tree-option-searcher [searchFn]=\"searchFn\"></lu-tree-option-searcher>\r\n\t\t\t<lu-tree-option *luForTreeOptions=\"let option\" [tree]=\"option\">\r\n\t\t\t\t<ng-container *luDisplayer=\"let value\">{{ value.name }}</ng-container>\r\n\t\t\t</lu-tree-option>\r\n\t\t</lu-tree-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">single with operators</label>\r\n</div>"
        },
        {
            "name": "SelectOverlapComponent",
            "id": "component-SelectOverlapComponent-81384b23496124cc4ef945f3ac12021b",
            "file": "packages/ng/applications/sandbox/src/app/issues/select-overlap/select-overlap.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-select-overlap",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./select-overlap.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "item",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "model",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "true",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "user",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'lu-select-overlap',\r\n\ttemplateUrl: './select-overlap.component.html'\r\n})\r\nexport class SelectOverlapComponent {\r\n\tmodel = 1;\r\n\titem;\r\n\tuser;\r\n\ttrue = true;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>select-overlap</h1>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"model\" [pickerOverlap]=\"true\">\r\n\t\t<span *luDisplayer=\"let value\">{{value}}</span>\r\n\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t<lu-option-picker>\r\n\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t<lu-option value=\"2\">2</lu-option>\r\n\t\t</lu-option-picker>\r\n\t</lu-select>\r\n</div>\r\n<div class=\"textfield\">\r\n\t<lu-api-select class=\"textfield-input\" [(ngModel)]=\"model\" api=\"/api/v3/departments\" [pickerOverlap]=\"true\"></lu-api-select>\r\n\t<label for=\"\" class=\"textfield-label\">api select</label>\r\n</div>\r\n<div class=\"textfield\">\r\n\t<lu-user-select class=\"textfield-input\" [(ngModel)]=\"user\" [pickerOverlap]=\"true\"></lu-user-select>\r\n\t<label for=\"\" class=\"textfield-label\">user select</label>\r\n</div>\r\n<div class=\"textfield\">\r\n\t<lu-department-select class=\"textfield-input\" [(ngModel)]=\"item\" [pickerOverlap]=\"true\"></lu-department-select>\r\n\t<label for=\"\" class=\"textfield-label\">department select</label>\r\n</div>"
        },
        {
            "name": "SidepanelComponent",
            "id": "component-SidepanelComponent-25022cb5bc5c8002ee4f09eda97f80d8",
            "file": "packages/ng/applications/sandbox/src/app/issues/sidepanel/sidepanel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-sidepanel",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sidepanel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "result$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { LuSidepanel, ALuSidepanelRef, ILuSidepanelContent } from '@lucca-front/ng/sidepanel';\r\nimport { timer, Subject, throwError, of } from 'rxjs';\r\nimport { mapTo, catchError, delay } from 'rxjs/operators';\r\n@Component({\r\n\tselector: 'lu-sidepanel',\r\n\ttemplateUrl: './sidepanel.component.html'\r\n})\r\nexport class SidepanelComponent {\r\n\tresult$ = new Subject();\r\n\tconstructor(private _luSidepanel: LuSidepanel) {}\r\n\topen() {\r\n\t\tthis._luSidepanel.open(PocSidepanelInsideComponent).onClose.subscribe(r => this.result$.next(r));\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'lu-sidepanel-inside',\r\n\ttemplate: `\r\n\t\t<p>only the content in this injected component</p>\r\n\t\t<label class=\"label\">{{error}}</label>\r\n\t\t<div class=\"textfield\">\r\n\t\t\t<input class=\"textfield-input\" type=\"number\" [(ngModel)]=\"result\">\r\n\t\t\t<label class=\"textfield-label\">result</label>\r\n\t\t</div>\r\n\t\t<div class=\"checkbox\">\r\n\t\t\t<input class=\"checkbox-input\" type=\"checkbox\" name=\"checkbox\" id=\"checkbox\" [(ngModel)]=\"submitDisabled\">\r\n\t\t\t<label class=\"checkbox-label\" for=\"checkbox\">disable submit</label>\r\n\t\t</div>\r\n\t`,\r\n})\r\nexport class PocSidepanelInsideComponent implements ILuSidepanelContent {\r\n\ttitle = 'title of the component';\r\n\tsubmitLabel = 'submit';\r\n\tcancelLabel = 'dismiss';\r\n\tsubmitDisabled = false;\r\n\tsubmitPalette = 'error';\r\n\tresult = 0;\r\n\terror;\r\n\t// submitAction = () => timer(1500).pipe(mapTo(this.result));\r\n\tsubmitAction = () => {\r\n\t\tlet obs$;\r\n\t\tif (this.result % 2 === 0) {\r\n\t\t\tobs$ = throwError(`error with result ${this.result}`);\r\n\t\t} else {\r\n\t\t\tobs$ = of(this.result).pipe(delay(2000));\r\n\r\n\t\t}\r\n\r\n\t\treturn obs$.pipe(\r\n\t\t\tcatchError(err => { this.error = err; return throwError(`error message`); })\r\n\t\t)\r\n\t}\r\n\tconstructor(\r\n\t\tprotected _ref: ALuSidepanelRef<PocSidepanelInsideComponent>,\r\n\t) {}\r\n\tcloseModal() {\r\n\t\tthis._ref.close();\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_luSidepanel",
                        "type": "LuSidepanel"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "_luSidepanel",
                        "type": "LuSidepanel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1>sidepanel</h1>\r\n<button class=\"button\" (click)=\"open()\">click me</button> {{result$ | async}}\r\n"
        },
        {
            "name": "SplitOperatorsApiComponent",
            "id": "component-SplitOperatorsApiComponent-e4b5a406cb467a87a0adb04bed7c9e5b",
            "file": "packages/ng/applications/sandbox/src/app/issues/split-operators-api/split-operators-api.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-split-operators-api",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./split-operators-api.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "item",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "user",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "searchFn",
                    "args": [
                        {
                            "name": "o",
                            "type": ""
                        },
                        {
                            "name": "c",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "name": "o",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "c",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackBy",
                    "args": [
                        {
                            "name": "idx",
                            "type": ""
                        },
                        {
                            "name": "color",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'lu-split-operators-api',\r\n\ttemplateUrl: './split-operators-api.component.html'\r\n})\r\nexport class SplitOperatorsApiComponent {\r\n\titem;\r\n\tuser;\r\n\tsearchFn(o, c) {\r\n\t\treturn o.name.startsWith(c);\r\n\t}\r\n\ttrackBy(idx, color): string {\r\n\t\treturn color.code;\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>split-operators-api</h1>\r\n<h2>api</h2>\r\n<h3>api pager (on open, on scrollBottom)</h3>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{value.name}}</ng-container>\r\n\t\t<lu-option-picker-advanced>\r\n\t\t\t<lu-api-pager api=\"/api/v3/axissections\"></lu-api-pager>\r\n\t\t\t<lu-option *luForOptions=\"let section; trackBy: trackBy\" [value]=\"section\">{{section.name}}</lu-option>\r\n\t\t</lu-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">section</label>\r\n</div>\r\n<h3>api searcher (on open)</h3>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{value.name}}</ng-container>\r\n\t\t<lu-option-picker-advanced>\r\n\t\t\t<lu-api-searcher api=\"/api/v3/axissections\"></lu-api-searcher>\r\n\t\t\t<lu-option *luForOptions=\"let section; trackBy: trackBy\" [value]=\"section\">{{section.name}}</lu-option>\r\n\t\t</lu-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">section</label>\r\n</div>\r\n<h3>api paged searcher (on open, on scrollbottom)</h3>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{value.name}}</ng-container>\r\n\t\t<lu-option-picker-advanced>\r\n\t\t\t<lu-api-paged-searcher api=\"/api/v3/axissections\"></lu-api-paged-searcher>\r\n\t\t\t<lu-option *luForOptions=\"let section; trackBy: trackBy\" [value]=\"section\">{{section.name}}</lu-option>\r\n\t\t</lu-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">section</label>\r\n</div>\r\n<h3>api select</h3>\r\n<div class=\"textfield\">\r\n\t<lu-api-select class=\"textfield-input\" [(ngModel)]=\"item\" api=\"/api/v3/axissections\"></lu-api-select>\r\n\t<label for=\"\" class=\"textfield-label\">section</label>\r\n</div>\r\n<h2>user</h2>\r\n<h3>user paged searcher</h3>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"user\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{value.name}}</ng-container>\r\n\t\t<lu-option-picker-advanced>\r\n\t\t\t<lu-user-paged-searcher></lu-user-paged-searcher>\r\n\t\t\t<lu-option *luForOptions=\"let user; trackBy: trackBy\" [value]=\"user\">{{user | luUserDisplay}}</lu-option>\r\n\t\t</lu-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">user</label>\r\n</div>\r\n<h3>user select</h3>\r\n<div class=\"textfield\">\r\n\t<lu-user-select class=\"textfield-input\" [(ngModel)]=\"user\"></lu-user-select>\r\n\t<label for=\"\" class=\"textfield-label\">user</label>\r\n</div>"
        },
        {
            "name": "SplitOperatorsComponent",
            "id": "component-SplitOperatorsComponent-11126054a0d29ced41c614412eea7ed1",
            "file": "packages/ng/applications/sandbox/src/app/issues/split-operators/split-operators.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-split-operators",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./split-operators.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colors",
                    "defaultValue": "[\r\n\t\t{ name: 'aliceblue', code: '#f0f8ff' },\r\n\t\t{ name: 'antiquewhite', code: '#faebd7' },\r\n\t\t{ name: 'aqua', code: '#00ffff' },\r\n\t\t{ name: 'aquamarine', code: '#7fffd4' },\r\n\t\t{ name: 'azure', code: '#f0ffff' },\r\n\t\t{ name: 'beige', code: '#f5f5dc' },\r\n\t\t{ name: 'bisque', code: '#ffe4c4' },\r\n\t\t{ name: 'black', code: '#000000' },\r\n\t\t{ name: 'blanchedalmond', code: '#ffebcd' },\r\n\t\t{ name: 'blue', code: '#0000ff' },\r\n\t\t{ name: 'blueviolet', code: '#8a2be2' },\r\n\t\t{ name: 'brown', code: '#a52a2a' },\r\n\t\t{ name: 'burlywood', code: '#deb887' },\r\n\t\t{ name: 'cadetblue', code: '#5f9ea0' },\r\n\t\t{ name: 'chartreuse', code: '#7fff00' },\r\n\t\t{ name: 'chocolate', code: '#d2691e' },\r\n\t\t{ name: 'coral', code: '#ff7f50' },\r\n\t\t{ name: 'cornflowerblue', code: '#6495ed' },\r\n\t\t{ name: 'cornsilk', code: '#fff8dc' },\r\n\t\t{ name: 'crimson', code: '#dc143c' },\r\n\t\t{ name: 'cyan', code: '#00ffff' },\r\n\t\t{ name: 'darkblue', code: '#00008b' },\r\n\t\t{ name: 'darkcyan', code: '#008b8b' },\r\n\t\t{ name: 'darkgoldenrod', code: '#b8860b' },\r\n\t\t{ name: 'darkgray', code: '#a9a9a9' },\r\n\t\t{ name: 'darkgreen', code: '#006400' },\r\n\t\t{ name: 'darkgrey', code: '#a9a9a9' },\r\n\t\t{ name: 'darkkhaki', code: '#bdb76b' },\r\n\t\t{ name: 'darkmagenta', code: '#8b008b' },\r\n\t\t{ name: 'darkolivegreen', code: '#556b2f' },\r\n\t\t{ name: 'darkorange', code: '#ff8c00' },\r\n\t\t{ name: 'darkorchid', code: '#9932cc' },\r\n\t\t{ name: 'darkred', code: '#8b0000' },\r\n\t\t{ name: 'darksalmon', code: '#e9967a' },\r\n\t\t{ name: 'darkseagreen', code: '#8fbc8f' },\r\n\t\t{ name: 'darkslateblue', code: '#483d8b' },\r\n\t\t{ name: 'darkslategray', code: '#2f4f4f' },\r\n\t\t{ name: 'darkslategrey', code: '#2f4f4f' },\r\n\t\t{ name: 'darkturquoise', code: '#00ced1' },\r\n\t\t{ name: 'darkviolet', code: '#9400d3' },\r\n\t\t{ name: 'deeppink', code: '#ff1493' },\r\n\t\t{ name: 'deepskyblue', code: '#00bfff' },\r\n\t\t{ name: 'dimgray', code: '#696969' },\r\n\t\t{ name: 'dimgrey', code: '#696969' },\r\n\t\t{ name: 'dodgerblue', code: '#1e90ff' },\r\n\t\t{ name: 'firebrick', code: '#b22222' },\r\n\t\t{ name: 'floralwhite', code: '#fffaf0' },\r\n\t\t{ name: 'forestgreen', code: '#228b22' },\r\n\t\t{ name: 'fuchsia', code: '#ff00ff' },\r\n\t\t{ name: 'gainsboro', code: '#dcdcdc' },\r\n\t\t{ name: 'ghostwhite', code: '#f8f8ff' },\r\n\t\t{ name: 'gold', code: '#ffd700' },\r\n\t\t{ name: 'goldenrod', code: '#daa520' },\r\n\t\t{ name: 'gray', code: '#808080' },\r\n\t\t{ name: 'green', code: '#008000' },\r\n\t\t{ name: 'greenyellow', code: '#adff2f' },\r\n\t\t{ name: 'grey', code: '#808080' },\r\n\t\t{ name: 'honeydew', code: '#f0fff0' },\r\n\t\t{ name: 'hotpink', code: '#ff69b4' },\r\n\t\t{ name: 'indianred', code: '#cd5c5c' },\r\n\t\t{ name: 'indigo', code: '#4b0082' },\r\n\t\t{ name: 'ivory', code: '#fffff0' },\r\n\t\t{ name: 'khaki', code: '#f0e68c' },\r\n\t\t{ name: 'lavender', code: '#e6e6fa' },\r\n\t\t{ name: 'lavenderblush', code: '#fff0f5' },\r\n\t\t{ name: 'lawngreen', code: '#7cfc00' },\r\n\t\t{ name: 'lemonchiffon', code: '#fffacd' },\r\n\t\t{ name: 'lightblue', code: '#add8e6' },\r\n\t\t{ name: 'lightcoral', code: '#f08080' },\r\n\t\t{ name: 'lightcyan', code: '#e0ffff' },\r\n\t\t{ name: 'lightgoldenrodyellow', code: '#fafad2' },\r\n\t\t{ name: 'lightgray', code: '#d3d3d3' },\r\n\t\t{ name: 'lightgreen', code: '#90ee90' },\r\n\t\t{ name: 'lightgrey', code: '#d3d3d3' },\r\n\t\t{ name: 'lightpink', code: '#ffb6c1' },\r\n\t\t{ name: 'lightsalmon', code: '#ffa07a' },\r\n\t\t{ name: 'lightseagreen', code: '#20b2aa' },\r\n\t\t{ name: 'lightskyblue', code: '#87cefa' },\r\n\t\t{ name: 'lightslategray', code: '#778899' },\r\n\t\t{ name: 'lightslategrey', code: '#778899' },\r\n\t\t{ name: 'lightsteelblue', code: '#b0c4de' },\r\n\t\t{ name: 'lightyellow', code: '#ffffe0' },\r\n\t\t{ name: 'lime', code: '#00ff00' },\r\n\t\t{ name: 'limegreen', code: '#32cd32' },\r\n\t\t{ name: 'linen', code: '#faf0e6' },\r\n\t\t{ name: 'magenta', code: '#ff00ff' },\r\n\t\t{ name: 'maroon', code: '#800000' },\r\n\t\t{ name: 'mediumaquamarine', code: '#66cdaa' },\r\n\t\t{ name: 'mediumblue', code: '#0000cd' },\r\n\t\t{ name: 'mediumorchid', code: '#ba55d3' },\r\n\t\t{ name: 'mediumpurple', code: '#9370db' },\r\n\t\t{ name: 'mediumseagreen', code: '#3cb371' },\r\n\t\t{ name: 'mediumslateblue', code: '#7b68ee' },\r\n\t\t{ name: 'mediumspringgreen', code: '#00fa9a' },\r\n\t\t{ name: 'mediumturquoise', code: '#48d1cc' },\r\n\t\t{ name: 'mediumvioletred', code: '#c71585' },\r\n\t\t{ name: 'midnightblue', code: '#191970' },\r\n\t\t{ name: 'mintcream', code: '#f5fffa' },\r\n\t\t{ name: 'mistyrose', code: '#ffe4e1' },\r\n\t\t{ name: 'moccasin', code: '#ffe4b5' },\r\n\t\t{ name: 'navajowhite', code: '#ffdead' },\r\n\t\t{ name: 'navy', code: '#000080' },\r\n\t\t{ name: 'oldlace', code: '#fdf5e6' },\r\n\t\t{ name: 'olive', code: '#808000' },\r\n\t\t{ name: 'olivedrab', code: '#6b8e23' },\r\n\t\t{ name: 'orange', code: '#ffa500' },\r\n\t\t{ name: 'orangered', code: '#ff4500' },\r\n\t\t{ name: 'orchid', code: '#da70d6' },\r\n\t\t{ name: 'palegoldenrod', code: '#eee8aa' },\r\n\t\t{ name: 'palegreen', code: '#98fb98' },\r\n\t\t{ name: 'paleturquoise', code: '#afeeee' },\r\n\t\t{ name: 'palevioletred', code: '#db7093' },\r\n\t\t{ name: 'papayawhip', code: '#ffefd5' },\r\n\t\t{ name: 'peachpuff', code: '#ffdab9' },\r\n\t\t{ name: 'peru', code: '#cd853f' },\r\n\t\t{ name: 'pink', code: '#ffc0cb' },\r\n\t\t{ name: 'plum', code: '#dda0dd' },\r\n\t\t{ name: 'powderblue', code: '#b0e0e6' },\r\n\t\t{ name: 'purple', code: '#800080' },\r\n\t\t{ name: 'rebeccapurple', code: '#663399' },\r\n\t\t{ name: 'red', code: '#ff0000' },\r\n\t\t{ name: 'rosybrown', code: '#bc8f8f' },\r\n\t\t{ name: 'royalblue', code: '#4169e1' },\r\n\t\t{ name: 'saddlebrown', code: '#8b4513' },\r\n\t\t{ name: 'salmon', code: '#fa8072' },\r\n\t\t{ name: 'sandybrown', code: '#f4a460' },\r\n\t\t{ name: 'seagreen', code: '#2e8b57' },\r\n\t\t{ name: 'seashell', code: '#fff5ee' },\r\n\t\t{ name: 'sienna', code: '#a0522d' },\r\n\t\t{ name: 'silver', code: '#c0c0c0' },\r\n\t\t{ name: 'skyblue', code: '#87ceeb' },\r\n\t\t{ name: 'slateblue', code: '#6a5acd' },\r\n\t\t{ name: 'slategray', code: '#708090' },\r\n\t\t{ name: 'slategrey', code: '#708090' },\r\n\t\t{ name: 'snow', code: '#fffafa' },\r\n\t\t{ name: 'springgreen', code: '#00ff7f' },\r\n\t\t{ name: 'steelblue', code: '#4682b4' },\r\n\t\t{ name: 'tan', code: '#d2b48c' },\r\n\t\t{ name: 'teal', code: '#008080' },\r\n\t\t{ name: 'thistle', code: '#d8bfd8' },\r\n\t\t{ name: 'tomato', code: '#ff6347' },\r\n\t\t{ name: 'turquoise', code: '#40e0d0' },\r\n\t\t{ name: 'violet', code: '#ee82ee' },\r\n\t\t{ name: 'wheat', code: '#f5deb3' },\r\n\t\t{ name: 'white', code: '#ffffff' },\r\n\t\t{ name: 'whitesmoke', code: '#f5f5f5' },\r\n\t\t{ name: 'yellow', code: '#ffff00' },\r\n\t\t{ name: 'yellowgreen', code: '#9acd32' },\r\n\t]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "item",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "searchFn",
                    "args": [
                        {
                            "name": "o",
                            "type": ""
                        },
                        {
                            "name": "c",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "o",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "c",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackBy",
                    "args": [
                        {
                            "name": "idx",
                            "type": ""
                        },
                        {
                            "name": "color",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'lu-split-operators',\r\n\ttemplateUrl: './split-operators.component.html'\r\n})\r\nexport class SplitOperatorsComponent {\r\n\tsearchFn(o, c) {\r\n\t\treturn o.name.startsWith(c);\r\n\t}\r\n\ttrackBy(idx, color): string {\r\n\t\treturn color.code;\r\n\t}\r\n\titem;\r\n\tcolors = [\r\n\t\t{ name: 'aliceblue', code: '#f0f8ff' },\r\n\t\t{ name: 'antiquewhite', code: '#faebd7' },\r\n\t\t{ name: 'aqua', code: '#00ffff' },\r\n\t\t{ name: 'aquamarine', code: '#7fffd4' },\r\n\t\t{ name: 'azure', code: '#f0ffff' },\r\n\t\t{ name: 'beige', code: '#f5f5dc' },\r\n\t\t{ name: 'bisque', code: '#ffe4c4' },\r\n\t\t{ name: 'black', code: '#000000' },\r\n\t\t{ name: 'blanchedalmond', code: '#ffebcd' },\r\n\t\t{ name: 'blue', code: '#0000ff' },\r\n\t\t{ name: 'blueviolet', code: '#8a2be2' },\r\n\t\t{ name: 'brown', code: '#a52a2a' },\r\n\t\t{ name: 'burlywood', code: '#deb887' },\r\n\t\t{ name: 'cadetblue', code: '#5f9ea0' },\r\n\t\t{ name: 'chartreuse', code: '#7fff00' },\r\n\t\t{ name: 'chocolate', code: '#d2691e' },\r\n\t\t{ name: 'coral', code: '#ff7f50' },\r\n\t\t{ name: 'cornflowerblue', code: '#6495ed' },\r\n\t\t{ name: 'cornsilk', code: '#fff8dc' },\r\n\t\t{ name: 'crimson', code: '#dc143c' },\r\n\t\t{ name: 'cyan', code: '#00ffff' },\r\n\t\t{ name: 'darkblue', code: '#00008b' },\r\n\t\t{ name: 'darkcyan', code: '#008b8b' },\r\n\t\t{ name: 'darkgoldenrod', code: '#b8860b' },\r\n\t\t{ name: 'darkgray', code: '#a9a9a9' },\r\n\t\t{ name: 'darkgreen', code: '#006400' },\r\n\t\t{ name: 'darkgrey', code: '#a9a9a9' },\r\n\t\t{ name: 'darkkhaki', code: '#bdb76b' },\r\n\t\t{ name: 'darkmagenta', code: '#8b008b' },\r\n\t\t{ name: 'darkolivegreen', code: '#556b2f' },\r\n\t\t{ name: 'darkorange', code: '#ff8c00' },\r\n\t\t{ name: 'darkorchid', code: '#9932cc' },\r\n\t\t{ name: 'darkred', code: '#8b0000' },\r\n\t\t{ name: 'darksalmon', code: '#e9967a' },\r\n\t\t{ name: 'darkseagreen', code: '#8fbc8f' },\r\n\t\t{ name: 'darkslateblue', code: '#483d8b' },\r\n\t\t{ name: 'darkslategray', code: '#2f4f4f' },\r\n\t\t{ name: 'darkslategrey', code: '#2f4f4f' },\r\n\t\t{ name: 'darkturquoise', code: '#00ced1' },\r\n\t\t{ name: 'darkviolet', code: '#9400d3' },\r\n\t\t{ name: 'deeppink', code: '#ff1493' },\r\n\t\t{ name: 'deepskyblue', code: '#00bfff' },\r\n\t\t{ name: 'dimgray', code: '#696969' },\r\n\t\t{ name: 'dimgrey', code: '#696969' },\r\n\t\t{ name: 'dodgerblue', code: '#1e90ff' },\r\n\t\t{ name: 'firebrick', code: '#b22222' },\r\n\t\t{ name: 'floralwhite', code: '#fffaf0' },\r\n\t\t{ name: 'forestgreen', code: '#228b22' },\r\n\t\t{ name: 'fuchsia', code: '#ff00ff' },\r\n\t\t{ name: 'gainsboro', code: '#dcdcdc' },\r\n\t\t{ name: 'ghostwhite', code: '#f8f8ff' },\r\n\t\t{ name: 'gold', code: '#ffd700' },\r\n\t\t{ name: 'goldenrod', code: '#daa520' },\r\n\t\t{ name: 'gray', code: '#808080' },\r\n\t\t{ name: 'green', code: '#008000' },\r\n\t\t{ name: 'greenyellow', code: '#adff2f' },\r\n\t\t{ name: 'grey', code: '#808080' },\r\n\t\t{ name: 'honeydew', code: '#f0fff0' },\r\n\t\t{ name: 'hotpink', code: '#ff69b4' },\r\n\t\t{ name: 'indianred', code: '#cd5c5c' },\r\n\t\t{ name: 'indigo', code: '#4b0082' },\r\n\t\t{ name: 'ivory', code: '#fffff0' },\r\n\t\t{ name: 'khaki', code: '#f0e68c' },\r\n\t\t{ name: 'lavender', code: '#e6e6fa' },\r\n\t\t{ name: 'lavenderblush', code: '#fff0f5' },\r\n\t\t{ name: 'lawngreen', code: '#7cfc00' },\r\n\t\t{ name: 'lemonchiffon', code: '#fffacd' },\r\n\t\t{ name: 'lightblue', code: '#add8e6' },\r\n\t\t{ name: 'lightcoral', code: '#f08080' },\r\n\t\t{ name: 'lightcyan', code: '#e0ffff' },\r\n\t\t{ name: 'lightgoldenrodyellow', code: '#fafad2' },\r\n\t\t{ name: 'lightgray', code: '#d3d3d3' },\r\n\t\t{ name: 'lightgreen', code: '#90ee90' },\r\n\t\t{ name: 'lightgrey', code: '#d3d3d3' },\r\n\t\t{ name: 'lightpink', code: '#ffb6c1' },\r\n\t\t{ name: 'lightsalmon', code: '#ffa07a' },\r\n\t\t{ name: 'lightseagreen', code: '#20b2aa' },\r\n\t\t{ name: 'lightskyblue', code: '#87cefa' },\r\n\t\t{ name: 'lightslategray', code: '#778899' },\r\n\t\t{ name: 'lightslategrey', code: '#778899' },\r\n\t\t{ name: 'lightsteelblue', code: '#b0c4de' },\r\n\t\t{ name: 'lightyellow', code: '#ffffe0' },\r\n\t\t{ name: 'lime', code: '#00ff00' },\r\n\t\t{ name: 'limegreen', code: '#32cd32' },\r\n\t\t{ name: 'linen', code: '#faf0e6' },\r\n\t\t{ name: 'magenta', code: '#ff00ff' },\r\n\t\t{ name: 'maroon', code: '#800000' },\r\n\t\t{ name: 'mediumaquamarine', code: '#66cdaa' },\r\n\t\t{ name: 'mediumblue', code: '#0000cd' },\r\n\t\t{ name: 'mediumorchid', code: '#ba55d3' },\r\n\t\t{ name: 'mediumpurple', code: '#9370db' },\r\n\t\t{ name: 'mediumseagreen', code: '#3cb371' },\r\n\t\t{ name: 'mediumslateblue', code: '#7b68ee' },\r\n\t\t{ name: 'mediumspringgreen', code: '#00fa9a' },\r\n\t\t{ name: 'mediumturquoise', code: '#48d1cc' },\r\n\t\t{ name: 'mediumvioletred', code: '#c71585' },\r\n\t\t{ name: 'midnightblue', code: '#191970' },\r\n\t\t{ name: 'mintcream', code: '#f5fffa' },\r\n\t\t{ name: 'mistyrose', code: '#ffe4e1' },\r\n\t\t{ name: 'moccasin', code: '#ffe4b5' },\r\n\t\t{ name: 'navajowhite', code: '#ffdead' },\r\n\t\t{ name: 'navy', code: '#000080' },\r\n\t\t{ name: 'oldlace', code: '#fdf5e6' },\r\n\t\t{ name: 'olive', code: '#808000' },\r\n\t\t{ name: 'olivedrab', code: '#6b8e23' },\r\n\t\t{ name: 'orange', code: '#ffa500' },\r\n\t\t{ name: 'orangered', code: '#ff4500' },\r\n\t\t{ name: 'orchid', code: '#da70d6' },\r\n\t\t{ name: 'palegoldenrod', code: '#eee8aa' },\r\n\t\t{ name: 'palegreen', code: '#98fb98' },\r\n\t\t{ name: 'paleturquoise', code: '#afeeee' },\r\n\t\t{ name: 'palevioletred', code: '#db7093' },\r\n\t\t{ name: 'papayawhip', code: '#ffefd5' },\r\n\t\t{ name: 'peachpuff', code: '#ffdab9' },\r\n\t\t{ name: 'peru', code: '#cd853f' },\r\n\t\t{ name: 'pink', code: '#ffc0cb' },\r\n\t\t{ name: 'plum', code: '#dda0dd' },\r\n\t\t{ name: 'powderblue', code: '#b0e0e6' },\r\n\t\t{ name: 'purple', code: '#800080' },\r\n\t\t{ name: 'rebeccapurple', code: '#663399' },\r\n\t\t{ name: 'red', code: '#ff0000' },\r\n\t\t{ name: 'rosybrown', code: '#bc8f8f' },\r\n\t\t{ name: 'royalblue', code: '#4169e1' },\r\n\t\t{ name: 'saddlebrown', code: '#8b4513' },\r\n\t\t{ name: 'salmon', code: '#fa8072' },\r\n\t\t{ name: 'sandybrown', code: '#f4a460' },\r\n\t\t{ name: 'seagreen', code: '#2e8b57' },\r\n\t\t{ name: 'seashell', code: '#fff5ee' },\r\n\t\t{ name: 'sienna', code: '#a0522d' },\r\n\t\t{ name: 'silver', code: '#c0c0c0' },\r\n\t\t{ name: 'skyblue', code: '#87ceeb' },\r\n\t\t{ name: 'slateblue', code: '#6a5acd' },\r\n\t\t{ name: 'slategray', code: '#708090' },\r\n\t\t{ name: 'slategrey', code: '#708090' },\r\n\t\t{ name: 'snow', code: '#fffafa' },\r\n\t\t{ name: 'springgreen', code: '#00ff7f' },\r\n\t\t{ name: 'steelblue', code: '#4682b4' },\r\n\t\t{ name: 'tan', code: '#d2b48c' },\r\n\t\t{ name: 'teal', code: '#008080' },\r\n\t\t{ name: 'thistle', code: '#d8bfd8' },\r\n\t\t{ name: 'tomato', code: '#ff6347' },\r\n\t\t{ name: 'turquoise', code: '#40e0d0' },\r\n\t\t{ name: 'violet', code: '#ee82ee' },\r\n\t\t{ name: 'wheat', code: '#f5deb3' },\r\n\t\t{ name: 'white', code: '#ffffff' },\r\n\t\t{ name: 'whitesmoke', code: '#f5f5f5' },\r\n\t\t{ name: 'yellow', code: '#ffff00' },\r\n\t\t{ name: 'yellowgreen', code: '#9acd32' },\r\n\t];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>split-operators</h1>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{value.name}}</ng-container>\r\n\t\t<lu-option-picker-advanced>\r\n\t\t\t<!-- transforms the colors array to be passed between operators -->\r\n\t\t\t<lu-option-feeder [options]=\"colors\"></lu-option-feeder>\r\n\t\t\t<!-- allows you to filter said colors -->\r\n\t\t\t<lu-option-searcher [searchFn]=\"searchFn\"></lu-option-searcher>\r\n\t\t\t<!-- adds paging to the results to not break your DOM -->\r\n\t\t\t<lu-option-pager></lu-option-pager>\r\n\t\t\t<!-- specify the template to display each color -->\r\n\t\t\t<lu-option *luForOptions=\"let color; trackBy: trackBy\" [value]=\"color\">{{color.name}}</lu-option>\r\n\t\t</lu-option-picker-advanced>\r\n\t</lu-select>\r\n</div>"
        },
        {
            "name": "SplitOptionPickerApiAuserComponent",
            "id": "component-SplitOptionPickerApiAuserComponent-c07f94bc46fd61b04d964397c138656a",
            "file": "packages/ng/applications/sandbox/src/app/issues/split-option-picker-api-auser/split-option-picker-api-auser.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-split-option-picker-api-auser",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./split-option-picker-api-auser.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "model",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "user",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'lu-split-option-picker-api-auser',\r\n\ttemplateUrl: './split-option-picker-api-auser.component.html'\r\n})\r\nexport class SplitOptionPickerApiAuserComponent {\r\n\tuser;\r\n\tmodel;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>split-option-picker-api-auser</h1>\r\n<div class=\"textfield\">\r\n\t<lu-api-select class=\"textfield-input\" [(ngModel)]=\"model\" api=\"/api/v3/departments\"></lu-api-select>\r\n</div>\r\n<div class=\"textfield\">\r\n\t<lu-user-select class=\"textfield-input\" [(ngModel)]=\"user\"></lu-user-select>\r\n</div>"
        },
        {
            "name": "SplitOptionPickerComponent",
            "id": "component-SplitOptionPickerComponent-7f2302092270f473a02c8061f95d5ef1",
            "file": "packages/ng/applications/sandbox/src/app/issues/split-option-picker/split-option-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-split-option-picker",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./split-option-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colors",
                    "defaultValue": "[\r\n\t\t{ name: 'aliceblue', code: '#f0f8ff' },\r\n\t\t{ name: 'antiquewhite', code: '#faebd7' },\r\n\t\t{ name: 'aqua', code: '#00ffff' },\r\n\t\t{ name: 'aquamarine', code: '#7fffd4' },\r\n\t\t{ name: 'azure', code: '#f0ffff' },\r\n\t\t{ name: 'beige', code: '#f5f5dc' },\r\n\t\t{ name: 'bisque', code: '#ffe4c4' },\r\n\t\t{ name: 'black', code: '#000000' },\r\n\t\t{ name: 'blanchedalmond', code: '#ffebcd' },\r\n\t\t{ name: 'blue', code: '#0000ff' },\r\n\t\t{ name: 'blueviolet', code: '#8a2be2' },\r\n\t\t{ name: 'brown', code: '#a52a2a' },\r\n\t\t{ name: 'burlywood', code: '#deb887' },\r\n\t\t{ name: 'cadetblue', code: '#5f9ea0' },\r\n\t\t{ name: 'chartreuse', code: '#7fff00' },\r\n\t\t{ name: 'chocolate', code: '#d2691e' },\r\n\t\t{ name: 'coral', code: '#ff7f50' },\r\n\t\t{ name: 'cornflowerblue', code: '#6495ed' },\r\n\t\t{ name: 'cornsilk', code: '#fff8dc' },\r\n\t\t{ name: 'crimson', code: '#dc143c' },\r\n\t\t{ name: 'cyan', code: '#00ffff' },\r\n\t\t{ name: 'darkblue', code: '#00008b' },\r\n\t\t{ name: 'darkcyan', code: '#008b8b' },\r\n\t\t{ name: 'darkgoldenrod', code: '#b8860b' },\r\n\t\t{ name: 'darkgray', code: '#a9a9a9' },\r\n\t\t{ name: 'darkgreen', code: '#006400' },\r\n\t\t{ name: 'darkgrey', code: '#a9a9a9' },\r\n\t\t{ name: 'darkkhaki', code: '#bdb76b' },\r\n\t\t{ name: 'darkmagenta', code: '#8b008b' },\r\n\t\t{ name: 'darkolivegreen', code: '#556b2f' },\r\n\t\t{ name: 'darkorange', code: '#ff8c00' },\r\n\t\t{ name: 'darkorchid', code: '#9932cc' },\r\n\t\t{ name: 'darkred', code: '#8b0000' },\r\n\t\t{ name: 'darksalmon', code: '#e9967a' },\r\n\t\t{ name: 'darkseagreen', code: '#8fbc8f' },\r\n\t\t{ name: 'darkslateblue', code: '#483d8b' },\r\n\t\t{ name: 'darkslategray', code: '#2f4f4f' },\r\n\t\t{ name: 'darkslategrey', code: '#2f4f4f' },\r\n\t\t{ name: 'darkturquoise', code: '#00ced1' },\r\n\t\t{ name: 'darkviolet', code: '#9400d3' },\r\n\t\t{ name: 'deeppink', code: '#ff1493' },\r\n\t\t{ name: 'deepskyblue', code: '#00bfff' },\r\n\t\t{ name: 'dimgray', code: '#696969' },\r\n\t\t{ name: 'dimgrey', code: '#696969' },\r\n\t\t{ name: 'dodgerblue', code: '#1e90ff' },\r\n\t\t{ name: 'firebrick', code: '#b22222' },\r\n\t\t{ name: 'floralwhite', code: '#fffaf0' },\r\n\t\t{ name: 'forestgreen', code: '#228b22' },\r\n\t\t{ name: 'fuchsia', code: '#ff00ff' },\r\n\t\t{ name: 'gainsboro', code: '#dcdcdc' },\r\n\t\t{ name: 'ghostwhite', code: '#f8f8ff' },\r\n\t\t{ name: 'gold', code: '#ffd700' },\r\n\t\t{ name: 'goldenrod', code: '#daa520' },\r\n\t\t{ name: 'gray', code: '#808080' },\r\n\t\t{ name: 'green', code: '#008000' },\r\n\t\t{ name: 'greenyellow', code: '#adff2f' },\r\n\t\t{ name: 'grey', code: '#808080' },\r\n\t\t{ name: 'honeydew', code: '#f0fff0' },\r\n\t\t{ name: 'hotpink', code: '#ff69b4' },\r\n\t\t{ name: 'indianred', code: '#cd5c5c' },\r\n\t\t{ name: 'indigo', code: '#4b0082' },\r\n\t\t{ name: 'ivory', code: '#fffff0' },\r\n\t\t{ name: 'khaki', code: '#f0e68c' },\r\n\t\t{ name: 'lavender', code: '#e6e6fa' },\r\n\t\t{ name: 'lavenderblush', code: '#fff0f5' },\r\n\t\t{ name: 'lawngreen', code: '#7cfc00' },\r\n\t\t{ name: 'lemonchiffon', code: '#fffacd' },\r\n\t\t{ name: 'lightblue', code: '#add8e6' },\r\n\t\t{ name: 'lightcoral', code: '#f08080' },\r\n\t\t{ name: 'lightcyan', code: '#e0ffff' },\r\n\t\t{ name: 'lightgoldenrodyellow', code: '#fafad2' },\r\n\t\t{ name: 'lightgray', code: '#d3d3d3' },\r\n\t\t{ name: 'lightgreen', code: '#90ee90' },\r\n\t\t{ name: 'lightgrey', code: '#d3d3d3' },\r\n\t\t{ name: 'lightpink', code: '#ffb6c1' },\r\n\t\t{ name: 'lightsalmon', code: '#ffa07a' },\r\n\t\t{ name: 'lightseagreen', code: '#20b2aa' },\r\n\t\t{ name: 'lightskyblue', code: '#87cefa' },\r\n\t\t{ name: 'lightslategray', code: '#778899' },\r\n\t\t{ name: 'lightslategrey', code: '#778899' },\r\n\t\t{ name: 'lightsteelblue', code: '#b0c4de' },\r\n\t\t{ name: 'lightyellow', code: '#ffffe0' },\r\n\t\t{ name: 'lime', code: '#00ff00' },\r\n\t\t{ name: 'limegreen', code: '#32cd32' },\r\n\t\t{ name: 'linen', code: '#faf0e6' },\r\n\t\t{ name: 'magenta', code: '#ff00ff' },\r\n\t\t{ name: 'maroon', code: '#800000' },\r\n\t\t{ name: 'mediumaquamarine', code: '#66cdaa' },\r\n\t\t{ name: 'mediumblue', code: '#0000cd' },\r\n\t\t{ name: 'mediumorchid', code: '#ba55d3' },\r\n\t\t{ name: 'mediumpurple', code: '#9370db' },\r\n\t\t{ name: 'mediumseagreen', code: '#3cb371' },\r\n\t\t{ name: 'mediumslateblue', code: '#7b68ee' },\r\n\t\t{ name: 'mediumspringgreen', code: '#00fa9a' },\r\n\t\t{ name: 'mediumturquoise', code: '#48d1cc' },\r\n\t\t{ name: 'mediumvioletred', code: '#c71585' },\r\n\t\t{ name: 'midnightblue', code: '#191970' },\r\n\t\t{ name: 'mintcream', code: '#f5fffa' },\r\n\t\t{ name: 'mistyrose', code: '#ffe4e1' },\r\n\t\t{ name: 'moccasin', code: '#ffe4b5' },\r\n\t\t{ name: 'navajowhite', code: '#ffdead' },\r\n\t\t{ name: 'navy', code: '#000080' },\r\n\t\t{ name: 'oldlace', code: '#fdf5e6' },\r\n\t\t{ name: 'olive', code: '#808000' },\r\n\t\t{ name: 'olivedrab', code: '#6b8e23' },\r\n\t\t{ name: 'orange', code: '#ffa500' },\r\n\t\t{ name: 'orangered', code: '#ff4500' },\r\n\t\t{ name: 'orchid', code: '#da70d6' },\r\n\t\t{ name: 'palegoldenrod', code: '#eee8aa' },\r\n\t\t{ name: 'palegreen', code: '#98fb98' },\r\n\t\t{ name: 'paleturquoise', code: '#afeeee' },\r\n\t\t{ name: 'palevioletred', code: '#db7093' },\r\n\t\t{ name: 'papayawhip', code: '#ffefd5' },\r\n\t\t{ name: 'peachpuff', code: '#ffdab9' },\r\n\t\t{ name: 'peru', code: '#cd853f' },\r\n\t\t{ name: 'pink', code: '#ffc0cb' },\r\n\t\t{ name: 'plum', code: '#dda0dd' },\r\n\t\t{ name: 'powderblue', code: '#b0e0e6' },\r\n\t\t{ name: 'purple', code: '#800080' },\r\n\t\t{ name: 'rebeccapurple', code: '#663399' },\r\n\t\t{ name: 'red', code: '#ff0000' },\r\n\t\t{ name: 'rosybrown', code: '#bc8f8f' },\r\n\t\t{ name: 'royalblue', code: '#4169e1' },\r\n\t\t{ name: 'saddlebrown', code: '#8b4513' },\r\n\t\t{ name: 'salmon', code: '#fa8072' },\r\n\t\t{ name: 'sandybrown', code: '#f4a460' },\r\n\t\t{ name: 'seagreen', code: '#2e8b57' },\r\n\t\t{ name: 'seashell', code: '#fff5ee' },\r\n\t\t{ name: 'sienna', code: '#a0522d' },\r\n\t\t{ name: 'silver', code: '#c0c0c0' },\r\n\t\t{ name: 'skyblue', code: '#87ceeb' },\r\n\t\t{ name: 'slateblue', code: '#6a5acd' },\r\n\t\t{ name: 'slategray', code: '#708090' },\r\n\t\t{ name: 'slategrey', code: '#708090' },\r\n\t\t{ name: 'snow', code: '#fffafa' },\r\n\t\t{ name: 'springgreen', code: '#00ff7f' },\r\n\t\t{ name: 'steelblue', code: '#4682b4' },\r\n\t\t{ name: 'tan', code: '#d2b48c' },\r\n\t\t{ name: 'teal', code: '#008080' },\r\n\t\t{ name: 'thistle', code: '#d8bfd8' },\r\n\t\t{ name: 'tomato', code: '#ff6347' },\r\n\t\t{ name: 'turquoise', code: '#40e0d0' },\r\n\t\t{ name: 'violet', code: '#ee82ee' },\r\n\t\t{ name: 'wheat', code: '#f5deb3' },\r\n\t\t{ name: 'white', code: '#ffffff' },\r\n\t\t{ name: 'whitesmoke', code: '#f5f5f5' },\r\n\t\t{ name: 'yellow', code: '#ffff00' },\r\n\t\t{ name: 'yellowgreen', code: '#9acd32' },\r\n\t]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "item",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "searchFn",
                    "args": [
                        {
                            "name": "o",
                            "type": ""
                        },
                        {
                            "name": "c",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "o",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "c",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackBy",
                    "args": [
                        {
                            "name": "idx",
                            "type": ""
                        },
                        {
                            "name": "color",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'lu-split-option-picker',\r\n\ttemplateUrl: './split-option-picker.component.html'\r\n})\r\nexport class SplitOptionPickerComponent {\r\n\tsearchFn(o, c) {\r\n\t\treturn o.name.startsWith(c);\r\n\t}\r\n\ttrackBy(idx, color): string {\r\n\t\treturn color.code;\r\n\t}\r\n\titem;\r\n\tcolors = [\r\n\t\t{ name: 'aliceblue', code: '#f0f8ff' },\r\n\t\t{ name: 'antiquewhite', code: '#faebd7' },\r\n\t\t{ name: 'aqua', code: '#00ffff' },\r\n\t\t{ name: 'aquamarine', code: '#7fffd4' },\r\n\t\t{ name: 'azure', code: '#f0ffff' },\r\n\t\t{ name: 'beige', code: '#f5f5dc' },\r\n\t\t{ name: 'bisque', code: '#ffe4c4' },\r\n\t\t{ name: 'black', code: '#000000' },\r\n\t\t{ name: 'blanchedalmond', code: '#ffebcd' },\r\n\t\t{ name: 'blue', code: '#0000ff' },\r\n\t\t{ name: 'blueviolet', code: '#8a2be2' },\r\n\t\t{ name: 'brown', code: '#a52a2a' },\r\n\t\t{ name: 'burlywood', code: '#deb887' },\r\n\t\t{ name: 'cadetblue', code: '#5f9ea0' },\r\n\t\t{ name: 'chartreuse', code: '#7fff00' },\r\n\t\t{ name: 'chocolate', code: '#d2691e' },\r\n\t\t{ name: 'coral', code: '#ff7f50' },\r\n\t\t{ name: 'cornflowerblue', code: '#6495ed' },\r\n\t\t{ name: 'cornsilk', code: '#fff8dc' },\r\n\t\t{ name: 'crimson', code: '#dc143c' },\r\n\t\t{ name: 'cyan', code: '#00ffff' },\r\n\t\t{ name: 'darkblue', code: '#00008b' },\r\n\t\t{ name: 'darkcyan', code: '#008b8b' },\r\n\t\t{ name: 'darkgoldenrod', code: '#b8860b' },\r\n\t\t{ name: 'darkgray', code: '#a9a9a9' },\r\n\t\t{ name: 'darkgreen', code: '#006400' },\r\n\t\t{ name: 'darkgrey', code: '#a9a9a9' },\r\n\t\t{ name: 'darkkhaki', code: '#bdb76b' },\r\n\t\t{ name: 'darkmagenta', code: '#8b008b' },\r\n\t\t{ name: 'darkolivegreen', code: '#556b2f' },\r\n\t\t{ name: 'darkorange', code: '#ff8c00' },\r\n\t\t{ name: 'darkorchid', code: '#9932cc' },\r\n\t\t{ name: 'darkred', code: '#8b0000' },\r\n\t\t{ name: 'darksalmon', code: '#e9967a' },\r\n\t\t{ name: 'darkseagreen', code: '#8fbc8f' },\r\n\t\t{ name: 'darkslateblue', code: '#483d8b' },\r\n\t\t{ name: 'darkslategray', code: '#2f4f4f' },\r\n\t\t{ name: 'darkslategrey', code: '#2f4f4f' },\r\n\t\t{ name: 'darkturquoise', code: '#00ced1' },\r\n\t\t{ name: 'darkviolet', code: '#9400d3' },\r\n\t\t{ name: 'deeppink', code: '#ff1493' },\r\n\t\t{ name: 'deepskyblue', code: '#00bfff' },\r\n\t\t{ name: 'dimgray', code: '#696969' },\r\n\t\t{ name: 'dimgrey', code: '#696969' },\r\n\t\t{ name: 'dodgerblue', code: '#1e90ff' },\r\n\t\t{ name: 'firebrick', code: '#b22222' },\r\n\t\t{ name: 'floralwhite', code: '#fffaf0' },\r\n\t\t{ name: 'forestgreen', code: '#228b22' },\r\n\t\t{ name: 'fuchsia', code: '#ff00ff' },\r\n\t\t{ name: 'gainsboro', code: '#dcdcdc' },\r\n\t\t{ name: 'ghostwhite', code: '#f8f8ff' },\r\n\t\t{ name: 'gold', code: '#ffd700' },\r\n\t\t{ name: 'goldenrod', code: '#daa520' },\r\n\t\t{ name: 'gray', code: '#808080' },\r\n\t\t{ name: 'green', code: '#008000' },\r\n\t\t{ name: 'greenyellow', code: '#adff2f' },\r\n\t\t{ name: 'grey', code: '#808080' },\r\n\t\t{ name: 'honeydew', code: '#f0fff0' },\r\n\t\t{ name: 'hotpink', code: '#ff69b4' },\r\n\t\t{ name: 'indianred', code: '#cd5c5c' },\r\n\t\t{ name: 'indigo', code: '#4b0082' },\r\n\t\t{ name: 'ivory', code: '#fffff0' },\r\n\t\t{ name: 'khaki', code: '#f0e68c' },\r\n\t\t{ name: 'lavender', code: '#e6e6fa' },\r\n\t\t{ name: 'lavenderblush', code: '#fff0f5' },\r\n\t\t{ name: 'lawngreen', code: '#7cfc00' },\r\n\t\t{ name: 'lemonchiffon', code: '#fffacd' },\r\n\t\t{ name: 'lightblue', code: '#add8e6' },\r\n\t\t{ name: 'lightcoral', code: '#f08080' },\r\n\t\t{ name: 'lightcyan', code: '#e0ffff' },\r\n\t\t{ name: 'lightgoldenrodyellow', code: '#fafad2' },\r\n\t\t{ name: 'lightgray', code: '#d3d3d3' },\r\n\t\t{ name: 'lightgreen', code: '#90ee90' },\r\n\t\t{ name: 'lightgrey', code: '#d3d3d3' },\r\n\t\t{ name: 'lightpink', code: '#ffb6c1' },\r\n\t\t{ name: 'lightsalmon', code: '#ffa07a' },\r\n\t\t{ name: 'lightseagreen', code: '#20b2aa' },\r\n\t\t{ name: 'lightskyblue', code: '#87cefa' },\r\n\t\t{ name: 'lightslategray', code: '#778899' },\r\n\t\t{ name: 'lightslategrey', code: '#778899' },\r\n\t\t{ name: 'lightsteelblue', code: '#b0c4de' },\r\n\t\t{ name: 'lightyellow', code: '#ffffe0' },\r\n\t\t{ name: 'lime', code: '#00ff00' },\r\n\t\t{ name: 'limegreen', code: '#32cd32' },\r\n\t\t{ name: 'linen', code: '#faf0e6' },\r\n\t\t{ name: 'magenta', code: '#ff00ff' },\r\n\t\t{ name: 'maroon', code: '#800000' },\r\n\t\t{ name: 'mediumaquamarine', code: '#66cdaa' },\r\n\t\t{ name: 'mediumblue', code: '#0000cd' },\r\n\t\t{ name: 'mediumorchid', code: '#ba55d3' },\r\n\t\t{ name: 'mediumpurple', code: '#9370db' },\r\n\t\t{ name: 'mediumseagreen', code: '#3cb371' },\r\n\t\t{ name: 'mediumslateblue', code: '#7b68ee' },\r\n\t\t{ name: 'mediumspringgreen', code: '#00fa9a' },\r\n\t\t{ name: 'mediumturquoise', code: '#48d1cc' },\r\n\t\t{ name: 'mediumvioletred', code: '#c71585' },\r\n\t\t{ name: 'midnightblue', code: '#191970' },\r\n\t\t{ name: 'mintcream', code: '#f5fffa' },\r\n\t\t{ name: 'mistyrose', code: '#ffe4e1' },\r\n\t\t{ name: 'moccasin', code: '#ffe4b5' },\r\n\t\t{ name: 'navajowhite', code: '#ffdead' },\r\n\t\t{ name: 'navy', code: '#000080' },\r\n\t\t{ name: 'oldlace', code: '#fdf5e6' },\r\n\t\t{ name: 'olive', code: '#808000' },\r\n\t\t{ name: 'olivedrab', code: '#6b8e23' },\r\n\t\t{ name: 'orange', code: '#ffa500' },\r\n\t\t{ name: 'orangered', code: '#ff4500' },\r\n\t\t{ name: 'orchid', code: '#da70d6' },\r\n\t\t{ name: 'palegoldenrod', code: '#eee8aa' },\r\n\t\t{ name: 'palegreen', code: '#98fb98' },\r\n\t\t{ name: 'paleturquoise', code: '#afeeee' },\r\n\t\t{ name: 'palevioletred', code: '#db7093' },\r\n\t\t{ name: 'papayawhip', code: '#ffefd5' },\r\n\t\t{ name: 'peachpuff', code: '#ffdab9' },\r\n\t\t{ name: 'peru', code: '#cd853f' },\r\n\t\t{ name: 'pink', code: '#ffc0cb' },\r\n\t\t{ name: 'plum', code: '#dda0dd' },\r\n\t\t{ name: 'powderblue', code: '#b0e0e6' },\r\n\t\t{ name: 'purple', code: '#800080' },\r\n\t\t{ name: 'rebeccapurple', code: '#663399' },\r\n\t\t{ name: 'red', code: '#ff0000' },\r\n\t\t{ name: 'rosybrown', code: '#bc8f8f' },\r\n\t\t{ name: 'royalblue', code: '#4169e1' },\r\n\t\t{ name: 'saddlebrown', code: '#8b4513' },\r\n\t\t{ name: 'salmon', code: '#fa8072' },\r\n\t\t{ name: 'sandybrown', code: '#f4a460' },\r\n\t\t{ name: 'seagreen', code: '#2e8b57' },\r\n\t\t{ name: 'seashell', code: '#fff5ee' },\r\n\t\t{ name: 'sienna', code: '#a0522d' },\r\n\t\t{ name: 'silver', code: '#c0c0c0' },\r\n\t\t{ name: 'skyblue', code: '#87ceeb' },\r\n\t\t{ name: 'slateblue', code: '#6a5acd' },\r\n\t\t{ name: 'slategray', code: '#708090' },\r\n\t\t{ name: 'slategrey', code: '#708090' },\r\n\t\t{ name: 'snow', code: '#fffafa' },\r\n\t\t{ name: 'springgreen', code: '#00ff7f' },\r\n\t\t{ name: 'steelblue', code: '#4682b4' },\r\n\t\t{ name: 'tan', code: '#d2b48c' },\r\n\t\t{ name: 'teal', code: '#008080' },\r\n\t\t{ name: 'thistle', code: '#d8bfd8' },\r\n\t\t{ name: 'tomato', code: '#ff6347' },\r\n\t\t{ name: 'turquoise', code: '#40e0d0' },\r\n\t\t{ name: 'violet', code: '#ee82ee' },\r\n\t\t{ name: 'wheat', code: '#f5deb3' },\r\n\t\t{ name: 'white', code: '#ffffff' },\r\n\t\t{ name: 'whitesmoke', code: '#f5f5f5' },\r\n\t\t{ name: 'yellow', code: '#ffff00' },\r\n\t\t{ name: 'yellowgreen', code: '#9acd32' },\r\n\t];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>split-option-picker</h1>\r\n<h2>standard option picker - no operators</h2>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<span *luDisplayer=\"let value\">{{value}}</span>\r\n\t\t<lu-option-picker>\r\n\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t<lu-option value=\"2\">2</lu-option>\r\n\t\t</lu-option-picker>\r\n\t</lu-select>\r\n</div>\r\n<h2>advanced option picker - still no operators</h2>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<span *luDisplayer=\"let value\">{{value}}</span>\r\n\t\t<lu-option-picker-advanced>\r\n\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t<lu-option value=\"2\">2</lu-option>\r\n\t\t</lu-option-picker-advanced>\r\n\t</lu-select>\r\n</div>\r\n<h2>advanced option picker - with operators</h2>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{value.name}}</ng-container>\r\n\t\t<lu-option-picker-advanced>\r\n\t\t\t<!-- transforms the colors array to be passed between operators -->\r\n\t\t\t<lu-option-feeder [options]=\"colors\"></lu-option-feeder>\r\n\t\t\t<!-- allows you to filter said colors -->\r\n\t\t\t<lu-option-searcher [searchFn]=\"searchFn\"></lu-option-searcher>\r\n\t\t\t<!-- adds paging to the results to not break your DOM -->\r\n\t\t\t<lu-option-pager></lu-option-pager>\r\n\t\t\t<!-- specify the template to display each color -->\r\n\t\t\t<lu-option *luForOptions=\"let color; trackBy: trackBy\" [value]=\"color\">{{color.name}}</lu-option>\r\n\t\t</lu-option-picker-advanced>\r\n\t</lu-select>\r\n</div>"
        },
        {
            "name": "SplitSelectComponent",
            "id": "component-SplitSelectComponent-ccd877d2aa5213c55533960a9016c6c6",
            "file": "packages/ng/applications/sandbox/src/app/issues/split-select/split-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-split-select",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./split-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "item",
                    "defaultValue": "{ id: 1, name: 'initial value' }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "option",
                    "defaultValue": "{ id: 2, name: 'option' }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n\tselector: 'lu-split-select',\r\n\ttemplateUrl: './split-select.component.html'\r\n})\r\nexport class SplitSelectComponent {\r\n\titem = { id: 1, name: 'initial value' };\r\n\toption = { id: 2, name: 'option' };\r\n\tformControl = new FormControl();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>split-select</h1>\r\n<h2>classic select</h2>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{ value.name }}</ng-container>\r\n\t\t<lu-option-picker>\r\n\t\t\t<lu-option [value]=\"option\">{{option.name}}</lu-option>\r\n\t\t</lu-option-picker>\r\n\t\t<lu-input-clearer></lu-input-clearer>\r\n\t</lu-select>\r\n\t<label class=\"textfield-label\">select basic</label>\r\n</div>\r\n<h2>api select</h2>\r\n<div class=\"textfield\">\r\n\t<lu-api-select class=\"textfield-input\" [(ngModel)]=\"item\" api=\"/api/v3/departments\"></lu-api-select>\r\n\t<label class=\"textfield-label\">api select basic</label>\r\n</div>\r\n<div class=\"textfield\">\r\n\t<lu-api-select class=\"textfield-input\" [(ngModel)]=\"item\" api=\"/api/v3/departments\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{ value | json }}</ng-container>\r\n\t</lu-api-select>\r\n\t<label class=\"textfield-label\">api select with custom displayer</label>\r\n</div>\r\n<h2>user select</h2>\r\n<div class=\"textfield\">\r\n\t<lu-user-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t</lu-user-select>\r\n\t<label class=\"textfield-label\">user select basic</label>\r\n</div>\r\n<div class=\"textfield\">\r\n\t<lu-user-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{ value | json }}</ng-container>\r\n\t</lu-user-select>\r\n\t<label class=\"textfield-label\">user select with custom displayer</label>\r\n</div>\r\n\r\n<h2>touched</h2>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [formControl]=\"formControl\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{ value.name }}</ng-container>\r\n\t\t<lu-option-picker>\r\n\t\t\t<lu-option [value]=\"option\">{{option.name}}</lu-option>\r\n\t\t</lu-option-picker>\r\n\t\t<lu-input-clearer></lu-input-clearer>\r\n\t</lu-select>\r\n\t<label class=\"textfield-label\">select basic</label>\r\n</div>\r\n<pre>\r\n\t{{formControl.touched}}\r\n</pre>"
        },
        {
            "name": "StyleSelectChipsComponent",
            "id": "component-StyleSelectChipsComponent-65bafea01d863fc7ce54e1f6a4c70fbb",
            "file": "packages/ng/applications/sandbox/src/app/issues/style-select-chips/style-select-chips.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sand-style-select-chips",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./style-select-chips.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "blue",
                    "defaultValue": "{ id: 7, name: 'blue' }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "green",
                    "defaultValue": "{ id: 2, name: 'green' }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "item",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "items",
                    "defaultValue": "[this.red, this.blue]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "model",
                    "defaultValue": "'1'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "orange",
                    "defaultValue": "{ id: 4, name: 'orange' }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "pink",
                    "defaultValue": "{ id: 6, name: 'pink' }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "purple",
                    "defaultValue": "{ id: 5, name: 'purple' }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "red",
                    "defaultValue": "{ id: 1, name: 'red' }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "yellow",
                    "defaultValue": "{ id: 3, name: 'yellow' }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'sand-style-select-chips',\r\n\ttemplateUrl: './style-select-chips.component.html'\r\n})\r\nexport class StyleSelectChipsComponent {\r\n\titem;\r\n\tmodel = '1';\r\n\tred = { id: 1, name: 'red' };\r\n\tgreen = { id: 2, name: 'green' };\r\n\tyellow = { id: 3, name: 'yellow' };\r\n\torange = { id: 4, name: 'orange' };\r\n\tpurple = { id: 5, name: 'purple' };\r\n\tpink = { id: 6, name: 'pink' };\r\n\tblue = { id: 7, name: 'blue' };\r\n\titems = [this.red, this.blue];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<section style=\"background:white; padding: 3rem;\">\r\n\r\n\t<h1>Stylefixes for Selects Framed</h1>\r\n\r\n\t<h2>Filters header selects</h2>\r\n\t<div class=\"filters u-marginBottomBig\">\r\n\t\t<div class=\"textfield mod-filter\">\r\n\t\t\t<lu-select class=\"textfield-input\" [(ngModel)]=\"model\">\r\n\t\t\t\t<span *luDisplayer=\"let value\">{{value}}</span>\r\n\t\t\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t\t\t<lu-option-picker>\r\n\t\t\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t\t\t<lu-option value=\"oezifjoiezjf ezeofijezo fijze fojizefzfzeof ezf\">oezifjoiezjf ezeofijezo fijze fojizefzfzeof\r\n\t\t\t\t\t\tezf\r\n\t\t\t\t\t</lu-option>\r\n\t\t\t\t</lu-option-picker>\r\n\t\t\t</lu-select>\r\n\t\t\t<label class=\"textfield-label\">Textfield label</label>\r\n\t\t</div>\r\n\t\t<div class=\"textfield mod-filter\">\r\n\t\t\t<lu-select class=\"textfield-input\" [(ngModel)]=\"items\" multiple=\"true\">\r\n\t\t\t\t<span *luDisplayer=\"let values; multiple: true\">{{values.length}} items</span>\r\n\t\t\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t\t\t<lu-option-picker>\r\n\t\t\t\t\t<lu-option [value]=\"green\">{{green.name}}</lu-option>\r\n\t\t\t\t\t<lu-option [value]=\"red\">{{red.name}}</lu-option>\r\n\t\t\t\t\t<lu-option [value]=\"yellow\">{{yellow.name}}</lu-option>\r\n\t\t\t\t\t<lu-option [value]=\"orange\">{{orange.name}}</lu-option>\r\n\t\t\t\t\t<lu-option [value]=\"purple\">{{purple.name}}</lu-option>\r\n\t\t\t\t\t<lu-option [value]=\"pink\">{{pink.name}}</lu-option>\r\n\t\t\t\t\t<lu-option [value]=\"blue\">{{blue.name}}</lu-option>\r\n\t\t\t\t</lu-option-picker>\r\n\t\t\t</lu-select>\r\n\t\t\t<label class=\"textfield-label\">Textfield label</label>\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<h2>Classic selects</h2>\r\n\t<div class=\"form-group\">\r\n\t\t<div class=\"textfield\">\r\n\t\t\t<lu-select class=\"textfield-input\" [(ngModel)]=\"model\">\r\n\t\t\t\t<span *luDisplayer=\"let value\">{{value}}</span>\r\n\t\t\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t\t\t<lu-option-picker>\r\n\t\t\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t\t\t<lu-option value=\"oezifjoiezjf ezeofijezo fijze fojizefzfzeof ezf\">oezifjoiezjf ezeofijezo fijze fojizefzfzeof\r\n\t\t\t\t\t\tezf</lu-option>\r\n\t\t\t\t</lu-option-picker>\r\n\t\t\t</lu-select>\r\n\t\t\t<label class=\"textfield-label\">Select single</label>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class=\"form-group\">\r\n\t\t<div class=\"textfield\">\r\n\t\t\t<lu-select [(ngModel)]=\"items\" class=\"textfield-input\" multiple>\r\n\t\t\t\t<ng-container *luDisplayer=\"let values; multiple: true\">\r\n\t\t\t\t\t<span class=\"label\">{{values?.length || 0}}</span> colors selected\r\n\t\t\t\t</ng-container>\r\n\t\t\t\t<lu-option-picker>\r\n\t\t\t\t\t<lu-option [value]=\"green\">{{green.name}}</lu-option>\r\n\t\t\t\t\t<lu-option [value]=\"red\">{{red.name}}</lu-option>\r\n\t\t\t\t\t<lu-option [value]=\"yellow\">{{yellow.name}}</lu-option>\r\n\t\t\t\t\t<lu-option [value]=\"orange\">{{orange.name}}</lu-option>\r\n\t\t\t\t\t<lu-option [value]=\"purple\">{{purple.name}}</lu-option>\r\n\t\t\t\t\t<lu-option [value]=\"pink\">{{pink.name}}</lu-option>\r\n\t\t\t\t\t<lu-option [value]=\"blue\">{{blue.name}}</lu-option>\r\n\t\t\t\t</lu-option-picker>\r\n\t\t\t\t<lu-input-clearer></lu-input-clearer>\r\n\t\t\t</lu-select>\r\n\t\t\t<label class=\"textfield-label\" for=\"itemOptions\">Select multiple onelinge</label>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class=\"form-group\">\r\n\t\t<div class=\"textfield\">\r\n\t\t\t<lu-select [(ngModel)]=\"items\" class=\"textfield-input\" multiple>\r\n\t\t\t\t<span class=\"chip mod-unkillable\" *luDisplayer=\"let value\">{{value.name}}</span>\r\n\t\t\t\t<lu-option-picker>\r\n\t\t\t\t\t<lu-option [value]=\"green\">{{green.name}}</lu-option>\r\n\t\t\t\t\t<lu-option [value]=\"red\">{{red.name}}</lu-option>\r\n\t\t\t\t\t<lu-option [value]=\"yellow\">{{yellow.name}}</lu-option>\r\n\t\t\t\t\t<lu-option [value]=\"orange\">{{orange.name}}</lu-option>\r\n\t\t\t\t\t<lu-option [value]=\"purple\">{{purple.name}}</lu-option>\r\n\t\t\t\t\t<lu-option [value]=\"pink\">{{pink.name}}</lu-option>\r\n\t\t\t\t\t<lu-option [value]=\"blue\">{{blue.name}}</lu-option>\r\n\t\t\t\t</lu-option-picker>\r\n\t\t\t\t<lu-input-clearer></lu-input-clearer>\r\n\t\t\t</lu-select>\r\n\t\t\t<label class=\"textfield-label\" for=\"itemOptions\">Select multiple all values</label>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class=\"form-group\">\r\n\t\t<div class=\"textfield mod-small\">\r\n\t\t\t<lu-select class=\"textfield-input\" [(ngModel)]=\"model\">\r\n\t\t\t\t<span *luDisplayer=\"let value\">{{value}}</span>\r\n\t\t\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t\t\t<lu-option-picker>\r\n\t\t\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t\t\t<lu-option value=\"oezifjoiezjf ezeofijezo fijze fojizefzfzeof ezf\">oezifjoiezjf ezeofijezo fijze fojizefzfzeof\r\n\t\t\t\t\t\tezf</lu-option>\r\n\t\t\t\t</lu-option-picker>\r\n\t\t\t</lu-select>\r\n\t\t\t<label class=\"textfield-label\">Select mod-small single</label>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class=\"form-group\">\r\n\t\t<div class=\"textfield\">\r\n\t\t\t<input class=\"textfield-input\" type=\"text\" value=\"Filter\">\r\n\t\t\t<label class=\"textfield-label\">Textfield classic</label>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class=\"form-group\">\r\n\t\t<div class=\"textfield mod-small\">\r\n\t\t\t<input class=\"textfield-input\" type=\"text\" value=\"Filter\">\r\n\t\t\t<label class=\"textfield-label\">Textfield mod-small classic</label>\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<div class=\"textfield mod-framed\">\r\n\t\t<input class=\"textfield-input\" value=\"Filter\">\r\n\t\t<label class=\"textfield-label\">Textfield framed</label>\r\n\t</div>\r\n\r\n\t<div class=\"textfield mod-framed\">\r\n\t\t<lu-select class=\"textfield-input\" [(ngModel)]=\"model\">\r\n\t\t\t<span *luDisplayer=\"let value\">{{value}}</span>\r\n\t\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t\t<lu-option-picker>\r\n\t\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t\t<lu-option value=\"oezifjoiezjf ezeofijezo fijze fojizefzfzeof ezf\">oezifjoiezjf ezeofijezo fijze\r\n\t\t\t\t\tfojizefzfzeof ezf\r\n\t\t\t\t</lu-option>\r\n\t\t\t</lu-option-picker>\r\n\t\t</lu-select>\r\n\t\t<label class=\"textfield-label\">Select single mod-framed</label>\r\n\t</div>\r\n\r\n\t<div class=\"textfield mod-framed\">\r\n\t\t<lu-select [(ngModel)]=\"items\" class=\"textfield-input\" multiple>\r\n\t\t\t<ng-container *luDisplayer=\"let values; multiple: true\">\r\n\t\t\t\t<span class=\"label\">{{values?.length || 0}}</span> colors selected\r\n\t\t\t</ng-container>\r\n\t\t\t<lu-option-picker>\r\n\t\t\t\t<lu-option [value]=\"green\">{{green.name}}</lu-option>\r\n\t\t\t\t<lu-option [value]=\"red\">{{red.name}}</lu-option>\r\n\t\t\t\t<lu-option [value]=\"yellow\">{{yellow.name}}</lu-option>\r\n\t\t\t\t<lu-option [value]=\"orange\">{{orange.name}}</lu-option>\r\n\t\t\t\t<lu-option [value]=\"purple\">{{purple.name}}</lu-option>\r\n\t\t\t\t<lu-option [value]=\"pink\">{{pink.name}}</lu-option>\r\n\t\t\t\t<lu-option [value]=\"blue\">{{blue.name}}</lu-option>\r\n\t\t\t</lu-option-picker>\r\n\t\t\t<lu-input-clearer></lu-input-clearer>\r\n\t\t</lu-select>\r\n\t\t<label class=\"textfield-label\" for=\"itemOptions\">Select multiple onelinge</label>\r\n\t</div>\r\n\r\n\t<h2>Select mod framed</h2>\r\n\t<div class=\"form mod-framed\">\r\n\t\t<div class=\"form-group\">\r\n\t\t\t<div class=\"form-group-line\">\r\n\t\t\t\t<div class=\"form-group-line-lg3\">\r\n\t\t\t\t\t<div class=\"textfield mod-framed\">\r\n\t\t\t\t\t\t<input class=\"textfield-input\" value=\"Filter\">\r\n\t\t\t\t\t\t<label class=\"textfield-label\">Textfield framed</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"form-group-line-lg3\">\r\n\t\t\t\t\t<div class=\"textfield mod-framed\">\r\n\t\t\t\t\t\t<lu-select class=\"textfield-input\" [(ngModel)]=\"model\">\r\n\t\t\t\t\t\t\t<span *luDisplayer=\"let value\">{{value}}</span>\r\n\t\t\t\t\t\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t\t\t\t\t\t<lu-option-picker>\r\n\t\t\t\t\t\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option value=\"oezifjoiezjf ezeofijezo fijze fojizefzfzeof ezf\">oezifjoiezjf ezeofijezo fijze\r\n\t\t\t\t\t\t\t\t\tfojizefzfzeof ezf\r\n\t\t\t\t\t\t\t\t</lu-option>\r\n\t\t\t\t\t\t\t</lu-option-picker>\r\n\t\t\t\t\t\t</lu-select>\r\n\t\t\t\t\t\t<label class=\"textfield-label\">Select single mod-framed</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"form-group-line-lg3\">\r\n\t\t\t\t\t<div class=\"textfield mod-framed\">\r\n\t\t\t\t\t\t<lu-select [(ngModel)]=\"items\" class=\"textfield-input\" multiple>\r\n\t\t\t\t\t\t\t<ng-container *luDisplayer=\"let values; multiple: true\">\r\n\t\t\t\t\t\t\t\t<span class=\"label\">{{values?.length || 0}}</span> colors selected\r\n\t\t\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t\t\t<lu-option-picker>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"green\">{{green.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"red\">{{red.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"yellow\">{{yellow.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"orange\">{{orange.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"purple\">{{purple.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"pink\">{{pink.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"blue\">{{blue.name}}</lu-option>\r\n\t\t\t\t\t\t\t</lu-option-picker>\r\n\t\t\t\t\t\t\t<lu-input-clearer></lu-input-clearer>\r\n\t\t\t\t\t\t</lu-select>\r\n\t\t\t\t\t\t<label class=\"textfield-label\" for=\"itemOptions\">Select multiple onelinge</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"form-group-line-lg3\">\r\n\t\t\t\t\t<div class=\"textfield mod-framed\">\r\n\t\t\t\t\t\t<lu-select [(ngModel)]=\"items\" class=\"textfield-input\" multiple>\r\n\t\t\t\t\t\t\t<span class=\"chip mod-unkillable\" *luDisplayer=\"let value\">{{value.name}}</span>\r\n\t\t\t\t\t\t\t<lu-option-picker>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"green\">{{green.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"red\">{{red.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"yellow\">{{yellow.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"orange\">{{orange.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"purple\">{{purple.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"pink\">{{pink.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"blue\">{{blue.name}}</lu-option>\r\n\t\t\t\t\t\t\t</lu-option-picker>\r\n\t\t\t\t\t\t\t<lu-input-clearer></lu-input-clearer>\r\n\t\t\t\t\t\t</lu-select>\r\n\t\t\t\t\t\t<label class=\"textfield-label\" for=\"itemOptions\">Select multiple all values</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<div class=\"form mod-framed\">\r\n\t\t<div class=\"form-group\">\r\n\t\t\t<div class=\"form-group-line\">\r\n\t\t\t\t<div class=\"form-group-line-lg3\">\r\n\t\t\t\t\t<div class=\"textfield mod-framed mod-small\">\r\n\t\t\t\t\t\t<input class=\"textfield-input\" value=\"Filter\">\r\n\t\t\t\t\t\t<label class=\"textfield-label\">Textfield framed</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"form-group-line-lg3\">\r\n\t\t\t\t\t<div class=\"textfield mod-framed mod-small\">\r\n\t\t\t\t\t\t<lu-select class=\"textfield-input\" [(ngModel)]=\"model\">\r\n\t\t\t\t\t\t\t<span *luDisplayer=\"let value\">{{value}}</span>\r\n\t\t\t\t\t\t\t<lu-input-clearer *ngIf=\"true\"></lu-input-clearer>\r\n\t\t\t\t\t\t\t<lu-option-picker>\r\n\t\t\t\t\t\t\t\t<lu-option value=\"1\">1</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option value=\"oezifjoiezjf ezeofijezo fijze fojizefzfzeof ezf\">oezifjoiezjf ezeofijezo fijze\r\n\t\t\t\t\t\t\t\t\tfojizefzfzeof ezf\r\n\t\t\t\t\t\t\t\t</lu-option>\r\n\t\t\t\t\t\t\t</lu-option-picker>\r\n\t\t\t\t\t\t</lu-select>\r\n\t\t\t\t\t\t<label class=\"textfield-label\">Select single mod-framed mod-small</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"form-group-line-lg3\">\r\n\t\t\t\t\t<div class=\"textfield mod-framed mod-small\">\r\n\t\t\t\t\t\t<lu-select [(ngModel)]=\"items\" class=\"textfield-input\" multiple>\r\n\t\t\t\t\t\t\t<ng-container *luDisplayer=\"let values; multiple: true\">\r\n\t\t\t\t\t\t\t\t<span class=\"label\">{{values?.length || 0}}</span> colors selected\r\n\t\t\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t\t\t<lu-option-picker>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"green\">{{green.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"red\">{{red.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"yellow\">{{yellow.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"blue\">{{blue.name}}</lu-option>\r\n\t\t\t\t\t\t\t</lu-option-picker>\r\n\t\t\t\t\t\t\t<lu-input-clearer></lu-input-clearer>\r\n\t\t\t\t\t\t</lu-select>\r\n\t\t\t\t\t\t<label class=\"textfield-label\" for=\"itemOptions\">Select multiple onelinge</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"form-group-line-lg3\">\r\n\t\t\t\t\t<div class=\"textfield mod-framed mod-small\">\r\n\t\t\t\t\t\t<lu-select [(ngModel)]=\"items\" class=\"textfield-input\" multiple>\r\n\t\t\t\t\t\t\t<span class=\"chip mod-unkillable\" *luDisplayer=\"let value\">{{value.name}}</span>\r\n\t\t\t\t\t\t\t<lu-option-picker>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"green\">{{green.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"red\">{{red.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"yellow\">{{yellow.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"blue\">{{blue.name}}</lu-option>\r\n\t\t\t\t\t\t\t</lu-option-picker>\r\n\t\t\t\t\t\t\t<lu-input-clearer></lu-input-clearer>\r\n\t\t\t\t\t\t</lu-select>\r\n\t\t\t\t\t\t<label class=\"textfield-label\" for=\"itemOptions\">Select multiple all values</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class=\"form mod-framed\">\r\n\t\t<div class=\"form-group\">\r\n\t\t\t<div class=\"form-group-line\">\r\n\t\t\t\t<div class=\"form-group-line-lg3\">\r\n\t\t\t\t\t<div class=\"textfield mod-framed\">\r\n\t\t\t\t\t\t<lu-select [(ngModel)]=\"items\" class=\"textfield-input\" multiple>\r\n\t\t\t\t\t\t\t<ng-container *luDisplayer=\"let values; multiple: true\">\r\n\t\t\t\t\t\t\t\t<span class=\"label\">{{values?.length || 0}}</span> colors selected\r\n\t\t\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t\t\t<lu-option-picker>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"green\">{{green.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"red\">{{red.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"yellow\">{{yellow.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"blue\">{{blue.name}}</lu-option>\r\n\t\t\t\t\t\t\t</lu-option-picker>\r\n\t\t\t\t\t\t\t<lu-input-clearer></lu-input-clearer>\r\n\t\t\t\t\t\t</lu-select>\r\n\t\t\t\t\t\t<label class=\"textfield-label\" for=\"itemOptions\">Select multiple onelinge</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"form-group-line-lg3\">\r\n\t\t\t\t\t<div class=\"textfield mod-framed\">\r\n\t\t\t\t\t\t<lu-api-select class=\"textfield-input\" [(ngModel)]=\"item\" api=\"/api/v3/axissections\"></lu-api-select>\r\n\t\t\t\t\t\t<label class=\"textfield-label\" for=\"itemOptions\">Lu Api</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"form-group-line-lg3\">\r\n\t\t\t\t\t<div class=\"textfield mod-framed mod-small\">\r\n\t\t\t\t\t\t<lu-select [(ngModel)]=\"items\" class=\"textfield-input\" multiple>\r\n\t\t\t\t\t\t\t<ng-container *luDisplayer=\"let values; multiple: true\">\r\n\t\t\t\t\t\t\t\t<span class=\"label\">{{values?.length || 0}}</span> colors selected\r\n\t\t\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t\t\t<lu-option-picker>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"green\">{{green.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"red\">{{red.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"yellow\">{{yellow.name}}</lu-option>\r\n\t\t\t\t\t\t\t\t<lu-option [value]=\"blue\">{{blue.name}}</lu-option>\r\n\t\t\t\t\t\t\t</lu-option-picker>\r\n\t\t\t\t\t\t\t<lu-input-clearer></lu-input-clearer>\r\n\t\t\t\t\t\t</lu-select>\r\n\t\t\t\t\t\t<label class=\"textfield-label\" for=\"itemOptions\">Select multiple onelinge</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"form-group-line-lg3\">\r\n\t\t\t\t\t<div class=\"textfield mod-framed mod-small\">\r\n\t\t\t\t\t\t<lu-api-select class=\"textfield-input\" [(ngModel)]=\"item\" api=\"/api/v3/axissections\"></lu-api-select>\r\n\t\t\t\t\t\t<label class=\"textfield-label\" for=\"itemOptions\">Lu Api</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t\r\n</section>\r\n"
        },
        {
            "name": "SyncModalContent",
            "id": "component-SyncModalContent-8660abe2fb43f80c733de155cef6e87d",
            "file": "packages/ng/applications/sandbox/src/app/issues/modal-synched/modal-synched.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-sync-modal-content",
            "styleUrls": [],
            "styles": [],
            "template": "the submit on this modal resolves synchronously\t",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "submitAction",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "title",
                    "defaultValue": "'title'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { LuModal } from '@lucca-front/ng/modal';\r\nimport { of } from 'rxjs';\r\nimport { delay } from 'rxjs/operators';\r\n\r\n@Component({\r\n\tselector: 'lu-modal-synched',\r\n\ttemplateUrl: './modal-synched.component.html'\r\n})\r\nexport class ModalSynchedComponent {\r\n\tconstructor(\r\n\t\tprivate _modal: LuModal,\r\n\t) {}\r\n\topenSyncModal() {\r\n\t\tthis._modal.open(SyncModalContent);\r\n\t}\r\n\topenAsyncModal() {\r\n\t\tthis._modal.open(AsyncModalContent);\r\n\t}\r\n}\r\n@Component({\r\n\tselector: 'lu-sync-modal-content',\r\n\ttemplate: `the submit on this modal resolves synchronously\r\n\t`\r\n})\r\nexport class SyncModalContent {\r\n\ttitle = 'title';\r\n\tsubmitAction = () => true;\r\n}\r\n@Component({\r\n\tselector: 'lu-async-modal-content',\r\n\ttemplate: `the submit on this modal resolves asynchronously\r\n\t`\r\n})\r\nexport class AsyncModalContent {\r\n\ttitle = 'title';\r\n\tsubmitAction = () => of(true).pipe(delay(500));\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "TreePickerAdvancedComponent",
            "id": "component-TreePickerAdvancedComponent-c1f803726a9269fe7ac9baebb3c8e52a",
            "file": "packages/ng/applications/sandbox/src/app/issues/tree-picker-advanced/tree-picker-advanced.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-tree-picker-advanced",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tree-picker-advanced.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collection",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "item",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "options",
                    "defaultValue": "[{\r\n\t\tvalue: node1,\r\n\t\tchildren: [\r\n\t\t\t{ value: node11, children: [ { value: node111, children: [] } ] },\r\n\t\t\t{ value: node12, children: [] },\r\n\t\t]\r\n\t}, {\r\n\t\tvalue: node2,\r\n\t\tchildren: [ { value: node21, children: [] }]\r\n\t}]",
                    "type": "ILuTree<literal type>[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "searchFn",
                    "args": [
                        {
                            "name": "o",
                            "type": ""
                        },
                        {
                            "name": "c",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "o",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "c",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ILuTree } from '@lucca-front/ng/core';\r\n\r\nconst node1 = { id: 1, name: 'root 1' };\r\nconst node11 = { id: 11, name: 'node 1.1' };\r\nconst node111 = { id: 111, name: 'leaf 1.1.1' };\r\nconst node12 = { id: 11, name: 'node 1.2' };\r\nconst node2 = { id: 2, name: 'root 2' };\r\nconst node21 = { id: 21, name: 'node 2.1' };\r\n\r\n@Component({\r\n\tselector: 'lu-tree-picker-advanced',\r\n\ttemplateUrl: './tree-picker-advanced.component.html'\r\n})\r\nexport class TreePickerAdvancedComponent {\r\n\toptions: ILuTree<{ id: number, name: string }>[] = [{\r\n\t\tvalue: node1,\r\n\t\tchildren: [\r\n\t\t\t{ value: node11, children: [ { value: node111, children: [] } ] },\r\n\t\t\t{ value: node12, children: [] },\r\n\t\t]\r\n\t}, {\r\n\t\tvalue: node2,\r\n\t\tchildren: [ { value: node21, children: [] }]\r\n\t}];\r\n\titem;\r\n\tcollection = [];\r\n\r\n\tsearchFn(o, c) {\r\n\t\treturn o.name.startsWith(c);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>tree-picker-advanced</h1>\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"collection\" multiple>\r\n\t\t<ng-container *luDisplayer=\"let values; multiple: true\">{{ values.length }} items selected</ng-container>\r\n\t\t<lu-tree-option-picker-advanced>\r\n\t\t\t<lu-tree-option [tree]=\"options[0]\">\r\n\t\t\t\t<ng-container *luDisplayer=\"let value\">{{ value.name }}</ng-container>\r\n\t\t\t</lu-tree-option>\r\n\t\t</lu-tree-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">without operators</label>\r\n</div>\r\n\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"item\">\r\n\t\t<ng-container *luDisplayer=\"let value\">{{ value.name }}</ng-container>\r\n\t\t<lu-tree-option-picker-advanced>\r\n\t\t\t<lu-tree-option-feeder [options]=\"options\"></lu-tree-option-feeder>\r\n\t\t\t<lu-tree-option-searcher [searchFn]=\"searchFn\"></lu-tree-option-searcher>\r\n\t\t\t<lu-tree-option *luForTreeOptions=\"let option\" [tree]=\"option\">\r\n\t\t\t\t<ng-container *luDisplayer=\"let value\">{{ value.name }}</ng-container>\r\n\t\t\t</lu-tree-option>\r\n\t\t</lu-tree-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">single with operators</label>\r\n</div>\r\n\r\n<div class=\"textfield\">\r\n\t<lu-select class=\"textfield-input\" [(ngModel)]=\"collection\" multiple>\r\n\t\t<ng-container *luDisplayer=\"let values; multiple: true\">{{ values.length }} items selected</ng-container>\r\n\t\t<lu-tree-option-picker-advanced>\r\n\t\t\t<lu-tree-option-feeder [options]=\"options\"></lu-tree-option-feeder>\r\n\t\t\t<lu-tree-option-searcher [searchFn]=\"searchFn\"></lu-tree-option-searcher>\r\n\t\t\t<lu-tree-option *luForTreeOptions=\"let option\" [tree]=\"option\">\r\n\t\t\t\t<ng-container *luDisplayer=\"let value\">{{ value.name }}</ng-container>\r\n\t\t\t</lu-tree-option>\r\n\t\t</lu-tree-option-picker-advanced>\r\n\t</lu-select>\r\n\t<label for=\"\" class=\"textfield-label\">multiple with operators</label>\r\n</div>\r\n\r\n"
        },
        {
            "name": "UserComponent",
            "id": "component-UserComponent-31a9736f0538e6391ab7309b59f769bc",
            "file": "packages/ng-bis/user/src/lib/user.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-user",
            "styleUrls": [],
            "styles": [],
            "template": "<p>\n  user works!\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lu-user',\n  template: `\n    <p>\n      user works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class UserComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "UserSelectHomonymsComponent",
            "id": "component-UserSelectHomonymsComponent-d066d00a99c6763c3bc6db15c97c4bca",
            "file": "packages/ng/applications/sandbox/src/app/issues/user-select-homonyms/user-select-homonyms.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-user-select-homonyms",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-select-homonyms.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bob",
                    "defaultValue": "{\r\n\t\tid: 12,\r\n\t\tfirstName: 'SpongeBob',\r\n\t\tlastName: 'SquarePants',\r\n\t\tpictureHref: 'https://nickelodeonuniverse.com/wp-content/uploads/Spongebob.png',\r\n\t\tjobTitle: 'Cook @KrustyKrab'\r\n\t}",
                    "type": "ILuUser",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "item",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "patrick",
                    "defaultValue": "{\r\n\t\tid: 13,\r\n\t\tfirstName: 'Patrick',\r\n\t\tlastName: 'Starfish',\r\n\t\tpicture: {\r\n\t\t\thref: 'https://nickelodeonuniverse.com/wp-content/uploads/Patrick.png',\r\n\t\t},\r\n\t\tjobTitle: 'Happiness Guru'\r\n\t}",
                    "type": "ILuUser",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "squidwards",
                    "defaultValue": "{\r\n\t\tid: 14,\r\n\t\tfirstName: 'Squidwards',\r\n\t\tlastName: 'Tentacles',\r\n\t\tjobTitle: 'Cashier @KrustyKrab'\r\n\t}",
                    "type": "ILuUser",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ILuUser } from '@lucca-front/ng/user';\r\n\r\n@Component({\r\n\tselector: 'lu-user-select-homonyms',\r\n\ttemplateUrl: './user-select-homonyms.component.html'\r\n})\r\nexport class UserSelectHomonymsComponent {\r\n\titem;\r\n\tbob: ILuUser = {\r\n\t\tid: 12,\r\n\t\tfirstName: 'SpongeBob',\r\n\t\tlastName: 'SquarePants',\r\n\t\tpictureHref: 'https://nickelodeonuniverse.com/wp-content/uploads/Spongebob.png',\r\n\t\tjobTitle: 'Cook @KrustyKrab'\r\n\t};\r\n\tpatrick: ILuUser = {\r\n\t\tid: 13,\r\n\t\tfirstName: 'Patrick',\r\n\t\tlastName: 'Starfish',\r\n\t\tpicture: {\r\n\t\t\thref: 'https://nickelodeonuniverse.com/wp-content/uploads/Patrick.png',\r\n\t\t},\r\n\t\tjobTitle: 'Happiness Guru'\r\n\t};\r\n\tsquidwards: ILuUser = {\r\n\t\tid: 14,\r\n\t\tfirstName: 'Squidwards',\r\n\t\tlastName: 'Tentacles',\r\n\t\tjobTitle: 'Cashier @KrustyKrab'\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>user-select-homonyms</h1>\r\n<div class=\"textfield\">\r\n\t<lu-user-select class=\"textfield-input\" [(ngModel)]=\"item\"></lu-user-select>\r\n\t<label for=\"\" class=\"textfield-label\">user select</label>\r\n</div>\r\n<code>{{item | json }}</code>\r\n\r\n<lu-user-tile [user]=\"bob\"></lu-user-tile>\r\n<lu-user-tile [user]=\"patrick\"></lu-user-tile>\r\n<lu-user-tile [user]=\"squidwards\"></lu-user-tile>"
        },
        {
            "name": "UserSelectTranslateComponent",
            "id": "component-UserSelectTranslateComponent-682a42ff9cbda01682a9d1db32e9f896",
            "file": "packages/ng/applications/sandbox/src/app/issues/user-select-translate/user-select-translate.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lu-user-select-translate",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-select-translate.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collection",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "item",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'lu-user-select-translate',\r\n\ttemplateUrl: './user-select-translate.component.html'\r\n})\r\nexport class UserSelectTranslateComponent {\r\n\titem;\r\n\tcollection = [];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>user-select-translate</h1>\r\n<h2>Single</h2>\r\n<div class=\"textfield\">\r\n\t<lu-user-select class=\"textfield-input\" [(ngModel)]=\"item\"></lu-user-select>\r\n\t<label for=\"\" class=\"textfield-label\">user select</label>\r\n</div>\r\n<code>{{item | json }}</code>\r\n<h2>Multiple</h2>\r\n<div class=\"textfield\">\r\n\t<lu-user-select class=\"textfield-input\" [(ngModel)]=\"collection\" multiple></lu-user-select>\r\n\t<label for=\"\" class=\"textfield-label\">users select multiple</label>\r\n</div>\r\n<code>{{collection | json }}</code>"
        }
    ],
    "modules": [
        {
            "name": "ApiV4Module",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ApiV4Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuApiModule"
                        },
                        {
                            "name": "RedirectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IssuesRouter"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CommInAppModalModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CommInAppModalComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuModalModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DateCalendarModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DateCalendarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuDateModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DateGranularityModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DateGranularityComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuDateModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DateInputModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DateInputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuDateModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DateMinmaxModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DateMinmaxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuDateModule"
                        },
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuSelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DatePickerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DatePickerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuDateModule"
                        },
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuOptionModule"
                        },
                        {
                            "name": "LuSelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DatePickerWidthModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DatePickerWidthComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuDateModule"
                        },
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuSelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DateSelectEnhModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DateSelectEnhComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuDateModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DateSelectModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DateSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuDateModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DateStringModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DateStringComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DateUtcModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DateUtcComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuDateModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DepartmentSelectModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DepartmentSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuDepartmentModule"
                        },
                        {
                            "name": "LuInputDisplayerModule"
                        },
                        {
                            "name": "LuSelectModule"
                        },
                        {
                            "name": "LuTreeOptionModule"
                        },
                        {
                            "name": "RedirectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DragDropModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DragDropComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DropdownModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DropdownComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuDropdownModule"
                        },
                        {
                            "name": "LuPopoverModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EstablishmentModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EstablishmentComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuEstablishmentModule"
                        },
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuOptionModule"
                        },
                        {
                            "name": "LuSelectModule"
                        },
                        {
                            "name": "RedirectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "Fix472Module",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "Fix472Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuInputDisplayerModule"
                        },
                        {
                            "name": "LuOptionModule"
                        },
                        {
                            "name": "LuSelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "Fix705SelectEnterModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "Fix705SelectEnterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuApiModule"
                        },
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuOptionModule"
                        },
                        {
                            "name": "LuSelectModule"
                        },
                        {
                            "name": "RedirectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FixModalModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BasicModalContent"
                        },
                        {
                            "name": "FixModalComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuModalModule"
                        },
                        {
                            "name": "LuPopupModule"
                        },
                        {
                            "name": "LuSidepanelModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormerEmployeesModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormerEmployeesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuUserModule"
                        },
                        {
                            "name": "RedirectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormlyFramedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormlyFramedComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuFormlyModule"
                        },
                        {
                            "name": "RedirectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormlyModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormlyComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuFormlyModule"
                        },
                        {
                            "name": "RedirectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormlyWrappersModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormlyWrappersComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuFormlyModule"
                        },
                        {
                            "name": "RedirectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IssuesRouter",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IssuesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IvyApiSelectModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IvyApiSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuApiModule"
                        },
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuOptionModule"
                        },
                        {
                            "name": "LuSelectModule"
                        },
                        {
                            "name": "RedirectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IvyOptionPickerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IvyOptionPickerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuOptionModule"
                        },
                        {
                            "name": "LuSelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IvyTreeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IvyTreeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuSelectModule"
                        },
                        {
                            "name": "LuTreeOptionModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LolModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LolIntl"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LolComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LolComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuApiFeederModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuApiFeederComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuApiFeederComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuApiModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuApiSelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuApiSelectModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuApiPagerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuApiPagerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuApiPagerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuApiSearcherModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuApiPagedSearcherComponent"
                        },
                        {
                            "name": "LuApiSearcherComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuOptionPlaceholderModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuApiPagedSearcherComponent"
                        },
                        {
                            "name": "LuApiSearcherComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuApiSelectInputModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuApiSelectInputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuApiSearcherModule"
                        },
                        {
                            "name": "LuInputClearerModule"
                        },
                        {
                            "name": "LuInputDisplayerModule"
                        },
                        {
                            "name": "LuOptionItemModule"
                        },
                        {
                            "name": "LuOptionOperatorModule"
                        },
                        {
                            "name": "LuOptionPickerModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuApiSelectInputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuApiSelectModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuApiFeederModule"
                        },
                        {
                            "name": "LuApiPagerModule"
                        },
                        {
                            "name": "LuApiSearcherModule"
                        },
                        {
                            "name": "LuApiSelectInputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuApiFeederModule"
                        },
                        {
                            "name": "LuApiPagerModule"
                        },
                        {
                            "name": "LuApiSearcherModule"
                        },
                        {
                            "name": "LuApiSelectInputModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuCalendarInputModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LuCalendarItemFactory"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuCalendarInputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuCalendarInputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuDateAdapterModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuDateAdapterPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuDateAdapterPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuDateInputModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LuDateInputIntl"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuDateInputDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuDateInputDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuDateModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuCalendarInputModule"
                        },
                        {
                            "name": "LuDateAdapterModule"
                        },
                        {
                            "name": "LuDateInputModule"
                        },
                        {
                            "name": "LuDatePickerModule"
                        },
                        {
                            "name": "LuDateSelectInputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuCalendarInputModule"
                        },
                        {
                            "name": "LuDateAdapterModule"
                        },
                        {
                            "name": "LuDateInputModule"
                        },
                        {
                            "name": "LuDatePickerModule"
                        },
                        {
                            "name": "LuDateSelectInputModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuDatePickerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuDatePickerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuCalendarInputModule"
                        },
                        {
                            "name": "LuDateInputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuDatePickerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuDateSelectInputModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LuDateSelectInputIntl"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuDateSelectInputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuDateAdapterModule"
                        },
                        {
                            "name": "LuDatePickerModule"
                        },
                        {
                            "name": "LuInputClearerModule"
                        },
                        {
                            "name": "LuInputDisplayerModule"
                        },
                        {
                            "name": "LuInputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuDateSelectInputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuDepartmentFeederModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuDepartmentFeederComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuDepartmentFeederComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuDepartmentModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuDepartmentSelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuDepartmentSelectModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuDepartmentSelectInputModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LuDepartmentSelectInputIntl"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuDepartmentSelectInputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuDepartmentFeederModule"
                        },
                        {
                            "name": "LuInputClearerModule"
                        },
                        {
                            "name": "LuInputDisplayerModule"
                        },
                        {
                            "name": "LuTreeOptionItemModule"
                        },
                        {
                            "name": "LuTreeOptionOperatorModule"
                        },
                        {
                            "name": "LuTreeOptionPickerModule"
                        },
                        {
                            "name": "LuTreeOptionSelectorModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuDepartmentSelectInputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuDepartmentSelectModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuDepartmentFeederModule"
                        },
                        {
                            "name": "LuDepartmentSelectInputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuDepartmentFeederModule"
                        },
                        {
                            "name": "LuDepartmentSelectInputModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuDropdownItemModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuDropdownItemDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuDropdownItemDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuDropdownModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuDropdownItemModule"
                        },
                        {
                            "name": "LuDropdownPanelModule"
                        },
                        {
                            "name": "LuDropdownTriggerModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuDropdownItemModule"
                        },
                        {
                            "name": "LuDropdownPanelModule"
                        },
                        {
                            "name": "LuDropdownTriggerModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuDropdownPanelModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuDropdownPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuDropdownPanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuDropdownTriggerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuDropdownTriggerDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuDropdownTriggerDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuEstablishmentModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuEstablishmentSelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuEstablishmentSelectModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuEstablishmentSearcherModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuEstablishmentSearcherComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuOptionModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuEstablishmentSearcherComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuEstablishmentSelectAllModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuEstablishmentSelectAllComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuOptionModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuEstablishmentSelectAllComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuEstablishmentSelectInputModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LuEstablishmentSelectInputIntl"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuEstablishmentSelectInputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuEstablishmentSearcherModule"
                        },
                        {
                            "name": "LuEstablishmentSelectAllModule"
                        },
                        {
                            "name": "LuForLegalUnitsModule"
                        },
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuLegalUnitSelectorModule"
                        },
                        {
                            "name": "LuOptionModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuEstablishmentSelectInputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuEstablishmentSelectModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuEstablishmentSearcherModule"
                        },
                        {
                            "name": "LuEstablishmentSelectAllModule"
                        },
                        {
                            "name": "LuEstablishmentSelectInputModule"
                        },
                        {
                            "name": "LuForLegalUnitsModule"
                        },
                        {
                            "name": "LuLegalUnitSelectorModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuEstablishmentSearcherModule"
                        },
                        {
                            "name": "LuEstablishmentSelectAllModule"
                        },
                        {
                            "name": "LuEstablishmentSelectInputModule"
                        },
                        {
                            "name": "LuForLegalUnitsModule"
                        },
                        {
                            "name": "LuLegalUnitSelectorModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuForGroupsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuForGroupsDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuForGroupsDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuForLegalUnitsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuForLegalUnitsDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuForLegalUnitsDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuFormlyModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuFormlyErrorMessage"
                        },
                        {
                            "name": "LuFormlyFieldApi"
                        },
                        {
                            "name": "LuFormlyFieldCheckbox"
                        },
                        {
                            "name": "LuFormlyFieldDate"
                        },
                        {
                            "name": "LuFormlyFieldDepartment"
                        },
                        {
                            "name": "LuFormlyFieldEstablishment"
                        },
                        {
                            "name": "LuFormlyFieldInput"
                        },
                        {
                            "name": "LuFormlyFieldRadios"
                        },
                        {
                            "name": "LuFormlyFieldSelect"
                        },
                        {
                            "name": "LuFormlyFieldTextarea"
                        },
                        {
                            "name": "LuFormlyFieldUser"
                        },
                        {
                            "name": "LuFormlyWrapperCheckboxLayout"
                        },
                        {
                            "name": "LuFormlyWrapperError"
                        },
                        {
                            "name": "LuFormlyWrapperHelper"
                        },
                        {
                            "name": "LuFormlyWrapperIcon"
                        },
                        {
                            "name": "LuFormlyWrapperRadiosfieldLayout"
                        },
                        {
                            "name": "LuFormlyWrapperSuffix"
                        },
                        {
                            "name": "LuFormlyWrapperTextfieldLayout"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FormlyModule"
                        },
                        {
                            "name": "LuApiModule"
                        },
                        {
                            "name": "LuDateModule"
                        },
                        {
                            "name": "LuDepartmentModule"
                        },
                        {
                            "name": "LuEstablishmentModule"
                        },
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuOptionModule"
                        },
                        {
                            "name": "LuSelectModule"
                        },
                        {
                            "name": "LuUserModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuForOptionsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuForOptionsDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuForOptionsDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuForTreeOptionsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuForTreeOptionsDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuForTreeOptionsDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuInputClearerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuInputClearerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuInputClearerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuInputDisplayerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuInputDisplayerDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuInputDisplayerDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuInputModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuInputDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuInputClearerModule"
                        },
                        {
                            "name": "LuInputDisplayerModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuInputClearerModule"
                        },
                        {
                            "name": "LuInputDirective"
                        },
                        {
                            "name": "LuInputDisplayerModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuLegalUnitSelectorModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuLegalUnitSelectorDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuLegalUnitSelectorDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuMaterialModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuModalModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LuModal"
                        },
                        {
                            "name": "LuModalIntl"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuModalPanelComponent"
                        },
                        {
                            "name": "LuModalPanelComponentDefaultCD"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuModalPanelComponent"
                        },
                        {
                            "name": "LuModalPanelComponentDefaultCD"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuNumberModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuNumberPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuNumberPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuOptionFeederModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuOptionFeederComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuOptionFeederComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuOptionItemModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuOptionItemComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuOptionItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuOptionModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuOptionItemModule"
                        },
                        {
                            "name": "LuOptionOperatorModule"
                        },
                        {
                            "name": "LuOptionPickerModule"
                        },
                        {
                            "name": "LuOptionPlaceholderModule"
                        },
                        {
                            "name": "LuOptionSelectorModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuOptionItemModule"
                        },
                        {
                            "name": "LuOptionOperatorModule"
                        },
                        {
                            "name": "LuOptionPickerModule"
                        },
                        {
                            "name": "LuOptionPlaceholderModule"
                        },
                        {
                            "name": "LuOptionSelectorModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuOptionOperatorModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuForGroupsModule"
                        },
                        {
                            "name": "LuForOptionsModule"
                        },
                        {
                            "name": "LuOptionFeederModule"
                        },
                        {
                            "name": "LuOptionPagerModule"
                        },
                        {
                            "name": "LuOptionSearcherModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuForGroupsModule"
                        },
                        {
                            "name": "LuForOptionsModule"
                        },
                        {
                            "name": "LuOptionFeederModule"
                        },
                        {
                            "name": "LuOptionPagerModule"
                        },
                        {
                            "name": "LuOptionSearcherModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuOptionPagerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuOptionPagerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuOptionPagerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuOptionPickerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuOptionPickerAdvancedComponent"
                        },
                        {
                            "name": "LuOptionPickerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuOptionItemModule"
                        },
                        {
                            "name": "LuScrollModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuOptionPickerAdvancedComponent"
                        },
                        {
                            "name": "LuOptionPickerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuOptionPlaceholderModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LuOptionPlaceholderIntl"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuOptionPlaceholderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuOptionPlaceholderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuOptionSearcherModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuOptionSearcherComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuOptionPlaceholderModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuOptionSearcherComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuOptionSelectAllModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LuOptionSelectAllIntl"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuOptionSelectAllComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuOptionSelectAllComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuOptionSelectorModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuOptionSelectAllModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuOptionSelectAllModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuPopoverModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuPopoverPanelModule"
                        },
                        {
                            "name": "LuPopoverTargetModule"
                        },
                        {
                            "name": "LuPopoverTriggerModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuPopoverPanelModule"
                        },
                        {
                            "name": "LuPopoverTargetModule"
                        },
                        {
                            "name": "LuPopoverTriggerModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuPopoverPanelModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuPopoverPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuPopoverPanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuPopoverTargetModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuPopoverTargetDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuPopoverTargetDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuPopoverTriggerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuPopoverTriggerDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuPopoverPanelModule"
                        },
                        {
                            "name": "LuPopoverTargetModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuPopoverTriggerDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuPopupModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LuPopup"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuSafeContentModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuSafeContentPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuSafeContentPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuScrollModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuScrollDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuScrollDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuSelectInputModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuSelectInputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuSelectInputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuSelectModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuSelectInputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuSelectInputModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuSidepanelModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LuSidepanel"
                        },
                        {
                            "name": "LuSidepanelIntl"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuSidepanelPanelComponent"
                        },
                        {
                            "name": "LuSidepanelPanelComponentDefaultCD"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuSidepanelPanelComponent"
                        },
                        {
                            "name": "LuSidepanelPanelComponentDefaultCD"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuTooltipModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuTooltipPanelModule"
                        },
                        {
                            "name": "LuTooltipTriggerModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuTooltipPanelModule"
                        },
                        {
                            "name": "LuTooltipTriggerModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuTooltipPanelModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuTooltipPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuSafeContentModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuTooltipPanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuTooltipTriggerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuTooltipTriggerDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuTooltipTriggerDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuTreeOptionFeederModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuTreeOptionFeederComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuTreeOptionFeederComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuTreeOptionItemModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LuTreeOptionItemIntl"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuTreeOptionItemComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuTooltipModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuTreeOptionItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuTreeOptionModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuTreeOptionItemModule"
                        },
                        {
                            "name": "LuTreeOptionOperatorModule"
                        },
                        {
                            "name": "LuTreeOptionPickerModule"
                        },
                        {
                            "name": "LuTreeOptionSelectorModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuTreeOptionItemModule"
                        },
                        {
                            "name": "LuTreeOptionOperatorModule"
                        },
                        {
                            "name": "LuTreeOptionPickerModule"
                        },
                        {
                            "name": "LuTreeOptionSelectorModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuTreeOptionOperatorModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuForTreeOptionsModule"
                        },
                        {
                            "name": "LuTreeOptionFeederModule"
                        },
                        {
                            "name": "LuTreeOptionPagerModule"
                        },
                        {
                            "name": "LuTreeOptionSearcherModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuForTreeOptionsModule"
                        },
                        {
                            "name": "LuTreeOptionFeederModule"
                        },
                        {
                            "name": "LuTreeOptionPagerModule"
                        },
                        {
                            "name": "LuTreeOptionSearcherModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuTreeOptionPagerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuTreeOptionPagerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuTreeOptionPagerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuTreeOptionPickerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuTreeOptionPickerAdvancedComponent"
                        },
                        {
                            "name": "LuTreeOptionPickerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuScrollModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuTreeOptionPickerAdvancedComponent"
                        },
                        {
                            "name": "LuTreeOptionPickerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuTreeOptionSearcherModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuTreeOptionSearcherComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuOptionPlaceholderModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuTreeOptionSearcherComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuTreeOptionSelectAllModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LuOptionSelectAllIntl"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuTreeOptionSelectAllComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuTreeOptionSelectAllComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuTreeOptionSelectorModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuTreeOptionSelectAllModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuTreeOptionSelectAllModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuUserDisplayModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuUserDisplayPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuUserDisplayPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuUserHomonymsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuUserHomonymsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuUserDisplayModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuUserHomonymsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuUserMeOptionModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuUserMeOptionDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuUserMeOptionDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuUserModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuUserDisplayModule"
                        },
                        {
                            "name": "LuUserPictureModule"
                        },
                        {
                            "name": "LuUserSelectModule"
                        },
                        {
                            "name": "LuUserTileModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuUserDisplayModule"
                        },
                        {
                            "name": "LuUserPictureModule"
                        },
                        {
                            "name": "LuUserSelectModule"
                        },
                        {
                            "name": "LuUserTileModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuUserPictureModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuUserPictureComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuUserDisplayModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuUserPictureComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuUserSearcherModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LuUserSearcherIntl"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuUserPagedSearcherComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuOptionPlaceholderModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuUserPagedSearcherComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuUserSelectInputModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LuUserSelectInputIntl"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuUserSelectInputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuInputClearerModule"
                        },
                        {
                            "name": "LuInputDisplayerModule"
                        },
                        {
                            "name": "LuOptionItemModule"
                        },
                        {
                            "name": "LuOptionOperatorModule"
                        },
                        {
                            "name": "LuOptionPickerModule"
                        },
                        {
                            "name": "LuUserDisplayModule"
                        },
                        {
                            "name": "LuUserHomonymsModule"
                        },
                        {
                            "name": "LuUserMeOptionModule"
                        },
                        {
                            "name": "LuUserSearcherModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuUserSelectInputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuUserSelectModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuUserHomonymsModule"
                        },
                        {
                            "name": "LuUserMeOptionModule"
                        },
                        {
                            "name": "LuUserSearcherModule"
                        },
                        {
                            "name": "LuUserSelectInputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuUserHomonymsModule"
                        },
                        {
                            "name": "LuUserMeOptionModule"
                        },
                        {
                            "name": "LuUserSearcherModule"
                        },
                        {
                            "name": "LuUserSelectInputModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LuUserTileModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LuUserTileComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuUserDisplayModule"
                        },
                        {
                            "name": "LuUserPictureModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LuUserTileComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModalA11yModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BasicModalContent"
                        },
                        {
                            "name": "ModalA11yComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuModalModule"
                        },
                        {
                            "name": "LuSidepanelModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModalDismissModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BasicModalContent"
                        },
                        {
                            "name": "BasicPopupContent"
                        },
                        {
                            "name": "ModalDismissComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuModalModule"
                        },
                        {
                            "name": "LuPopupModule"
                        },
                        {
                            "name": "LuSidepanelModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModalsNoSubmitModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BasicModalContent"
                        },
                        {
                            "name": "ModalsNoSubmitComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuModalModule"
                        },
                        {
                            "name": "LuSidepanelModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModalSynchedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AsyncModalContent"
                        },
                        {
                            "name": "ModalSynchedComponent"
                        },
                        {
                            "name": "SyncModalContent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuModalModule"
                        },
                        {
                            "name": "LuSidepanelModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModalUndismissableModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BasicModalContent"
                        },
                        {
                            "name": "BasicPopupContent"
                        },
                        {
                            "name": "ModalUndismissableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuModalModule"
                        },
                        {
                            "name": "LuPopupModule"
                        },
                        {
                            "name": "LuSidepanelModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NodeSassEndModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NodeSassEndComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OptionComparerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "OptionComparerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuApiModule"
                        },
                        {
                            "name": "LuDepartmentModule"
                        },
                        {
                            "name": "LuUserModule"
                        },
                        {
                            "name": "RedirectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OptionGroupbyModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "OptionGroupbyComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuOptionModule"
                        },
                        {
                            "name": "LuSelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OptionSelectorModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "OptionSelectorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuOptionModule"
                        },
                        {
                            "name": "LuSelectModule"
                        },
                        {
                            "name": "LuTreeOptionModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OverlaysEventsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "OverlaysEventsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuApiModule"
                        },
                        {
                            "name": "LuDateModule"
                        },
                        {
                            "name": "LuDepartmentModule"
                        },
                        {
                            "name": "LuDropdownModule"
                        },
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuOptionModule"
                        },
                        {
                            "name": "LuPopoverModule"
                        },
                        {
                            "name": "LuSelectModule"
                        },
                        {
                            "name": "LuTooltipModule"
                        },
                        {
                            "name": "LuUserModule"
                        },
                        {
                            "name": "RedirectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PickerStructureModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PickerStructureComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuApiModule"
                        },
                        {
                            "name": "LuDepartmentModule"
                        },
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuOptionModule"
                        },
                        {
                            "name": "LuSelectModule"
                        },
                        {
                            "name": "LuUserModule"
                        },
                        {
                            "name": "RedirectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PocModalModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PocModalComponent"
                        },
                        {
                            "name": "PocModalInsideComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuModalModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PocPopupModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PocPopupComponent"
                        },
                        {
                            "name": "PocPopupInsideComponent"
                        },
                        {
                            "name": "PocPopupSecondaryComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuPopupModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PocTranslateModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PocTranslateComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LolModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PocTreeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PocTreeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuSelectModule"
                        },
                        {
                            "name": "LuTreeOptionModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PopoverAccessibleModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PopoverAccessibleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuPopoverModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RedirectModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "RedirectInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RefactoOverlayAdvancedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RefactoOverlayAdvancedComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuPopoverModule"
                        },
                        {
                            "name": "LuPopupModule"
                        },
                        {
                            "name": "LuTooltipModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RefactoOverlaysModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RefactoOverlaysComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuPopoverModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RefactoOverlaysRepositionModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RefactoOverlaysRepositionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuPopoverModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RefactoOverlaysTooltipModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RefactoOverlaysTooltipComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuTooltipModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RefactorApiSelectModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RefactorApiSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuApiModule"
                        },
                        {
                            "name": "LuUserModule"
                        },
                        {
                            "name": "RedirectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RefactorSelectModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RefactorSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuOptionModule"
                        },
                        {
                            "name": "LuSelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RefactoTooltipModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RefactoTooltipComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuPopoverModule"
                        },
                        {
                            "name": "LuTooltipModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectMeFirstModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SelectMeFirstComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuUserModule"
                        },
                        {
                            "name": "RedirectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectOptionPlaceholderModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SelectOptionPlaceholderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuApiModule"
                        },
                        {
                            "name": "LuDepartmentModule"
                        },
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuOptionModule"
                        },
                        {
                            "name": "LuSelectModule"
                        },
                        {
                            "name": "LuTreeOptionModule"
                        },
                        {
                            "name": "LuUserModule"
                        },
                        {
                            "name": "RedirectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectOverlapModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SelectOverlapComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuApiModule"
                        },
                        {
                            "name": "LuDepartmentModule"
                        },
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuOptionModule"
                        },
                        {
                            "name": "LuSelectModule"
                        },
                        {
                            "name": "LuUserModule"
                        },
                        {
                            "name": "RedirectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SidepanelModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PocSidepanelInsideComponent"
                        },
                        {
                            "name": "SidepanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuSidepanelModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SplitOperatorsApiModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SplitOperatorsApiComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuApiModule"
                        },
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuOptionModule"
                        },
                        {
                            "name": "LuSelectModule"
                        },
                        {
                            "name": "LuUserModule"
                        },
                        {
                            "name": "RedirectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SplitOperatorsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SplitOperatorsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuOptionModule"
                        },
                        {
                            "name": "LuSelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SplitOptionPickerApiAuserModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SplitOptionPickerApiAuserComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuApiModule"
                        },
                        {
                            "name": "LuUserModule"
                        },
                        {
                            "name": "RedirectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SplitOptionPickerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SplitOptionPickerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuOptionModule"
                        },
                        {
                            "name": "LuSelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SplitSelectModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SplitSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuApiModule"
                        },
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuOptionModule"
                        },
                        {
                            "name": "LuSelectModule"
                        },
                        {
                            "name": "LuUserModule"
                        },
                        {
                            "name": "RedirectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StyleSelectChipsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StyleSelectChipsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuApiModule"
                        },
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuOptionModule"
                        },
                        {
                            "name": "LuSelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TreePickerAdvancedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TreePickerAdvancedComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuInputModule"
                        },
                        {
                            "name": "LuSelectModule"
                        },
                        {
                            "name": "LuTreeOptionModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UserComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "UserComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserSelectHomonymsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UserSelectHomonymsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuUserModule"
                        },
                        {
                            "name": "RedirectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserSelectTranslateModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UserSelectTranslateComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LuUserModule"
                        },
                        {
                            "name": "RedirectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/scss/button.stories.ts",
                "type": "",
                "defaultValue": "template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-bis/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-bis/user/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/animations/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/api/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/core/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/date/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/department/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/dropdown/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/establishment/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/formly/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/input/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/material/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/modal/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/option/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/picker/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/number/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/popover/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/popup/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/root/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/safe-content/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/scroll/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/select/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/sidepanel/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/tooltip/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/user/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n\tapiUrl: 'https://prisme-proxy.lucca.io',\r\n\tproduction: true,\r\n\tuseHash: true,\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n\tproduction: false,\r\n\tapiUrl: 'https://prisme-proxy.lucca.io',\r\n\tuseHash: false,\r\n\r\n}"
            },
            {
                "name": "ID_BASE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/core/src/lib/id/id.generator.ts",
                "type": "number",
                "defaultValue": "16"
            },
            {
                "name": "ID_LENGTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/core/src/lib/id/id.generator.ts",
                "type": "number",
                "defaultValue": "8"
            },
            {
                "name": "issues",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/issues.router.ts",
                "type": "",
                "defaultValue": "[ ...routes].map(r => r.path)"
            },
            {
                "name": "ISSUES_INDEX_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/issues.component.ts",
                "type": "",
                "defaultValue": "new InjectionToken('issues index')"
            },
            {
                "name": "LOL_TRANSLATIONS_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/poc-translate/lol.translate.ts",
                "type": "",
                "defaultValue": "new InjectionToken('lol translations')"
            },
            {
                "name": "lolOverrides",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/poc-translate/lol.override.ts",
                "type": "object",
                "defaultValue": "{\r\n\ten: {\r\n\t\tlol: 'overrided',\r\n\t},\r\n\tfr: {\r\n\t\tlol: 'surchargé',\r\n\t},\r\n\tde : {\r\n\t\tlol: 'überwiegen',\r\n\t}\r\n}"
            },
            {
                "name": "lolTranslations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/poc-translate/lol.translate.ts",
                "type": "object",
                "defaultValue": "{\r\n\ten: {\r\n\t\tlol: 'lol',\r\n\t},\r\n\tfr: {\r\n\t\tlol: 'mdr',\r\n\t},\r\n\tde : {\r\n\t\tlol: 'laut lachen',\r\n\t}\r\n}"
            },
            {
                "name": "LU_DATE_INPUT_TRANSLATIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/date/src/lib/input/date-input.token.ts",
                "type": "",
                "defaultValue": "new InjectionToken('LuDateInputtranslations')"
            },
            {
                "name": "LU_DATE_SELECT_INPUT_TRANSLATIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/date/src/lib/select/date-select-input.token.ts",
                "type": "",
                "defaultValue": "new InjectionToken('LuDateSelectInputtranslations')"
            },
            {
                "name": "LU_DEFAULT_ANIMATION_TIMING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/animations/src/lib/animation.factory.ts",
                "type": "string",
                "defaultValue": "'250ms 0ms ease-out'"
            },
            {
                "name": "LU_DEPARTMENT_SELECT_INPUT_TRANSLATIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/department/src/lib/select/input/department-select-input.token.ts",
                "type": "",
                "defaultValue": "new InjectionToken('LuDepartmentSelectTranslations')"
            },
            {
                "name": "LU_ESTABLISHMENT_SELECT_INPUT_TRANSLATIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/establishment/src/lib/select/input/establishment-select-input.token.ts",
                "type": "",
                "defaultValue": "new InjectionToken('LuEstablishmentSelectTranslations')"
            },
            {
                "name": "LU_FORMLY_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/formly/src/lib/formly.config.ts",
                "type": "",
                "defaultValue": "{\r\n\ttypes: [\r\n\t\t{\r\n\t\t\tname: 'input',\r\n\t\t\tcomponent: LuFormlyFieldInput,\r\n\t\t\twrappers: ['textfield-layout'],\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'radio',\r\n\t\t\tcomponent: LuFormlyFieldRadios,\r\n\t\t\twrappers: ['radiosfield-layout'],\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'checkbox',\r\n\t\t\tcomponent: LuFormlyFieldCheckbox,\r\n\t\t\twrappers: ['checkbox-layout'],\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'date',\r\n\t\t\tcomponent: LuFormlyFieldDate,\r\n\t\t\twrappers: ['textfield-layout'],\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'textarea',\r\n\t\t\tcomponent: LuFormlyFieldTextarea,\r\n\t\t\twrappers: ['textfield-layout'],\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'select',\r\n\t\t\tcomponent: LuFormlyFieldSelect,\r\n\t\t\twrappers: ['textfield-layout'],\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'user',\r\n\t\t\tcomponent: LuFormlyFieldUser,\r\n\t\t\twrappers: ['textfield-layout'],\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'api',\r\n\t\t\tcomponent: LuFormlyFieldApi,\r\n\t\t\twrappers: ['textfield-layout'],\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'department',\r\n\t\t\tcomponent: LuFormlyFieldDepartment,\r\n\t\t\twrappers: ['textfield-layout'],\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'establishment',\r\n\t\t\tcomponent: LuFormlyFieldEstablishment,\r\n\t\t\twrappers: ['textfield-layout']\r\n\t\t}\r\n\t],\r\n\twrappers: [\r\n\t\t{ name: 'helper', component: LuFormlyWrapperHelper },\r\n\t\t{ name: 'checkbox-layout', component: LuFormlyWrapperCheckboxLayout },\r\n\t\t{ name: 'radiosfield-layout', component: LuFormlyWrapperRadiosfieldLayout },\r\n\t\t{ name: 'textfield-layout', component: LuFormlyWrapperTextfieldLayout },\r\n\t\t{ name: 'suffix', component: LuFormlyWrapperSuffix },\r\n\t\t{ name: 'icon', component: LuFormlyWrapperIcon },\r\n\t\t{ name: 'error', component: LuFormlyWrapperError },\r\n\t],\r\n\tmanipulators: [\r\n\r\n\t\t{ class: TemplateError, method: 'run' }, // fifth\r\n\t\t{ class: TemplateHelper, method: 'run' }, // fourth\r\n\t\t{ class: TemplateSuffix, method: 'run' }, // third\r\n\t\t{ class: TemplateIcon, method: 'run' }, // second\r\n\t],\r\n} as ConfigOption"
            },
            {
                "name": "LU_MODAL_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/modal/src/lib/modal.token.ts",
                "type": "",
                "defaultValue": "new InjectionToken<any>('LuModalDefaultConfig')"
            },
            {
                "name": "LU_MODAL_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/modal/src/lib/modal.token.ts",
                "type": "",
                "defaultValue": "new InjectionToken<any>('LuModalData')",
                "description": "<p>Injection token that can be used to access the data that was passed in to a dialog. </p>\n"
            },
            {
                "name": "LU_MODAL_REF_FACTORY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/modal/src/lib/modal.token.ts",
                "type": "",
                "defaultValue": "new InjectionToken<any>('LuModalRefFactory')"
            },
            {
                "name": "LU_MODAL_TRANSLATIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/modal/src/lib/modal.token.ts",
                "type": "",
                "defaultValue": "new InjectionToken('LuModalTranslations')"
            },
            {
                "name": "LU_NATIVE_DATE_ADAPTER_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/core/src/lib/date/native/native-date.option.ts",
                "type": "",
                "defaultValue": "new InjectionToken<ILuNativeDateAdapterOptions>('Native date adapter options')"
            },
            {
                "name": "LU_OPTION_PLACEHOLDER_TRANSLATIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/option/src/lib/placeholder/option-placeholder.token.ts",
                "type": "",
                "defaultValue": "new InjectionToken('LuOptionPlaceholderTranslations')"
            },
            {
                "name": "LU_OPTION_SELECT_ALL_TRANSLATIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/option/src/lib/selector/all/select-all.token.ts",
                "type": "",
                "defaultValue": "new InjectionToken('LuOptionSelectAllTranslations')"
            },
            {
                "name": "LU_POPUP_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/popup/src/lib/popup.token.ts",
                "type": "",
                "defaultValue": "new InjectionToken<any>('LuPopupDefaultConfig')"
            },
            {
                "name": "LU_POPUP_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/popup/src/lib/popup.token.ts",
                "type": "",
                "defaultValue": "new InjectionToken<any>('LuPopupData')",
                "description": "<p>Injection token that can be used to access the data that was passed in to a dialog. </p>\n"
            },
            {
                "name": "LU_POPUP_REF_FACTORY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/popup/src/lib/popup.token.ts",
                "type": "",
                "defaultValue": "new InjectionToken<any>('LuPopupRefFactory')"
            },
            {
                "name": "LU_SIDEPANEL_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel.token.ts",
                "type": "",
                "defaultValue": "new InjectionToken<any>('LuSidepanelDefaultConfig')"
            },
            {
                "name": "LU_SIDEPANEL_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel.token.ts",
                "type": "",
                "defaultValue": "new InjectionToken<any>('LuSidepanelData')",
                "description": "<p>Injection token that can be used to access the data that was passed in to a dialog. </p>\n"
            },
            {
                "name": "LU_SIDEPANEL_REF_FACTORY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel.token.ts",
                "type": "",
                "defaultValue": "new InjectionToken<any>('LuSidepanelRefFactory')"
            },
            {
                "name": "LU_SIDEPANEL_TRANSLATIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel.token.ts",
                "type": "",
                "defaultValue": "new InjectionToken('LuSidepanelTranslations')"
            },
            {
                "name": "LU_TREE_OPTION_ITEM_TRANSLATIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/option/src/lib/item/tree-option-item.token.ts",
                "type": "",
                "defaultValue": "new InjectionToken('LuTreeOptionItemTranslations')"
            },
            {
                "name": "LU_USER_SEARCHER_TRANSLATIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/user/src/lib/select/searcher/user-searcher.token.ts",
                "type": "",
                "defaultValue": "new InjectionToken('LuUserSearcherTranslations')"
            },
            {
                "name": "LU_USER_SELECT_INPUT_TRANSLATIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/user/src/lib/select/input/user-select-input.token.ts",
                "type": "",
                "defaultValue": "new InjectionToken('LuUserSelectTranslations')"
            },
            {
                "name": "luDateInputTranslations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/date/src/lib/input/date-input.translate.ts",
                "type": "",
                "defaultValue": "{\r\n\ten: {\r\n\t\tplaceholderDay: 'dd/mm/yyyy',\r\n\t\tplaceholderMonth: 'mm/yyyy',\r\n\t\tplaceholderYear: 'yyyy',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n\t'en-GB': {\r\n\t\tplaceholderDay: 'dd/mm/yyyy',\r\n\t\tplaceholderMonth: 'mm/yyyy',\r\n\t\tplaceholderYear: 'yyyy',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n\t'en-US': {\r\n\t\tplaceholderDay: 'mm/dd/yyyy',\r\n\t\tplaceholderMonth: 'mm/yyyy',\r\n\t\tplaceholderYear: 'yyyy',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n\tfr: {\r\n\t\tplaceholder: 'jj/mm/aaaa',\r\n\t\tplaceholderDay: 'jj/mm/aaaa',\r\n\t\tplaceholderMonth: 'mm/aaaa',\r\n\t\tplaceholderYear: 'aaaa',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n} as ILuTranslation<ILuDateInputLabel>"
            },
            {
                "name": "luDateSelectInputTranslations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/date/src/lib/select/date-select-input.translate.ts",
                "type": "",
                "defaultValue": "{\r\n\ten: {\r\n\t\tplaceholderDay: 'dd/mm/yyyy',\r\n\t\tplaceholderMonth: 'mm/yyyy',\r\n\t\tplaceholderYear: 'yyyy',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n\t'en-US': {\r\n\t\tplaceholderDay: 'mm/dd/yyyy',\r\n\t\tplaceholderMonth: 'mm/yyyy',\r\n\t\tplaceholderYear: 'yyyy',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n\tfr: {\r\n\t\tplaceholder: 'jj/mm/aaaa',\r\n\t\tplaceholderDay: 'jj/mm/aaaa',\r\n\t\tplaceholderMonth: 'mm/aaaa',\r\n\t\tplaceholderYear: 'aaaa',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n} as ILuTranslation<ILuDateSelectInputLabel>"
            },
            {
                "name": "luDefaultModalConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/modal/src/lib/modal-config.default.ts",
                "type": "ILuModalConfig",
                "defaultValue": "{\r\n\tposition: 'center',\r\n\tnoBackdrop: false,\r\n\tundismissable: false,\r\n\tbackdropClass: ['cdk-overlay-dark-backdrop', 'lu-popup-backdrop'],\r\n\tpanelClass: 'lu-popup-panel',\r\n\tsize: 'standard',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n}"
            },
            {
                "name": "luDefaultNativeDateAdapterOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/core/src/lib/date/native/native-date.option.ts",
                "type": "ILuNativeDateAdapterOptions",
                "defaultValue": "{\r\n\tuseUtc: false,\r\n}"
            },
            {
                "name": "luDefaultPopupConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/popup/src/lib/popup-config.default.ts",
                "type": "ILuPopupConfig",
                "defaultValue": "{\r\n\tposition: 'center',\r\n\tnoBackdrop: false,\r\n\tundismissable: false,\r\n\tbackdropClass: ['cdk-overlay-dark-backdrop', 'lu-popup-backdrop'],\r\n\tpanelClass: 'lu-popup-panel',\r\n\tsize: 'standard',\r\n}"
            },
            {
                "name": "luDefaultSidepanelConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel-config.default.ts",
                "type": "ILuSidepanelConfig",
                "defaultValue": "{\r\n\tposition: 'right',\r\n\tnoBackdrop: false,\r\n\tundismissable: false,\r\n\tbackdropClass: ['cdk-overlay-dark-backdrop', 'lu-popup-backdrop'],\r\n\tpanelClass: ['lu-popup-panel', 'mod-sidepanel'],\r\n\tsize: 'standard',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n}"
            },
            {
                "name": "luDepartmentSelectInputTranslations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/department/src/lib/select/input/department-select-input.translate.ts",
                "type": "",
                "defaultValue": "{\r\n\ten: {\r\n\t\tdepartments: 'departments',\r\n\t},\r\n\tfr: {\r\n\t\tdepartments: 'départements',\r\n\t},\r\n} as ILuTranslation<ILuDepartmentSelectInputLabel>"
            },
            {
                "name": "luEstablishmentSelectAllTranslations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/establishment/src/lib/select/select-all/establishment-select-all.translate.ts",
                "type": "",
                "defaultValue": "{\r\n\ten: {\r\n\t\tselect: 'Select all',\r\n\t\tdeselect: 'Deselect all',\r\n\t},\r\n\tfr: {\r\n\t\tselect: 'Tout sélectionner',\r\n\t\tdeselect: 'Tout Déselectionner'\r\n\t},\r\n\tde: {\r\n\t\tselect: 'Alle auswählen',\r\n\t\tdeselect: 'Alle abwählen'\r\n\t},\r\n\tpt: {\r\n\t\tselect: 'Selecionar tudo',\r\n\t\tdeselect: 'Desselecionar tudo'\r\n\t},\r\n\tes: {\r\n\t\tselect: 'Seleccionar todo',\r\n\t\tdeselect: 'Desmarcar todo'\r\n\t},\r\n} as ILuTranslation<ILuOptionSelectAllLabel>"
            },
            {
                "name": "luEstablishmentSelectInputTranslations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/establishment/src/lib/select/input/establishment-select-input.translate.ts",
                "type": "",
                "defaultValue": "{\r\n\ten: {\r\n\t\testablishments: 'establishments',\r\n\t},\r\n\tfr: {\r\n\t\testablishments: 'établissements',\r\n\t},\r\n} as ILuTranslation<ILuEstablishmentSelectInputLabel>"
            },
            {
                "name": "luModalTranslations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/modal/src/lib/modal.translate.ts",
                "type": "",
                "defaultValue": "{\r\n\ten: {\r\n\t\tsubmit: 'Ok',\r\n\t\tcancel: 'Cancel',\r\n\t},\r\n\tfr: {\r\n\t\tsubmit: 'Ok',\r\n\t\tcancel: 'Annuler',\r\n\t},\r\n} as ILuTranslation<ILuModalLabel>"
            },
            {
                "name": "luOptionPlaceholderTranslations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/option/src/lib/placeholder/option-placeholder.translate.ts",
                "type": "",
                "defaultValue": "{\r\n\ten: {\r\n\t\tplaceholderDescription: 'No results match your search criteria.',\r\n\t\tplaceholderAction: 'Clear search',\r\n\t},\r\n\tfr: {\r\n\t\tplaceholderDescription: 'Aucun résultat pour votre recherche',\r\n\t\tplaceholderAction: 'Vider la recherche',\r\n\t},\r\n} as ILuTranslation<ILuOptionPlaceholderLabel>"
            },
            {
                "name": "luOptionSelectAllTranslations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/option/src/lib/selector/all/select-all.translate.ts",
                "type": "",
                "defaultValue": "{\r\n\ten: {\r\n\t\tselect: 'Select all',\r\n\t\tdeselect: 'Deselect all',\r\n\t},\r\n\tfr: {\r\n\t\tselect: 'Tout sélectionner',\r\n\t\tdeselect: 'Tout Déselectionner'\r\n\t},\r\n\tde: {\r\n\t\tselect: 'Alle auswählen',\r\n\t\tdeselect: 'Alle abwählen'\r\n\t},\r\n\tpt: {\r\n\t\tselect: 'Selecionar tudo',\r\n\t\tdeselect: 'Desselecionar tudo'\r\n\t},\r\n\tes: {\r\n\t\tselect: 'Seleccionar todo',\r\n\t\tdeselect: 'Desmarcar todo'\r\n\t},\r\n} as ILuTranslation<ILuOptionSelectAllLabel>"
            },
            {
                "name": "luSidepanelTranslations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel.translate.ts",
                "type": "",
                "defaultValue": "{\r\n\ten: {\r\n\t\tsubmit: 'Ok',\r\n\t\tcancel: 'Cancel',\r\n\t},\r\n\tfr: {\r\n\t\tsubmit: 'Ok',\r\n\t\tcancel: 'Annuler',\r\n\t},\r\n} as ILuTranslation<ILuSidepanelLabel>"
            },
            {
                "name": "luTransformPopover",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/popover/src/lib/animation/popover.animation.ts",
                "type": "AnimationTriggerMetadata",
                "defaultValue": "trigger(\r\n\t'transformPopover',\r\n\t[\r\n\t\tstate(\r\n\t\t\t'enter',\r\n\t\t\tstyle({\r\n\t\t\t\topacity: 1,\r\n\t\t\t\ttransform: `scale(1)`,\r\n\t\t\t}),\r\n\t\t),\r\n\t\ttransition('void => *', [\r\n\t\t\tstyle({\r\n\t\t\t\topacity: 0,\r\n\t\t\t\ttransform: `scale(0)`,\r\n\t\t\t}),\r\n\t\t\tanimate(`150ms cubic-bezier(0.25, 0.8, 0.25, 1)`),\r\n\t\t]),\r\n\t\ttransition('* => void', [\r\n\t\t\tanimate('50ms 100ms linear', style({ opacity: 0 })),\r\n\t\t]),\r\n\t],\r\n)"
            },
            {
                "name": "luTransformTooltip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/tooltip/src/lib/animation/tooltip.animation.ts",
                "type": "AnimationTriggerMetadata",
                "defaultValue": "trigger(\r\n\t'transformTooltip',\r\n\t[\r\n\t\tstate(\r\n\t\t\t'enter',\r\n\t\t\tstyle({\r\n\t\t\t\topacity: 1,\r\n\t\t\t\ttransform: `scale(1)`,\r\n\t\t\t}),\r\n\t\t),\r\n\t\ttransition('void => *', [\r\n\t\t\tstyle({\r\n\t\t\t\topacity: 0,\r\n\t\t\t\ttransform: `scale(0)`,\r\n\t\t\t}),\r\n\t\t\tanimate(`150ms cubic-bezier(0.25, 0.8, 0.25, 1)`),\r\n\t\t]),\r\n\t\ttransition('* => void', [\r\n\t\t\tanimate('50ms 100ms linear', style({ opacity: 0 })),\r\n\t\t]),\r\n\t],\r\n)"
            },
            {
                "name": "luTreeOptionItemTranslations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/option/src/lib/item/tree-option-item.translate.ts",
                "type": "",
                "defaultValue": "{\r\n\ten: {\r\n\t\tparentOnly: 'Parent only',\r\n\t\tchildrenOnly: 'Children only',\r\n\t},\r\n\tfr: {\r\n\t\tparentOnly: 'Seulement le parent',\r\n\t\tchildrenOnly: 'Seulement les enfants',\r\n\t},\r\n} as ILuTranslation<ILuTreeOptionItemLabel>"
            },
            {
                "name": "luUserSearcherTranslations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/user/src/lib/select/searcher/user-searcher.translate.ts",
                "type": "",
                "defaultValue": "{\r\n\ten: {\r\n\t\tincludeFormerEmployees: 'Include former employees',\r\n\t},\r\n\tfr: {\r\n\t\tincludeFormerEmployees: 'Inclure les salariés partis',\r\n\t},\r\n} as ILuTranslation<ILuUserSearcherLabel>"
            },
            {
                "name": "luUserSelectInputTranslations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/user/src/lib/select/input/user-select-input.translate.ts",
                "type": "",
                "defaultValue": "{\r\n\ten: {\r\n\t\tusers: 'users',\r\n\t\tme: 'Me:'\r\n\t},\r\n\tfr: {\r\n\t\tusers: 'utilisateurs',\r\n\t\tme: 'Moi :'\r\n\t},\r\n} as ILuTranslation<ILuUserSelectInputLabel>"
            },
            {
                "name": "MAGIC_PAGE_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/api/src/lib/service/api-v3.service.ts",
                "type": "number",
                "defaultValue": "20"
            },
            {
                "name": "MAGIC_PAGE_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/api/src/lib/select/pager/api-pager.model.ts",
                "type": "number",
                "defaultValue": "20"
            },
            {
                "name": "MAGIC_POSITIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/modal-a11y/modal-a11y.component.ts",
                "type": "[]",
                "defaultValue": "[\r\n\t'center',\r\n\t'top',\r\n\t'right',\r\n\t'bottom',\r\n\t'left',\r\n]"
            },
            {
                "name": "MAGIC_SIZES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/modal-a11y/modal-a11y.component.ts",
                "type": "[]",
                "defaultValue": "[\r\n\t'small',\r\n\t'medium',\r\n\t'large',\r\n]"
            },
            {
                "name": "MAGIC_STEP",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/option/src/lib/operator/pager/option-pager.component.ts",
                "type": "number",
                "defaultValue": "10"
            },
            {
                "name": "MAGIC_STEP",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/option/src/lib/operator/pager/tree-option-pager.component.ts",
                "type": "number",
                "defaultValue": "10"
            },
            {
                "name": "node1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/ivy-tree/ivy-tree.component.ts",
                "type": "object",
                "defaultValue": "{ id: 1, name: 'root 1' }"
            },
            {
                "name": "node1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/option-selector/option-selector.component.ts",
                "type": "object",
                "defaultValue": "{ id: 1, name: 'root 1' }"
            },
            {
                "name": "node1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/poc-tree/poc-tree.component.ts",
                "type": "object",
                "defaultValue": "{ id: 1, name: 'root 1' }"
            },
            {
                "name": "node1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/select-option-placeholder/select-option-placeholder.component.ts",
                "type": "object",
                "defaultValue": "{ id: 1, name: 'root 1' }"
            },
            {
                "name": "node1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/tree-picker-advanced/tree-picker-advanced.component.ts",
                "type": "object",
                "defaultValue": "{ id: 1, name: 'root 1' }"
            },
            {
                "name": "node11",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/ivy-tree/ivy-tree.component.ts",
                "type": "object",
                "defaultValue": "{ id: 11, name: 'node 1.1' }"
            },
            {
                "name": "node11",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/option-selector/option-selector.component.ts",
                "type": "object",
                "defaultValue": "{ id: 11, name: 'node 1.1' }"
            },
            {
                "name": "node11",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/poc-tree/poc-tree.component.ts",
                "type": "object",
                "defaultValue": "{ id: 11, name: 'node 1.1' }"
            },
            {
                "name": "node11",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/select-option-placeholder/select-option-placeholder.component.ts",
                "type": "object",
                "defaultValue": "{ id: 11, name: 'node 1.1' }"
            },
            {
                "name": "node11",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/tree-picker-advanced/tree-picker-advanced.component.ts",
                "type": "object",
                "defaultValue": "{ id: 11, name: 'node 1.1' }"
            },
            {
                "name": "node111",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/ivy-tree/ivy-tree.component.ts",
                "type": "object",
                "defaultValue": "{ id: 111, name: 'leaf 1.1.1' }"
            },
            {
                "name": "node111",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/option-selector/option-selector.component.ts",
                "type": "object",
                "defaultValue": "{ id: 111, name: 'leaf 1.1.1' }"
            },
            {
                "name": "node111",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/poc-tree/poc-tree.component.ts",
                "type": "object",
                "defaultValue": "{ id: 111, name: 'leaf 1.1.1' }"
            },
            {
                "name": "node111",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/select-option-placeholder/select-option-placeholder.component.ts",
                "type": "object",
                "defaultValue": "{ id: 111, name: 'leaf 1.1.1' }"
            },
            {
                "name": "node111",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/tree-picker-advanced/tree-picker-advanced.component.ts",
                "type": "object",
                "defaultValue": "{ id: 111, name: 'leaf 1.1.1' }"
            },
            {
                "name": "node12",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/ivy-tree/ivy-tree.component.ts",
                "type": "object",
                "defaultValue": "{ id: 11, name: 'node 1.2' }"
            },
            {
                "name": "node12",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/option-selector/option-selector.component.ts",
                "type": "object",
                "defaultValue": "{ id: 11, name: 'node 1.2' }"
            },
            {
                "name": "node12",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/poc-tree/poc-tree.component.ts",
                "type": "object",
                "defaultValue": "{ id: 11, name: 'node 1.2' }"
            },
            {
                "name": "node12",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/select-option-placeholder/select-option-placeholder.component.ts",
                "type": "object",
                "defaultValue": "{ id: 11, name: 'node 1.2' }"
            },
            {
                "name": "node12",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/tree-picker-advanced/tree-picker-advanced.component.ts",
                "type": "object",
                "defaultValue": "{ id: 11, name: 'node 1.2' }"
            },
            {
                "name": "node2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/ivy-tree/ivy-tree.component.ts",
                "type": "object",
                "defaultValue": "{ id: 2, name: 'root 2' }"
            },
            {
                "name": "node2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/option-selector/option-selector.component.ts",
                "type": "object",
                "defaultValue": "{ id: 2, name: 'root 2' }"
            },
            {
                "name": "node2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/select-option-placeholder/select-option-placeholder.component.ts",
                "type": "object",
                "defaultValue": "{ id: 2, name: 'root 2' }"
            },
            {
                "name": "node2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/tree-picker-advanced/tree-picker-advanced.component.ts",
                "type": "object",
                "defaultValue": "{ id: 2, name: 'root 2' }"
            },
            {
                "name": "node21",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/ivy-tree/ivy-tree.component.ts",
                "type": "object",
                "defaultValue": "{ id: 21, name: 'node 2.1' }"
            },
            {
                "name": "node21",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/option-selector/option-selector.component.ts",
                "type": "object",
                "defaultValue": "{ id: 21, name: 'node 2.1' }"
            },
            {
                "name": "node21",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/select-option-placeholder/select-option-placeholder.component.ts",
                "type": "object",
                "defaultValue": "{ id: 21, name: 'node 2.1' }"
            },
            {
                "name": "node21",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/app/issues/tree-picker-advanced/tree-picker-advanced.component.ts",
                "type": "object",
                "defaultValue": "{ id: 21, name: 'node 2.1' }"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-bis/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng-bis/user/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/applications/sandbox/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/animations/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/api/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/core/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/date/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/department/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/dropdown/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/establishment/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/formly/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/input/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/material/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/modal/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/option/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/picker/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/number/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/popover/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/popup/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/root/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/safe-content/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/scroll/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/select/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/sidepanel/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/tooltip/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/ng/libraries/user/src/test.ts",
                "type": "any"
            },
            {
                "name": "template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/scss/button.stories.ts",
                "type": "Story<ButtonStory>",
                "defaultValue": "(args: ButtonStory) => ({\r\n  props: args,\r\n})"
            }
        ],
        "functions": [
            {
                "name": "generateId",
                "file": "packages/ng/libraries/core/src/lib/id/id.generator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "string"
            },
            {
                "name": "hexToHsl",
                "file": "packages/ng/applications/sandbox/src/app/issues/option-groupby/option-groupby.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "hex"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "hex",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "luFadeAnimationFactory",
                "file": "packages/ng/libraries/animations/src/lib/animation.factory.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "animationInTiming"
                    },
                    {
                        "name": "animationOutTiming"
                    },
                    {
                        "name": "triggerName"
                    }
                ],
                "returnType": "AnimationTriggerMetadata",
                "jsdoctags": [
                    {
                        "name": "animationInTiming",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "animationOutTiming",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "triggerName",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "luFadingAnimation",
                "file": "packages/ng/libraries/animations/src/lib/fade.animation.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "inTiming"
                    },
                    {
                        "name": "outTiming"
                    }
                ],
                "returnType": "AnimationMetadata[]",
                "jsdoctags": [
                    {
                        "name": "inTiming",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "outTiming",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "luScaleAnimationFactory",
                "file": "packages/ng/libraries/animations/src/lib/animation.factory.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "animationInTiming"
                    },
                    {
                        "name": "animationOutTiming"
                    },
                    {
                        "name": "triggerName"
                    }
                ],
                "returnType": "AnimationTriggerMetadata",
                "jsdoctags": [
                    {
                        "name": "animationInTiming",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "animationOutTiming",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "triggerName",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "luScalingAnimation",
                "file": "packages/ng/libraries/animations/src/lib/scale.animation.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "inTiming"
                    },
                    {
                        "name": "outTiming"
                    }
                ],
                "returnType": "AnimationMetadata[]",
                "jsdoctags": [
                    {
                        "name": "inTiming",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "outTiming",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "luSlideAnimationFactory",
                "file": "packages/ng/libraries/animations/src/lib/animation.factory.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "animationInTiming"
                    },
                    {
                        "name": "animationOutTiming"
                    },
                    {
                        "name": "triggerName"
                    }
                ],
                "returnType": "AnimationTriggerMetadata",
                "jsdoctags": [
                    {
                        "name": "animationInTiming",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "animationOutTiming",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "triggerName",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "luSlidingAnimation",
                "file": "packages/ng/libraries/animations/src/lib/slide.animation.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "inTiming"
                    },
                    {
                        "name": "outTiming"
                    }
                ],
                "returnType": "AnimationMetadata[]",
                "jsdoctags": [
                    {
                        "name": "inTiming",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "outTiming",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "throwLuPopoverInvalidAlignement",
                "file": "packages/ng/libraries/popover/src/lib/target/popover-target.error.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Throws an exception for the case when popover&#39;s LuPopoverAlignement value isn&#39;t valid.</p>\n",
                "args": []
            },
            {
                "name": "throwLuPopoverInvalidPosition",
                "file": "packages/ng/libraries/popover/src/lib/target/popover-target.error.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Throws an exception for the case when popover&#39;s LuPopoverPosition value isn&#39;t valid.</p>\n",
                "args": []
            },
            {
                "name": "throwLuPopoverMissingPanelError",
                "file": "packages/ng/libraries/popover/src/lib/trigger/popover-trigger.error.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Throws an exception for the case when popover trigger doesn&#39;t have a valid lu-popover instance</p>\n",
                "args": []
            },
            {
                "name": "throwLuPopoverMissingTargetError",
                "file": "packages/ng/libraries/popover/src/lib/trigger/popover-trigger.error.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": []
            }
        ],
        "typealiases": [
            {
                "name": "ILuIntl",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "packages/ng/libraries/core/src/lib/translate/intl.model.ts",
                "description": "",
                "kind": 176
            },
            {
                "name": "LuAnimationType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"scale\" | \"slide\" | \"fade\"",
                "file": "packages/ng/libraries/animations/src/lib/animation.factory.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "LuDisplayFormat",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LuDisplayFullname | LuDisplayInitials | LuDisplayHybrid",
                "file": "packages/ng/libraries/user/src/lib/display/display-format.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "LuOptionComparer",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "packages/ng/libraries/option/src/lib/picker/option-picker.model.ts",
                "description": "",
                "kind": 162
            },
            {
                "name": "LuPopoverAlignment",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top\" | \"bottom\" | \"left\" | \"right\" | \"center\"",
                "file": "packages/ng/libraries/popover/src/lib/target/popover-target.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "LuPopoverPosition",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"above\" | \"below\" | \"before\" | \"after\"",
                "file": "packages/ng/libraries/popover/src/lib/target/popover-target.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "LuPopoverScrollStrategy",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"reposition\" | \"block\" | \"close\"",
                "file": "packages/ng/libraries/popover/src/lib/panel/popover-panel.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "LuPopoverTriggerEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"click\" | \"hover\" | \"none\" | \"focus\"",
                "file": "packages/ng/libraries/popover/src/lib/trigger/popover-trigger.model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "LuSafeContentType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"html\" | \"style\" | \"script\" | \"url\" | \"resourceUrl\"",
                "file": "packages/ng/libraries/safe-content/src/lib/safe-content.model.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "ELuDateGranularity",
                "childs": [
                    {
                        "name": "day",
                        "value": "day"
                    },
                    {
                        "name": "month",
                        "value": "month"
                    },
                    {
                        "name": "year",
                        "value": "year"
                    },
                    {
                        "name": "decade",
                        "value": "decade"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "packages/ng/libraries/core/src/lib/date/date-granularity.enum.ts"
            },
            {
                "name": "LuDisplayFullname",
                "childs": [
                    {
                        "name": "firstlast",
                        "value": "fl"
                    },
                    {
                        "name": "lastfirst",
                        "value": "lf"
                    },
                    {
                        "name": "first",
                        "value": "f"
                    },
                    {
                        "name": "last",
                        "value": "l"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "packages/ng/libraries/user/src/lib/display/display-format.model.ts"
            },
            {
                "name": "LuDisplayHybrid",
                "childs": [
                    {
                        "name": "firstIlastFull",
                        "value": "Fl"
                    },
                    {
                        "name": "firstFulllastI",
                        "value": "fL"
                    },
                    {
                        "name": "lastIfirstFull",
                        "value": "Lf"
                    },
                    {
                        "name": "lastFullfirstI",
                        "value": "lF"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "packages/ng/libraries/user/src/lib/display/display-format.model.ts"
            },
            {
                "name": "LuDisplayInitials",
                "childs": [
                    {
                        "name": "firstlast",
                        "value": "FL"
                    },
                    {
                        "name": "lastfirst",
                        "value": "LF"
                    },
                    {
                        "name": "last",
                        "value": "L"
                    },
                    {
                        "name": "first",
                        "value": "F"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "packages/ng/libraries/user/src/lib/display/display-format.model.ts"
            },
            {
                "name": "Strategy",
                "childs": [
                    {
                        "name": "append"
                    },
                    {
                        "name": "replace"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "packages/ng/libraries/api/src/lib/select/pager/api-pager.model.ts"
            },
            {
                "name": "ToggleMode",
                "childs": [
                    {
                        "name": "all"
                    },
                    {
                        "name": "self"
                    },
                    {
                        "name": "children"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "packages/ng/libraries/option/src/lib/picker/tree-option-picker.component.ts"
            }
        ],
        "groupedVariables": {
            "stories/scss/button.stories.ts": [
                {
                    "name": "basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/scss/button.stories.ts",
                    "type": "",
                    "defaultValue": "template.bind({})"
                },
                {
                    "name": "template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/scss/button.stories.ts",
                    "type": "Story<ButtonStory>",
                    "defaultValue": "(args: ButtonStory) => ({\r\n  props: args,\r\n})"
                }
            ],
            "packages/ng-bis/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-bis/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-bis/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng-bis/user/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-bis/user/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng-bis/user/src/test.ts",
                    "type": "literal type"
                }
            ],
            "packages/ng/applications/sandbox/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng/libraries/animations/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/animations/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/animations/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng/libraries/api/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/api/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/api/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng/libraries/core/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/core/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/core/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng/libraries/date/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/date/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/date/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng/libraries/department/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/department/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/department/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng/libraries/dropdown/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/dropdown/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/dropdown/src/test.ts",
                    "type": "literal type"
                }
            ],
            "packages/ng/libraries/establishment/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/establishment/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/establishment/src/test.ts",
                    "type": "literal type"
                }
            ],
            "packages/ng/libraries/formly/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/formly/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/formly/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng/libraries/input/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/input/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/input/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng/libraries/material/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/material/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/material/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng/libraries/modal/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/modal/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/modal/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng/libraries/option/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/option/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/option/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng/libraries/picker/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/picker/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/picker/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng/libraries/number/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/number/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/number/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng/libraries/popover/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/popover/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/popover/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng/libraries/popup/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/popup/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/popup/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng/libraries/root/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/root/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/root/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng/libraries/safe-content/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/safe-content/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/safe-content/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng/libraries/scroll/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/scroll/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/scroll/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng/libraries/select/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/select/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/select/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng/libraries/sidepanel/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/sidepanel/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/sidepanel/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng/libraries/tooltip/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/tooltip/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/tooltip/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng/libraries/user/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/user/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/user/src/test.ts",
                    "type": "any"
                }
            ],
            "packages/ng/applications/sandbox/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n\tapiUrl: 'https://prisme-proxy.lucca.io',\r\n\tproduction: true,\r\n\tuseHash: true,\r\n}"
                }
            ],
            "packages/ng/applications/sandbox/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n\tproduction: false,\r\n\tapiUrl: 'https://prisme-proxy.lucca.io',\r\n\tuseHash: false,\r\n\r\n}"
                }
            ],
            "packages/ng/libraries/core/src/lib/id/id.generator.ts": [
                {
                    "name": "ID_BASE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/core/src/lib/id/id.generator.ts",
                    "type": "number",
                    "defaultValue": "16"
                },
                {
                    "name": "ID_LENGTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/core/src/lib/id/id.generator.ts",
                    "type": "number",
                    "defaultValue": "8"
                }
            ],
            "packages/ng/applications/sandbox/src/app/issues/issues.router.ts": [
                {
                    "name": "issues",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/issues.router.ts",
                    "type": "",
                    "defaultValue": "[ ...routes].map(r => r.path)"
                }
            ],
            "packages/ng/applications/sandbox/src/app/issues/issues.component.ts": [
                {
                    "name": "ISSUES_INDEX_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/issues.component.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken('issues index')"
                }
            ],
            "packages/ng/applications/sandbox/src/app/issues/poc-translate/lol.translate.ts": [
                {
                    "name": "LOL_TRANSLATIONS_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/poc-translate/lol.translate.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken('lol translations')"
                },
                {
                    "name": "lolTranslations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/poc-translate/lol.translate.ts",
                    "type": "object",
                    "defaultValue": "{\r\n\ten: {\r\n\t\tlol: 'lol',\r\n\t},\r\n\tfr: {\r\n\t\tlol: 'mdr',\r\n\t},\r\n\tde : {\r\n\t\tlol: 'laut lachen',\r\n\t}\r\n}"
                }
            ],
            "packages/ng/applications/sandbox/src/app/issues/poc-translate/lol.override.ts": [
                {
                    "name": "lolOverrides",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/poc-translate/lol.override.ts",
                    "type": "object",
                    "defaultValue": "{\r\n\ten: {\r\n\t\tlol: 'overrided',\r\n\t},\r\n\tfr: {\r\n\t\tlol: 'surchargé',\r\n\t},\r\n\tde : {\r\n\t\tlol: 'überwiegen',\r\n\t}\r\n}"
                }
            ],
            "packages/ng/libraries/date/src/lib/input/date-input.token.ts": [
                {
                    "name": "LU_DATE_INPUT_TRANSLATIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/date/src/lib/input/date-input.token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken('LuDateInputtranslations')"
                }
            ],
            "packages/ng/libraries/date/src/lib/select/date-select-input.token.ts": [
                {
                    "name": "LU_DATE_SELECT_INPUT_TRANSLATIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/date/src/lib/select/date-select-input.token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken('LuDateSelectInputtranslations')"
                }
            ],
            "packages/ng/libraries/animations/src/lib/animation.factory.ts": [
                {
                    "name": "LU_DEFAULT_ANIMATION_TIMING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/animations/src/lib/animation.factory.ts",
                    "type": "string",
                    "defaultValue": "'250ms 0ms ease-out'"
                }
            ],
            "packages/ng/libraries/department/src/lib/select/input/department-select-input.token.ts": [
                {
                    "name": "LU_DEPARTMENT_SELECT_INPUT_TRANSLATIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/department/src/lib/select/input/department-select-input.token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken('LuDepartmentSelectTranslations')"
                }
            ],
            "packages/ng/libraries/establishment/src/lib/select/input/establishment-select-input.token.ts": [
                {
                    "name": "LU_ESTABLISHMENT_SELECT_INPUT_TRANSLATIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/establishment/src/lib/select/input/establishment-select-input.token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken('LuEstablishmentSelectTranslations')"
                }
            ],
            "packages/ng/libraries/formly/src/lib/formly.config.ts": [
                {
                    "name": "LU_FORMLY_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/formly/src/lib/formly.config.ts",
                    "type": "",
                    "defaultValue": "{\r\n\ttypes: [\r\n\t\t{\r\n\t\t\tname: 'input',\r\n\t\t\tcomponent: LuFormlyFieldInput,\r\n\t\t\twrappers: ['textfield-layout'],\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'radio',\r\n\t\t\tcomponent: LuFormlyFieldRadios,\r\n\t\t\twrappers: ['radiosfield-layout'],\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'checkbox',\r\n\t\t\tcomponent: LuFormlyFieldCheckbox,\r\n\t\t\twrappers: ['checkbox-layout'],\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'date',\r\n\t\t\tcomponent: LuFormlyFieldDate,\r\n\t\t\twrappers: ['textfield-layout'],\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'textarea',\r\n\t\t\tcomponent: LuFormlyFieldTextarea,\r\n\t\t\twrappers: ['textfield-layout'],\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'select',\r\n\t\t\tcomponent: LuFormlyFieldSelect,\r\n\t\t\twrappers: ['textfield-layout'],\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'user',\r\n\t\t\tcomponent: LuFormlyFieldUser,\r\n\t\t\twrappers: ['textfield-layout'],\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'api',\r\n\t\t\tcomponent: LuFormlyFieldApi,\r\n\t\t\twrappers: ['textfield-layout'],\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'department',\r\n\t\t\tcomponent: LuFormlyFieldDepartment,\r\n\t\t\twrappers: ['textfield-layout'],\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'establishment',\r\n\t\t\tcomponent: LuFormlyFieldEstablishment,\r\n\t\t\twrappers: ['textfield-layout']\r\n\t\t}\r\n\t],\r\n\twrappers: [\r\n\t\t{ name: 'helper', component: LuFormlyWrapperHelper },\r\n\t\t{ name: 'checkbox-layout', component: LuFormlyWrapperCheckboxLayout },\r\n\t\t{ name: 'radiosfield-layout', component: LuFormlyWrapperRadiosfieldLayout },\r\n\t\t{ name: 'textfield-layout', component: LuFormlyWrapperTextfieldLayout },\r\n\t\t{ name: 'suffix', component: LuFormlyWrapperSuffix },\r\n\t\t{ name: 'icon', component: LuFormlyWrapperIcon },\r\n\t\t{ name: 'error', component: LuFormlyWrapperError },\r\n\t],\r\n\tmanipulators: [\r\n\r\n\t\t{ class: TemplateError, method: 'run' }, // fifth\r\n\t\t{ class: TemplateHelper, method: 'run' }, // fourth\r\n\t\t{ class: TemplateSuffix, method: 'run' }, // third\r\n\t\t{ class: TemplateIcon, method: 'run' }, // second\r\n\t],\r\n} as ConfigOption"
                }
            ],
            "packages/ng/libraries/modal/src/lib/modal.token.ts": [
                {
                    "name": "LU_MODAL_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/modal/src/lib/modal.token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<any>('LuModalDefaultConfig')"
                },
                {
                    "name": "LU_MODAL_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/modal/src/lib/modal.token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<any>('LuModalData')",
                    "description": "<p>Injection token that can be used to access the data that was passed in to a dialog. </p>\n"
                },
                {
                    "name": "LU_MODAL_REF_FACTORY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/modal/src/lib/modal.token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<any>('LuModalRefFactory')"
                },
                {
                    "name": "LU_MODAL_TRANSLATIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/modal/src/lib/modal.token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken('LuModalTranslations')"
                }
            ],
            "packages/ng/libraries/core/src/lib/date/native/native-date.option.ts": [
                {
                    "name": "LU_NATIVE_DATE_ADAPTER_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/core/src/lib/date/native/native-date.option.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<ILuNativeDateAdapterOptions>('Native date adapter options')"
                },
                {
                    "name": "luDefaultNativeDateAdapterOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/core/src/lib/date/native/native-date.option.ts",
                    "type": "ILuNativeDateAdapterOptions",
                    "defaultValue": "{\r\n\tuseUtc: false,\r\n}"
                }
            ],
            "packages/ng/libraries/option/src/lib/placeholder/option-placeholder.token.ts": [
                {
                    "name": "LU_OPTION_PLACEHOLDER_TRANSLATIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/option/src/lib/placeholder/option-placeholder.token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken('LuOptionPlaceholderTranslations')"
                }
            ],
            "packages/ng/libraries/option/src/lib/selector/all/select-all.token.ts": [
                {
                    "name": "LU_OPTION_SELECT_ALL_TRANSLATIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/option/src/lib/selector/all/select-all.token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken('LuOptionSelectAllTranslations')"
                }
            ],
            "packages/ng/libraries/popup/src/lib/popup.token.ts": [
                {
                    "name": "LU_POPUP_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/popup/src/lib/popup.token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<any>('LuPopupDefaultConfig')"
                },
                {
                    "name": "LU_POPUP_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/popup/src/lib/popup.token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<any>('LuPopupData')",
                    "description": "<p>Injection token that can be used to access the data that was passed in to a dialog. </p>\n"
                },
                {
                    "name": "LU_POPUP_REF_FACTORY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/popup/src/lib/popup.token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<any>('LuPopupRefFactory')"
                }
            ],
            "packages/ng/libraries/sidepanel/src/lib/sidepanel.token.ts": [
                {
                    "name": "LU_SIDEPANEL_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel.token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<any>('LuSidepanelDefaultConfig')"
                },
                {
                    "name": "LU_SIDEPANEL_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel.token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<any>('LuSidepanelData')",
                    "description": "<p>Injection token that can be used to access the data that was passed in to a dialog. </p>\n"
                },
                {
                    "name": "LU_SIDEPANEL_REF_FACTORY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel.token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<any>('LuSidepanelRefFactory')"
                },
                {
                    "name": "LU_SIDEPANEL_TRANSLATIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel.token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken('LuSidepanelTranslations')"
                }
            ],
            "packages/ng/libraries/option/src/lib/item/tree-option-item.token.ts": [
                {
                    "name": "LU_TREE_OPTION_ITEM_TRANSLATIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/option/src/lib/item/tree-option-item.token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken('LuTreeOptionItemTranslations')"
                }
            ],
            "packages/ng/libraries/user/src/lib/select/searcher/user-searcher.token.ts": [
                {
                    "name": "LU_USER_SEARCHER_TRANSLATIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/user/src/lib/select/searcher/user-searcher.token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken('LuUserSearcherTranslations')"
                }
            ],
            "packages/ng/libraries/user/src/lib/select/input/user-select-input.token.ts": [
                {
                    "name": "LU_USER_SELECT_INPUT_TRANSLATIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/user/src/lib/select/input/user-select-input.token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken('LuUserSelectTranslations')"
                }
            ],
            "packages/ng/libraries/date/src/lib/input/date-input.translate.ts": [
                {
                    "name": "luDateInputTranslations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/date/src/lib/input/date-input.translate.ts",
                    "type": "",
                    "defaultValue": "{\r\n\ten: {\r\n\t\tplaceholderDay: 'dd/mm/yyyy',\r\n\t\tplaceholderMonth: 'mm/yyyy',\r\n\t\tplaceholderYear: 'yyyy',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n\t'en-GB': {\r\n\t\tplaceholderDay: 'dd/mm/yyyy',\r\n\t\tplaceholderMonth: 'mm/yyyy',\r\n\t\tplaceholderYear: 'yyyy',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n\t'en-US': {\r\n\t\tplaceholderDay: 'mm/dd/yyyy',\r\n\t\tplaceholderMonth: 'mm/yyyy',\r\n\t\tplaceholderYear: 'yyyy',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n\tfr: {\r\n\t\tplaceholder: 'jj/mm/aaaa',\r\n\t\tplaceholderDay: 'jj/mm/aaaa',\r\n\t\tplaceholderMonth: 'mm/aaaa',\r\n\t\tplaceholderYear: 'aaaa',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n} as ILuTranslation<ILuDateInputLabel>"
                }
            ],
            "packages/ng/libraries/date/src/lib/select/date-select-input.translate.ts": [
                {
                    "name": "luDateSelectInputTranslations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/date/src/lib/select/date-select-input.translate.ts",
                    "type": "",
                    "defaultValue": "{\r\n\ten: {\r\n\t\tplaceholderDay: 'dd/mm/yyyy',\r\n\t\tplaceholderMonth: 'mm/yyyy',\r\n\t\tplaceholderYear: 'yyyy',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n\t'en-US': {\r\n\t\tplaceholderDay: 'mm/dd/yyyy',\r\n\t\tplaceholderMonth: 'mm/yyyy',\r\n\t\tplaceholderYear: 'yyyy',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n\tfr: {\r\n\t\tplaceholder: 'jj/mm/aaaa',\r\n\t\tplaceholderDay: 'jj/mm/aaaa',\r\n\t\tplaceholderMonth: 'mm/aaaa',\r\n\t\tplaceholderYear: 'aaaa',\r\n\t\tformatDay: 'shortDate',\r\n\t\tformatMonth: 'MM/y',\r\n\t\tformatYear: 'y',\r\n\t},\r\n} as ILuTranslation<ILuDateSelectInputLabel>"
                }
            ],
            "packages/ng/libraries/modal/src/lib/modal-config.default.ts": [
                {
                    "name": "luDefaultModalConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/modal/src/lib/modal-config.default.ts",
                    "type": "ILuModalConfig",
                    "defaultValue": "{\r\n\tposition: 'center',\r\n\tnoBackdrop: false,\r\n\tundismissable: false,\r\n\tbackdropClass: ['cdk-overlay-dark-backdrop', 'lu-popup-backdrop'],\r\n\tpanelClass: 'lu-popup-panel',\r\n\tsize: 'standard',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n}"
                }
            ],
            "packages/ng/libraries/popup/src/lib/popup-config.default.ts": [
                {
                    "name": "luDefaultPopupConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/popup/src/lib/popup-config.default.ts",
                    "type": "ILuPopupConfig",
                    "defaultValue": "{\r\n\tposition: 'center',\r\n\tnoBackdrop: false,\r\n\tundismissable: false,\r\n\tbackdropClass: ['cdk-overlay-dark-backdrop', 'lu-popup-backdrop'],\r\n\tpanelClass: 'lu-popup-panel',\r\n\tsize: 'standard',\r\n}"
                }
            ],
            "packages/ng/libraries/sidepanel/src/lib/sidepanel-config.default.ts": [
                {
                    "name": "luDefaultSidepanelConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel-config.default.ts",
                    "type": "ILuSidepanelConfig",
                    "defaultValue": "{\r\n\tposition: 'right',\r\n\tnoBackdrop: false,\r\n\tundismissable: false,\r\n\tbackdropClass: ['cdk-overlay-dark-backdrop', 'lu-popup-backdrop'],\r\n\tpanelClass: ['lu-popup-panel', 'mod-sidepanel'],\r\n\tsize: 'standard',\r\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\r\n}"
                }
            ],
            "packages/ng/libraries/department/src/lib/select/input/department-select-input.translate.ts": [
                {
                    "name": "luDepartmentSelectInputTranslations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/department/src/lib/select/input/department-select-input.translate.ts",
                    "type": "",
                    "defaultValue": "{\r\n\ten: {\r\n\t\tdepartments: 'departments',\r\n\t},\r\n\tfr: {\r\n\t\tdepartments: 'départements',\r\n\t},\r\n} as ILuTranslation<ILuDepartmentSelectInputLabel>"
                }
            ],
            "packages/ng/libraries/establishment/src/lib/select/select-all/establishment-select-all.translate.ts": [
                {
                    "name": "luEstablishmentSelectAllTranslations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/establishment/src/lib/select/select-all/establishment-select-all.translate.ts",
                    "type": "",
                    "defaultValue": "{\r\n\ten: {\r\n\t\tselect: 'Select all',\r\n\t\tdeselect: 'Deselect all',\r\n\t},\r\n\tfr: {\r\n\t\tselect: 'Tout sélectionner',\r\n\t\tdeselect: 'Tout Déselectionner'\r\n\t},\r\n\tde: {\r\n\t\tselect: 'Alle auswählen',\r\n\t\tdeselect: 'Alle abwählen'\r\n\t},\r\n\tpt: {\r\n\t\tselect: 'Selecionar tudo',\r\n\t\tdeselect: 'Desselecionar tudo'\r\n\t},\r\n\tes: {\r\n\t\tselect: 'Seleccionar todo',\r\n\t\tdeselect: 'Desmarcar todo'\r\n\t},\r\n} as ILuTranslation<ILuOptionSelectAllLabel>"
                }
            ],
            "packages/ng/libraries/establishment/src/lib/select/input/establishment-select-input.translate.ts": [
                {
                    "name": "luEstablishmentSelectInputTranslations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/establishment/src/lib/select/input/establishment-select-input.translate.ts",
                    "type": "",
                    "defaultValue": "{\r\n\ten: {\r\n\t\testablishments: 'establishments',\r\n\t},\r\n\tfr: {\r\n\t\testablishments: 'établissements',\r\n\t},\r\n} as ILuTranslation<ILuEstablishmentSelectInputLabel>"
                }
            ],
            "packages/ng/libraries/modal/src/lib/modal.translate.ts": [
                {
                    "name": "luModalTranslations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/modal/src/lib/modal.translate.ts",
                    "type": "",
                    "defaultValue": "{\r\n\ten: {\r\n\t\tsubmit: 'Ok',\r\n\t\tcancel: 'Cancel',\r\n\t},\r\n\tfr: {\r\n\t\tsubmit: 'Ok',\r\n\t\tcancel: 'Annuler',\r\n\t},\r\n} as ILuTranslation<ILuModalLabel>"
                }
            ],
            "packages/ng/libraries/option/src/lib/placeholder/option-placeholder.translate.ts": [
                {
                    "name": "luOptionPlaceholderTranslations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/option/src/lib/placeholder/option-placeholder.translate.ts",
                    "type": "",
                    "defaultValue": "{\r\n\ten: {\r\n\t\tplaceholderDescription: 'No results match your search criteria.',\r\n\t\tplaceholderAction: 'Clear search',\r\n\t},\r\n\tfr: {\r\n\t\tplaceholderDescription: 'Aucun résultat pour votre recherche',\r\n\t\tplaceholderAction: 'Vider la recherche',\r\n\t},\r\n} as ILuTranslation<ILuOptionPlaceholderLabel>"
                }
            ],
            "packages/ng/libraries/option/src/lib/selector/all/select-all.translate.ts": [
                {
                    "name": "luOptionSelectAllTranslations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/option/src/lib/selector/all/select-all.translate.ts",
                    "type": "",
                    "defaultValue": "{\r\n\ten: {\r\n\t\tselect: 'Select all',\r\n\t\tdeselect: 'Deselect all',\r\n\t},\r\n\tfr: {\r\n\t\tselect: 'Tout sélectionner',\r\n\t\tdeselect: 'Tout Déselectionner'\r\n\t},\r\n\tde: {\r\n\t\tselect: 'Alle auswählen',\r\n\t\tdeselect: 'Alle abwählen'\r\n\t},\r\n\tpt: {\r\n\t\tselect: 'Selecionar tudo',\r\n\t\tdeselect: 'Desselecionar tudo'\r\n\t},\r\n\tes: {\r\n\t\tselect: 'Seleccionar todo',\r\n\t\tdeselect: 'Desmarcar todo'\r\n\t},\r\n} as ILuTranslation<ILuOptionSelectAllLabel>"
                }
            ],
            "packages/ng/libraries/sidepanel/src/lib/sidepanel.translate.ts": [
                {
                    "name": "luSidepanelTranslations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/sidepanel/src/lib/sidepanel.translate.ts",
                    "type": "",
                    "defaultValue": "{\r\n\ten: {\r\n\t\tsubmit: 'Ok',\r\n\t\tcancel: 'Cancel',\r\n\t},\r\n\tfr: {\r\n\t\tsubmit: 'Ok',\r\n\t\tcancel: 'Annuler',\r\n\t},\r\n} as ILuTranslation<ILuSidepanelLabel>"
                }
            ],
            "packages/ng/libraries/popover/src/lib/animation/popover.animation.ts": [
                {
                    "name": "luTransformPopover",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/popover/src/lib/animation/popover.animation.ts",
                    "type": "AnimationTriggerMetadata",
                    "defaultValue": "trigger(\r\n\t'transformPopover',\r\n\t[\r\n\t\tstate(\r\n\t\t\t'enter',\r\n\t\t\tstyle({\r\n\t\t\t\topacity: 1,\r\n\t\t\t\ttransform: `scale(1)`,\r\n\t\t\t}),\r\n\t\t),\r\n\t\ttransition('void => *', [\r\n\t\t\tstyle({\r\n\t\t\t\topacity: 0,\r\n\t\t\t\ttransform: `scale(0)`,\r\n\t\t\t}),\r\n\t\t\tanimate(`150ms cubic-bezier(0.25, 0.8, 0.25, 1)`),\r\n\t\t]),\r\n\t\ttransition('* => void', [\r\n\t\t\tanimate('50ms 100ms linear', style({ opacity: 0 })),\r\n\t\t]),\r\n\t],\r\n)"
                }
            ],
            "packages/ng/libraries/tooltip/src/lib/animation/tooltip.animation.ts": [
                {
                    "name": "luTransformTooltip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/tooltip/src/lib/animation/tooltip.animation.ts",
                    "type": "AnimationTriggerMetadata",
                    "defaultValue": "trigger(\r\n\t'transformTooltip',\r\n\t[\r\n\t\tstate(\r\n\t\t\t'enter',\r\n\t\t\tstyle({\r\n\t\t\t\topacity: 1,\r\n\t\t\t\ttransform: `scale(1)`,\r\n\t\t\t}),\r\n\t\t),\r\n\t\ttransition('void => *', [\r\n\t\t\tstyle({\r\n\t\t\t\topacity: 0,\r\n\t\t\t\ttransform: `scale(0)`,\r\n\t\t\t}),\r\n\t\t\tanimate(`150ms cubic-bezier(0.25, 0.8, 0.25, 1)`),\r\n\t\t]),\r\n\t\ttransition('* => void', [\r\n\t\t\tanimate('50ms 100ms linear', style({ opacity: 0 })),\r\n\t\t]),\r\n\t],\r\n)"
                }
            ],
            "packages/ng/libraries/option/src/lib/item/tree-option-item.translate.ts": [
                {
                    "name": "luTreeOptionItemTranslations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/option/src/lib/item/tree-option-item.translate.ts",
                    "type": "",
                    "defaultValue": "{\r\n\ten: {\r\n\t\tparentOnly: 'Parent only',\r\n\t\tchildrenOnly: 'Children only',\r\n\t},\r\n\tfr: {\r\n\t\tparentOnly: 'Seulement le parent',\r\n\t\tchildrenOnly: 'Seulement les enfants',\r\n\t},\r\n} as ILuTranslation<ILuTreeOptionItemLabel>"
                }
            ],
            "packages/ng/libraries/user/src/lib/select/searcher/user-searcher.translate.ts": [
                {
                    "name": "luUserSearcherTranslations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/user/src/lib/select/searcher/user-searcher.translate.ts",
                    "type": "",
                    "defaultValue": "{\r\n\ten: {\r\n\t\tincludeFormerEmployees: 'Include former employees',\r\n\t},\r\n\tfr: {\r\n\t\tincludeFormerEmployees: 'Inclure les salariés partis',\r\n\t},\r\n} as ILuTranslation<ILuUserSearcherLabel>"
                }
            ],
            "packages/ng/libraries/user/src/lib/select/input/user-select-input.translate.ts": [
                {
                    "name": "luUserSelectInputTranslations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/user/src/lib/select/input/user-select-input.translate.ts",
                    "type": "",
                    "defaultValue": "{\r\n\ten: {\r\n\t\tusers: 'users',\r\n\t\tme: 'Me:'\r\n\t},\r\n\tfr: {\r\n\t\tusers: 'utilisateurs',\r\n\t\tme: 'Moi :'\r\n\t},\r\n} as ILuTranslation<ILuUserSelectInputLabel>"
                }
            ],
            "packages/ng/libraries/api/src/lib/service/api-v3.service.ts": [
                {
                    "name": "MAGIC_PAGE_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/api/src/lib/service/api-v3.service.ts",
                    "type": "number",
                    "defaultValue": "20"
                }
            ],
            "packages/ng/libraries/api/src/lib/select/pager/api-pager.model.ts": [
                {
                    "name": "MAGIC_PAGE_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/api/src/lib/select/pager/api-pager.model.ts",
                    "type": "number",
                    "defaultValue": "20"
                }
            ],
            "packages/ng/applications/sandbox/src/app/issues/modal-a11y/modal-a11y.component.ts": [
                {
                    "name": "MAGIC_POSITIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/modal-a11y/modal-a11y.component.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n\t'center',\r\n\t'top',\r\n\t'right',\r\n\t'bottom',\r\n\t'left',\r\n]"
                },
                {
                    "name": "MAGIC_SIZES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/modal-a11y/modal-a11y.component.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n\t'small',\r\n\t'medium',\r\n\t'large',\r\n]"
                }
            ],
            "packages/ng/libraries/option/src/lib/operator/pager/option-pager.component.ts": [
                {
                    "name": "MAGIC_STEP",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/option/src/lib/operator/pager/option-pager.component.ts",
                    "type": "number",
                    "defaultValue": "10"
                }
            ],
            "packages/ng/libraries/option/src/lib/operator/pager/tree-option-pager.component.ts": [
                {
                    "name": "MAGIC_STEP",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/libraries/option/src/lib/operator/pager/tree-option-pager.component.ts",
                    "type": "number",
                    "defaultValue": "10"
                }
            ],
            "packages/ng/applications/sandbox/src/app/issues/ivy-tree/ivy-tree.component.ts": [
                {
                    "name": "node1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/ivy-tree/ivy-tree.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 1, name: 'root 1' }"
                },
                {
                    "name": "node11",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/ivy-tree/ivy-tree.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 11, name: 'node 1.1' }"
                },
                {
                    "name": "node111",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/ivy-tree/ivy-tree.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 111, name: 'leaf 1.1.1' }"
                },
                {
                    "name": "node12",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/ivy-tree/ivy-tree.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 11, name: 'node 1.2' }"
                },
                {
                    "name": "node2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/ivy-tree/ivy-tree.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 2, name: 'root 2' }"
                },
                {
                    "name": "node21",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/ivy-tree/ivy-tree.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 21, name: 'node 2.1' }"
                }
            ],
            "packages/ng/applications/sandbox/src/app/issues/option-selector/option-selector.component.ts": [
                {
                    "name": "node1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/option-selector/option-selector.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 1, name: 'root 1' }"
                },
                {
                    "name": "node11",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/option-selector/option-selector.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 11, name: 'node 1.1' }"
                },
                {
                    "name": "node111",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/option-selector/option-selector.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 111, name: 'leaf 1.1.1' }"
                },
                {
                    "name": "node12",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/option-selector/option-selector.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 11, name: 'node 1.2' }"
                },
                {
                    "name": "node2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/option-selector/option-selector.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 2, name: 'root 2' }"
                },
                {
                    "name": "node21",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/option-selector/option-selector.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 21, name: 'node 2.1' }"
                }
            ],
            "packages/ng/applications/sandbox/src/app/issues/poc-tree/poc-tree.component.ts": [
                {
                    "name": "node1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/poc-tree/poc-tree.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 1, name: 'root 1' }"
                },
                {
                    "name": "node11",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/poc-tree/poc-tree.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 11, name: 'node 1.1' }"
                },
                {
                    "name": "node111",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/poc-tree/poc-tree.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 111, name: 'leaf 1.1.1' }"
                },
                {
                    "name": "node12",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/poc-tree/poc-tree.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 11, name: 'node 1.2' }"
                }
            ],
            "packages/ng/applications/sandbox/src/app/issues/select-option-placeholder/select-option-placeholder.component.ts": [
                {
                    "name": "node1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/select-option-placeholder/select-option-placeholder.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 1, name: 'root 1' }"
                },
                {
                    "name": "node11",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/select-option-placeholder/select-option-placeholder.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 11, name: 'node 1.1' }"
                },
                {
                    "name": "node111",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/select-option-placeholder/select-option-placeholder.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 111, name: 'leaf 1.1.1' }"
                },
                {
                    "name": "node12",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/select-option-placeholder/select-option-placeholder.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 11, name: 'node 1.2' }"
                },
                {
                    "name": "node2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/select-option-placeholder/select-option-placeholder.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 2, name: 'root 2' }"
                },
                {
                    "name": "node21",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/select-option-placeholder/select-option-placeholder.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 21, name: 'node 2.1' }"
                }
            ],
            "packages/ng/applications/sandbox/src/app/issues/tree-picker-advanced/tree-picker-advanced.component.ts": [
                {
                    "name": "node1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/tree-picker-advanced/tree-picker-advanced.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 1, name: 'root 1' }"
                },
                {
                    "name": "node11",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/tree-picker-advanced/tree-picker-advanced.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 11, name: 'node 1.1' }"
                },
                {
                    "name": "node111",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/tree-picker-advanced/tree-picker-advanced.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 111, name: 'leaf 1.1.1' }"
                },
                {
                    "name": "node12",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/tree-picker-advanced/tree-picker-advanced.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 11, name: 'node 1.2' }"
                },
                {
                    "name": "node2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/tree-picker-advanced/tree-picker-advanced.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 2, name: 'root 2' }"
                },
                {
                    "name": "node21",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/ng/applications/sandbox/src/app/issues/tree-picker-advanced/tree-picker-advanced.component.ts",
                    "type": "object",
                    "defaultValue": "{ id: 21, name: 'node 2.1' }"
                }
            ]
        },
        "groupedFunctions": {
            "packages/ng/libraries/core/src/lib/id/id.generator.ts": [
                {
                    "name": "generateId",
                    "file": "packages/ng/libraries/core/src/lib/id/id.generator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "string"
                }
            ],
            "packages/ng/applications/sandbox/src/app/issues/option-groupby/option-groupby.component.ts": [
                {
                    "name": "hexToHsl",
                    "file": "packages/ng/applications/sandbox/src/app/issues/option-groupby/option-groupby.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "hex"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "hex",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "packages/ng/libraries/animations/src/lib/animation.factory.ts": [
                {
                    "name": "luFadeAnimationFactory",
                    "file": "packages/ng/libraries/animations/src/lib/animation.factory.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "animationInTiming"
                        },
                        {
                            "name": "animationOutTiming"
                        },
                        {
                            "name": "triggerName"
                        }
                    ],
                    "returnType": "AnimationTriggerMetadata",
                    "jsdoctags": [
                        {
                            "name": "animationInTiming",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "animationOutTiming",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "triggerName",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "luScaleAnimationFactory",
                    "file": "packages/ng/libraries/animations/src/lib/animation.factory.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "animationInTiming"
                        },
                        {
                            "name": "animationOutTiming"
                        },
                        {
                            "name": "triggerName"
                        }
                    ],
                    "returnType": "AnimationTriggerMetadata",
                    "jsdoctags": [
                        {
                            "name": "animationInTiming",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "animationOutTiming",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "triggerName",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "luSlideAnimationFactory",
                    "file": "packages/ng/libraries/animations/src/lib/animation.factory.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "animationInTiming"
                        },
                        {
                            "name": "animationOutTiming"
                        },
                        {
                            "name": "triggerName"
                        }
                    ],
                    "returnType": "AnimationTriggerMetadata",
                    "jsdoctags": [
                        {
                            "name": "animationInTiming",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "animationOutTiming",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "triggerName",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "packages/ng/libraries/animations/src/lib/fade.animation.ts": [
                {
                    "name": "luFadingAnimation",
                    "file": "packages/ng/libraries/animations/src/lib/fade.animation.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "inTiming"
                        },
                        {
                            "name": "outTiming"
                        }
                    ],
                    "returnType": "AnimationMetadata[]",
                    "jsdoctags": [
                        {
                            "name": "inTiming",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "outTiming",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "packages/ng/libraries/animations/src/lib/scale.animation.ts": [
                {
                    "name": "luScalingAnimation",
                    "file": "packages/ng/libraries/animations/src/lib/scale.animation.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "inTiming"
                        },
                        {
                            "name": "outTiming"
                        }
                    ],
                    "returnType": "AnimationMetadata[]",
                    "jsdoctags": [
                        {
                            "name": "inTiming",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "outTiming",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "packages/ng/libraries/animations/src/lib/slide.animation.ts": [
                {
                    "name": "luSlidingAnimation",
                    "file": "packages/ng/libraries/animations/src/lib/slide.animation.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "inTiming"
                        },
                        {
                            "name": "outTiming"
                        }
                    ],
                    "returnType": "AnimationMetadata[]",
                    "jsdoctags": [
                        {
                            "name": "inTiming",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "outTiming",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "packages/ng/libraries/popover/src/lib/target/popover-target.error.ts": [
                {
                    "name": "throwLuPopoverInvalidAlignement",
                    "file": "packages/ng/libraries/popover/src/lib/target/popover-target.error.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Throws an exception for the case when popover&#39;s LuPopoverAlignement value isn&#39;t valid.</p>\n",
                    "args": []
                },
                {
                    "name": "throwLuPopoverInvalidPosition",
                    "file": "packages/ng/libraries/popover/src/lib/target/popover-target.error.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Throws an exception for the case when popover&#39;s LuPopoverPosition value isn&#39;t valid.</p>\n",
                    "args": []
                }
            ],
            "packages/ng/libraries/popover/src/lib/trigger/popover-trigger.error.ts": [
                {
                    "name": "throwLuPopoverMissingPanelError",
                    "file": "packages/ng/libraries/popover/src/lib/trigger/popover-trigger.error.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Throws an exception for the case when popover trigger doesn&#39;t have a valid lu-popover instance</p>\n",
                    "args": []
                },
                {
                    "name": "throwLuPopoverMissingTargetError",
                    "file": "packages/ng/libraries/popover/src/lib/trigger/popover-trigger.error.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": []
                }
            ]
        },
        "groupedEnumerations": {
            "packages/ng/libraries/core/src/lib/date/date-granularity.enum.ts": [
                {
                    "name": "ELuDateGranularity",
                    "childs": [
                        {
                            "name": "day",
                            "value": "day"
                        },
                        {
                            "name": "month",
                            "value": "month"
                        },
                        {
                            "name": "year",
                            "value": "year"
                        },
                        {
                            "name": "decade",
                            "value": "decade"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "packages/ng/libraries/core/src/lib/date/date-granularity.enum.ts"
                }
            ],
            "packages/ng/libraries/user/src/lib/display/display-format.model.ts": [
                {
                    "name": "LuDisplayFullname",
                    "childs": [
                        {
                            "name": "firstlast",
                            "value": "fl"
                        },
                        {
                            "name": "lastfirst",
                            "value": "lf"
                        },
                        {
                            "name": "first",
                            "value": "f"
                        },
                        {
                            "name": "last",
                            "value": "l"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "packages/ng/libraries/user/src/lib/display/display-format.model.ts"
                },
                {
                    "name": "LuDisplayHybrid",
                    "childs": [
                        {
                            "name": "firstIlastFull",
                            "value": "Fl"
                        },
                        {
                            "name": "firstFulllastI",
                            "value": "fL"
                        },
                        {
                            "name": "lastIfirstFull",
                            "value": "Lf"
                        },
                        {
                            "name": "lastFullfirstI",
                            "value": "lF"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "packages/ng/libraries/user/src/lib/display/display-format.model.ts"
                },
                {
                    "name": "LuDisplayInitials",
                    "childs": [
                        {
                            "name": "firstlast",
                            "value": "FL"
                        },
                        {
                            "name": "lastfirst",
                            "value": "LF"
                        },
                        {
                            "name": "last",
                            "value": "L"
                        },
                        {
                            "name": "first",
                            "value": "F"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "packages/ng/libraries/user/src/lib/display/display-format.model.ts"
                }
            ],
            "packages/ng/libraries/api/src/lib/select/pager/api-pager.model.ts": [
                {
                    "name": "Strategy",
                    "childs": [
                        {
                            "name": "append"
                        },
                        {
                            "name": "replace"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "packages/ng/libraries/api/src/lib/select/pager/api-pager.model.ts"
                }
            ],
            "packages/ng/libraries/option/src/lib/picker/tree-option-picker.component.ts": [
                {
                    "name": "ToggleMode",
                    "childs": [
                        {
                            "name": "all"
                        },
                        {
                            "name": "self"
                        },
                        {
                            "name": "children"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "packages/ng/libraries/option/src/lib/picker/tree-option-picker.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "packages/ng/libraries/core/src/lib/translate/intl.model.ts": [
                {
                    "name": "ILuIntl",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "packages/ng/libraries/core/src/lib/translate/intl.model.ts",
                    "description": "",
                    "kind": 176
                }
            ],
            "packages/ng/libraries/animations/src/lib/animation.factory.ts": [
                {
                    "name": "LuAnimationType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"scale\" | \"slide\" | \"fade\"",
                    "file": "packages/ng/libraries/animations/src/lib/animation.factory.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "packages/ng/libraries/user/src/lib/display/display-format.model.ts": [
                {
                    "name": "LuDisplayFormat",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LuDisplayFullname | LuDisplayInitials | LuDisplayHybrid",
                    "file": "packages/ng/libraries/user/src/lib/display/display-format.model.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "packages/ng/libraries/option/src/lib/picker/option-picker.model.ts": [
                {
                    "name": "LuOptionComparer",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "packages/ng/libraries/option/src/lib/picker/option-picker.model.ts",
                    "description": "",
                    "kind": 162
                }
            ],
            "packages/ng/libraries/popover/src/lib/target/popover-target.model.ts": [
                {
                    "name": "LuPopoverAlignment",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top\" | \"bottom\" | \"left\" | \"right\" | \"center\"",
                    "file": "packages/ng/libraries/popover/src/lib/target/popover-target.model.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "LuPopoverPosition",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"above\" | \"below\" | \"before\" | \"after\"",
                    "file": "packages/ng/libraries/popover/src/lib/target/popover-target.model.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "packages/ng/libraries/popover/src/lib/panel/popover-panel.model.ts": [
                {
                    "name": "LuPopoverScrollStrategy",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"reposition\" | \"block\" | \"close\"",
                    "file": "packages/ng/libraries/popover/src/lib/panel/popover-panel.model.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "packages/ng/libraries/popover/src/lib/trigger/popover-trigger.model.ts": [
                {
                    "name": "LuPopoverTriggerEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"click\" | \"hover\" | \"none\" | \"focus\"",
                    "file": "packages/ng/libraries/popover/src/lib/trigger/popover-trigger.model.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "packages/ng/libraries/safe-content/src/lib/safe-content.model.ts": [
                {
                    "name": "LuSafeContentType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"html\" | \"style\" | \"script\" | \"url\" | \"resourceUrl\"",
                    "file": "packages/ng/libraries/safe-content/src/lib/safe-content.model.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "packages/ng/applications/sandbox/src/app/issues/issues.router.ts",
                "module": "IssuesRouter",
                "children": [
                    {
                        "path": "",
                        "component": "IssuesComponent"
                    },
                    {
                        "path": "date-calendar",
                        "loadChildren": "./date-calendar#DateCalendarModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "DateCalendarModule"
                            }
                        ]
                    },
                    {
                        "path": "date-input",
                        "loadChildren": "./date-input#DateInputModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "DateInputModule"
                            }
                        ]
                    },
                    {
                        "path": "date-minmax",
                        "loadChildren": "./date-minmax#DateMinmaxModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "DateMinmaxModule"
                            }
                        ]
                    },
                    {
                        "path": "date-picker",
                        "loadChildren": "./date-picker#DatePickerModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "DatePickerModule"
                            }
                        ]
                    },
                    {
                        "path": "date-select",
                        "loadChildren": "./date-select#DateSelectModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "DateSelectModule"
                            }
                        ]
                    },
                    {
                        "path": "date-utc",
                        "loadChildren": "./date-utc#DateUtcModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "DateUtcModule"
                            }
                        ]
                    },
                    {
                        "path": "department-select",
                        "loadChildren": "./department-select#DepartmentSelectModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "DepartmentSelectModule"
                            }
                        ]
                    },
                    {
                        "path": "fix-472",
                        "loadChildren": "./fix-472#Fix472Module",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "Fix472Module"
                            }
                        ]
                    },
                    {
                        "path": "fix-705-select-enter",
                        "loadChildren": "./fix-705-select-enter#Fix705SelectEnterModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "Fix705SelectEnterModule"
                            }
                        ]
                    },
                    {
                        "path": "fix-modal",
                        "loadChildren": "./fix-modal#FixModalModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "FixModalModule"
                            }
                        ]
                    },
                    {
                        "path": "formly-framed",
                        "loadChildren": "./formly-framed#FormlyFramedModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "FormlyFramedModule"
                            }
                        ]
                    },
                    {
                        "path": "formly-wrappers",
                        "loadChildren": "./formly-wrappers#FormlyWrappersModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "FormlyWrappersModule"
                            }
                        ]
                    },
                    {
                        "path": "formly",
                        "loadChildren": "./formly#FormlyModule"
                    },
                    {
                        "path": "ivy-api-select",
                        "loadChildren": "./ivy-api-select#IvyApiSelectModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "IvyApiSelectModule"
                            }
                        ]
                    },
                    {
                        "path": "ivy-option-picker",
                        "loadChildren": "./ivy-option-picker#IvyOptionPickerModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "IvyOptionPickerModule"
                            }
                        ]
                    },
                    {
                        "path": "ivy-tree",
                        "loadChildren": "./ivy-tree#IvyTreeModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "IvyTreeModule"
                            }
                        ]
                    },
                    {
                        "path": "modal-dismiss",
                        "loadChildren": "./modal-dismiss#ModalDismissModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "ModalDismissModule"
                            }
                        ]
                    },
                    {
                        "path": "modal-synched",
                        "loadChildren": "./modal-synched#ModalSynchedModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "ModalSynchedModule"
                            }
                        ]
                    },
                    {
                        "path": "modals-no-submit",
                        "loadChildren": "./modals-no-submit#ModalsNoSubmitModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "ModalsNoSubmitModule"
                            }
                        ]
                    },
                    {
                        "path": "node-sass-end",
                        "loadChildren": "./node-sass-end#NodeSassEndModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "NodeSassEndModule"
                            }
                        ]
                    },
                    {
                        "path": "option-comparer",
                        "loadChildren": "./option-comparer#OptionComparerModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "OptionComparerModule"
                            }
                        ]
                    },
                    {
                        "path": "option-selector",
                        "loadChildren": "./option-selector#OptionSelectorModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "OptionSelectorModule"
                            }
                        ]
                    },
                    {
                        "path": "picker-structure",
                        "loadChildren": "./picker-structure#PickerStructureModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "PickerStructureModule"
                            }
                        ]
                    },
                    {
                        "path": "poc-modal",
                        "loadChildren": "./poc-modal#PocModalModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "PocModalModule"
                            }
                        ]
                    },
                    {
                        "path": "poc-popup",
                        "loadChildren": "./poc-popup#PocPopupModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "PocPopupModule"
                            }
                        ]
                    },
                    {
                        "path": "poc-translate",
                        "loadChildren": "./poc-translate#PocTranslateModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "PocTranslateModule"
                            }
                        ]
                    },
                    {
                        "path": "poc-tree",
                        "loadChildren": "./poc-tree#PocTreeModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "PocTreeModule"
                            }
                        ]
                    },
                    {
                        "path": "refacto-overlay-advanced",
                        "loadChildren": "./refacto-overlay-advanced#RefactoOverlayAdvancedModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "RefactoOverlayAdvancedModule"
                            }
                        ]
                    },
                    {
                        "path": "refacto-overlays-reposition",
                        "loadChildren": "./refacto-overlays-reposition#RefactoOverlaysRepositionModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "RefactoOverlaysRepositionModule"
                            }
                        ]
                    },
                    {
                        "path": "refacto-overlays-tooltip",
                        "loadChildren": "./refacto-overlays-tooltip#RefactoOverlaysTooltipModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "RefactoOverlaysTooltipModule"
                            }
                        ]
                    },
                    {
                        "path": "refacto-overlays",
                        "loadChildren": "./refacto-overlays#RefactoOverlaysModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "RefactoOverlaysModule"
                            }
                        ]
                    },
                    {
                        "path": "refacto-tooltip",
                        "loadChildren": "./refacto-tooltip#RefactoTooltipModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "RefactoTooltipModule"
                            }
                        ]
                    },
                    {
                        "path": "refactor-api-select",
                        "loadChildren": "./refactor-api-select#RefactorApiSelectModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "RefactorApiSelectModule"
                            }
                        ]
                    },
                    {
                        "path": "refactor-select",
                        "loadChildren": "./refactor-select#RefactorSelectModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "RefactorSelectModule"
                            }
                        ]
                    },
                    {
                        "path": "select-overlap",
                        "loadChildren": "./select-overlap#SelectOverlapModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "SelectOverlapModule"
                            }
                        ]
                    },
                    {
                        "path": "sidepanel",
                        "loadChildren": "./sidepanel#SidepanelModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "SidepanelModule"
                            }
                        ]
                    },
                    {
                        "path": "split-operators-api",
                        "loadChildren": "./split-operators-api#SplitOperatorsApiModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "SplitOperatorsApiModule"
                            }
                        ]
                    },
                    {
                        "path": "split-operators",
                        "loadChildren": "./split-operators#SplitOperatorsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "SplitOperatorsModule"
                            }
                        ]
                    },
                    {
                        "path": "split-option-picker-api-auser",
                        "loadChildren": "./split-option-picker-api-auser#SplitOptionPickerApiAuserModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "SplitOptionPickerApiAuserModule"
                            }
                        ]
                    },
                    {
                        "path": "split-option-picker",
                        "loadChildren": "./split-option-picker#SplitOptionPickerModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "SplitOptionPickerModule"
                            }
                        ]
                    },
                    {
                        "path": "split-select",
                        "loadChildren": "./split-select#SplitSelectModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "SplitSelectModule"
                            }
                        ]
                    },
                    {
                        "path": "tree-picker-advanced",
                        "loadChildren": "./tree-picker-advanced#TreePickerAdvancedModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "TreePickerAdvancedModule"
                            }
                        ]
                    },
                    {
                        "path": "user-select-homonyms",
                        "loadChildren": "./user-select-homonyms#UserSelectHomonymsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "UserSelectHomonymsModule"
                            }
                        ]
                    },
                    {
                        "path": "user-select-translate",
                        "loadChildren": "./user-select-translate#UserSelectTranslateModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "UserSelectTranslateModule"
                            }
                        ]
                    },
                    {
                        "path": "popover-accessible",
                        "loadChildren": "./popover-accessible#PopoverAccessibleModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "PopoverAccessibleModule"
                            }
                        ]
                    },
                    {
                        "path": "modal-undismissable",
                        "loadChildren": "./modal-undismissable#ModalUndismissableModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "ModalUndismissableModule"
                            }
                        ]
                    },
                    {
                        "path": "dropdown",
                        "loadChildren": "./dropdown#DropdownModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "DropdownModule"
                            }
                        ]
                    },
                    {
                        "path": "date-string",
                        "loadChildren": "./date-string#DateStringModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "DateStringModule"
                            }
                        ]
                    },
                    {
                        "path": "select-me-first",
                        "loadChildren": "./select-me-first#SelectMeFirstModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "SelectMeFirstModule"
                            }
                        ]
                    },
                    {
                        "path": "style-select-chips",
                        "loadChildren": "./style-select-chips#StyleSelectChipsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "StyleSelectChipsModule"
                            }
                        ]
                    },
                    {
                        "path": "option-groupby",
                        "loadChildren": "./option-groupby#OptionGroupbyModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "OptionGroupbyModule"
                            }
                        ]
                    },
                    {
                        "path": "select-option-placeholder",
                        "loadChildren": "./select-option-placeholder#SelectOptionPlaceholderModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "SelectOptionPlaceholderModule"
                            }
                        ]
                    },
                    {
                        "path": "date-picker-width",
                        "loadChildren": "./date-picker-width#DatePickerWidthModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "DatePickerWidthModule"
                            }
                        ]
                    },
                    {
                        "path": "date-granularity",
                        "loadChildren": "./date-granularity#DateGranularityModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "DateGranularityModule"
                            }
                        ]
                    },
                    {
                        "path": "overlays-events",
                        "loadChildren": "./overlays-events#OverlaysEventsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "OverlaysEventsModule"
                            }
                        ]
                    },
                    {
                        "path": "former-employees",
                        "loadChildren": "./former-employees#FormerEmployeesModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "FormerEmployeesModule"
                            }
                        ]
                    },
                    {
                        "path": "establishment",
                        "loadChildren": "./establishment#EstablishmentModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "EstablishmentModule"
                            }
                        ]
                    },
                    {
                        "path": "api-v4",
                        "loadChildren": "./api-v4#ApiV4Module",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "ApiV4Module"
                            }
                        ]
                    },
                    {
                        "path": "drag-drop",
                        "loadChildren": "./drag-drop#DragDropModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "DragDropModule"
                            }
                        ]
                    },
                    {
                        "path": "modal-a11y",
                        "loadChildren": "./modal-a11y#ModalA11yModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "ModalA11yModule"
                            }
                        ]
                    },
                    {
                        "path": "date-select-enh",
                        "loadChildren": "./date-select-enh#DateSelectEnhModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "DateSelectEnhModule"
                            }
                        ]
                    },
                    {
                        "path": "comm-in-app-modal",
                        "loadChildren": "./comm-in-app-modal#CommInAppModalModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "CommInAppModalModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "packages/ng-bis/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-bis/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-bis/user/src/lib/user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng-bis/user/src/lib/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng-bis/user/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng-bis/user/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/api-v4/api-v4.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ApiV4Component",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/comm-in-app-modal/comm-in-app-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommInAppModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/comm-in-app-modal/comm-in-app-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommModal",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/date-calendar/date-calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateCalendarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/date-granularity/date-granularity.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateGranularityComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/date-input/date-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/date-minmax/date-minmax.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateMinmaxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/date-picker-width/date-picker-width.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatePickerWidthComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/date-picker/date-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatePickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/date-select-enh/date-select-enh.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateSelectEnhComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/date-select/date-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/date-string/date-string.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateStringComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/date-utc/date-utc.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateUtcComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/department-select/department-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DepartmentSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/drag-drop/drag-drop.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DragDropComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/dropdown/dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/establishment/establishment.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EstablishmentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/establishment/establishment.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICountry",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/fix-472/fix-472.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Fix472Component",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/fix-705-select-enter/fix-705-select-enter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Fix705SelectEnterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/fix-modal/fix-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BasicModalContent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/fix-modal/fix-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FixModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/former-employees/former-employees.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormerEmployeesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/formly-framed/formly-framed.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormlyFramedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/formly-wrappers/formly-wrappers.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormlyWrappersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/formly/formly.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormlyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/issues.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IssuesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/issues.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ISSUES_INDEX_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/issues.router.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LowerCaseUrlSerializer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/issues.router.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "issues",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/ivy-api-select/ivy-api-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IvyApiSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/ivy-option-picker/ivy-option-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IvyOptionPickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/ivy-tree/ivy-tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IvyTreeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/ivy-tree/ivy-tree.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/ivy-tree/ivy-tree.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node11",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/ivy-tree/ivy-tree.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node111",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/ivy-tree/ivy-tree.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node12",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/ivy-tree/ivy-tree.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/ivy-tree/ivy-tree.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node21",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/modal-a11y/modal-a11y.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BasicModalContent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/modal-a11y/modal-a11y.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalA11yComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/modal-a11y/modal-a11y.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAGIC_POSITIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/modal-a11y/modal-a11y.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAGIC_SIZES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/modal-dismiss/modal-dismiss.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BasicModalContent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/modal-dismiss/modal-dismiss.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BasicPopupContent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/modal-dismiss/modal-dismiss.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalDismissComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/modal-synched/modal-synched.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AsyncModalContent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/modal-synched/modal-synched.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalSynchedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/modal-synched/modal-synched.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SyncModalContent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/modal-undismissable/modal-undismissable.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BasicModalContent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/modal-undismissable/modal-undismissable.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BasicPopupContent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/modal-undismissable/modal-undismissable.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalUndismissableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/modals-no-submit/modals-no-submit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BasicModalContent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/modals-no-submit/modals-no-submit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalsNoSubmitComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/node-sass-end/node-sass-end.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NodeSassEndComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/option-comparer/option-comparer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OptionComparerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/option-groupby/option-groupby.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OptionGroupbyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/option-groupby/option-groupby.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "hexToHsl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/option-selector/option-selector.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OptionSelectorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/option-selector/option-selector.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/option-selector/option-selector.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node11",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/option-selector/option-selector.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node111",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/option-selector/option-selector.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node12",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/option-selector/option-selector.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/option-selector/option-selector.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node21",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/overlays-events/overlays-events.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OverlaysEventsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/picker-structure/picker-structure.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PickerStructureComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/poc-modal/poc-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PocModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/poc-modal/poc-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PocModalInsideComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/poc-popup/poc-popup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PocPopupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/poc-popup/poc-popup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PocPopupInsideComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/poc-popup/poc-popup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PocPopupSecondaryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/poc-translate/lol.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LolComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/poc-translate/lol.intl.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LolIntl",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/poc-translate/lol.override.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lolOverrides",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/poc-translate/lol.translate.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOL_TRANSLATIONS_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/poc-translate/lol.translate.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lolTranslations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/poc-translate/poc-translate.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PocTranslateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/poc-tree/poc-tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PocTreeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/poc-tree/poc-tree.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/poc-tree/poc-tree.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node11",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/poc-tree/poc-tree.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node111",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/poc-tree/poc-tree.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node12",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/popover-accessible/popover-accessible.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopoverAccessibleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/refacto-overlay-advanced/refacto-overlay-advanced.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RefactoOverlayAdvancedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/refacto-overlays-reposition/refacto-overlays-reposition.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RefactoOverlaysRepositionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/refacto-overlays-tooltip/refacto-overlays-tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RefactoOverlaysTooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/refacto-overlays/refacto-overlays.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RefactoOverlaysComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/refacto-tooltip/refacto-tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RefactoTooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/refactor-api-select/refactor-api-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RefactorApiSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/refactor-select/refactor-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RefactorSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/select-me-first/select-me-first.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectMeFirstComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/select-option-placeholder/select-option-placeholder.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectOptionPlaceholderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/select-option-placeholder/select-option-placeholder.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/select-option-placeholder/select-option-placeholder.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node11",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/select-option-placeholder/select-option-placeholder.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node111",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/select-option-placeholder/select-option-placeholder.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node12",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/select-option-placeholder/select-option-placeholder.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/select-option-placeholder/select-option-placeholder.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node21",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/select-overlap/select-overlap.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectOverlapComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/sidepanel/sidepanel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PocSidepanelInsideComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/sidepanel/sidepanel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidepanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/split-operators-api/split-operators-api.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SplitOperatorsApiComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/split-operators/split-operators.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SplitOperatorsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/split-option-picker-api-auser/split-option-picker-api-auser.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SplitOptionPickerApiAuserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/split-option-picker/split-option-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SplitOptionPickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/split-select/split-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SplitSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/style-select-chips/style-select-chips.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StyleSelectChipsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/tree-picker-advanced/tree-picker-advanced.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TreePickerAdvancedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/tree-picker-advanced/tree-picker-advanced.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/tree-picker-advanced/tree-picker-advanced.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node11",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/tree-picker-advanced/tree-picker-advanced.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node111",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/tree-picker-advanced/tree-picker-advanced.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node12",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/tree-picker-advanced/tree-picker-advanced.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/tree-picker-advanced/tree-picker-advanced.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "node21",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/user-select-homonyms/user-select-homonyms.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserSelectHomonymsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/issues/user-select-translate/user-select-translate.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserSelectTranslateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/app/redirect/redirect.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "RedirectInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/applications/sandbox/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/animations/src/lib/animation.factory.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "luFadeAnimationFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/animations/src/lib/animation.factory.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "luScaleAnimationFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/animations/src/lib/animation.factory.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "luSlideAnimationFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/animations/src/lib/animation.factory.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_DEFAULT_ANIMATION_TIMING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/animations/src/lib/fade.animation.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "luFadingAnimation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/animations/src/lib/scale.animation.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "luScalingAnimation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/animations/src/lib/slide.animation.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "luSlidingAnimation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/animations/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/animations/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/api.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuApiCollectionResponse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/api.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuApiItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/api.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuApiResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/api.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuApiSuggestion",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/select/feeder/api-feeder.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuApiFeederComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/select/feeder/api-feeder.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuApiOptionFeeder",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/select/feeder/api-feeder.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuApiFeederService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/select/feeder/api-feeder.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuApiOptionFeeder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/select/input/api-select-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuApiSelectInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/select/pager/api-pager.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuApiPagerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/select/pager/api-pager.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuApiOptionPager",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/select/pager/api-pager.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuApiOptionPager",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/select/pager/api-pager.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuApiPagerService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/select/pager/api-pager.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAGIC_PAGE_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/select/searcher/api-searcher.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuApiPagedSearcherComponent",
                "coveragePercent": 0,
                "coverageCount": "0/33",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/select/searcher/api-searcher.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuApiSearcherComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/select/searcher/api-searcher.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuApiOptionPagedSearcher",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/select/searcher/api-searcher.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuApiOptionSearcher",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/select/searcher/api-searcher.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuApiOptionPagedSearcher",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/select/searcher/api-searcher.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuApiOptionSearcher",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/service/api-hybrid.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuApiHybridService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/service/api-service.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuApiService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/service/api-service.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuApiService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/service/api-v3.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuApiV3Service",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/service/api-v3.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAGIC_PAGE_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/lib/service/api-v4.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuApiV4Service",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/api/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/core/src/lib/date/date-adapter.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuDateAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/core/src/lib/date/date-adapter.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuDateAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/core/src/lib/date/native/native-date.adapter.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuNativeDateAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/33",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/core/src/lib/date/native/native-date.option.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuNativeDateAdapterOptions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/core/src/lib/date/native/native-date.option.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_NATIVE_DATE_ADAPTER_OPTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/core/src/lib/date/native/native-date.option.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "luDefaultNativeDateAdapterOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/core/src/lib/date/string/string-date.adapter.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuStringDateAdapter",
                "coveragePercent": 3,
                "coverageCount": "1/33",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/core/src/lib/event/on-close.subscriber.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuOnCloseSubscriber",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/core/src/lib/event/on-close.subscriber.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuOnCloseSubscriber",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/core/src/lib/event/on-open.subscriber.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuOnOpenSubscriber",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/core/src/lib/event/on-open.subscriber.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuOnOpenSubscriber",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/core/src/lib/event/on-scroll-bottom.subscriber.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuOnScrollBottomSubscriber",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/core/src/lib/event/on-scroll-bottom.subscriber.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuOnScrollBottomSubscriber",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/core/src/lib/group/group.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuGroup",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/core/src/lib/id/id.generator.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "generateId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/core/src/lib/id/id.generator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ID_BASE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/core/src/lib/id/id.generator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ID_LENGTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/core/src/lib/translate/intl.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuIntl",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/core/src/lib/translate/translation.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuTranslation",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/core/src/lib/tree/tree.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuTree",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/core/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/core/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/lib/adapter/date-adapter.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "LuDateAdapterPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/lib/calendar/calendar-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuCalendarInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/46",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/lib/calendar/calendar-item.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ACalendarItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/lib/calendar/calendar-item.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DayItem",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/lib/calendar/calendar-item.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DecadeItem",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/lib/calendar/calendar-item.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MonthItem",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/lib/calendar/calendar-item.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "YearItem",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/lib/calendar/calendar-item.factory.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuCalendarItemFactory",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/lib/calendar/calendar-item.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICalendarItem",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/lib/input/date-input.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LuDateInputDirective",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/lib/input/date-input.intl.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuDateInputIntl",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/lib/input/date-input.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_DATE_INPUT_TRANSLATIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/lib/input/date-input.translate.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuDateInputLabel",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/lib/input/date-input.translate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuDateInputLabel",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/lib/input/date-input.translate.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "luDateInputTranslations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/lib/picker/date-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuDatePickerComponent",
                "coveragePercent": 8,
                "coverageCount": "4/49",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/lib/select/date-select-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuDateSelectInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/lib/select/date-select-input.intl.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuDateSelectInputIntl",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/lib/select/date-select-input.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_DATE_SELECT_INPUT_TRANSLATIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/lib/select/date-select-input.translate.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuDateSelectInputLabel",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/lib/select/date-select-input.translate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuDateSelectInputLabel",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/lib/select/date-select-input.translate.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "luDateSelectInputTranslations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/date/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/department/src/lib/department.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuDepartment",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/department/src/lib/select/feeder/department-feeder.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuDepartmentFeederComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/department/src/lib/select/input/department-select-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuDepartmentSelectInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/department/src/lib/select/input/department-select-input.intl.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuDepartmentSelectInputIntl",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/department/src/lib/select/input/department-select-input.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_DEPARTMENT_SELECT_INPUT_TRANSLATIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/department/src/lib/select/input/department-select-input.translate.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuDepartmentSelectInputLabel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/department/src/lib/select/input/department-select-input.translate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuDepartmentSelectInputLabel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/department/src/lib/select/input/department-select-input.translate.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "luDepartmentSelectInputTranslations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/department/src/lib/service/department-service.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuDepartmentService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/department/src/lib/service/department-service.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuDepartmentService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/department/src/lib/service/department-v3.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuDepartmentService",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/department/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/department/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/dropdown/src/lib/item/dropdown-item.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LuDropdownItemDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/dropdown/src/lib/item/dropdown-item.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuDropdownItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/dropdown/src/lib/item/dropdown-item.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuDropdownItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/dropdown/src/lib/panel/dropdown-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuDropdownPanelComponent",
                "coveragePercent": 15,
                "coverageCount": "7/44",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/dropdown/src/lib/panel/dropdown-panel.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuDropdownPanel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/dropdown/src/lib/trigger/dropdown-trigger.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LuDropdownTriggerDirective",
                "coveragePercent": 64,
                "coverageCount": "11/17",
                "status": "good"
            },
            {
                "filePath": "packages/ng/libraries/dropdown/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/dropdown/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/establishment/src/lib/establishment.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuEstablishment",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/establishment/src/lib/establishment.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuLegalUnit",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/establishment/src/lib/select/for-legal-units/for-legal-units.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LuForLegalUnitsDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/establishment/src/lib/select/input/establishment-select-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuEstablishmentSelectInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/establishment/src/lib/select/input/establishment-select-input.intl.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuEstablishmentSelectInputIntl",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/establishment/src/lib/select/input/establishment-select-input.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_ESTABLISHMENT_SELECT_INPUT_TRANSLATIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/establishment/src/lib/select/input/establishment-select-input.translate.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuEstablishmentSelectInputLabel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/establishment/src/lib/select/input/establishment-select-input.translate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuEstablishmentSelectInputLabel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/establishment/src/lib/select/input/establishment-select-input.translate.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "luEstablishmentSelectInputTranslations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/establishment/src/lib/select/legal-unit-selector/legal-unit-selector.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LuLegalUnitSelectorDirective",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/establishment/src/lib/select/searcher/establishment-searcher.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuEstablishmentSearcherComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/establishment/src/lib/select/select-all/establishment-select-all.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuEstablishmentSelectAllComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/establishment/src/lib/select/select-all/establishment-select-all.translate.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "luEstablishmentSelectAllTranslations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/establishment/src/lib/service/establishment-service.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuEstablishmentService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/establishment/src/lib/service/establishment-service.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuEstablishmentService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/establishment/src/lib/service/establishment.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuEstablishmentService",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/establishment/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/establishment/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/formly.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_FORMLY_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/types/api.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuFormlyFieldApi",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/types/checkbox.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuFormlyFieldCheckbox",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/types/date.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuFormlyFieldDate",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/types/department.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuFormlyFieldDepartment",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/types/establishment.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuFormlyFieldEstablishment",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/types/input.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuFormlyFieldInput",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/types/radios.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuFormlyFieldRadios",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/types/select.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuFormlyFieldSelect",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/types/textarea.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuFormlyFieldTextarea",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/types/user.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuFormlyFieldUser",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/wrappers/checkbox-layout.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuFormlyWrapperCheckboxLayout",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/wrappers/error.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuFormlyErrorMessage",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/wrappers/error.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuFormlyWrapperError",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/wrappers/error.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TemplateError",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/wrappers/helper.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuFormlyWrapperHelper",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/wrappers/helper.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TemplateHelper",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/wrappers/icon.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuFormlyWrapperIcon",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/wrappers/icon.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TemplateIcon",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/wrappers/radiosfield-layout.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuFormlyWrapperRadiosfieldLayout",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/wrappers/suffix.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuFormlyWrapperSuffix",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/wrappers/suffix.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TemplateSuffix",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/lib/wrappers/textfield-layout.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuFormlyWrapperTextfieldLayout",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/formly/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/input/src/lib/clearer/clearer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuInputClearerComponent",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/input/src/lib/clearer/clearer.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuClearer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/input/src/lib/clearer/clearer.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuClearer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/input/src/lib/displayer/input-displayer.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LuInputDisplayerDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/input/src/lib/displayer/input-displayer.directive.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LuInputDisplayerContext",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/input/src/lib/displayer/input-displayer.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuInputDisplayer",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/input/src/lib/displayer/input-displayer.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuInputDisplayer",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/input/src/lib/input.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LuInputDirective",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/input/src/lib/input.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuInput",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/input/src/lib/input.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/input/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/input/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/material/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/material/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/modal/src/lib/modal-config.default.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "luDefaultModalConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/modal/src/lib/modal-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuModalConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/modal/src/lib/modal-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuModalPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/modal/src/lib/modal-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuModalPanelComponentDefaultCD",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/modal/src/lib/modal-ref.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LuModalRef",
                "coveragePercent": 8,
                "coverageCount": "2/24",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/modal/src/lib/modal-ref.factory.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuModalRefFactory",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/modal/src/lib/modal-ref.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuModalRef",
                "coveragePercent": 10,
                "coverageCount": "2/19",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/modal/src/lib/modal-ref.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuModalRef",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/modal/src/lib/modal.intl.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuModalIntl",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/modal/src/lib/modal.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuModalContent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/modal/src/lib/modal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuModal",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/modal/src/lib/modal.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_MODAL_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/modal/src/lib/modal.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_MODAL_DATA",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng/libraries/modal/src/lib/modal.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_MODAL_REF_FACTORY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/modal/src/lib/modal.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_MODAL_TRANSLATIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/modal/src/lib/modal.translate.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuModalLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/modal/src/lib/modal.translate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuModalLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/modal/src/lib/modal.translate.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "luModalTranslations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/modal/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/modal/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/number/src/lib/number.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "LuNumberPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/number/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/number/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/item/option-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuOptionItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/item/option-item.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuOptionItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/item/option-item.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuOptionItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/item/tree-option-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuTreeOptionItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/item/tree-option-item.intl.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuTreeOptionItemIntl",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/item/tree-option-item.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuTreeOptionItem",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/item/tree-option-item.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuTreeOptionItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/item/tree-option-item.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_TREE_OPTION_ITEM_TRANSLATIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/item/tree-option-item.translate.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuTreeOptionItemLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/item/tree-option-item.translate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuTreeOptionItemLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/item/tree-option-item.translate.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "luTreeOptionItemTranslations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/operator/feeder/option-feeder.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuOptionFeederComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/operator/feeder/tree-option-feeder.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuTreeOptionFeederComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/operator/for-groups/for-groups.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LuForGroupsDirective",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/operator/for-groups/for-groups.directive.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LuForGroupContext",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/operator/for-options/for-options.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LuForOptionsDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/operator/for-options/for-tree-options.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LuForTreeOptionsDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/operator/option-operator.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuOptionOperator",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/operator/option-operator.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuOptionOperator",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/operator/pager/option-pager.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuOptionPagerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/operator/pager/option-pager.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAGIC_STEP",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/operator/pager/tree-option-pager.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuTreeOptionPagerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/operator/pager/tree-option-pager.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAGIC_STEP",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/operator/searcher/option-searcher.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuOptionSearcherComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/operator/searcher/tree-option-searcher.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuTreeOptionSearcherComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/operator/tree-option-operator.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuTreeOptionOperator",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/operator/tree-option-operator.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuTreeOptionOperator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/picker/option-picker-advanced.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuOptionPickerAdvancedComponent",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/picker/option-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuOptionPickerComponent",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/picker/option-picker.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuOptionPicker",
                "coveragePercent": 11,
                "coverageCount": "8/69",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/picker/option-picker.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuOptionPickerPanel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/picker/tree-option-picker-advanced.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuTreeOptionPickerAdvancedComponent",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/picker/tree-option-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuTreeOptionPickerComponent",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/picker/tree-option-picker.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuTreeOptionPicker",
                "coveragePercent": 12,
                "coverageCount": "16/124",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/picker/tree-option-picker.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuTreeOptionPickerPanel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/placeholder/option-placeholder.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuOptionPlaceholderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/placeholder/option-placeholder.intl.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuOptionPlaceholderIntl",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/placeholder/option-placeholder.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_OPTION_PLACEHOLDER_TRANSLATIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/placeholder/option-placeholder.translate.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuOptionPlaceholderLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/placeholder/option-placeholder.translate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuOptionPlaceholderLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/placeholder/option-placeholder.translate.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "luOptionPlaceholderTranslations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/selector/all/select-all.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuOptionSelectAllComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/selector/all/select-all.intl.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuOptionSelectAllIntl",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/selector/all/select-all.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_OPTION_SELECT_ALL_TRANSLATIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/selector/all/select-all.translate.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuOptionSelectAllLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/selector/all/select-all.translate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuOptionSelectAllLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/selector/all/select-all.translate.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "luOptionSelectAllTranslations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/selector/all/tree-select-all.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuTreeOptionSelectAllComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/selector/option-selector.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuOptionSelector",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/selector/option-selector.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuOptionSelector",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/selector/tree-option-selector.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuTreeOptionSelector",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/lib/selector/tree-option-selector.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuTreeOptionSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/option/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/picker/src/lib/input-picker.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuPickerPanel",
                "coveragePercent": 13,
                "coverageCount": "4/30",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/picker/src/lib/input-picker.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuInputWithPicker",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/picker/src/lib/input-picker.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuPickerPanel",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "packages/ng/libraries/picker/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/picker/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/popover/src/lib/animation/popover.animation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "luTransformPopover",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/popover/src/lib/panel/popover-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuPopoverPanelComponent",
                "coveragePercent": 22,
                "coverageCount": "10/44",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/popover/src/lib/panel/popover-panel.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuPopoverPanel",
                "coveragePercent": 18,
                "coverageCount": "5/27",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/popover/src/lib/panel/popover-panel.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuPopoverPanel",
                "coveragePercent": 46,
                "coverageCount": "7/15",
                "status": "medium"
            },
            {
                "filePath": "packages/ng/libraries/popover/src/lib/target/popover-target.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LuPopoverTargetDirective",
                "coveragePercent": 42,
                "coverageCount": "3/7",
                "status": "medium"
            },
            {
                "filePath": "packages/ng/libraries/popover/src/lib/target/popover-target.error.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "throwLuPopoverInvalidAlignement",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng/libraries/popover/src/lib/target/popover-target.error.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "throwLuPopoverInvalidPosition",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng/libraries/popover/src/lib/target/popover-target.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuPopoverTarget",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/popover/src/lib/target/popover-target.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LuPopoverTarget",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/popover/src/lib/target/popover-target.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuPopoverTarget",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "packages/ng/libraries/popover/src/lib/trigger/popover-trigger.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LuPopoverTriggerDirective",
                "coveragePercent": 55,
                "coverageCount": "15/27",
                "status": "good"
            },
            {
                "filePath": "packages/ng/libraries/popover/src/lib/trigger/popover-trigger.error.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "throwLuPopoverMissingPanelError",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng/libraries/popover/src/lib/trigger/popover-trigger.error.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "throwLuPopoverMissingTargetError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/popover/src/lib/trigger/popover-trigger.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuPopoverTrigger",
                "coveragePercent": 34,
                "coverageCount": "17/49",
                "status": "medium"
            },
            {
                "filePath": "packages/ng/libraries/popover/src/lib/trigger/popover-trigger.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuPopoverTrigger",
                "coveragePercent": 69,
                "coverageCount": "9/13",
                "status": "good"
            },
            {
                "filePath": "packages/ng/libraries/popover/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/popover/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/popup/src/lib/popup-config.default.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "luDefaultPopupConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/popup/src/lib/popup-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuPopupConfig",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/popup/src/lib/popup-ref.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LuPopupRef",
                "coveragePercent": 10,
                "coverageCount": "2/20",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/popup/src/lib/popup-ref.factory.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuPopupRefFactory",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/popup/src/lib/popup-ref.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuPopupRef",
                "coveragePercent": 10,
                "coverageCount": "2/20",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/popup/src/lib/popup-ref.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuPopupRef",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/popup/src/lib/popup-ref.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuPopupRefFactory",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/popup/src/lib/popup.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuPopupContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/popup/src/lib/popup.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuPopup",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/popup/src/lib/popup.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_POPUP_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/popup/src/lib/popup.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_POPUP_DATA",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng/libraries/popup/src/lib/popup.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_POPUP_REF_FACTORY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/popup/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/popup/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/root/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/root/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/safe-content/src/lib/safe-content.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "LuSafeContentPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/safe-content/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/safe-content/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/scroll/src/lib/scroll.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LuScrollDirective",
                "coveragePercent": 7,
                "coverageCount": "1/13",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/scroll/src/lib/scroll.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuScrollable",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/scroll/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/scroll/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/select/src/lib/input/select-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuSelectInputComponent",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/select/src/lib/input/select-input.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuSelectInput",
                "coveragePercent": 23,
                "coverageCount": "18/76",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/select/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/select/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/sidepanel/src/lib/sidepanel-config.default.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "luDefaultSidepanelConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/sidepanel/src/lib/sidepanel-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuSidepanelConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/sidepanel/src/lib/sidepanel-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuSidepanelPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/sidepanel/src/lib/sidepanel-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuSidepanelPanelComponentDefaultCD",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/sidepanel/src/lib/sidepanel-ref.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LuSidepanelRef",
                "coveragePercent": 9,
                "coverageCount": "4/42",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/sidepanel/src/lib/sidepanel-ref.factory.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuSidepanelRefFactory",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/sidepanel/src/lib/sidepanel-ref.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuSidepanelRef",
                "coveragePercent": 10,
                "coverageCount": "4/37",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/sidepanel/src/lib/sidepanel-ref.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuSidepanelRef",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/sidepanel/src/lib/sidepanel.intl.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuSidepanelIntl",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/sidepanel/src/lib/sidepanel.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuSidepanelContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/sidepanel/src/lib/sidepanel.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuSidepanel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/sidepanel/src/lib/sidepanel.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_SIDEPANEL_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/sidepanel/src/lib/sidepanel.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_SIDEPANEL_DATA",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng/libraries/sidepanel/src/lib/sidepanel.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_SIDEPANEL_REF_FACTORY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/sidepanel/src/lib/sidepanel.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_SIDEPANEL_TRANSLATIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/sidepanel/src/lib/sidepanel.translate.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuSidepanelLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/sidepanel/src/lib/sidepanel.translate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuSidepanelLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/sidepanel/src/lib/sidepanel.translate.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "luSidepanelTranslations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/sidepanel/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/sidepanel/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/tooltip/src/lib/animation/tooltip.animation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "luTransformTooltip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/tooltip/src/lib/panel/tooltip-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuTooltipPanelComponent",
                "coveragePercent": 11,
                "coverageCount": "4/36",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/tooltip/src/lib/trigger/tooltip-trigger.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LuTooltipTriggerDirective",
                "coveragePercent": 35,
                "coverageCount": "7/20",
                "status": "medium"
            },
            {
                "filePath": "packages/ng/libraries/tooltip/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/tooltip/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/display/user-display.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "LuUserDisplayPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/picture/user-picture.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuUserPictureComponent",
                "coveragePercent": 30,
                "coverageCount": "3/10",
                "status": "medium"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/select/homonyms/user-homonyms.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuUserHomonymsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/select/homonyms/user-homonyms.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuUserHomonymsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/select/homonyms/user-homonyms.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuUserHomonymsService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/select/homonyms/user-homonyms.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuUserHomonymsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/select/homonyms/user-homonyms.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IV3CollectionResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/select/input/user-select-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuUserSelectInputComponent",
                "coveragePercent": 8,
                "coverageCount": "1/12",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/select/input/user-select-input.intl.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuUserSelectInputIntl",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/select/input/user-select-input.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_USER_SELECT_INPUT_TRANSLATIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/select/input/user-select-input.translate.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuUserSelectInputLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/select/input/user-select-input.translate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuUserSelectInputLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/select/input/user-select-input.translate.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "luUserSelectInputTranslations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/select/me/me-option.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LuUserMeOptionDirective",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/select/searcher/user-searcher.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuUserPagedSearcherComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/select/searcher/user-searcher.intl.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuUserSearcherIntl",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/select/searcher/user-searcher.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LU_USER_SEARCHER_TRANSLATIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/select/searcher/user-searcher.translate.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuUserSearcherLabel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/select/searcher/user-searcher.translate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuUserSearcherLabel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/select/searcher/user-searcher.translate.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "luUserSearcherTranslations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/service/user-service.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ALuUserService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/service/user-service.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuUserService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/service/user-v3.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LuUserV3Service",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/tile/user-tile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LuUserTileComponent",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "packages/ng/libraries/user/src/lib/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILuUser",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/ng/libraries/user/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/scss/button.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/scss/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/scss/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}